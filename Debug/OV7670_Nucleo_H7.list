
OV7670_Nucleo_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f4d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003884  0801f778  0801f778  00020778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022ffc  08022ffc  00023ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023004  08023004  00024004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08023008  08023008  00024008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  0802300c  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000089b0  24000090  0802309c  00025090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24008a40  0802309c  00025a40  2**0
                  ALLOC
  9 .myRAMBlock   00025800  24009040  0802309c  00026040  2**2
                  ALLOC
 10 .lwip_sec     00004a83  30000000  30000000  00026000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00025090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004afda  00000000  00000000  000250be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009eff  00000000  00000000  00070098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032b8  00000000  00000000  00079f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000280d  00000000  00000000  0007d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000524ef  00000000  00000000  0007fa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00054381  00000000  00000000  000d1f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a73f7  00000000  00000000  001262cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002cd6c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000deb8  00000000  00000000  002cd708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  002db5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f760 	.word	0x0801f760

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0801f760 	.word	0x0801f760

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	691a      	ldr	r2, [r3, #16]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	4013      	ands	r3, r2
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d101      	bne.n	800068c <LL_GPIO_IsInputPinSet+0x1c>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <LL_GPIO_IsInputPinSet+0x1e>
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <OV7670_Init_Pixel_Array>:
enum IMG_SENSOR_STATE OV7670_State = IMG_SENSOR_STOP;
uint16_t vs_count = 0, hs_count = 0, pclk_count = 0;
__attribute__((section(".Img_Frame_Buffer"))) uint8_t pix_array[240][640];

void OV7670_Init_Pixel_Array(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	uint16_t i, j;
	for(i = 0; i < 240; i++){
 80006a2:	2300      	movs	r3, #0
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	e017      	b.n	80006d8 <OV7670_Init_Pixel_Array+0x3c>
		for(j = 0; j < 640; j++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	80bb      	strh	r3, [r7, #4]
 80006ac:	e00d      	b.n	80006ca <OV7670_Init_Pixel_Array+0x2e>
			pix_array[i][j] = 0x43;	// set all to black
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	88b9      	ldrh	r1, [r7, #4]
 80006b2:	480e      	ldr	r0, [pc, #56]	@ (80006ec <OV7670_Init_Pixel_Array+0x50>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	01db      	lsls	r3, r3, #7
 80006bc:	4403      	add	r3, r0
 80006be:	440b      	add	r3, r1
 80006c0:	2243      	movs	r2, #67	@ 0x43
 80006c2:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 640; j++){
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80006d0:	d3ed      	bcc.n	80006ae <OV7670_Init_Pixel_Array+0x12>
	for(i = 0; i < 240; i++){
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	3301      	adds	r3, #1
 80006d6:	80fb      	strh	r3, [r7, #6]
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	2bef      	cmp	r3, #239	@ 0xef
 80006dc:	d9e4      	bls.n	80006a8 <OV7670_Init_Pixel_Array+0xc>
		}
	}
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	24009040 	.word	0x24009040

080006f0 <OV7670_Init_Setting>:

bool OV7670_Init_Setting(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
	uint16_t sccb_ip_address = 0x0042;	// 0x42
 80006f6:	2342      	movs	r3, #66	@ 0x42
 80006f8:	817b      	strh	r3, [r7, #10]
	uint8_t sccb_sub_address = 0x0A;	// PID register
 80006fa:	230a      	movs	r3, #10
 80006fc:	727b      	strb	r3, [r7, #9]
	uint8_t sccb_read_data = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	723b      	strb	r3, [r7, #8]
	uint8_t sccb_write_data[2] = {0, 0};
 8000702:	2300      	movs	r3, #0
 8000704:	80bb      	strh	r3, [r7, #4]
	uint32_t error_stat = HAL_I2C_ERROR_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]

/** Register PID (0x0A) **/
	if(HAL_I2C_Master_Transmit(&hi2c1, sccb_ip_address, &sccb_sub_address, 1, 5) != HAL_OK)		/* 2-Phase Write */
 800070a:	f107 0209 	add.w	r2, r7, #9
 800070e:	8979      	ldrh	r1, [r7, #10]
 8000710:	2305      	movs	r3, #5
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	4877      	ldr	r0, [pc, #476]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000718:	f004 faa0 	bl	8004c5c <HAL_I2C_Master_Transmit>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <OV7670_Init_Setting+0x3a>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 8000722:	4874      	ldr	r0, [pc, #464]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000724:	f004 fca8 	bl	8005078 <HAL_I2C_GetError>
 8000728:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 800072a:	2064      	movs	r0, #100	@ 0x64
 800072c:	f001 f91a 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <OV7670_Init_Setting+0x4a>
 8000736:	2300      	movs	r3, #0
 8000738:	e0d7      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(HAL_I2C_Master_Receive(&hi2c1, (sccb_ip_address | 0x0001), &sccb_read_data, 1, 5) != HAL_OK)		/* 2-Phase Read */
 800073a:	897b      	ldrh	r3, [r7, #10]
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	b299      	uxth	r1, r3
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	2305      	movs	r3, #5
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	4869      	ldr	r0, [pc, #420]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 800074e:	f004 fb9d 	bl	8004e8c <HAL_I2C_Master_Receive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <OV7670_Init_Setting+0x70>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 8000758:	4866      	ldr	r0, [pc, #408]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 800075a:	f004 fc8d 	bl	8005078 <HAL_I2C_GetError>
 800075e:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f001 f8ff 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <OV7670_Init_Setting+0x80>
 800076c:	2300      	movs	r3, #0
 800076e:	e0bc      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(sccb_read_data != 0x76){	return false;	}	// Verify the PID is correct = 0x76
 8000770:	7a3b      	ldrb	r3, [r7, #8]
 8000772:	2b76      	cmp	r3, #118	@ 0x76
 8000774:	d001      	beq.n	800077a <OV7670_Init_Setting+0x8a>
 8000776:	2300      	movs	r3, #0
 8000778:	e0b7      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

/** Register CLKRC (0x11) **/
	sccb_sub_address = 0x11;
 800077a:	2311      	movs	r3, #17
 800077c:	727b      	strb	r3, [r7, #9]
	sccb_write_data[0] = sccb_sub_address;
 800077e:	7a7b      	ldrb	r3, [r7, #9]
 8000780:	713b      	strb	r3, [r7, #4]
	sccb_write_data[1] = 0x9D;		// Set internal clock prescaler to 29 so we'd expect PCLK = XCLK / (29 + 1) = 15 MHz / 30 = 0.5 MHz
 8000782:	239d      	movs	r3, #157	@ 0x9d
 8000784:	717b      	strb	r3, [r7, #5]

	if(HAL_I2C_Master_Transmit(&hi2c1, sccb_ip_address, sccb_write_data, 2, 5) != HAL_OK)		/* 3-Phase Write */
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	8979      	ldrh	r1, [r7, #10]
 800078a:	2305      	movs	r3, #5
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	4858      	ldr	r0, [pc, #352]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000792:	f004 fa63 	bl	8004c5c <HAL_I2C_Master_Transmit>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d003      	beq.n	80007a4 <OV7670_Init_Setting+0xb4>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 800079c:	4855      	ldr	r0, [pc, #340]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 800079e:	f004 fc6b 	bl	8005078 <HAL_I2C_GetError>
 80007a2:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 80007a4:	2064      	movs	r0, #100	@ 0x64
 80007a6:	f001 f8dd 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <OV7670_Init_Setting+0xc4>
 80007b0:	2300      	movs	r3, #0
 80007b2:	e09a      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(HAL_I2C_Master_Receive(&hi2c1, (sccb_ip_address | 0x0001), &sccb_read_data, 1, 5) != HAL_OK)		/* 2-Phase Read */
 80007b4:	897b      	ldrh	r3, [r7, #10]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	b299      	uxth	r1, r3
 80007bc:	f107 0208 	add.w	r2, r7, #8
 80007c0:	2305      	movs	r3, #5
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	484b      	ldr	r0, [pc, #300]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 80007c8:	f004 fb60 	bl	8004e8c <HAL_I2C_Master_Receive>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d003      	beq.n	80007da <OV7670_Init_Setting+0xea>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 80007d2:	4848      	ldr	r0, [pc, #288]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 80007d4:	f004 fc50 	bl	8005078 <HAL_I2C_GetError>
 80007d8:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 80007da:	2064      	movs	r0, #100	@ 0x64
 80007dc:	f001 f8c2 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <OV7670_Init_Setting+0xfa>
 80007e6:	2300      	movs	r3, #0
 80007e8:	e07f      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(sccb_read_data != 0x9D){	return false;	}	// Verify that CLKRC register has been written to 0x9D
 80007ea:	7a3b      	ldrb	r3, [r7, #8]
 80007ec:	2b9d      	cmp	r3, #157	@ 0x9d
 80007ee:	d001      	beq.n	80007f4 <OV7670_Init_Setting+0x104>
 80007f0:	2300      	movs	r3, #0
 80007f2:	e07a      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

/** Register COM7 (0x12) **/
	sccb_sub_address = 0x12;
 80007f4:	2312      	movs	r3, #18
 80007f6:	727b      	strb	r3, [r7, #9]
	sccb_write_data[0] = sccb_sub_address;
 80007f8:	7a7b      	ldrb	r3, [r7, #9]
 80007fa:	713b      	strb	r3, [r7, #4]
	sccb_write_data[1] = 0x14;		// Use pre-defined QVGA resolution scaler setting. Output format RGB selection.
 80007fc:	2314      	movs	r3, #20
 80007fe:	717b      	strb	r3, [r7, #5]

	if(HAL_I2C_Master_Transmit(&hi2c1, sccb_ip_address, sccb_write_data, 2, 5) != HAL_OK)		/* 3-Phase Write */
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	8979      	ldrh	r1, [r7, #10]
 8000804:	2305      	movs	r3, #5
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	483a      	ldr	r0, [pc, #232]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 800080c:	f004 fa26 	bl	8004c5c <HAL_I2C_Master_Transmit>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <OV7670_Init_Setting+0x12e>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 8000816:	4837      	ldr	r0, [pc, #220]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000818:	f004 fc2e 	bl	8005078 <HAL_I2C_GetError>
 800081c:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 800081e:	2064      	movs	r0, #100	@ 0x64
 8000820:	f001 f8a0 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <OV7670_Init_Setting+0x13e>
 800082a:	2300      	movs	r3, #0
 800082c:	e05d      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(HAL_I2C_Master_Receive(&hi2c1, (sccb_ip_address | 0x0001), &sccb_read_data, 1, 5) != HAL_OK)		/* 2-Phase Read */
 800082e:	897b      	ldrh	r3, [r7, #10]
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	b299      	uxth	r1, r3
 8000836:	f107 0208 	add.w	r2, r7, #8
 800083a:	2305      	movs	r3, #5
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	482c      	ldr	r0, [pc, #176]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000842:	f004 fb23 	bl	8004e8c <HAL_I2C_Master_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <OV7670_Init_Setting+0x164>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 800084c:	4829      	ldr	r0, [pc, #164]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 800084e:	f004 fc13 	bl	8005078 <HAL_I2C_GetError>
 8000852:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 8000854:	2064      	movs	r0, #100	@ 0x64
 8000856:	f001 f885 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <OV7670_Init_Setting+0x174>
 8000860:	2300      	movs	r3, #0
 8000862:	e042      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(sccb_read_data != 0x14){	return false;	}	// Verify that COM7 register has been written to 0x14
 8000864:	7a3b      	ldrb	r3, [r7, #8]
 8000866:	2b14      	cmp	r3, #20
 8000868:	d001      	beq.n	800086e <OV7670_Init_Setting+0x17e>
 800086a:	2300      	movs	r3, #0
 800086c:	e03d      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

/** Register COM15 (0x40) **/
	sccb_sub_address = 0x40;
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	727b      	strb	r3, [r7, #9]
	sccb_write_data[0] = sccb_sub_address;
 8000872:	7a7b      	ldrb	r3, [r7, #9]
 8000874:	713b      	strb	r3, [r7, #4]
	sccb_write_data[1] = 0xD0;		// Output range: [00] to [FF]. RGB565 output format option.
 8000876:	23d0      	movs	r3, #208	@ 0xd0
 8000878:	717b      	strb	r3, [r7, #5]

	if(HAL_I2C_Master_Transmit(&hi2c1, sccb_ip_address, sccb_write_data, 2, 5) != HAL_OK)		/* 3-Phase Write */
 800087a:	1d3a      	adds	r2, r7, #4
 800087c:	8979      	ldrh	r1, [r7, #10]
 800087e:	2305      	movs	r3, #5
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2302      	movs	r3, #2
 8000884:	481b      	ldr	r0, [pc, #108]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000886:	f004 f9e9 	bl	8004c5c <HAL_I2C_Master_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d003      	beq.n	8000898 <OV7670_Init_Setting+0x1a8>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 8000890:	4818      	ldr	r0, [pc, #96]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 8000892:	f004 fbf1 	bl	8005078 <HAL_I2C_GetError>
 8000896:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 8000898:	2064      	movs	r0, #100	@ 0x64
 800089a:	f001 f863 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <OV7670_Init_Setting+0x1b8>
 80008a4:	2300      	movs	r3, #0
 80008a6:	e020      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(HAL_I2C_Master_Receive(&hi2c1, (sccb_ip_address | 0x0001), &sccb_read_data, 1, 5) != HAL_OK)		/* 2-Phase Read */
 80008a8:	897b      	ldrh	r3, [r7, #10]
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	b299      	uxth	r1, r3
 80008b0:	f107 0208 	add.w	r2, r7, #8
 80008b4:	2305      	movs	r3, #5
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 80008bc:	f004 fae6 	bl	8004e8c <HAL_I2C_Master_Receive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <OV7670_Init_Setting+0x1de>
	{	error_stat = HAL_I2C_GetError(&hi2c1);	}
 80008c6:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <OV7670_Init_Setting+0x204>)
 80008c8:	f004 fbd6 	bl	8005078 <HAL_I2C_GetError>
 80008cc:	60f8      	str	r0, [r7, #12]
	Delay_us_Rough(100);
 80008ce:	2064      	movs	r0, #100	@ 0x64
 80008d0:	f001 f848 	bl	8001964 <Delay_us_Rough>
	if(error_stat != HAL_I2C_ERROR_NONE){	return false;	}
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <OV7670_Init_Setting+0x1ee>
 80008da:	2300      	movs	r3, #0
 80008dc:	e005      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	if(sccb_read_data != 0xD0){	return false;	}	// Verify that COM15 register has been written to 0xD0
 80008de:	7a3b      	ldrb	r3, [r7, #8]
 80008e0:	2bd0      	cmp	r3, #208	@ 0xd0
 80008e2:	d001      	beq.n	80008e8 <OV7670_Init_Setting+0x1f8>
 80008e4:	2300      	movs	r3, #0
 80008e6:	e000      	b.n	80008ea <OV7670_Init_Setting+0x1fa>

	//OV7670_Init_Pixel_Array();
	return true;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	240000b4 	.word	0x240000b4

080008f8 <OV7670_Sync_Output_Detection>:

void OV7670_Sync_Output_Detection(TIM_HandleTypeDef *htim)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){// VSYNC
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7f1b      	ldrb	r3, [r3, #28]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d113      	bne.n	8000930 <OV7670_Sync_Output_Detection+0x38>
		if(OV7670_State == IMG_SENSOR_WAIT_VSYNC)
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d103      	bne.n	8000918 <OV7670_Sync_Output_Detection+0x20>
		{	OV7670_State = IMG_SENSOR_VSYNC;	}
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 8000912:	2203      	movs	r2, #3
 8000914:	701a      	strb	r2, [r3, #0]
	}
	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){// HREF
		if(OV7670_State == IMG_SENSOR_WAIT_HREF)
		{	OV7670_State = IMG_SENSOR_HREF;	}
	}
}
 8000916:	e016      	b.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
		else if((OV7670_State > IMG_SENSOR_WAIT_VSYNC) && (OV7670_State < IMG_SENSOR_COMPLETE))
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d912      	bls.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b06      	cmp	r3, #6
 8000926:	d80e      	bhi.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
		{	OV7670_State = IMG_SENSOR_COMPLETE;	}
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 800092a:	2207      	movs	r2, #7
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	e00a      	b.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){// HREF
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7f1b      	ldrb	r3, [r3, #28]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d106      	bne.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
		if(OV7670_State == IMG_SENSOR_WAIT_HREF)
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d102      	bne.n	8000946 <OV7670_Sync_Output_Detection+0x4e>
		{	OV7670_State = IMG_SENSOR_HREF;	}
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <OV7670_Sync_Output_Detection+0x5c>)
 8000942:	2205      	movs	r2, #5
 8000944:	701a      	strb	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	240000ac 	.word	0x240000ac

08000958 <OV7670_Grab_Pixel_Byte_Output>:

void OV7670_Grab_Pixel_Byte_Output(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	uint8_t byte;

	byte = (LL_GPIO_IsInputPinSet(D0_GPIO_Port, D0_Pin) ? 0x01 : 0x00) |
 800095e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000962:	483c      	ldr	r0, [pc, #240]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 8000964:	f7ff fe84 	bl	8000670 <LL_GPIO_IsInputPinSet>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D1_GPIO_Port, D1_Pin) ? 0x02 : 0x00) |
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4836      	ldr	r0, [pc, #216]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 800097c:	f7ff fe78 	bl	8000670 <LL_GPIO_IsInputPinSet>
 8000980:	4603      	mov	r3, r0
	byte = (LL_GPIO_IsInputPinSet(D0_GPIO_Port, D0_Pin) ? 0x01 : 0x00) |
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <OV7670_Grab_Pixel_Byte_Output+0x32>
 8000986:	2302      	movs	r3, #2
 8000988:	e000      	b.n	800098c <OV7670_Grab_Pixel_Byte_Output+0x34>
 800098a:	2300      	movs	r3, #0
 800098c:	4323      	orrs	r3, r4
 800098e:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D2_GPIO_Port, D2_Pin) ? 0x04 : 0x00) |
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	4830      	ldr	r0, [pc, #192]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 8000994:	f7ff fe6c 	bl	8000670 <LL_GPIO_IsInputPinSet>
 8000998:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D1_GPIO_Port, D1_Pin) ? 0x02 : 0x00) |
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <OV7670_Grab_Pixel_Byte_Output+0x4a>
 800099e:	2304      	movs	r3, #4
 80009a0:	e000      	b.n	80009a4 <OV7670_Grab_Pixel_Byte_Output+0x4c>
 80009a2:	2300      	movs	r3, #0
 80009a4:	4323      	orrs	r3, r4
 80009a6:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D3_GPIO_Port, D3_Pin) ? 0x08 : 0x00) |
 80009a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ac:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 80009ae:	f7ff fe5f 	bl	8000670 <LL_GPIO_IsInputPinSet>
 80009b2:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D2_GPIO_Port, D2_Pin) ? 0x04 : 0x00) |
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <OV7670_Grab_Pixel_Byte_Output+0x64>
 80009b8:	2308      	movs	r3, #8
 80009ba:	e000      	b.n	80009be <OV7670_Grab_Pixel_Byte_Output+0x66>
 80009bc:	2300      	movs	r3, #0
 80009be:	4323      	orrs	r3, r4
 80009c0:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D4_GPIO_Port, D4_Pin) ? 0x10 : 0x00) |
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	4823      	ldr	r0, [pc, #140]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 80009c8:	f7ff fe52 	bl	8000670 <LL_GPIO_IsInputPinSet>
 80009cc:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D3_GPIO_Port, D3_Pin) ? 0x08 : 0x00) |
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <OV7670_Grab_Pixel_Byte_Output+0x7e>
 80009d2:	2310      	movs	r3, #16
 80009d4:	e000      	b.n	80009d8 <OV7670_Grab_Pixel_Byte_Output+0x80>
 80009d6:	2300      	movs	r3, #0
 80009d8:	4323      	orrs	r3, r4
 80009da:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D5_GPIO_Port, D5_Pin) ? 0x20 : 0x00) |
 80009dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e0:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 80009e2:	f7ff fe45 	bl	8000670 <LL_GPIO_IsInputPinSet>
 80009e6:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D4_GPIO_Port, D4_Pin) ? 0x10 : 0x00) |
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <OV7670_Grab_Pixel_Byte_Output+0x98>
 80009ec:	2320      	movs	r3, #32
 80009ee:	e000      	b.n	80009f2 <OV7670_Grab_Pixel_Byte_Output+0x9a>
 80009f0:	2300      	movs	r3, #0
 80009f2:	4323      	orrs	r3, r4
 80009f4:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D6_GPIO_Port, D6_Pin) ? 0x40 : 0x00) |
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	4816      	ldr	r0, [pc, #88]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 80009fc:	f7ff fe38 	bl	8000670 <LL_GPIO_IsInputPinSet>
 8000a00:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D5_GPIO_Port, D5_Pin) ? 0x20 : 0x00) |
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <OV7670_Grab_Pixel_Byte_Output+0xb2>
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	e000      	b.n	8000a0c <OV7670_Grab_Pixel_Byte_Output+0xb4>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	b25c      	sxtb	r4, r3
			(LL_GPIO_IsInputPinSet(D7_GPIO_Port, D7_Pin) ? 0x80 : 0x00);
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <OV7670_Grab_Pixel_Byte_Output+0xfc>)
 8000a16:	f7ff fe2b 	bl	8000670 <LL_GPIO_IsInputPinSet>
 8000a1a:	4603      	mov	r3, r0
			(LL_GPIO_IsInputPinSet(D6_GPIO_Port, D6_Pin) ? 0x40 : 0x00) |
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <OV7670_Grab_Pixel_Byte_Output+0xce>
 8000a20:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000a24:	e000      	b.n	8000a28 <OV7670_Grab_Pixel_Byte_Output+0xd0>
 8000a26:	2300      	movs	r3, #0
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	b25b      	sxtb	r3, r3
	byte = (LL_GPIO_IsInputPinSet(D0_GPIO_Port, D0_Pin) ? 0x01 : 0x00) |
 8000a2c:	71fb      	strb	r3, [r7, #7]

	pix_array[hs_count][pclk_count] = byte;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <OV7670_Grab_Pixel_Byte_Output+0x100>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <OV7670_Grab_Pixel_Byte_Output+0x104>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <OV7670_Grab_Pixel_Byte_Output+0x108>)
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	01db      	lsls	r3, r3, #7
 8000a44:	4413      	add	r3, r2
 8000a46:	4403      	add	r3, r0
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	58021000 	.word	0x58021000
 8000a58:	240000b0 	.word	0x240000b0
 8000a5c:	240000b2 	.word	0x240000b2
 8000a60:	24009040 	.word	0x24009040

08000a64 <OV7670_Get_Pix_Array_By_Row>:

uint8_t* OV7670_Get_Pix_Array_By_Row(uint16_t row)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	return (&pix_array[row][0]);
 8000a6e:	88fa      	ldrh	r2, [r7, #6]
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	01db      	lsls	r3, r3, #7
 8000a78:	4a03      	ldr	r2, [pc, #12]	@ (8000a88 <OV7670_Get_Pix_Array_By_Row+0x24>)
 8000a7a:	4413      	add	r3, r2
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	24009040 	.word	0x24009040

08000a8c <tcpecho_thread>:

#include "lwip/sys.h"
#include "lwip/api.h"

static void tcpecho_thread(void *arg)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08d      	sub	sp, #52	@ 0x34
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	u8_t row;
	
	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2010      	movs	r0, #16
 8000a9a:	f010 fa5b 	bl	8010f54 <netconn_new_with_proto_and_callback>
 8000a9e:	6238      	str	r0, [r7, #32]
	if(conn == NULL){
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d05e      	beq.n	8000b64 <tcpecho_thread+0xd8>
		return;
	}
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	4930      	ldr	r1, [pc, #192]	@ (8000b6c <tcpecho_thread+0xe0>)
 8000aaa:	6a38      	ldr	r0, [r7, #32]
 8000aac:	f010 fb0c 	bl	80110c8 <netconn_bind>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	77fb      	strb	r3, [r7, #31]
	
	if(err == ERR_OK){
 8000ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14f      	bne.n	8000b5c <tcpecho_thread+0xd0>
		/* Tell connection to go into listening mode. */
		netconn_listen(conn);
 8000abc:	21ff      	movs	r1, #255	@ 0xff
 8000abe:	6a38      	ldr	r0, [r7, #32]
 8000ac0:	f010 fb3a 	bl	8011138 <netconn_listen_with_backlog>
	
		while(1){
			/* Grab new connection. */
			err = netconn_accept(conn, &newconn);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6a38      	ldr	r0, [r7, #32]
 8000acc:	f010 fb60 	bl	8011190 <netconn_accept>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	77fb      	strb	r3, [r7, #31]
			/* Process the new connection. */
			if(err == ERR_OK){
 8000ad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f3      	bne.n	8000ac4 <tcpecho_thread+0x38>
				while(netconn_recv(newconn, &buf) == ERR_OK){
 8000adc:	e02b      	b.n	8000b36 <tcpecho_thread+0xaa>
					do {
						//memset(msg, '\0', 100);  // clear the buffer
						//strncpy(msg, buf->p->payload, buf->p->len);   // get the message from the client
						//strcat(msg, "3.");
						//len = (buf->p->len) + 2;
						row_p = buf->p->payload;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	61bb      	str	r3, [r7, #24]
						row = *row_p;
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						if(row >= 240){	row = 239;	}	// row index is 0-239 in qvga format
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000af2:	2bef      	cmp	r3, #239	@ 0xef
 8000af4:	d902      	bls.n	8000afc <tcpecho_thread+0x70>
 8000af6:	23ef      	movs	r3, #239	@ 0xef
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						len = 640;
 8000afc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000b00:	82fb      	strh	r3, [r7, #22]
						netconn_write(newconn, OV7670_Get_Pix_Array_By_Row(row), len, NETCONN_COPY);
 8000b02:	693c      	ldr	r4, [r7, #16]
 8000b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffaa 	bl	8000a64 <OV7670_Get_Pix_Array_By_Row>
 8000b10:	4601      	mov	r1, r0
 8000b12:	8afa      	ldrh	r2, [r7, #22]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f010 fdba 	bl	8011694 <netconn_write_partly>
					} while (netbuf_next(buf) > 0);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f012 fadc 	bl	80130e0 <netbuf_next>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dcd7      	bgt.n	8000ade <tcpecho_thread+0x52>
					netbuf_delete(buf);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f012 fab5 	bl	80130a0 <netbuf_delete>
				while(netconn_recv(newconn, &buf) == ERR_OK){
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	f107 020c 	add.w	r2, r7, #12
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f010 fd2e 	bl	80115a0 <netconn_recv>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0c9      	beq.n	8000ade <tcpecho_thread+0x52>
				}
				/* Close connection and discard connection identifier. */
				netconn_close(newconn);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f010 fea3 	bl	8011898 <netconn_close>
				netconn_delete(newconn);
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f010 fa9b 	bl	8011090 <netconn_delete>
			err = netconn_accept(conn, &newconn);
 8000b5a:	e7b3      	b.n	8000ac4 <tcpecho_thread+0x38>
			}
		}
	} else {
		netconn_delete(conn);
 8000b5c:	6a38      	ldr	r0, [r7, #32]
 8000b5e:	f010 fa97 	bl	8011090 <netconn_delete>
 8000b62:	e000      	b.n	8000b66 <tcpecho_thread+0xda>
		return;
 8000b64:	bf00      	nop
	}
}
 8000b66:	372c      	adds	r7, #44	@ 0x2c
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	08022f0c 	.word	0x08022f0c

08000b70 <TCP_Server_Init>:

void TCP_Server_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, (configMINIMAL_STACK_SIZE*8), osPriorityAboveNormal);
 8000b76:	2320      	movs	r3, #32
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4903      	ldr	r1, [pc, #12]	@ (8000b90 <TCP_Server_Init+0x20>)
 8000b82:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <TCP_Server_Init+0x24>)
 8000b84:	f01d fd4e 	bl	801e624 <sys_thread_new>
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08000a8d 	.word	0x08000a8d
 8000b94:	0801f778 	.word	0x0801f778

08000b98 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f043 0201 	orr.w	r2, r3, #1
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_TIM_DisableUpdateEvent>:
  * @rmtoll CR1          UDIS          LL_TIM_DisableUpdateEvent
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_UDIS);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f043 0202 	orr.w	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	621a      	str	r2, [r3, #32]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1a      	ldr	r2, [r3, #32]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	621a      	str	r2, [r3, #32]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d028      	beq.n	8000cb8 <LL_TIM_IC_SetActiveInput+0x64>
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d023      	beq.n	8000cb4 <LL_TIM_IC_SetActiveInput+0x60>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b10      	cmp	r3, #16
 8000c70:	d01e      	beq.n	8000cb0 <LL_TIM_IC_SetActiveInput+0x5c>
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b40      	cmp	r3, #64	@ 0x40
 8000c76:	d019      	beq.n	8000cac <LL_TIM_IC_SetActiveInput+0x58>
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c7e:	d013      	beq.n	8000ca8 <LL_TIM_IC_SetActiveInput+0x54>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c86:	d00d      	beq.n	8000ca4 <LL_TIM_IC_SetActiveInput+0x50>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c8e:	d007      	beq.n	8000ca0 <LL_TIM_IC_SetActiveInput+0x4c>
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c96:	d101      	bne.n	8000c9c <LL_TIM_IC_SetActiveInput+0x48>
 8000c98:	2307      	movs	r3, #7
 8000c9a:	e00e      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	e00c      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	e00a      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	e008      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e006      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000cac:	2303      	movs	r3, #3
 8000cae:	e004      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e002      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <LL_TIM_IC_SetActiveInput+0x66>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3318      	adds	r3, #24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <LL_TIM_IC_SetActiveInput+0xac>)
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	440b      	add	r3, r1
 8000cca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <LL_TIM_IC_SetActiveInput+0xb0>)
 8000cd4:	5ccb      	ldrb	r3, [r1, r3]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2303      	movs	r3, #3
 8000cda:	408b      	lsls	r3, r1
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	0c1b      	lsrs	r3, r3, #16
 8000ce4:	7df9      	ldrb	r1, [r7, #23]
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <LL_TIM_IC_SetActiveInput+0xb0>)
 8000ce8:	5c41      	ldrb	r1, [r0, r1]
 8000cea:	408b      	lsls	r3, r1
 8000cec:	431a      	orrs	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	08022d14 	.word	0x08022d14
 8000d04:	08022d20 	.word	0x08022d20

08000d08 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d028      	beq.n	8000d6c <LL_TIM_IC_SetPrescaler+0x64>
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d023      	beq.n	8000d68 <LL_TIM_IC_SetPrescaler+0x60>
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2b10      	cmp	r3, #16
 8000d24:	d01e      	beq.n	8000d64 <LL_TIM_IC_SetPrescaler+0x5c>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b40      	cmp	r3, #64	@ 0x40
 8000d2a:	d019      	beq.n	8000d60 <LL_TIM_IC_SetPrescaler+0x58>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d32:	d013      	beq.n	8000d5c <LL_TIM_IC_SetPrescaler+0x54>
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d3a:	d00d      	beq.n	8000d58 <LL_TIM_IC_SetPrescaler+0x50>
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d42:	d007      	beq.n	8000d54 <LL_TIM_IC_SetPrescaler+0x4c>
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4a:	d101      	bne.n	8000d50 <LL_TIM_IC_SetPrescaler+0x48>
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	e00e      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d50:	2308      	movs	r3, #8
 8000d52:	e00c      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d54:	2306      	movs	r3, #6
 8000d56:	e00a      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d58:	2305      	movs	r3, #5
 8000d5a:	e008      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	e006      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e004      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e002      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <LL_TIM_IC_SetPrescaler+0x66>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3318      	adds	r3, #24
 8000d74:	4619      	mov	r1, r3
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <LL_TIM_IC_SetPrescaler+0xac>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <LL_TIM_IC_SetPrescaler+0xb0>)
 8000d88:	5ccb      	ldrb	r3, [r1, r3]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	408b      	lsls	r3, r1
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	7df9      	ldrb	r1, [r7, #23]
 8000d9a:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <LL_TIM_IC_SetPrescaler+0xb0>)
 8000d9c:	5c41      	ldrb	r1, [r0, r1]
 8000d9e:	408b      	lsls	r3, r1
 8000da0:	431a      	orrs	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	08022d14 	.word	0x08022d14
 8000db8:	08022d20 	.word	0x08022d20

08000dbc <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d028      	beq.n	8000e20 <LL_TIM_IC_SetFilter+0x64>
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d023      	beq.n	8000e1c <LL_TIM_IC_SetFilter+0x60>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b10      	cmp	r3, #16
 8000dd8:	d01e      	beq.n	8000e18 <LL_TIM_IC_SetFilter+0x5c>
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b40      	cmp	r3, #64	@ 0x40
 8000dde:	d019      	beq.n	8000e14 <LL_TIM_IC_SetFilter+0x58>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000de6:	d013      	beq.n	8000e10 <LL_TIM_IC_SetFilter+0x54>
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dee:	d00d      	beq.n	8000e0c <LL_TIM_IC_SetFilter+0x50>
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000df6:	d007      	beq.n	8000e08 <LL_TIM_IC_SetFilter+0x4c>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfe:	d101      	bne.n	8000e04 <LL_TIM_IC_SetFilter+0x48>
 8000e00:	2307      	movs	r3, #7
 8000e02:	e00e      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e04:	2308      	movs	r3, #8
 8000e06:	e00c      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e08:	2306      	movs	r3, #6
 8000e0a:	e00a      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e008      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e10:	2304      	movs	r3, #4
 8000e12:	e006      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e14:	2303      	movs	r3, #3
 8000e16:	e004      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e002      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <LL_TIM_IC_SetFilter+0x66>
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3318      	adds	r3, #24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <LL_TIM_IC_SetFilter+0xac>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	440b      	add	r3, r1
 8000e32:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <LL_TIM_IC_SetFilter+0xb0>)
 8000e3c:	5ccb      	ldrb	r3, [r1, r3]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	23f0      	movs	r3, #240	@ 0xf0
 8000e42:	408b      	lsls	r3, r1
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	7df9      	ldrb	r1, [r7, #23]
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <LL_TIM_IC_SetFilter+0xb0>)
 8000e50:	5c41      	ldrb	r1, [r0, r1]
 8000e52:	408b      	lsls	r3, r1
 8000e54:	431a      	orrs	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	08022d14 	.word	0x08022d14
 8000e6c:	08022d20 	.word	0x08022d20

08000e70 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d028      	beq.n	8000ed4 <LL_TIM_IC_SetPolarity+0x64>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d023      	beq.n	8000ed0 <LL_TIM_IC_SetPolarity+0x60>
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b10      	cmp	r3, #16
 8000e8c:	d01e      	beq.n	8000ecc <LL_TIM_IC_SetPolarity+0x5c>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b40      	cmp	r3, #64	@ 0x40
 8000e92:	d019      	beq.n	8000ec8 <LL_TIM_IC_SetPolarity+0x58>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e9a:	d013      	beq.n	8000ec4 <LL_TIM_IC_SetPolarity+0x54>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ea2:	d00d      	beq.n	8000ec0 <LL_TIM_IC_SetPolarity+0x50>
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eaa:	d007      	beq.n	8000ebc <LL_TIM_IC_SetPolarity+0x4c>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eb2:	d101      	bne.n	8000eb8 <LL_TIM_IC_SetPolarity+0x48>
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	e00e      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000eb8:	2308      	movs	r3, #8
 8000eba:	e00c      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	e00a      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	e008      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e006      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e004      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <LL_TIM_IC_SetPolarity+0x66>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a1a      	ldr	r2, [r3, #32]
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	490b      	ldr	r1, [pc, #44]	@ (8000f0c <LL_TIM_IC_SetPolarity+0x9c>)
 8000ee0:	5ccb      	ldrb	r3, [r1, r3]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	401a      	ands	r2, r3
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	4907      	ldr	r1, [pc, #28]	@ (8000f0c <LL_TIM_IC_SetPolarity+0x9c>)
 8000ef0:	5ccb      	ldrb	r3, [r1, r3]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	408b      	lsls	r3, r1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	08022d2c 	.word	0x08022d2c

08000f10 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <LL_TIM_SetClockSource+0x28>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	609a      	str	r2, [r3, #8]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	fffebff8 	.word	0xfffebff8

08000f3c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f06f 0210 	mvn.w	r2, #16
 8000f90:	611a      	str	r2, [r3, #16]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d101      	bne.n	8000fb6 <LL_TIM_IsActiveFlag_CC4+0x18>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000fce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fd2:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400

08000ffc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <LL_APB1_GRP1_EnableClock+0x34>)
 8001006:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <LL_APB1_GRP1_EnableClock+0x34>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <LL_APB1_GRP1_EnableClock+0x34>)
 8001016:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001020:	68fb      	ldr	r3, [r7, #12]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	58024400 	.word	0x58024400

08001034 <LL_GPIO_IsInputPinSet>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4013      	ands	r3, r2
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d101      	bne.n	8001050 <LL_GPIO_IsInputPinSet+0x1c>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <LL_GPIO_IsInputPinSet+0x1e>
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4013      	ands	r3, r2
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43d9      	mvns	r1, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	400b      	ands	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001096:	f000 fdd3 	bl	8001c40 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800109a:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <main+0x154>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d11b      	bne.n	80010de <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010a6:	f3bf 8f4f 	dsb	sy
}
 80010aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ac:	f3bf 8f6f 	isb	sy
}
 80010b0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010b2:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <main+0x154>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010ba:	f3bf 8f4f 	dsb	sy
}
 80010be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010c0:	f3bf 8f6f 	isb	sy
}
 80010c4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010c6:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <main+0x154>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <main+0x154>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d2:	f3bf 8f4f 	dsb	sy
}
 80010d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010d8:	f3bf 8f6f 	isb	sy
}
 80010dc:	e000      	b.n	80010e0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80010de:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80010e0:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <main+0x154>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d138      	bne.n	800115e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80010ec:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <main+0x154>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80010f4:	f3bf 8f4f 	dsb	sy
}
 80010f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <main+0x154>)
 80010fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001100:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	0b5b      	lsrs	r3, r3, #13
 8001106:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800110a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001114:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	015a      	lsls	r2, r3, #5
 800111a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800111e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001124:	492f      	ldr	r1, [pc, #188]	@ (80011e4 <main+0x154>)
 8001126:	4313      	orrs	r3, r2
 8001128:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	1e5a      	subs	r2, r3, #1
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1ef      	bne.n	8001116 <main+0x86>
    } while(sets-- != 0U);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	60ba      	str	r2, [r7, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001146:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <main+0x154>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <main+0x154>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800115e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f001 fb86 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(1000);    
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f85a 	bl	800121c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(2000);
 8001168:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800116c:	f001 fbdc 	bl	8002928 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 fae2 	bl	8001738 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001174:	f000 fa62 	bl	800163c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001178:	f000 faac 	bl	80016d4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 800117c:	f000 f9f0 	bl	8001560 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001180:	f000 f93a 	bl	80013f8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001184:	f000 f8f8 	bl	8001378 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM4);		// Set TIMx_CR1 CEN bit
 8001188:	4817      	ldr	r0, [pc, #92]	@ (80011e8 <main+0x158>)
 800118a:	f7ff fd10 	bl	8000bae <LL_TIM_EnableCounter>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800118e:	210c      	movs	r1, #12
 8001190:	4816      	ldr	r0, [pc, #88]	@ (80011ec <main+0x15c>)
 8001192:	f007 fbd3 	bl	800893c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001196:	f00b ffcd 	bl	800d134 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of OV7670BinarySemaphore */
  OV7670BinarySemaphoreHandle = osSemaphoreNew(1, 0, &OV7670BinarySemaphore_attributes);
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <main+0x160>)
 800119c:	2100      	movs	r1, #0
 800119e:	2001      	movs	r0, #1
 80011a0:	f00c fa03 	bl	800d5aa <osSemaphoreNew>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <main+0x164>)
 80011a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011aa:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <main+0x168>)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4813      	ldr	r0, [pc, #76]	@ (80011fc <main+0x16c>)
 80011b0:	f00c f81f 	bl	800d1f2 <osThreadNew>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <main+0x170>)
 80011b8:	6013      	str	r3, [r2, #0]

  /* creation of UserButtonTask */
  UserButtonTaskHandle = osThreadNew(User_Button_Activity, NULL, &UserButtonTask_attributes);
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <main+0x174>)
 80011bc:	2100      	movs	r1, #0
 80011be:	4812      	ldr	r0, [pc, #72]	@ (8001208 <main+0x178>)
 80011c0:	f00c f817 	bl	800d1f2 <osThreadNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <main+0x17c>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of OV7670Task */
  OV7670TaskHandle = osThreadNew(OV7670_Image_Sensor, NULL, &OV7670Task_attributes);
 80011ca:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <main+0x180>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4811      	ldr	r0, [pc, #68]	@ (8001214 <main+0x184>)
 80011d0:	f00c f80f 	bl	800d1f2 <osThreadNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <main+0x188>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f00b ffcf 	bl	800d17c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	bf00      	nop
 80011e0:	e7fd      	b.n	80011de <main+0x14e>
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	40000800 	.word	0x40000800
 80011ec:	24000108 	.word	0x24000108
 80011f0:	08022da4 	.word	0x08022da4
 80011f4:	24000748 	.word	0x24000748
 80011f8:	08022d38 	.word	0x08022d38
 80011fc:	080019bd 	.word	0x080019bd
 8001200:	2400073c 	.word	0x2400073c
 8001204:	08022d5c 	.word	0x08022d5c
 8001208:	080019e1 	.word	0x080019e1
 800120c:	24000740 	.word	0x24000740
 8001210:	08022d80 	.word	0x08022d80
 8001214:	08001aa5 	.word	0x08001aa5
 8001218:	24000744 	.word	0x24000744

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09e      	sub	sp, #120	@ 0x78
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001226:	224c      	movs	r2, #76	@ 0x4c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f01d fb9d 	bl	801e96a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f01d fb96 	bl	801e96a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800123e:	2002      	movs	r0, #2
 8001240:	f004 fb94 	bl	800596c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b48      	ldr	r3, [pc, #288]	@ (800136c <SystemClock_Config+0x150>)
 800124a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124c:	4a47      	ldr	r2, [pc, #284]	@ (800136c <SystemClock_Config+0x150>)
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001254:	4b45      	ldr	r3, [pc, #276]	@ (800136c <SystemClock_Config+0x150>)
 8001256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <SystemClock_Config+0x154>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a43      	ldr	r2, [pc, #268]	@ (8001370 <SystemClock_Config+0x154>)
 8001264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <SystemClock_Config+0x154>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001276:	bf00      	nop
 8001278:	4b3d      	ldr	r3, [pc, #244]	@ (8001370 <SystemClock_Config+0x154>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001284:	d1f8      	bne.n	8001278 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <SystemClock_Config+0x158>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	4a39      	ldr	r2, [pc, #228]	@ (8001374 <SystemClock_Config+0x158>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001296:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <SystemClock_Config+0x158>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <SystemClock_Config+0x154>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a30      	ldr	r2, [pc, #192]	@ (8001370 <SystemClock_Config+0x154>)
 80012ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <SystemClock_Config+0x154>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <SystemClock_Config+0x150>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c2:	4a2a      	ldr	r2, [pc, #168]	@ (800136c <SystemClock_Config+0x150>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <SystemClock_Config+0x150>)
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012d6:	bf00      	nop
 80012d8:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <SystemClock_Config+0x154>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012e4:	d1f8      	bne.n	80012d8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012ea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	2302      	movs	r3, #2
 80012f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80012fc:	2378      	movs	r3, #120	@ 0x78
 80012fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001304:	230f      	movs	r3, #15
 8001306:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800130c:	230c      	movs	r3, #12
 800130e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001310:	2300      	movs	r3, #0
 8001312:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fb6f 	bl	8005a00 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001328:	f000 fcee 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	233f      	movs	r3, #63	@ 0x3f
 800132e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2303      	movs	r3, #3
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001338:	2308      	movs	r3, #8
 800133a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800133c:	2340      	movs	r3, #64	@ 0x40
 800133e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001340:	2340      	movs	r3, #64	@ 0x40
 8001342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800134a:	2340      	movs	r3, #64	@ 0x40
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2104      	movs	r1, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f004 ffad 	bl	80062b4 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001360:	f000 fcd2 	bl	8001d08 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3778      	adds	r7, #120	@ 0x78
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58000400 	.word	0x58000400
 8001370:	58024800 	.word	0x58024800
 8001374:	58024400 	.word	0x58024400

08001378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_I2C1_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <MX_I2C1_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303D54;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <MX_I2C1_Init+0x7c>)
 8001386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001390:	2201      	movs	r2, #1
 8001392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_I2C1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b2:	480e      	ldr	r0, [pc, #56]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013b4:	f003 fbb6 	bl	8004b24 <HAL_I2C_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013be:	f000 fca3 	bl	8001d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4809      	ldr	r0, [pc, #36]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013c6:	f004 f909 	bl	80055dc <HAL_I2CEx_ConfigAnalogFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013d0:	f000 fc9a 	bl	8001d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 15) != HAL_OK)
 80013d4:	210f      	movs	r1, #15
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_I2C1_Init+0x74>)
 80013d8:	f004 f94b 	bl	8005672 <HAL_I2CEx_ConfigDigitalFilter>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 fc91 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	240000b4 	.word	0x240000b4
 80013f0:	40005400 	.word	0x40005400
 80013f4:	20303d54 	.word	0x20303d54

080013f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b092      	sub	sp, #72	@ 0x48
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <MX_TIM2_Init+0x160>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001440:	4b45      	ldr	r3, [pc, #276]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b44      	ldr	r3, [pc, #272]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16;
 800144c:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <MX_TIM2_Init+0x160>)
 800144e:	2210      	movs	r2, #16
 8001450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <MX_TIM2_Init+0x160>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145e:	483e      	ldr	r0, [pc, #248]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001460:	f007 f922 	bl	80086a8 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800146a:	f000 fc4d 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001478:	4619      	mov	r1, r3
 800147a:	4837      	ldr	r0, [pc, #220]	@ (8001558 <MX_TIM2_Init+0x160>)
 800147c:	f008 f8c2 	bl	8009604 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001486:	f000 fc3f 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800148a:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_TIM2_Init+0x160>)
 800148c:	f007 fb64 	bl	8008b58 <HAL_TIM_IC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001496:	f000 fc37 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800149a:	482f      	ldr	r0, [pc, #188]	@ (8001558 <MX_TIM2_Init+0x160>)
 800149c:	f007 f9e0 	bl	8008860 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014a6:	f000 fc2f 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4827      	ldr	r0, [pc, #156]	@ (8001558 <MX_TIM2_Init+0x160>)
 80014ba:	f009 f901 	bl	800a6c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80014c4:	f000 fc20 	bl	8001d08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 3;
 80014d4:	2303      	movs	r3, #3
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_TIM2_Init+0x160>)
 80014e2:	f007 fede 	bl	80092a2 <HAL_TIM_IC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80014ec:	f000 fc0c 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2208      	movs	r2, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	4817      	ldr	r0, [pc, #92]	@ (8001558 <MX_TIM2_Init+0x160>)
 80014fa:	f007 fed2 	bl	80092a2 <HAL_TIM_IC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001504:	f000 fc00 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001508:	2370      	movs	r3, #112	@ 0x70
 800150a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8;
 800150c:	2308      	movs	r3, #8
 800150e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	220c      	movs	r2, #12
 800151c:	4619      	mov	r1, r3
 800151e:	480e      	ldr	r0, [pc, #56]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001520:	f007 ff5c 	bl	80093dc <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 800152a:	f000 fbed 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  htim2.Instance->CR1 |= TIM_CR1_UDIS;	// disable update event generation
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0202 	orr.w	r2, r2, #2
 800153c:	601a      	str	r2, [r3, #0]
  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, OV7670_Sync_Output_Detection);
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <MX_TIM2_Init+0x164>)
 8001540:	2112      	movs	r1, #18
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_TIM2_Init+0x160>)
 8001544:	f008 f9b0 	bl	80098a8 <HAL_TIM_RegisterCallback>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM2_Init+0x160>)
 800154a:	f000 fd17 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3748      	adds	r7, #72	@ 0x48
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24000108 	.word	0x24000108
 800155c:	080008f9 	.word	0x080008f9

08001560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	@ 0x30
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001586:	2004      	movs	r0, #4
 8001588:	f7ff fd38 	bl	8000ffc <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800158c:	2008      	movs	r0, #8
 800158e:	f7ff fd19 	bl	8000fc4 <LL_AHB4_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD15   ------> TIM4_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001598:	2302      	movs	r3, #2
 800159a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4820      	ldr	r0, [pc, #128]	@ (8001634 <MX_TIM4_Init+0xd4>)
 80015b2:	f00a faf1 	bl	800bb98 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 480;
 80015b6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015ba:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80015c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015d2:	f00a fb89 	bl	800bce8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80015d6:	4818      	ldr	r0, [pc, #96]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015d8:	f7ff fb09 	bl	8000bee <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80015dc:	2100      	movs	r1, #0
 80015de:	4816      	ldr	r0, [pc, #88]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015e0:	f7ff fc96 	bl	8000f10 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80015e4:	2100      	movs	r1, #0
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015e8:	f7ff fca8 	bl	8000f3c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015ee:	f7ff fcb8 	bl	8000f62 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80015f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fa:	480f      	ldr	r0, [pc, #60]	@ (8001638 <MX_TIM4_Init+0xd8>)
 80015fc:	f7ff fb2a 	bl	8000c54 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_ICPSC_DIV1);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001606:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_TIM4_Init+0xd8>)
 8001608:	f7ff fb7e 	bl	8000d08 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_IC_FILTER_FDIV1_N4);
 800160c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001610:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001614:	4808      	ldr	r0, [pc, #32]	@ (8001638 <MX_TIM4_Init+0xd8>)
 8001616:	f7ff fbd1 	bl	8000dbc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH4, LL_TIM_IC_POLARITY_RISING);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_TIM4_Init+0xd8>)
 8001622:	f7ff fc25 	bl	8000e70 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_DisableUpdateEvent(TIM4);
 8001626:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_TIM4_Init+0xd8>)
 8001628:	f7ff fad1 	bl	8000bce <LL_TIM_DisableUpdateEvent>
  /* USER CODE END TIM4_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	@ 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58020c00 	.word	0x58020c00
 8001638:	40000800 	.word	0x40000800

0800163c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001642:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <MX_USART3_UART_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001686:	f009 f8d1 	bl	800a82c <HAL_UART_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001690:	f000 fb3a 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001694:	2100      	movs	r1, #0
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 8001698:	f00a f8d9 	bl	800b84e <HAL_UARTEx_SetTxFifoThreshold>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016a2:	f000 fb31 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 80016aa:	f00a f90e 	bl	800b8ca <HAL_UARTEx_SetRxFifoThreshold>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f000 fb28 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_USART3_UART_Init+0x90>)
 80016ba:	f00a f88f 	bl	800b7dc <HAL_UARTEx_DisableFifoMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 fb20 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	240001c4 	.word	0x240001c4
 80016d0:	40004800 	.word	0x40004800

080016d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016da:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80016dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016e0:	2209      	movs	r2, #9
 80016e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016f2:	2202      	movs	r2, #2
 80016f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001704:	2200      	movs	r2, #0
 8001706:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800170a:	2201      	movs	r2, #1
 800170c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001710:	2201      	movs	r2, #1
 8001712:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800171c:	f003 fff5 	bl	800570a <HAL_PCD_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001726:	f000 faef 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000258 	.word	0x24000258
 8001734:	40080000 	.word	0x40080000

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	@ 0x38
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b7e      	ldr	r3, [pc, #504]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001754:	4a7c      	ldr	r2, [pc, #496]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175e:	4b7a      	ldr	r3, [pc, #488]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176c:	4b76      	ldr	r3, [pc, #472]	@ (8001948 <MX_GPIO_Init+0x210>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001772:	4a75      	ldr	r2, [pc, #468]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177c:	4b72      	ldr	r3, [pc, #456]	@ (8001948 <MX_GPIO_Init+0x210>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <MX_GPIO_Init+0x210>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	4a6d      	ldr	r2, [pc, #436]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179a:	4b6b      	ldr	r3, [pc, #428]	@ (8001948 <MX_GPIO_Init+0x210>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b67      	ldr	r3, [pc, #412]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	4a66      	ldr	r2, [pc, #408]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b8:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b60      	ldr	r3, [pc, #384]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e4:	4b58      	ldr	r3, [pc, #352]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	4a57      	ldr	r2, [pc, #348]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f4:	4b54      	ldr	r3, [pc, #336]	@ (8001948 <MX_GPIO_Init+0x210>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001802:	4b51      	ldr	r3, [pc, #324]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	4a4f      	ldr	r2, [pc, #316]	@ (8001948 <MX_GPIO_Init+0x210>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001812:	4b4d      	ldr	r3, [pc, #308]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001820:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	4a48      	ldr	r2, [pc, #288]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001830:	4b45      	ldr	r3, [pc, #276]	@ (8001948 <MX_GPIO_Init+0x210>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	4842      	ldr	r0, [pc, #264]	@ (800194c <MX_GPIO_Init+0x214>)
 8001844:	f003 f930 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800184e:	4840      	ldr	r0, [pc, #256]	@ (8001950 <MX_GPIO_Init+0x218>)
 8001850:	f003 f92a 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800185a:	483e      	ldr	r0, [pc, #248]	@ (8001954 <MX_GPIO_Init+0x21c>)
 800185c:	f003 f924 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2102      	movs	r1, #2
 8001864:	483c      	ldr	r0, [pc, #240]	@ (8001958 <MX_GPIO_Init+0x220>)
 8001866:	f003 f91f 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	4836      	ldr	r0, [pc, #216]	@ (800195c <MX_GPIO_Init+0x224>)
 8001882:	f002 ff49 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800188a:	2311      	movs	r3, #17
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001892:	2301      	movs	r3, #1
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	482b      	ldr	r0, [pc, #172]	@ (800194c <MX_GPIO_Init+0x214>)
 800189e:	f002 ff3b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80018a2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4825      	ldr	r0, [pc, #148]	@ (8001950 <MX_GPIO_Init+0x218>)
 80018bc:	f002 ff2c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D7_Pin D1_Pin
                           D6_Pin D0_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D7_Pin|D1_Pin
 80018c0:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D6_Pin|D0_Pin|D4_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4820      	ldr	r0, [pc, #128]	@ (8001958 <MX_GPIO_Init+0x220>)
 80018d6:	f002 ff1f 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80018da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4818      	ldr	r0, [pc, #96]	@ (8001954 <MX_GPIO_Init+0x21c>)
 80018f4:	f002 ff10 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4814      	ldr	r0, [pc, #80]	@ (8001960 <MX_GPIO_Init+0x228>)
 800190e:	f002 ff03 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001912:	2302      	movs	r3, #2
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	@ (8001958 <MX_GPIO_Init+0x220>)
 800192a:	f002 fef5 	bl	8004718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2102      	movs	r1, #2
 8001932:	2028      	movs	r0, #40	@ 0x28
 8001934:	f001 f8f4 	bl	8002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001938:	2028      	movs	r0, #40	@ 0x28
 800193a:	f001 f90b 	bl	8002b54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	@ 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	58021400 	.word	0x58021400
 8001950:	58020400 	.word	0x58020400
 8001954:	58020c00 	.word	0x58020c00
 8001958:	58021000 	.word	0x58021000
 800195c:	58020800 	.word	0x58020800
 8001960:	58021800 	.word	0x58021800

08001964 <Delay_us_Rough>:

/* USER CODE BEGIN 4 */
void Delay_us_Rough(uint16_t delay_us)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
	uint16_t cycle;
	uint32_t one_us = SystemCoreClock / 1000000;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <Delay_us_Rough+0x50>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <Delay_us_Rough+0x54>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	60fb      	str	r3, [r7, #12]
	uint32_t count;

	for(cycle = 0; cycle < delay_us; cycle++){
 800197c:	2300      	movs	r3, #0
 800197e:	82fb      	strh	r3, [r7, #22]
 8001980:	e00c      	b.n	800199c <Delay_us_Rough+0x38>
		for(count = 0; count < one_us; count++){
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e002      	b.n	800198e <Delay_us_Rough+0x2a>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3301      	adds	r3, #1
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3f8      	bcc.n	8001988 <Delay_us_Rough+0x24>
	for(cycle = 0; cycle < delay_us; cycle++){
 8001996:	8afb      	ldrh	r3, [r7, #22]
 8001998:	3301      	adds	r3, #1
 800199a:	82fb      	strh	r3, [r7, #22]
 800199c:	8afa      	ldrh	r2, [r7, #22]
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ee      	bcc.n	8001982 <Delay_us_Rough+0x1e>
			// This should produce ~1 us or more delay
		}
	}
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	24000000 	.word	0x24000000
 80019b8:	431bde83 	.word	0x431bde83

080019bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019c4:	f00a fd2c 	bl	800c420 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  TCP_Server_Init();
 80019c8:	f7ff f8d2 	bl	8000b70 <TCP_Server_Init>
  LL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80019cc:	2101      	movs	r1, #1
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <StartDefaultTask+0x20>)
 80019d0:	f7ff fb45 	bl	800105e <LL_GPIO_TogglePin>
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);	// for debug breakpoint purpose only
	//osThreadTerminate(NULL);	// delete this task
    osThreadYield();
 80019d4:	f00b fca0 	bl	800d318 <osThreadYield>
 80019d8:	e7fc      	b.n	80019d4 <StartDefaultTask+0x18>
 80019da:	bf00      	nop
 80019dc:	58020400 	.word	0x58020400

080019e0 <User_Button_Activity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_User_Button_Activity */
void User_Button_Activity(void *argument)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN User_Button_Activity */
  /* Infinite loop */
  for(;;)
  {
	switch(User_Button_State){
 80019e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <User_Button_Activity+0xb4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d84a      	bhi.n	8001a86 <User_Button_Activity+0xa6>
 80019f0:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <User_Button_Activity+0x18>)
 80019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a11 	.word	0x08001a11
 8001a00:	08001a3f 	.word	0x08001a3f
 8001a04:	08001a57 	.word	0x08001a57
	case USR_BTN_UNPRESSED:	// do nothing (Look at Sch, PC13 pulled down by R64 100k res, so it'd be logic 0 at this moment)
							osDelay( pdMS_TO_TICKS(50) );
 8001a08:	2005      	movs	r0, #5
 8001a0a:	f00b fca5 	bl	800d358 <osDelay>
							break;
 8001a0e:	e03f      	b.n	8001a90 <User_Button_Activity+0xb0>
	case DEBOUNCE_UNPRESSED:	HAL_Delay(100);
 8001a10:	2064      	movs	r0, #100	@ 0x64
 8001a12:	f000 ff89 	bl	8002928 <HAL_Delay>
								if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){	// Check if PC13 is really pulled high
 8001a16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a1a:	481f      	ldr	r0, [pc, #124]	@ (8001a98 <User_Button_Activity+0xb8>)
 8001a1c:	f003 f82c 	bl	8004a78 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <User_Button_Activity+0x56>
									LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a26:	2102      	movs	r1, #2
 8001a28:	481c      	ldr	r0, [pc, #112]	@ (8001a9c <User_Button_Activity+0xbc>)
 8001a2a:	f7ff fb18 	bl	800105e <LL_GPIO_TogglePin>
									User_Button_State = USR_BTN_PRESSED;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
								} else {	User_Button_State = USR_BTN_UNPRESSED;	}	// go back to previous state
								break;
 8001a34:	e02c      	b.n	8001a90 <User_Button_Activity+0xb0>
								} else {	User_Button_State = USR_BTN_UNPRESSED;	}	// go back to previous state
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
								break;
 8001a3c:	e028      	b.n	8001a90 <User_Button_Activity+0xb0>
	case USR_BTN_PRESSED:	// if user btn is pressed, PC13 pin should be pulled high to logic 1 by R74 330Ohm res
							if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){	// Check if user button unpressed/released
 8001a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a42:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <User_Button_Activity+0xb8>)
 8001a44:	f003 f818 	bl	8004a78 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11f      	bne.n	8001a8e <User_Button_Activity+0xae>
								User_Button_State = DEBOUNCE_PRESSED;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a50:	2203      	movs	r2, #3
 8001a52:	701a      	strb	r2, [r3, #0]
							}
							break;
 8001a54:	e01b      	b.n	8001a8e <User_Button_Activity+0xae>
	case DEBOUNCE_PRESSED:	HAL_Delay(100);
 8001a56:	2064      	movs	r0, #100	@ 0x64
 8001a58:	f000 ff66 	bl	8002928 <HAL_Delay>
							if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8001a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a60:	480d      	ldr	r0, [pc, #52]	@ (8001a98 <User_Button_Activity+0xb8>)
 8001a62:	f003 f809 	bl	8004a78 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d108      	bne.n	8001a7e <User_Button_Activity+0x9e>
								User_Button_State = USR_BTN_UNPRESSED;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
								osSemaphoreRelease(OV7670BinarySemaphoreHandle);	// give the semaphore
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <User_Button_Activity+0xc0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00b fe72 	bl	800d760 <osSemaphoreRelease>
							} else {	User_Button_State = USR_BTN_PRESSED;	}	// go back to previous state
							break;
 8001a7c:	e008      	b.n	8001a90 <User_Button_Activity+0xb0>
							} else {	User_Button_State = USR_BTN_PRESSED;	}	// go back to previous state
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]
							break;
 8001a84:	e004      	b.n	8001a90 <User_Button_Activity+0xb0>
	default:	User_Button_State = USR_BTN_UNPRESSED;
 8001a86:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <User_Button_Activity+0xb4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
				break;
 8001a8c:	e000      	b.n	8001a90 <User_Button_Activity+0xb0>
							break;
 8001a8e:	bf00      	nop
	switch(User_Button_State){
 8001a90:	e7aa      	b.n	80019e8 <User_Button_Activity+0x8>
 8001a92:	bf00      	nop
 8001a94:	2400074c 	.word	0x2400074c
 8001a98:	58020800 	.word	0x58020800
 8001a9c:	58021000 	.word	0x58021000
 8001aa0:	24000748 	.word	0x24000748

08001aa4 <OV7670_Image_Sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OV7670_Image_Sensor */
void OV7670_Image_Sensor(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OV7670_Image_Sensor */
  /* Infinite loop */
  for(;;)
  {
    switch(OV7670_State){
 8001aac:	4b5c      	ldr	r3, [pc, #368]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80b2 	bhi.w	8001c1a <OV7670_Image_Sensor+0x176>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <OV7670_Image_Sensor+0x18>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001ae1 	.word	0x08001ae1
 8001ac0:	08001afb 	.word	0x08001afb
 8001ac4:	08001c1b 	.word	0x08001c1b
 8001ac8:	08001b23 	.word	0x08001b23
 8001acc:	08001c1b 	.word	0x08001c1b
 8001ad0:	08001b55 	.word	0x08001b55
 8001ad4:	08001b6d 	.word	0x08001b6d
 8001ad8:	08001bcb 	.word	0x08001bcb
 8001adc:	08001c0b 	.word	0x08001c0b
	case IMG_SENSOR_STOP:
		OV7670_Init_Pixel_Array();
 8001ae0:	f7fe fddc 	bl	800069c <OV7670_Init_Pixel_Array>
		osSemaphoreAcquire(OV7670BinarySemaphoreHandle, osWaitForever);		// wait for semaphore passed
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <OV7670_Image_Sensor+0x180>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00b fde5 	bl	800d6bc <osSemaphoreAcquire>
		OV7670_State = IMG_SENSOR_INIT;
 8001af2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		break;
 8001af8:	e090      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_INIT:
		if(OV7670_Init_Setting() == false){
 8001afa:	f7fe fdf9 	bl	80006f0 <OV7670_Init_Setting>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <OV7670_Image_Sensor+0x6e>
			OV7670_State = IMG_SENSOR_STOP;
 8001b0a:	4b45      	ldr	r3, [pc, #276]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
			break;
 8001b10:	e084      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
		}
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Enable Input Capture for VSYNC pin
 8001b12:	2100      	movs	r1, #0
 8001b14:	4844      	ldr	r0, [pc, #272]	@ (8001c28 <OV7670_Image_Sensor+0x184>)
 8001b16:	f007 f88d 	bl	8008c34 <HAL_TIM_IC_Start_IT>
		OV7670_State = IMG_SENSOR_WAIT_VSYNC;
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
		break;
 8001b20:	e07c      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_WAIT_VSYNC:
		break;
	case IMG_SENSOR_VSYNC:
		vs_count++;
 8001b22:	4b42      	ldr	r3, [pc, #264]	@ (8001c2c <OV7670_Image_Sensor+0x188>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <OV7670_Image_Sensor+0x188>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		if(vs_count <= 1){		// Skip the first frame when the new setting just applied
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c2c <OV7670_Image_Sensor+0x188>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d803      	bhi.n	8001b3e <OV7670_Image_Sensor+0x9a>
			OV7670_State = IMG_SENSOR_WAIT_VSYNC;
 8001b36:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
			break;
 8001b3c:	e06e      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
		}
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);	// Enable Input Capture for HREF pin
 8001b3e:	2108      	movs	r1, #8
 8001b40:	4839      	ldr	r0, [pc, #228]	@ (8001c28 <OV7670_Image_Sensor+0x184>)
 8001b42:	f007 f877 	bl	8008c34 <HAL_TIM_IC_Start_IT>
		OV7670_State = IMG_SENSOR_WAIT_HREF;
 8001b46:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001b48:	2204      	movs	r2, #4
 8001b4a:	701a      	strb	r2, [r3, #0]
		hs_count = 0;
 8001b4c:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <OV7670_Image_Sensor+0x18c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]
		break;
 8001b52:	e063      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_WAIT_HREF:
		break;
	case IMG_SENSOR_HREF:
		pclk_count = 0;
 8001b54:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <OV7670_Image_Sensor+0x190>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	801a      	strh	r2, [r3, #0]
		LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 8001b5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5e:	4836      	ldr	r0, [pc, #216]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001b60:	f7ff f855 	bl	8000c0e <LL_TIM_CC_EnableChannel>
		OV7670_State = IMG_SENSOR_PCLK;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001b66:	2206      	movs	r2, #6
 8001b68:	701a      	strb	r2, [r3, #0]
		break;
 8001b6a:	e057      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_PCLK:
		do {
			if(LL_TIM_IsActiveFlag_CC4(TIM4) == 1UL){
 8001b6c:	4832      	ldr	r0, [pc, #200]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001b6e:	f7ff fa16 	bl	8000f9e <LL_TIM_IsActiveFlag_CC4>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10a      	bne.n	8001b8e <OV7670_Image_Sensor+0xea>
				LL_TIM_ClearFlag_CC4(TIM4);
 8001b78:	482f      	ldr	r0, [pc, #188]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001b7a:	f7ff fa02 	bl	8000f82 <LL_TIM_ClearFlag_CC4>
				OV7670_Grab_Pixel_Byte_Output();		// Grab it!
 8001b7e:	f7fe feeb 	bl	8000958 <OV7670_Grab_Pixel_Byte_Output>
				pclk_count++;
 8001b82:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <OV7670_Image_Sensor+0x190>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <OV7670_Image_Sensor+0x190>)
 8001b8c:	801a      	strh	r2, [r3, #0]
			}
		} while(LL_GPIO_IsInputPinSet(HREF_GPIO_Port, HREF_Pin) == 1UL);
 8001b8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b92:	482a      	ldr	r0, [pc, #168]	@ (8001c3c <OV7670_Image_Sensor+0x198>)
 8001b94:	f7ff fa4e 	bl	8001034 <LL_GPIO_IsInputPinSet>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <OV7670_Image_Sensor+0xfe>
	case IMG_SENSOR_PCLK:
 8001b9e:	bf00      	nop
 8001ba0:	e7e4      	b.n	8001b6c <OV7670_Image_Sensor+0xc8>

		OV7670_Grab_Pixel_Byte_Output();		// Grab the last one!
 8001ba2:	f7fe fed9 	bl	8000958 <OV7670_Grab_Pixel_Byte_Output>

		// hs_count should be incremented after pixels grab due to used as pix_array row index
		hs_count++;
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <OV7670_Image_Sensor+0x18c>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <OV7670_Image_Sensor+0x18c>)
 8001bb0:	801a      	strh	r2, [r3, #0]

		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 8001bb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bb6:	4820      	ldr	r0, [pc, #128]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001bb8:	f7ff f83a 	bl	8000c30 <LL_TIM_CC_DisableChannel>
		LL_TIM_ClearFlag_CC4(TIM4);
 8001bbc:	481e      	ldr	r0, [pc, #120]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001bbe:	f7ff f9e0 	bl	8000f82 <LL_TIM_ClearFlag_CC4>
		OV7670_State = IMG_SENSOR_WAIT_HREF;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	701a      	strb	r2, [r3, #0]
		break;
 8001bc8:	e028      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_COMPLETE:
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4816      	ldr	r0, [pc, #88]	@ (8001c28 <OV7670_Image_Sensor+0x184>)
 8001bce:	f007 f981 	bl	8008ed4 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_3);
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <OV7670_Image_Sensor+0x184>)
 8001bd6:	f007 f97d 	bl	8008ed4 <HAL_TIM_IC_Stop_IT>

		LL_TIM_CC_DisableChannel(TIM4, LL_TIM_CHANNEL_CH4);
 8001bda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bde:	4816      	ldr	r0, [pc, #88]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001be0:	f7ff f826 	bl	8000c30 <LL_TIM_CC_DisableChannel>
		LL_TIM_ClearFlag_CC4(TIM4);
 8001be4:	4814      	ldr	r0, [pc, #80]	@ (8001c38 <OV7670_Image_Sensor+0x194>)
 8001be6:	f7ff f9cc 	bl	8000f82 <LL_TIM_ClearFlag_CC4>

		LL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001bea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bee:	4813      	ldr	r0, [pc, #76]	@ (8001c3c <OV7670_Image_Sensor+0x198>)
 8001bf0:	f7ff fa35 	bl	800105e <LL_GPIO_TogglePin>
		osSemaphoreAcquire(OV7670BinarySemaphoreHandle, osWaitForever);		// wait for semaphore passed
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <OV7670_Image_Sensor+0x180>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00b fd5d 	bl	800d6bc <osSemaphoreAcquire>
		OV7670_State = IMG_SENSOR_RESTART;
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001c04:	2208      	movs	r2, #8
 8001c06:	701a      	strb	r2, [r3, #0]
		break;
 8001c08:	e008      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	case IMG_SENSOR_RESTART:
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Enable Input Capture for VSYNC pin
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <OV7670_Image_Sensor+0x184>)
 8001c0e:	f007 f811 	bl	8008c34 <HAL_TIM_IC_Start_IT>
		OV7670_State = IMG_SENSOR_WAIT_VSYNC;
 8001c12:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <OV7670_Image_Sensor+0x17c>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
		break;
 8001c18:	e000      	b.n	8001c1c <OV7670_Image_Sensor+0x178>
	default:
		break;
 8001c1a:	bf00      	nop
    switch(OV7670_State){
 8001c1c:	e746      	b.n	8001aac <OV7670_Image_Sensor+0x8>
 8001c1e:	bf00      	nop
 8001c20:	240000ac 	.word	0x240000ac
 8001c24:	24000748 	.word	0x24000748
 8001c28:	24000108 	.word	0x24000108
 8001c2c:	240000ae 	.word	0x240000ae
 8001c30:	240000b0 	.word	0x240000b0
 8001c34:	240000b2 	.word	0x240000b2
 8001c38:	40000800 	.word	0x40000800
 8001c3c:	58020400 	.word	0x58020400

08001c40 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c52:	f000 ff8d 	bl	8002b70 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c62:	231f      	movs	r3, #31
 8001c64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c66:	2387      	movs	r3, #135	@ 0x87
 8001c68:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c82:	463b      	mov	r3, r7
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 ffab 	bl	8002be0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30005000;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MPU_Config+0xa0>)
 8001c90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001c92:	230d      	movs	r3, #13
 8001c94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 ff99 	bl	8002be0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001cb2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cb6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 ff88 	bl	8002be0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f000 ff65 	bl	8002ba0 <HAL_MPU_Enable>

}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	30005000 	.word	0x30005000

08001ce4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cf6:	f000 fdf7 	bl	80028e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40001400 	.word	0x40001400

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <Error_Handler+0x8>

08001d14 <LL_GPIO_SetPinPull>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	fb03 f203 	mul.w	r2, r3, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	43db      	mvns	r3, r3
 8001d32:	ea01 0203 	and.w	r2, r1, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	fb03 f303 	mul.w	r3, r3, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	60da      	str	r2, [r3, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_MspInit+0x38>)
 8001d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_MspInit+0x38>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_MspInit+0x38>)
 8001d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f06f 0001 	mvn.w	r0, #1
 8001d80:	f000 fece 	bl	8002b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0ba      	sub	sp, #232	@ 0xe8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	22c0      	movs	r2, #192	@ 0xc0
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f01c fdda 	bl	801e96a <memset>
  if(hi2c->Instance==I2C1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a34      	ldr	r2, [pc, #208]	@ (8001e8c <HAL_I2C_MspInit+0xfc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d161      	bne.n	8001e84 <HAL_I2C_MspInit+0xf4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dc0:	f04f 0208 	mov.w	r2, #8
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 8001dd0:	2330      	movs	r3, #48	@ 0x30
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001de0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 fe28 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001e06:	f7ff ff7f 	bl	8001d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e28:	23c0      	movs	r3, #192	@ 0xc0
 8001e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e40:	2304      	movs	r3, #4
 8001e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <HAL_I2C_MspInit+0x104>)
 8001e4e:	f002 fc63 	bl	8004718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_I2C_MspInit+0x100>)
 8001e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);	// turn on pull up for SCL & SDA
 8001e70:	2201      	movs	r2, #1
 8001e72:	2140      	movs	r1, #64	@ 0x40
 8001e74:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <HAL_I2C_MspInit+0x104>)
 8001e76:	f7ff ff4d 	bl	8001d14 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_7, LL_GPIO_PULL_UP);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_I2C_MspInit+0x104>)
 8001e80:	f7ff ff48 	bl	8001d14 <LL_GPIO_SetPinPull>
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e84:	bf00      	nop
 8001e86:	37e8      	adds	r7, #232	@ 0xe8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020400 	.word	0x58020400

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d155      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eca:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a24      	ldr	r2, [pc, #144]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_TIM_Base_MspInit+0xd8>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = VSYNC_Pin;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4811      	ldr	r0, [pc, #68]	@ (8001f74 <HAL_TIM_Base_MspInit+0xdc>)
 8001f30:	f002 fbf2 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HREF_Pin;
 8001f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HREF_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4809      	ldr	r0, [pc, #36]	@ (8001f78 <HAL_TIM_Base_MspInit+0xe0>)
 8001f52:	f002 fbe1 	bl	8004718 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2101      	movs	r1, #1
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f000 fde0 	bl	8002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f60:	201c      	movs	r0, #28
 8001f62:	f000 fdf7 	bl	8002b54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	@ 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400
 8001f74:	58020000 	.word	0x58020000
 8001f78:	58020400 	.word	0x58020400

08001f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9c:	d11f      	bne.n	8001fde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa4:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_TIM_MspPostInit+0x6c>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = XCLK_Pin;
 8001fbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <HAL_TIM_MspPostInit+0x70>)
 8001fda:	f002 fb9d 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020400 	.word	0x58020400

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	22c0      	movs	r2, #192	@ 0xc0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f01c fcaa 	bl	801e96a <memset>
  if(huart->Instance==USART3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_UART_MspInit+0xc8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d146      	bne.n	80020ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002020:	f04f 0202 	mov.w	r2, #2
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fd0a 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002042:	f7ff fe61 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 800204e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002052:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206a:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002082:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209c:	2307      	movs	r3, #7
 800209e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <HAL_UART_MspInit+0xd0>)
 80020aa:	f002 fb35 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	37e8      	adds	r7, #232	@ 0xe8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40004800 	.word	0x40004800
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020c00 	.word	0x58020c00

080020c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0ba      	sub	sp, #232	@ 0xe8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	22c0      	movs	r2, #192	@ 0xc0
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f01c fc40 	bl	801e96a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a30      	ldr	r2, [pc, #192]	@ (80021b0 <HAL_PCD_MspInit+0xec>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d159      	bne.n	80021a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002100:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fc9f 	bl	8006a50 <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002118:	f7ff fdf6 	bl	8001d08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800211c:	f003 fc60 	bl	80059e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002130:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800213e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002158:	230a      	movs	r3, #10
 800215a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002162:	4619      	mov	r1, r3
 8002164:	4814      	ldr	r0, [pc, #80]	@ (80021b8 <HAL_PCD_MspInit+0xf4>)
 8002166:	f002 fad7 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800216a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002182:	4619      	mov	r1, r3
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <HAL_PCD_MspInit+0xf4>)
 8002186:	f002 fac7 	bl	8004718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 800218c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002190:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 8002192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002196:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_PCD_MspInit+0xf0>)
 800219c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021a8:	bf00      	nop
 80021aa:	37e8      	adds	r7, #232	@ 0xe8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40080000 	.word	0x40080000
 80021b4:	58024400 	.word	0x58024400
 80021b8:	58020000 	.word	0x58020000

080021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b090      	sub	sp, #64	@ 0x40
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d827      	bhi.n	800221a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 80021ca:	2200      	movs	r2, #0
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	2037      	movs	r0, #55	@ 0x37
 80021d0:	f000 fca6 	bl	8002b20 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021d4:	2037      	movs	r0, #55	@ 0x37
 80021d6:	f000 fcbd 	bl	8002b54 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80021da:	4a2b      	ldr	r2, [pc, #172]	@ (8002288 <HAL_InitTick+0xcc>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_InitTick+0xd0>)
 80021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021e6:	4a29      	ldr	r2, [pc, #164]	@ (800228c <HAL_InitTick+0xd0>)
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_InitTick+0xd0>)
 80021f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021fe:	f107 0210 	add.w	r2, r7, #16
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fbdf 	bl	80069cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002210:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_InitTick+0x6a>
 8002218:	e001      	b.n	800221e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e030      	b.n	8002280 <HAL_InitTick+0xc4>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800221e:	f004 fba9 	bl	8006974 <HAL_RCC_GetPCLK1Freq>
 8002222:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002224:	e004      	b.n	8002230 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002226:	f004 fba5 	bl	8006974 <HAL_RCC_GetPCLK1Freq>
 800222a:	4603      	mov	r3, r0
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <HAL_InitTick+0xd4>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	0c9b      	lsrs	r3, r3, #18
 800223a:	3b01      	subs	r3, #1
 800223c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <HAL_InitTick+0xd8>)
 8002240:	4a15      	ldr	r2, [pc, #84]	@ (8002298 <HAL_InitTick+0xdc>)
 8002242:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <HAL_InitTick+0xd8>)
 8002246:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800224a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800224c:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <HAL_InitTick+0xd8>)
 800224e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002250:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_InitTick+0xd8>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_InitTick+0xd8>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <HAL_InitTick+0xd8>)
 8002260:	f006 fa22 	bl	80086a8 <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800226a:	480a      	ldr	r0, [pc, #40]	@ (8002294 <HAL_InitTick+0xd8>)
 800226c:	f006 fa80 	bl	8008770 <HAL_TIM_Base_Start_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	e005      	b.n	8002280 <HAL_InitTick+0xc4>
  }
  HAL_TIM_RegisterCallback(&htim7, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8002274:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_InitTick+0xe0>)
 8002276:	210e      	movs	r1, #14
 8002278:	4806      	ldr	r0, [pc, #24]	@ (8002294 <HAL_InitTick+0xd8>)
 800227a:	f007 fb15 	bl	80098a8 <HAL_TIM_RegisterCallback>

  /* Return function status */
  return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3740      	adds	r7, #64	@ 0x40
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	24000008 	.word	0x24000008
 800228c:	58024400 	.word	0x58024400
 8002290:	431bde83 	.word	0x431bde83
 8002294:	24000750 	.word	0x24000750
 8002298:	40001400 	.word	0x40001400
 800229c:	080022a1 	.word	0x080022a1

080022a0 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80022a8:	f000 fb1e 	bl	80028e8 <HAL_IncTick>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <NMI_Handler+0x4>

080022bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <MemManage_Handler+0x4>

080022cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <UsageFault_Handler+0x4>

080022dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <TIM2_IRQHandler+0x10>)
 80022f2:	f006 fead 	bl	8009050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24000108 	.word	0x24000108

08002300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(User_Button_State == USR_BTN_UNPRESSED){
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <EXTI15_10_IRQHandler+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <EXTI15_10_IRQHandler+0x12>
	User_Button_State = DEBOUNCE_UNPRESSED;
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <EXTI15_10_IRQHandler+0x20>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002312:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002316:	f002 fbe0 	bl	8004ada <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2400074c 	.word	0x2400074c

08002324 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <TIM7_IRQHandler+0x10>)
 800232a:	f006 fe91 	bl	8009050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	24000750 	.word	0x24000750

08002338 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <ETH_IRQHandler+0x10>)
 800233e:	f001 f863 	bl	8003408 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	24000894 	.word	0x24000894

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_kill>:

int _kill(int pid, int sig)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <_kill+0x20>)
 8002368:	2216      	movs	r2, #22
 800236a:	601a      	str	r2, [r3, #0]
  return -1;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	24008a30 	.word	0x24008a30

08002380 <_exit>:

void _exit (int status)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffe5 	bl	800235c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <_exit+0x12>

08002396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e00a      	b.n	80023be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a8:	f3af 8000 	nop.w
 80023ac:	4601      	mov	r1, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	60ba      	str	r2, [r7, #8]
 80023b4:	b2ca      	uxtb	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dbf0      	blt.n	80023a8 <_read+0x12>
  }

  return len;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e009      	b.n	80023f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	60ba      	str	r2, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbf1      	blt.n	80023e2 <_write+0x12>
  }
  return len;
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_close>:

int _close(int file)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002430:	605a      	str	r2, [r3, #4]
  return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_isatty>:

int _isatty(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002478:	4a14      	ldr	r2, [pc, #80]	@ (80024cc <_sbrk+0x5c>)
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <_sbrk+0x60>)
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002484:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <_sbrk+0x64>)
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <_sbrk+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d205      	bcs.n	80024ac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <_sbrk+0x6c>)
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a06      	ldr	r2, [pc, #24]	@ (80024d4 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	24080000 	.word	0x24080000
 80024d0:	00000400 	.word	0x00000400
 80024d4:	2400080c 	.word	0x2400080c
 80024d8:	24008a40 	.word	0x24008a40
 80024dc:	24008a30 	.word	0x24008a30

080024e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024e6:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <SystemInit+0x104>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	4a3d      	ldr	r2, [pc, #244]	@ (80025e4 <SystemInit+0x104>)
 80024ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024f6:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <SystemInit+0x108>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d807      	bhi.n	8002512 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <SystemInit+0x108>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	4a37      	ldr	r2, [pc, #220]	@ (80025e8 <SystemInit+0x108>)
 800250c:	f043 0307 	orr.w	r3, r3, #7
 8002510:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002512:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <SystemInit+0x10c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a35      	ldr	r2, [pc, #212]	@ (80025ec <SystemInit+0x10c>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800251e:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <SystemInit+0x10c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002524:	4b31      	ldr	r3, [pc, #196]	@ (80025ec <SystemInit+0x10c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4930      	ldr	r1, [pc, #192]	@ (80025ec <SystemInit+0x10c>)
 800252a:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <SystemInit+0x110>)
 800252c:	4013      	ands	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <SystemInit+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800253c:	4b2a      	ldr	r3, [pc, #168]	@ (80025e8 <SystemInit+0x108>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 030f 	bic.w	r3, r3, #15
 8002544:	4a28      	ldr	r2, [pc, #160]	@ (80025e8 <SystemInit+0x108>)
 8002546:	f043 0307 	orr.w	r3, r3, #7
 800254a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <SystemInit+0x10c>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <SystemInit+0x10c>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <SystemInit+0x10c>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <SystemInit+0x10c>)
 8002560:	4a24      	ldr	r2, [pc, #144]	@ (80025f4 <SystemInit+0x114>)
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <SystemInit+0x10c>)
 8002566:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <SystemInit+0x118>)
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <SystemInit+0x10c>)
 800256c:	4a23      	ldr	r2, [pc, #140]	@ (80025fc <SystemInit+0x11c>)
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002570:	4b1e      	ldr	r3, [pc, #120]	@ (80025ec <SystemInit+0x10c>)
 8002572:	2200      	movs	r2, #0
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002576:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <SystemInit+0x10c>)
 8002578:	4a20      	ldr	r2, [pc, #128]	@ (80025fc <SystemInit+0x11c>)
 800257a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <SystemInit+0x10c>)
 800257e:	2200      	movs	r2, #0
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002582:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <SystemInit+0x10c>)
 8002584:	4a1d      	ldr	r2, [pc, #116]	@ (80025fc <SystemInit+0x11c>)
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002588:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <SystemInit+0x10c>)
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <SystemInit+0x10c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <SystemInit+0x10c>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800259a:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <SystemInit+0x10c>)
 800259c:	2200      	movs	r2, #0
 800259e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <SystemInit+0x120>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <SystemInit+0x124>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ac:	d202      	bcs.n	80025b4 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <SystemInit+0x128>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <SystemInit+0x10c>)
 80025b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025ba:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <SystemInit+0x10c>)
 80025bc:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 80025c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <SystemInit+0x10c>)
 80025c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025ca:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80025cc:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <SystemInit+0x12c>)
 80025d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	52002000 	.word	0x52002000
 80025ec:	58024400 	.word	0x58024400
 80025f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025f4:	02020200 	.word	0x02020200
 80025f8:	01ff0000 	.word	0x01ff0000
 80025fc:	01010280 	.word	0x01010280
 8002600:	5c001000 	.word	0x5c001000
 8002604:	ffff0000 	.word	0xffff0000
 8002608:	51008108 	.word	0x51008108
 800260c:	52004000 	.word	0x52004000

08002610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002614:	f7ff ff64 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480c      	ldr	r0, [pc, #48]	@ (800264c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261a:	490d      	ldr	r1, [pc, #52]	@ (8002650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002630:	4c0a      	ldr	r4, [pc, #40]	@ (800265c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800263e:	f01c fa39 	bl	801eab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002642:	f7fe fd25 	bl	8001090 <main>
  bx  lr
 8002646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800264c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002650:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8002654:	0802300c 	.word	0x0802300c
  ldr r2, =_sbss
 8002658:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800265c:	24008a40 	.word	0x24008a40

08002660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC3_IRQHandler>

08002662 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <LAN8742_RegisterBusIO+0x28>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <LAN8742_RegisterBusIO+0x28>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <LAN8742_RegisterBusIO+0x28>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e014      	b.n	80026ba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d139      	bne.n	8002756 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e01c      	b.n	8002736 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f107 020c 	add.w	r2, r7, #12
 8002704:	2112      	movs	r1, #18
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	4798      	blx	r3
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	da03      	bge.n	8002718 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002710:	f06f 0304 	mvn.w	r3, #4
 8002714:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002716:	e00b      	b.n	8002730 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d105      	bne.n	8002730 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
         break;
 800272e:	e005      	b.n	800273c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b1f      	cmp	r3, #31
 800273a:	d9df      	bls.n	80026fc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b1f      	cmp	r3, #31
 8002742:	d902      	bls.n	800274a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002744:	f06f 0302 	mvn.w	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002756:	693b      	ldr	r3, [r7, #16]
 }
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6810      	ldr	r0, [r2, #0]
 8002774:	f107 020c 	add.w	r2, r7, #12
 8002778:	2101      	movs	r1, #1
 800277a:	4798      	blx	r3
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	da02      	bge.n	8002788 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002782:	f06f 0304 	mvn.w	r3, #4
 8002786:	e06e      	b.n	8002866 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6810      	ldr	r0, [r2, #0]
 8002790:	f107 020c 	add.w	r2, r7, #12
 8002794:	2101      	movs	r1, #1
 8002796:	4798      	blx	r3
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	da02      	bge.n	80027a4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800279e:	f06f 0304 	mvn.w	r3, #4
 80027a2:	e060      	b.n	8002866 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e059      	b.n	8002866 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6810      	ldr	r0, [r2, #0]
 80027ba:	f107 020c 	add.w	r2, r7, #12
 80027be:	2100      	movs	r1, #0
 80027c0:	4798      	blx	r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da02      	bge.n	80027ce <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027c8:	f06f 0304 	mvn.w	r3, #4
 80027cc:	e04b      	b.n	8002866 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11b      	bne.n	8002810 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <LAN8742_GetLinkState+0x90>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027ec:	2302      	movs	r3, #2
 80027ee:	e03a      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e033      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002808:	2304      	movs	r3, #4
 800280a:	e02c      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800280c:	2305      	movs	r3, #5
 800280e:	e02a      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6810      	ldr	r0, [r2, #0]
 8002818:	f107 020c 	add.w	r2, r7, #12
 800281c:	211f      	movs	r1, #31
 800281e:	4798      	blx	r3
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	da02      	bge.n	800282c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002826:	f06f 0304 	mvn.w	r3, #4
 800282a:	e01c      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002836:	2306      	movs	r3, #6
 8002838:	e015      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 031c 	and.w	r3, r3, #28
 8002840:	2b18      	cmp	r3, #24
 8002842:	d101      	bne.n	8002848 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002844:	2302      	movs	r3, #2
 8002846:	e00e      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 031c 	and.w	r3, r3, #28
 800284e:	2b08      	cmp	r3, #8
 8002850:	d101      	bne.n	8002856 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002852:	2303      	movs	r3, #3
 8002854:	e007      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	2b14      	cmp	r3, #20
 800285e:	d101      	bne.n	8002864 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002860:	2304      	movs	r3, #4
 8002862:	e000      	b.n	8002866 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002864:	2305      	movs	r3, #5
    }
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002876:	2003      	movs	r0, #3
 8002878:	f000 f947 	bl	8002b0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800287c:	f003 fed0 	bl	8006620 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_Init+0x68>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4913      	ldr	r1, [pc, #76]	@ (80028dc <HAL_Init+0x6c>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <HAL_Init+0x68>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0e      	ldr	r2, [pc, #56]	@ (80028dc <HAL_Init+0x6c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a0b      	ldr	r2, [pc, #44]	@ (80028e0 <HAL_Init+0x70>)
 80028b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b4:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <HAL_Init+0x74>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ba:	200f      	movs	r0, #15
 80028bc:	f7ff fc7e 	bl	80021bc <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e002      	b.n	80028d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ca:	f7ff fa43 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	08022db4 	.word	0x08022db4
 80028e0:	24000004 	.word	0x24000004
 80028e4:	24000000 	.word	0x24000000

080028e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_IncTick+0x20>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_IncTick+0x24>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a04      	ldr	r2, [pc, #16]	@ (800290c <HAL_IncTick+0x24>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	2400000c 	.word	0x2400000c
 800290c:	24000810 	.word	0x24000810

08002910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <HAL_GetTick+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	24000810 	.word	0x24000810

08002928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff ffee 	bl	8002910 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d005      	beq.n	800294e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_Delay+0x44>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800294e:	bf00      	nop
 8002950:	f7ff ffde 	bl	8002910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8f7      	bhi.n	8002950 <HAL_Delay+0x28>
  {
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2400000c 	.word	0x2400000c

08002970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <HAL_GetREVID+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0c1b      	lsrs	r3, r3, #16
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	5c001000 	.word	0x5c001000

08002988 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002998:	4904      	ldr	r1, [pc, #16]	@ (80029ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	58000400 	.word	0x58000400

080029b0 <__NVIC_SetPriorityGrouping>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x40>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x40>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	05fa0000 	.word	0x05fa0000

080029f8 <__NVIC_GetPriorityGrouping>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4907      	ldr	r1, [pc, #28]	@ (8002a4c <__NVIC_EnableIRQ+0x38>)
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	@ (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	@ 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff4c 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2e:	f7ff ff63 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f7ff ffb3 	bl	8002aa4 <NVIC_EncodePriority>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff82 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff56 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b74:	f3bf 8f5f 	dmb	sy
}
 8002b78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_MPU_Disable+0x28>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	4a06      	ldr	r2, [pc, #24]	@ (8002b98 <HAL_MPU_Disable+0x28>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b84:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_MPU_Disable+0x2c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	e000ed90 	.word	0xe000ed90

08002ba0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <HAL_MPU_Enable+0x38>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_MPU_Enable+0x3c>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_MPU_Enable+0x3c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bbe:	f3bf 8f4f 	dsb	sy
}
 8002bc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bc4:	f3bf 8f6f 	isb	sy
}
 8002bc8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed90 	.word	0xe000ed90
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	785a      	ldrb	r2, [r3, #1]
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_MPU_ConfigRegion+0x7c>)
 8002bee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <HAL_MPU_ConfigRegion+0x7c>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_MPU_ConfigRegion+0x7c>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002bfc:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_MPU_ConfigRegion+0x7c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7adb      	ldrb	r3, [r3, #11]
 8002c0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7a9b      	ldrb	r3, [r3, #10]
 8002c16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7b5b      	ldrb	r3, [r3, #13]
 8002c1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7b9b      	ldrb	r3, [r3, #14]
 8002c26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7bdb      	ldrb	r3, [r3, #15]
 8002c2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7a5b      	ldrb	r3, [r3, #9]
 8002c36:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7a1b      	ldrb	r3, [r3, #8]
 8002c3e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c40:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c4a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c4c:	6113      	str	r3, [r2, #16]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed90 	.word	0xe000ed90

08002c60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0e3      	b.n	8002e3a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2223      	movs	r2, #35	@ 0x23
 8002c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f009 ffbb 	bl	800cc00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e44 <HAL_ETH_Init+0x1e4>)
 8002c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c90:	4a6c      	ldr	r2, [pc, #432]	@ (8002e44 <HAL_ETH_Init+0x1e4>)
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e44 <HAL_ETH_Init+0x1e4>)
 8002c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7a1b      	ldrb	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7ff fe69 	bl	8002988 <HAL_SYSCFG_ETHInterfaceSelect>
 8002cb6:	e003      	b.n	8002cc0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002cb8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002cbc:	f7ff fe64 	bl	8002988 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002cc0:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <HAL_ETH_Init+0x1e8>)
 8002cc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cdc:	f7ff fe18 	bl	8002910 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ce2:	e011      	b.n	8002d08 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ce4:	f7ff fe14 	bl	8002910 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002cf2:	d909      	bls.n	8002d08 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	22e0      	movs	r2, #224	@ 0xe0
 8002d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e098      	b.n	8002e3a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e4      	bne.n	8002ce4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 ff1c 	bl	8003b58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002d20:	f003 fdf8 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a49      	ldr	r2, [pc, #292]	@ (8002e4c <HAL_ETH_Init+0x1ec>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0c9a      	lsrs	r2, r3, #18
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3a01      	subs	r2, #1
 8002d34:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f001 f90d 	bl	8003f58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d46:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d4a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d5a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	22e0      	movs	r2, #224	@ 0xe0
 8002d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e05d      	b.n	8002e3a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d86:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002d8a:	4b31      	ldr	r3, [pc, #196]	@ (8002e50 <HAL_ETH_Init+0x1f0>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6952      	ldr	r2, [r2, #20]
 8002d92:	0051      	lsls	r1, r2, #1
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d9e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f001 f975 	bl	8004092 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f001 f9bb 	bl	8004124 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	3305      	adds	r3, #5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	061a      	lsls	r2, r3, #24
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002dec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002dfa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002dfc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_ETH_Init+0x1f4>)
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_ETH_Init+0x1f8>)
 8002e22:	430b      	orrs	r3, r1
 8002e24:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2210      	movs	r2, #16
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58000400 	.word	0x58000400
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	ffff8001 	.word	0xffff8001
 8002e54:	0c020060 	.word	0x0c020060
 8002e58:	0c20c000 	.word	0x0c20c000

08002e5c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d165      	bne.n	8002f3a <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2223      	movs	r2, #35	@ 0x23
 8002e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f9e4 	bl	8003250 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e90:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ea0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ebc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002ed4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ed8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0202 	orr.w	r2, r2, #2
 8002efe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f18:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002f24:	430b      	orrs	r3, r1
 8002f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f2a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2223      	movs	r2, #35	@ 0x23
 8002f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f52:	2b23      	cmp	r3, #35	@ 0x23
 8002f54:	d165      	bne.n	8003022 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2223      	movs	r2, #35	@ 0x23
 8002f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f66:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_ETH_Stop_IT+0xec>)
 8002f70:	400b      	ands	r3, r1
 8002f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f76:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f82:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f92:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0202 	bic.w	r2, r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e00e      	b.n	800300a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	3212      	adds	r2, #18
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d9ed      	bls.n	8002fec <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2210      	movs	r2, #16
 800301a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	ffff2f3e 	.word	0xffff2f3e

08003034 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e03a      	b.n	80030ce <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305e:	2b23      	cmp	r3, #35	@ 0x23
 8003060:	d134      	bne.n	80030cc <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800306a:	2201      	movs	r2, #1
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 f8b6 	bl	80041e0 <ETH_Prepare_Tx_Descriptors>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e01f      	b.n	80030ce <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800308e:	f3bf 8f4f 	dsb	sy
}
 8003092:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d904      	bls.n	80030b0 <HAL_ETH_Transmit_IT+0x7c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	1f1a      	subs	r2, r3, #4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3106      	adds	r1, #6
 80030bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030c4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b088      	sub	sp, #32
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a2      	b.n	8003248 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003108:	2b23      	cmp	r3, #35	@ 0x23
 800310a:	d001      	beq.n	8003110 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e09b      	b.n	8003248 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	3212      	adds	r2, #18
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003126:	f1c3 0304 	rsb	r3, r3, #4
 800312a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800312c:	e064      	b.n	80031f8 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_ETH_ReadData+0x88>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d03a      	beq.n	80031d4 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f009 ff06 	bl	800cfc4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d902      	bls.n	80031e6 <HAL_ETH_ReadData+0x110>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3b04      	subs	r3, #4
 80031e4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	3212      	adds	r2, #18
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3301      	adds	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db06      	blt.n	800320e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d202      	bcs.n	800320e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d08f      	beq.n	800312e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f814 	bl	8003250 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800325c:	2301      	movs	r3, #1
 800325e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003264:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	3212      	adds	r2, #18
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003276:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003278:	e038      	b.n	80032ec <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f009 fe6c 	bl	800cf64 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	74fb      	strb	r3, [r7, #19]
 8003296:	e007      	b.n	80032a8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	461a      	mov	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	461a      	mov	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01e      	beq.n	80032ec <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	e003      	b.n	80032c8 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d902      	bls.n	80032da <ETH_UpdateDescriptor+0x8a>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3b04      	subs	r3, #4
 80032d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	3212      	adds	r2, #18
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <ETH_UpdateDescriptor+0xa8>
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c0      	bne.n	800327a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d01b      	beq.n	800333a <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800330c:	f3bf 8f5f 	dmb	sy
}
 8003310:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	18ca      	adds	r2, r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800332a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800333a:	bf00      	nop
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3318      	adds	r3, #24
 800334e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003360:	e047      	b.n	80033f2 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3b01      	subs	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3304      	adds	r3, #4
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d902      	bls.n	800338e <HAL_ETH_ReleaseTxPacket+0x4c>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	3b04      	subs	r3, #4
 800338c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02c      	beq.n	80033f2 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68d9      	ldr	r1, [r3, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db1f      	blt.n	80033ee <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3304      	adds	r3, #4
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f009 fe6a 	bl	800d094 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3304      	adds	r3, #4
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	2200      	movs	r2, #0
 80033cc:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	3301      	adds	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d902      	bls.n	80033e0 <HAL_ETH_ReleaseTxPacket+0x9e>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	3b04      	subs	r3, #4
 80033de:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033ec:	e001      	b.n	80033f2 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_ETH_ReleaseTxPacket+0xbc>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1b1      	bne.n	8003362 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003422:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003426:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003430:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8003436:	4b6d      	ldr	r3, [pc, #436]	@ (80035ec <HAL_ETH_IRQHandler+0x1e4>)
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_ETH_IRQHandler+0x60>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003458:	461a      	mov	r2, r3
 800345a:	f248 0340 	movw	r3, #32832	@ 0x8040
 800345e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f009 f928 	bl	800c6b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <HAL_ETH_IRQHandler+0x8c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003484:	461a      	mov	r2, r3
 8003486:	f248 0301 	movw	r3, #32769	@ 0x8001
 800348a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f009 f922 	bl	800c6d8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d047      	beq.n	800352e <HAL_ETH_IRQHandler+0x126>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d042      	beq.n	800352e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f043 0208 	orr.w	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01e      	beq.n	8003500 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ca:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80034ce:	f241 1302 	movw	r3, #4354	@ 0x1102
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80034ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	22e0      	movs	r2, #224	@ 0xe0
 80034fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80034fe:	e013      	b.n	8003528 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003508:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800350c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800351e:	461a      	mov	r2, r3
 8003520:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8003524:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f009 f8e5 	bl	800c6f8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800353e:	2b00      	cmp	r3, #0
 8003540:	d019      	beq.n	8003576 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	22e0      	movs	r2, #224	@ 0xe0
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f009 f8c5 	bl	800c6f8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00f      	beq.n	80035a0 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003588:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f82c 	bl	80035f0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00f      	beq.n	80035ca <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f821 	bl	8003604 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_ETH_IRQHandler+0x1e4>)
 80035d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f81b 	bl	8003618 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	58000080 	.word	0x58000080

080035f0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e03e      	b.n	80036cc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003656:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	055b      	lsls	r3, r3, #21
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f043 030c 	orr.w	r3, r3, #12
 800367a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800368e:	f7ff f93f 	bl	8002910 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003694:	e009      	b.n	80036aa <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003696:	f7ff f93b 	bl	8002910 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036a4:	d901      	bls.n	80036aa <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e010      	b.n	80036cc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ed      	bne.n	8003696 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e03c      	b.n	8003770 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80036fe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	055b      	lsls	r3, r3, #21
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 030c 	bic.w	r3, r3, #12
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <HAL_ETH_WritePHYRegister+0xa4>)
 8003736:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800373a:	4a0f      	ldr	r2, [pc, #60]	@ (8003778 <HAL_ETH_WritePHYRegister+0xa4>)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8003742:	f7ff f8e5 	bl	8002910 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003748:	e009      	b.n	800375e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800374a:	f7ff f8e1 	bl	8002910 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003758:	d901      	bls.n	800375e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e008      	b.n	8003770 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ed      	bne.n	800374a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40028000 	.word	0x40028000

0800377c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e1c3      	b.n	8003b18 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800381e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800390a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80039a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0e5b      	lsrs	r3, r3, #25
 80039da:	f003 021f 	and.w	r2, r3, #31
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003aa4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003ab4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e00b      	b.n	8003b50 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d105      	bne.n	8003b4e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f865 	bl	8003c14 <ETH_SetMACConfig>

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b72:	f002 fecf 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8003b76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003be4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d804      	bhi.n	8003b8a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e022      	b.n	8003bd0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d204      	bcs.n	8003b9c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e019      	b.n	8003bd0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_ETH_SetMDIOClockRange+0x94>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d915      	bls.n	8003bd0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d804      	bhi.n	8003bb6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e00c      	b.n	8003bd0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d804      	bhi.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	e003      	b.n	8003bd0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	02160ebf 	.word	0x02160ebf
 8003be8:	03938700 	.word	0x03938700
 8003bec:	05f5e0ff 	.word	0x05f5e0ff
 8003bf0:	08f0d17f 	.word	0x08f0d17f
 8003bf4:	0ee6b27f 	.word	0x0ee6b27f

08003bf8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003c26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	791b      	ldrb	r3, [r3, #4]
 8003c2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
 8003c34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	7b5b      	ldrb	r3, [r3, #13]
 8003c3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7b9b      	ldrb	r3, [r3, #14]
 8003c44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7bdb      	ldrb	r3, [r3, #15]
 8003c4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	7c12      	ldrb	r2, [r2, #16]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d102      	bne.n	8003c5e <ETH_SetMACConfig+0x4a>
 8003c58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c5c:	e000      	b.n	8003c60 <ETH_SetMACConfig+0x4c>
 8003c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	7c52      	ldrb	r2, [r2, #17]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d102      	bne.n	8003c70 <ETH_SetMACConfig+0x5c>
 8003c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c6e:	e000      	b.n	8003c72 <ETH_SetMACConfig+0x5e>
 8003c70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7c9b      	ldrb	r3, [r3, #18]
 8003c78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7f1b      	ldrb	r3, [r3, #28]
 8003c8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	7f5b      	ldrb	r3, [r3, #29]
 8003c94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	7f92      	ldrb	r2, [r2, #30]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d102      	bne.n	8003ca6 <ETH_SetMACConfig+0x92>
 8003ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ca4:	e000      	b.n	8003ca8 <ETH_SetMACConfig+0x94>
 8003ca6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ca8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	7fdb      	ldrb	r3, [r3, #31]
 8003cae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003cb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d102      	bne.n	8003cc2 <ETH_SetMACConfig+0xae>
 8003cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc0:	e000      	b.n	8003cc4 <ETH_SetMACConfig+0xb0>
 8003cc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003cc4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cd2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003cd4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b56      	ldr	r3, [pc, #344]	@ (8003e40 <ETH_SetMACConfig+0x22c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cfe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d102      	bne.n	8003d26 <ETH_SetMACConfig+0x112>
 8003d20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d24:	e000      	b.n	8003d28 <ETH_SetMACConfig+0x114>
 8003d26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4b42      	ldr	r3, [pc, #264]	@ (8003e44 <ETH_SetMACConfig+0x230>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <ETH_SetMACConfig+0x234>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d101      	bne.n	8003d86 <ETH_SetMACConfig+0x172>
 8003d82:	2280      	movs	r2, #128	@ 0x80
 8003d84:	e000      	b.n	8003d88 <ETH_SetMACConfig+0x174>
 8003d86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d9a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003db0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003db8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f023 0103 	bic.w	r1, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003dde:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d101      	bne.n	8003e02 <ETH_SetMACConfig+0x1ee>
 8003dfe:	2240      	movs	r2, #64	@ 0x40
 8003e00:	e000      	b.n	8003e04 <ETH_SetMACConfig+0x1f0>
 8003e02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003e0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003e16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003e24:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	00048083 	.word	0x00048083
 8003e44:	c0f88000 	.word	0xc0f88000
 8003e48:	fffffef0 	.word	0xfffffef0

08003e4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b38      	ldr	r3, [pc, #224]	@ (8003f44 <ETH_SetDMAConfig+0xf8>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	6811      	ldr	r1, [r2, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b1b      	ldrb	r3, [r3, #12]
 8003e84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4b2c      	ldr	r3, [pc, #176]	@ (8003f48 <ETH_SetDMAConfig+0xfc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ea4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7b5b      	ldrb	r3, [r3, #13]
 8003eaa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ebc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003ec0:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <ETH_SetDMAConfig+0x100>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ed0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	7d1b      	ldrb	r3, [r3, #20]
 8003edc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ede:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	7f5b      	ldrb	r3, [r3, #29]
 8003ee4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003ef6:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <ETH_SetDMAConfig+0x104>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f06:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7f1b      	ldrb	r3, [r3, #28]
 8003f0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f20:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <ETH_SetDMAConfig+0x108>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f34:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	ffff87fd 	.word	0xffff87fd
 8003f48:	ffff2ffe 	.word	0xffff2ffe
 8003f4c:	fffec000 	.word	0xfffec000
 8003f50:	ffc0efef 	.word	0xffc0efef
 8003f54:	7fc0ffff 	.word	0x7fc0ffff

08003f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0a4      	sub	sp, #144	@ 0x90
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f66:	2300      	movs	r3, #0
 8003f68:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003fb0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003fb4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004002:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800400c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004032:	2300      	movs	r3, #0
 8004034:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800403c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fde6 	bl	8003c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004048:	2301      	movs	r3, #1
 800404a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800404c:	2301      	movs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004062:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004066:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800406c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004070:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004078:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fee1 	bl	8003e4c <ETH_SetDMAConfig>
}
 800408a:	bf00      	nop
 800408c:	3790      	adds	r7, #144	@ 0x90
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e01d      	b.n	80040dc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	3206      	adds	r2, #6
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d9de      	bls.n	80040a0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f0:	461a      	mov	r2, r3
 80040f2:	2303      	movs	r3, #3
 80040f4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004104:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004114:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e023      	b.n	800417a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	3212      	adds	r2, #18
 8004170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d9d8      	bls.n	8004132 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a6:	461a      	mov	r2, r3
 80041a8:	2303      	movs	r3, #3
 80041aa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ba:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ce:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b091      	sub	sp, #68	@ 0x44
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3318      	adds	r3, #24
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800421e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004222:	d007      	beq.n	8004234 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004228:	3304      	adds	r3, #4
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004234:	2302      	movs	r3, #2
 8004236:	e266      	b.n	8004706 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d044      	beq.n	80042ce <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	4b75      	ldr	r3, [pc, #468]	@ (8004420 <ETH_Prepare_Tx_Descriptors+0x240>)
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004250:	431a      	orrs	r2, r3
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004270:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d027      	beq.n	80042ce <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	b29a      	uxth	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	431a      	orrs	r2, r3
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	431a      	orrs	r2, r3
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80042bc:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80042cc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00e      	beq.n	80042f8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	4b51      	ldr	r3, [pc, #324]	@ (8004424 <ETH_Prepare_Tx_Descriptors+0x244>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	6992      	ldr	r2, [r2, #24]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d036      	beq.n	800437e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800431c:	f3bf 8f5f 	dmb	sy
}
 8004320:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004330:	3301      	adds	r3, #1
 8004332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004336:	2b03      	cmp	r3, #3
 8004338:	d902      	bls.n	8004340 <ETH_Prepare_Tx_Descriptors+0x160>
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	3b04      	subs	r3, #4
 800433e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004348:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	3301      	adds	r3, #1
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800435c:	d10f      	bne.n	800437e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	6a3a      	ldr	r2, [r7, #32]
 8004362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004368:	f3bf 8f5f 	dmb	sy
}
 800436c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800437a:	2302      	movs	r3, #2
 800437c:	e1c3      	b.n	8004706 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800437e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004380:	3301      	adds	r3, #1
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004394:	4013      	ands	r3, r2
 8004396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004398:	6852      	ldr	r2, [r2, #4]
 800439a:	431a      	orrs	r2, r3
 800439c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80043a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80043ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <ETH_Prepare_Tx_Descriptors+0x248>)
 80043be:	4013      	ands	r3, r2
 80043c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c2:	6852      	ldr	r2, [r2, #4]
 80043c4:	0412      	lsls	r2, r2, #16
 80043c6:	431a      	orrs	r2, r3
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	e008      	b.n	80043e0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2200      	movs	r2, #0
 80043d2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b13      	ldr	r3, [pc, #76]	@ (8004428 <ETH_Prepare_Tx_Descriptors+0x248>)
 80043da:	4013      	ands	r3, r2
 80043dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043de:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d021      	beq.n	8004430 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	04db      	lsls	r3, r3, #19
 80043fa:	431a      	orrs	r2, r3
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	69d2      	ldr	r2, [r2, #28]
 800440c:	431a      	orrs	r2, r3
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e02e      	b.n	800447e <ETH_Prepare_Tx_Descriptors+0x29e>
 8004420:	ffff0000 	.word	0xffff0000
 8004424:	ffffc000 	.word	0xffffc000
 8004428:	c000ffff 	.word	0xc000ffff
 800442c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b7b      	ldr	r3, [pc, #492]	@ (8004624 <ETH_Prepare_Tx_Descriptors+0x444>)
 8004436:	4013      	ands	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	431a      	orrs	r2, r3
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	431a      	orrs	r2, r3
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	431a      	orrs	r2, r3
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80044b4:	f3bf 8f5f 	dmb	sy
}
 80044b8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80da 	beq.w	8004688 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80044e6:	e0cf      	b.n	8004688 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80044f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f6:	3301      	adds	r3, #1
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d902      	bls.n	8004506 <ETH_Prepare_Tx_Descriptors+0x326>
 8004500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004502:	3b04      	subs	r3, #4
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004528:	d007      	beq.n	800453a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800452a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452e:	3304      	adds	r3, #4
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d029      	beq.n	800458e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004546:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004548:	2300      	movs	r3, #0
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800454c:	e019      	b.n	8004582 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800454e:	f3bf 8f5f 	dmb	sy
}
 8004552:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004562:	3301      	adds	r3, #1
 8004564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004568:	2b03      	cmp	r3, #3
 800456a:	d902      	bls.n	8004572 <ETH_Prepare_Tx_Descriptors+0x392>
 800456c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456e:	3b04      	subs	r3, #4
 8004570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	3301      	adds	r3, #1
 8004580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	429a      	cmp	r2, r3
 8004588:	d3e1      	bcc.n	800454e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	e0bb      	b.n	8004706 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	3301      	adds	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800459a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004628 <ETH_Prepare_Tx_Descriptors+0x448>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ae:	6852      	ldr	r2, [r2, #4]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d8:	6852      	ldr	r2, [r2, #4]
 80045da:	0412      	lsls	r2, r2, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	e008      	b.n	80045f6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045f4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <ETH_Prepare_Tx_Descriptors+0x450>)
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	69d2      	ldr	r2, [r2, #28]
 800460e:	431a      	orrs	r2, r3
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	e020      	b.n	8004664 <ETH_Prepare_Tx_Descriptors+0x484>
 8004622:	bf00      	nop
 8004624:	ffff8000 	.word	0xffff8000
 8004628:	ffffc000 	.word	0xffffc000
 800462c:	c000ffff 	.word	0xc000ffff
 8004630:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4b36      	ldr	r3, [pc, #216]	@ (8004714 <ETH_Prepare_Tx_Descriptors+0x534>)
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	6852      	ldr	r2, [r2, #4]
 8004640:	431a      	orrs	r2, r3
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	431a      	orrs	r2, r3
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	3301      	adds	r3, #1
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800466a:	f3bf 8f5f 	dmb	sy
}
 800466e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f af2b 	bne.w	80044e8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	e005      	b.n	80046b2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	3304      	adds	r3, #4
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046d2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d4:	f3ef 8310 	mrs	r3, PRIMASK
 80046d8:	613b      	str	r3, [r7, #16]
  return(result);
 80046da:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	4413      	add	r3, r2
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3744      	adds	r7, #68	@ 0x44
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	ffff8000 	.word	0xffff8000

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	@ 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004726:	4b89      	ldr	r3, [pc, #548]	@ (800494c <HAL_GPIO_Init+0x234>)
 8004728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800472a:	e194      	b.n	8004a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8186 	beq.w	8004a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d005      	beq.n	800475c <HAL_GPIO_Init+0x44>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d130      	bne.n	80047be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004792:	2201      	movs	r2, #1
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0201 	and.w	r2, r3, #1
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d017      	beq.n	80047fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2203      	movs	r2, #3
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d123      	bne.n	800484e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	08da      	lsrs	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	08da      	lsrs	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0203 	and.w	r2, r3, #3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80e0 	beq.w	8004a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004890:	4b2f      	ldr	r3, [pc, #188]	@ (8004950 <HAL_GPIO_Init+0x238>)
 8004892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004896:	4a2e      	ldr	r2, [pc, #184]	@ (8004950 <HAL_GPIO_Init+0x238>)
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80048a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004950 <HAL_GPIO_Init+0x238>)
 80048a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ae:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_GPIO_Init+0x23c>)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a20      	ldr	r2, [pc, #128]	@ (8004958 <HAL_GPIO_Init+0x240>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d052      	beq.n	8004980 <HAL_GPIO_Init+0x268>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	@ (800495c <HAL_GPIO_Init+0x244>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d031      	beq.n	8004946 <HAL_GPIO_Init+0x22e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <HAL_GPIO_Init+0x248>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <HAL_GPIO_Init+0x22a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004964 <HAL_GPIO_Init+0x24c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d025      	beq.n	800493e <HAL_GPIO_Init+0x226>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <HAL_GPIO_Init+0x250>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <HAL_GPIO_Init+0x222>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <HAL_GPIO_Init+0x254>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d019      	beq.n	8004936 <HAL_GPIO_Init+0x21e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1a      	ldr	r2, [pc, #104]	@ (8004970 <HAL_GPIO_Init+0x258>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_Init+0x21a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_GPIO_Init+0x25c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00d      	beq.n	800492e <HAL_GPIO_Init+0x216>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_GPIO_Init+0x260>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0x212>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a17      	ldr	r2, [pc, #92]	@ (800497c <HAL_GPIO_Init+0x264>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_GPIO_Init+0x20e>
 8004922:	2309      	movs	r3, #9
 8004924:	e02d      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004926:	230a      	movs	r3, #10
 8004928:	e02b      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800492a:	2308      	movs	r3, #8
 800492c:	e029      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800492e:	2307      	movs	r3, #7
 8004930:	e027      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004932:	2306      	movs	r3, #6
 8004934:	e025      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004936:	2305      	movs	r3, #5
 8004938:	e023      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800493a:	2304      	movs	r3, #4
 800493c:	e021      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800493e:	2303      	movs	r3, #3
 8004940:	e01f      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004942:	2302      	movs	r3, #2
 8004944:	e01d      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004946:	2301      	movs	r3, #1
 8004948:	e01b      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800494a:	bf00      	nop
 800494c:	58000080 	.word	0x58000080
 8004950:	58024400 	.word	0x58024400
 8004954:	58000400 	.word	0x58000400
 8004958:	58020000 	.word	0x58020000
 800495c:	58020400 	.word	0x58020400
 8004960:	58020800 	.word	0x58020800
 8004964:	58020c00 	.word	0x58020c00
 8004968:	58021000 	.word	0x58021000
 800496c:	58021400 	.word	0x58021400
 8004970:	58021800 	.word	0x58021800
 8004974:	58021c00 	.word	0x58021c00
 8004978:	58022000 	.word	0x58022000
 800497c:	58022400 	.word	0x58022400
 8004980:	2300      	movs	r3, #0
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	f002 0203 	and.w	r2, r2, #3
 8004988:	0092      	lsls	r2, r2, #2
 800498a:	4093      	lsls	r3, r2
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004992:	4938      	ldr	r1, [pc, #224]	@ (8004a74 <HAL_GPIO_Init+0x35c>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	3302      	adds	r3, #2
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f ae63 	bne.w	800472c <HAL_GPIO_Init+0x14>
  }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3724      	adds	r7, #36	@ 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58000400 	.word	0x58000400

08004a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e001      	b.n	8004a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab8:	787b      	ldrb	r3, [r7, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004abe:	887a      	ldrh	r2, [r7, #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ac4:	e003      	b.n	8004ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f804 	bl	8004b0e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e08b      	b.n	8004c4e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd f920 	bl	8001d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d107      	bne.n	8004b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	e006      	b.n	8004bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d108      	bne.n	8004bc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	e007      	b.n	8004bd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_I2C_Init+0x134>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	02008000 	.word	0x02008000

08004c5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	817b      	strh	r3, [r7, #10]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	f040 80fd 	bne.w	8004e78 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_I2C_Master_Transmit+0x30>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0f6      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c94:	f7fd fe3c 	bl	8002910 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2319      	movs	r3, #25
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa16 	bl	80050d8 <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0e1      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2221      	movs	r2, #33	@ 0x21
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	893a      	ldrh	r2, [r7, #8]
 8004cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2bff      	cmp	r3, #255	@ 0xff
 8004ce6:	d906      	bls.n	8004cf6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	22ff      	movs	r2, #255	@ 0xff
 8004cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e007      	b.n	8004d06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d024      	beq.n	8004d58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	8979      	ldrh	r1, [r7, #10]
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e84 <HAL_I2C_Master_Transmit+0x228>)
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fc11 	bl	8005578 <I2C_TransferConfig>
 8004d56:	e066      	b.n	8004e26 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	4b48      	ldr	r3, [pc, #288]	@ (8004e84 <HAL_I2C_Master_Transmit+0x228>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fc06 	bl	8005578 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d6c:	e05b      	b.n	8004e26 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	6a39      	ldr	r1, [r7, #32]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fa09 	bl	800518a <I2C_WaitOnTXISFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07b      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d034      	beq.n	8004e26 <HAL_I2C_Master_Transmit+0x1ca>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d130      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f982 	bl	80050d8 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e04d      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2bff      	cmp	r3, #255	@ 0xff
 8004de6:	d90e      	bls.n	8004e06 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	22ff      	movs	r2, #255	@ 0xff
 8004dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	8979      	ldrh	r1, [r7, #10]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fbba 	bl	8005578 <I2C_TransferConfig>
 8004e04:	e00f      	b.n	8004e26 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	8979      	ldrh	r1, [r7, #10]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fba9 	bl	8005578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d19e      	bne.n	8004d6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	6a39      	ldr	r1, [r7, #32]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f9ef 	bl	8005218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e01a      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <HAL_I2C_Master_Transmit+0x22c>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	80002000 	.word	0x80002000
 8004e88:	fe00e800 	.word	0xfe00e800

08004e8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	461a      	mov	r2, r3
 8004e98:	460b      	mov	r3, r1
 8004e9a:	817b      	strh	r3, [r7, #10]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	f040 80db 	bne.w	8005064 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_I2C_Master_Receive+0x30>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e0d4      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fd24 	bl	8002910 <HAL_GetTick>
 8004ec8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2319      	movs	r3, #25
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f8fe 	bl	80050d8 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0bf      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2222      	movs	r2, #34	@ 0x22
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	893a      	ldrh	r2, [r7, #8]
 8004f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2bff      	cmp	r3, #255	@ 0xff
 8004f16:	d90e      	bls.n	8004f36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	22ff      	movs	r2, #255	@ 0xff
 8004f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	8979      	ldrh	r1, [r7, #10]
 8004f26:	4b52      	ldr	r3, [pc, #328]	@ (8005070 <HAL_I2C_Master_Receive+0x1e4>)
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fb22 	bl	8005578 <I2C_TransferConfig>
 8004f34:	e06d      	b.n	8005012 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	8979      	ldrh	r1, [r7, #10]
 8004f48:	4b49      	ldr	r3, [pc, #292]	@ (8005070 <HAL_I2C_Master_Receive+0x1e4>)
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fb11 	bl	8005578 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f56:	e05c      	b.n	8005012 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6a39      	ldr	r1, [r7, #32]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f99f 	bl	80052a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e07c      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d034      	beq.n	8005012 <HAL_I2C_Master_Receive+0x186>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d130      	bne.n	8005012 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2180      	movs	r1, #128	@ 0x80
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f88c 	bl	80050d8 <I2C_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e04d      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2bff      	cmp	r3, #255	@ 0xff
 8004fd2:	d90e      	bls.n	8004ff2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	22ff      	movs	r2, #255	@ 0xff
 8004fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	8979      	ldrh	r1, [r7, #10]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fac4 	bl	8005578 <I2C_TransferConfig>
 8004ff0:	e00f      	b.n	8005012 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005000:	b2da      	uxtb	r2, r3
 8005002:	8979      	ldrh	r1, [r7, #10]
 8005004:	2300      	movs	r3, #0
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fab3 	bl	8005578 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d19d      	bne.n	8004f58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	6a39      	ldr	r1, [r7, #32]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f8f9 	bl	8005218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01a      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2220      	movs	r2, #32
 8005036:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <HAL_I2C_Master_Receive+0x1e8>)
 8005044:	400b      	ands	r3, r1
 8005046:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	80002400 	.word	0x80002400
 8005074:	fe00e800 	.word	0xfe00e800

08005078 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d103      	bne.n	80050ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d007      	beq.n	80050cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	619a      	str	r2, [r3, #24]
  }
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e8:	e03b      	b.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f962 	bl	80053b8 <I2C_IsErrorOccurred>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e041      	b.n	8005182 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d02d      	beq.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fd fc03 	bl	8002910 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d122      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	429a      	cmp	r2, r3
 8005138:	d113      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e00f      	b.n	8005182 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d0b4      	beq.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005196:	e033      	b.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f90b 	bl	80053b8 <I2C_IsErrorOccurred>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e031      	b.n	8005210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d025      	beq.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b4:	f7fd fbac 	bl	8002910 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11a      	bne.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d013      	beq.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e007      	b.n	8005210 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d1c4      	bne.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005224:	e02f      	b.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8c4 	bl	80053b8 <I2C_IsErrorOccurred>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e02d      	b.n	8005296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fd fb69 	bl	8002910 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d11a      	bne.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d013      	beq.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e007      	b.n	8005296 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b20      	cmp	r3, #32
 8005292:	d1c8      	bne.n	8005226 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80052b0:	e071      	b.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f87e 	bl	80053b8 <I2C_IsErrorOccurred>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d13b      	bne.n	800534c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d138      	bne.n	800534c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d105      	bne.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d121      	bne.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2210      	movs	r2, #16
 8005308:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2204      	movs	r2, #4
 800530e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2220      	movs	r2, #32
 8005316:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b24      	ldr	r3, [pc, #144]	@ (80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005324:	400b      	ands	r3, r1
 8005326:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
 8005344:	e002      	b.n	800534c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800534c:	f7fd fae0 	bl	8002910 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d119      	bne.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d116      	bne.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00f      	beq.n	8005396 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d002      	beq.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d083      	beq.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	fe00e800 	.word	0xfe00e800

080053b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	@ 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d068      	beq.n	80054b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ec:	e049      	b.n	8005482 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d045      	beq.n	8005482 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fd fa8b 	bl	8002910 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_IsErrorOccurred+0x54>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d13a      	bne.n	8005482 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005416:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800541e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542e:	d121      	bne.n	8005474 <I2C_IsErrorOccurred+0xbc>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005436:	d01d      	beq.n	8005474 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b20      	cmp	r3, #32
 800543c:	d01a      	beq.n	8005474 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800544e:	f7fd fa5f 	bl	8002910 <HAL_GetTick>
 8005452:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005454:	e00e      	b.n	8005474 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005456:	f7fd fa5b 	bl	8002910 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b19      	cmp	r3, #25
 8005462:	d907      	bls.n	8005474 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005472:	e006      	b.n	8005482 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b20      	cmp	r3, #32
 8005480:	d1e9      	bne.n	8005456 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b20      	cmp	r3, #32
 800548e:	d003      	beq.n	8005498 <I2C_IsErrorOccurred+0xe0>
 8005490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0aa      	beq.n	80053ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2220      	movs	r2, #32
 80054a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f043 0308 	orr.w	r3, r3, #8
 80054f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800551c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01c      	beq.n	8005566 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fdaf 	bl	8005090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <I2C_IsErrorOccurred+0x1bc>)
 800553e:	400b      	ands	r3, r1
 8005540:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005566:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800556a:	4618      	mov	r0, r3
 800556c:	3728      	adds	r7, #40	@ 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	fe00e800 	.word	0xfe00e800

08005578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	4613      	mov	r3, r2
 8005588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005590:	7a7b      	ldrb	r3, [r7, #9]
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005598:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	0d5b      	lsrs	r3, r3, #21
 80055b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <I2C_TransferConfig+0x60>)
 80055b8:	430b      	orrs	r3, r1
 80055ba:	43db      	mvns	r3, r3
 80055bc:	ea02 0103 	and.w	r1, r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	03ff63ff 	.word	0x03ff63ff

080055dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d138      	bne.n	8005664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e032      	b.n	8005666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800562e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b20      	cmp	r3, #32
 8005686:	d139      	bne.n	80056fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005692:	2302      	movs	r3, #2
 8005694:	e033      	b.n	80056fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2224      	movs	r2, #36	@ 0x24
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af02      	add	r7, sp, #8
 8005710:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0fe      	b.n	800591a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7fc fcc7 	bl	80020c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f006 fbd6 	bl	800bef4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7c1a      	ldrb	r2, [r3, #16]
 8005750:	f88d 2000 	strb.w	r2, [sp]
 8005754:	3304      	adds	r3, #4
 8005756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005758:	f006 fb5a 	bl	800be10 <USB_CoreInit>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0d5      	b.n	800591a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f006 fbce 	bl	800bf16 <USB_SetCurrentMode>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0c6      	b.n	800591a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	e04a      	b.n	8005828 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3315      	adds	r3, #21
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3314      	adds	r3, #20
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	b298      	uxth	r0, r3
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	332e      	adds	r3, #46	@ 0x2e
 80057ce:	4602      	mov	r2, r0
 80057d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3318      	adds	r3, #24
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	331c      	adds	r3, #28
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057fa:	7bfa      	ldrb	r2, [r7, #15]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3320      	adds	r3, #32
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	3324      	adds	r3, #36	@ 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	3301      	adds	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	791b      	ldrb	r3, [r3, #4]
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3af      	bcc.n	8005792 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e044      	b.n	80058c2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005838:	7bfa      	ldrb	r2, [r7, #15]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800584e:	7bfa      	ldrb	r2, [r7, #15]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005860:	7bfa      	ldrb	r2, [r7, #15]
 8005862:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058a6:	7bfa      	ldrb	r2, [r7, #15]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	3301      	adds	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	791b      	ldrb	r3, [r3, #4]
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d3b5      	bcc.n	8005838 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7c1a      	ldrb	r2, [r3, #16]
 80058d4:	f88d 2000 	strb.w	r2, [sp]
 80058d8:	3304      	adds	r3, #4
 80058da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058dc:	f006 fb68 	bl	800bfb0 <USB_DevInit>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e013      	b.n	800591a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7b1b      	ldrb	r3, [r3, #12]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d102      	bne.n	800590e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f80b 	bl	8005924 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f006 fd23 	bl	800c35e <USB_DevDisconnect>

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005952:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <HAL_PCDEx_ActivateLPM+0x44>)
 8005954:	4313      	orrs	r3, r2
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	10000003 	.word	0x10000003

0800596c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_PWREx_ConfigSupply+0x70>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d00a      	beq.n	8005996 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005980:	4b16      	ldr	r3, [pc, #88]	@ (80059dc <HAL_PWREx_ConfigSupply+0x70>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d001      	beq.n	8005992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e01f      	b.n	80059d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e01d      	b.n	80059d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005996:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <HAL_PWREx_ConfigSupply+0x70>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f023 0207 	bic.w	r2, r3, #7
 800599e:	490f      	ldr	r1, [pc, #60]	@ (80059dc <HAL_PWREx_ConfigSupply+0x70>)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059a6:	f7fc ffb3 	bl	8002910 <HAL_GetTick>
 80059aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059ac:	e009      	b.n	80059c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059ae:	f7fc ffaf 	bl	8002910 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059bc:	d901      	bls.n	80059c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e007      	b.n	80059d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_PWREx_ConfigSupply+0x70>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ce:	d1ee      	bne.n	80059ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	58024800 	.word	0x58024800

080059e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80059e4:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a04      	ldr	r2, [pc, #16]	@ (80059fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80059ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ee:	60d3      	str	r3, [r2, #12]
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	58024800 	.word	0x58024800

08005a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08c      	sub	sp, #48	@ 0x30
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f000 bc48 	b.w	80062a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8088 	beq.w	8005b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a22:	4b99      	ldr	r3, [pc, #612]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a2c:	4b96      	ldr	r3, [pc, #600]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d007      	beq.n	8005a48 <HAL_RCC_OscConfig+0x48>
 8005a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3a:	2b18      	cmp	r3, #24
 8005a3c:	d111      	bne.n	8005a62 <HAL_RCC_OscConfig+0x62>
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d10c      	bne.n	8005a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b8f      	ldr	r3, [pc, #572]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d06d      	beq.n	8005b30 <HAL_RCC_OscConfig+0x130>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d169      	bne.n	8005b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f000 bc21 	b.w	80062a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x7a>
 8005a6c:	4b86      	ldr	r3, [pc, #536]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a85      	ldr	r2, [pc, #532]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e02e      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x9c>
 8005a82:	4b81      	ldr	r3, [pc, #516]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7d      	ldr	r2, [pc, #500]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xc0>
 8005aa6:	4b78      	ldr	r3, [pc, #480]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a77      	ldr	r2, [pc, #476]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b75      	ldr	r3, [pc, #468]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a74      	ldr	r2, [pc, #464]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xd8>
 8005ac0:	4b71      	ldr	r3, [pc, #452]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a70      	ldr	r2, [pc, #448]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b6e      	ldr	r3, [pc, #440]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fc ff16 	bl	8002910 <HAL_GetTick>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fc ff12 	bl	8002910 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	@ 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e3d4      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afa:	4b63      	ldr	r3, [pc, #396]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xe8>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc ff02 	bl	8002910 <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fc fefe 	bl	8002910 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	@ 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e3c0      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b22:	4b59      	ldr	r3, [pc, #356]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x110>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80ca 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b40:	4b51      	ldr	r3, [pc, #324]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d007      	beq.n	8005b66 <HAL_RCC_OscConfig+0x166>
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b18      	cmp	r3, #24
 8005b5a:	d156      	bne.n	8005c0a <HAL_RCC_OscConfig+0x20a>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d151      	bne.n	8005c0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b66:	4b48      	ldr	r3, [pc, #288]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x17e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e392      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b7e:	4b42      	ldr	r3, [pc, #264]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0219 	bic.w	r2, r3, #25
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	493f      	ldr	r1, [pc, #252]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc febe 	bl	8002910 <HAL_GetTick>
 8005b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fc feba 	bl	8002910 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e37c      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005baa:	4b37      	ldr	r3, [pc, #220]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb6:	f7fc fedb 	bl	8002970 <HAL_GetREVID>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d817      	bhi.n	8005bf4 <HAL_RCC_OscConfig+0x1f4>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b40      	cmp	r3, #64	@ 0x40
 8005bca:	d108      	bne.n	8005bde <HAL_RCC_OscConfig+0x1de>
 8005bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bdc:	e07a      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b2a      	ldr	r3, [pc, #168]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	4926      	ldr	r1, [pc, #152]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf2:	e06f      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b24      	ldr	r3, [pc, #144]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	4921      	ldr	r1, [pc, #132]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c08:	e064      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d047      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0219 	bic.w	r2, r3, #25
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	491a      	ldr	r1, [pc, #104]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fc fe74 	bl	8002910 <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c2c:	f7fc fe70 	bl	8002910 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e332      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c3e:	4b12      	ldr	r3, [pc, #72]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4a:	f7fc fe91 	bl	8002970 <HAL_GetREVID>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d819      	bhi.n	8005c8c <HAL_RCC_OscConfig+0x28c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d108      	bne.n	8005c72 <HAL_RCC_OscConfig+0x272>
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005c68:	4a07      	ldr	r2, [pc, #28]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e030      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
 8005c72:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	031b      	lsls	r3, r3, #12
 8005c80:	4901      	ldr	r1, [pc, #4]	@ (8005c88 <HAL_RCC_OscConfig+0x288>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	604b      	str	r3, [r1, #4]
 8005c86:	e025      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	061b      	lsls	r3, r3, #24
 8005c9a:	4997      	ldr	r1, [pc, #604]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	e018      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca2:	4b95      	ldr	r3, [pc, #596]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a94      	ldr	r2, [pc, #592]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fc fe2f 	bl	8002910 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fc fe2b 	bl	8002910 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e2ed      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f0      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a9 	beq.w	8005e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce2:	4b85      	ldr	r3, [pc, #532]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cec:	4b82      	ldr	r3, [pc, #520]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d007      	beq.n	8005d08 <HAL_RCC_OscConfig+0x308>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b18      	cmp	r3, #24
 8005cfc:	d13a      	bne.n	8005d74 <HAL_RCC_OscConfig+0x374>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d135      	bne.n	8005d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d08:	4b7b      	ldr	r3, [pc, #492]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_OscConfig+0x320>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b80      	cmp	r3, #128	@ 0x80
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e2c1      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d20:	f7fc fe26 	bl	8002970 <HAL_GetREVID>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d817      	bhi.n	8005d5e <HAL_RCC_OscConfig+0x35e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d108      	bne.n	8005d48 <HAL_RCC_OscConfig+0x348>
 8005d36:	4b70      	ldr	r3, [pc, #448]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d46:	e075      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d48:	4b6b      	ldr	r3, [pc, #428]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	069b      	lsls	r3, r3, #26
 8005d56:	4968      	ldr	r1, [pc, #416]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d5c:	e06a      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d5e:	4b66      	ldr	r3, [pc, #408]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	4962      	ldr	r1, [pc, #392]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d72:	e05f      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d042      	beq.n	8005e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc fdc2 	bl	8002910 <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d90:	f7fc fdbe 	bl	8002910 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e280      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005da2:	4b55      	ldr	r3, [pc, #340]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dae:	f7fc fddf 	bl	8002970 <HAL_GetREVID>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d817      	bhi.n	8005dec <HAL_RCC_OscConfig+0x3ec>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d108      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3d6>
 8005dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dd2:	6053      	str	r3, [r2, #4]
 8005dd4:	e02e      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
 8005dd6:	4b48      	ldr	r3, [pc, #288]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	069b      	lsls	r3, r3, #26
 8005de4:	4944      	ldr	r1, [pc, #272]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
 8005dea:	e023      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
 8005dec:	4b42      	ldr	r3, [pc, #264]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	493f      	ldr	r1, [pc, #252]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60cb      	str	r3, [r1, #12]
 8005e00:	e018      	b.n	8005e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e02:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fc fd7f 	bl	8002910 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e16:	f7fc fd7b 	bl	8002910 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e23d      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e28:	4b33      	ldr	r3, [pc, #204]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d036      	beq.n	8005eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e48:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fc fd5c 	bl	8002910 <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5c:	f7fc fd58 	bl	8002910 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e21a      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e6e:	4b22      	ldr	r3, [pc, #136]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x45c>
 8005e7a:	e018      	b.n	8005eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	f023 0301 	bic.w	r3, r3, #1
 8005e86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fc fd42 	bl	8002910 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e90:	f7fc fd3e 	bl	8002910 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e200      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d039      	beq.n	8005f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01c      	beq.n	8005efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ece:	f7fc fd1f 	bl	8002910 <HAL_GetTick>
 8005ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed6:	f7fc fd1b 	bl	8002910 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e1dd      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee8:	4b03      	ldr	r3, [pc, #12]	@ (8005ef8 <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x4d6>
 8005ef4:	e01b      	b.n	8005f2e <HAL_RCC_OscConfig+0x52e>
 8005ef6:	bf00      	nop
 8005ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005efc:	4b9b      	ldr	r3, [pc, #620]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a9a      	ldr	r2, [pc, #616]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f08:	f7fc fd02 	bl	8002910 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f10:	f7fc fcfe 	bl	8002910 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1c0      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f22:	4b92      	ldr	r3, [pc, #584]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8081 	beq.w	800603e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8006170 <HAL_RCC_OscConfig+0x770>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a8b      	ldr	r2, [pc, #556]	@ (8006170 <HAL_RCC_OscConfig+0x770>)
 8005f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f48:	f7fc fce2 	bl	8002910 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f50:	f7fc fcde 	bl	8002910 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b64      	cmp	r3, #100	@ 0x64
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e1a0      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f62:	4b83      	ldr	r3, [pc, #524]	@ (8006170 <HAL_RCC_OscConfig+0x770>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d106      	bne.n	8005f84 <HAL_RCC_OscConfig+0x584>
 8005f76:	4b7d      	ldr	r3, [pc, #500]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f82:	e02d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x5e0>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10c      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x5a6>
 8005f8c:	4b77      	ldr	r3, [pc, #476]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a76      	ldr	r2, [pc, #472]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f98:	4b74      	ldr	r3, [pc, #464]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9c:	4a73      	ldr	r2, [pc, #460]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa4:	e01c      	b.n	8005fe0 <HAL_RCC_OscConfig+0x5e0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x5c8>
 8005fae:	4b6f      	ldr	r3, [pc, #444]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fba:	4b6c      	ldr	r3, [pc, #432]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_OscConfig+0x5e0>
 8005fc8:	4b68      	ldr	r3, [pc, #416]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	4a67      	ldr	r2, [pc, #412]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd4:	4b65      	ldr	r3, [pc, #404]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd8:	4a64      	ldr	r2, [pc, #400]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8005fda:	f023 0304 	bic.w	r3, r3, #4
 8005fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fc fc92 	bl	8002910 <HAL_GetTick>
 8005fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fc fc8e 	bl	8002910 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e14e      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006006:	4b59      	ldr	r3, [pc, #356]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ee      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x5f0>
 8006012:	e014      	b.n	800603e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fc fc7c 	bl	8002910 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601a:	e00a      	b.n	8006032 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601c:	f7fc fc78 	bl	8002910 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e138      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006032:	4b4e      	ldr	r3, [pc, #312]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1ee      	bne.n	800601c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 812d 	beq.w	80062a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006048:	4b48      	ldr	r3, [pc, #288]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006050:	2b18      	cmp	r3, #24
 8006052:	f000 80bd 	beq.w	80061d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	2b02      	cmp	r3, #2
 800605c:	f040 809e 	bne.w	800619c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006060:	4b42      	ldr	r3, [pc, #264]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a41      	ldr	r2, [pc, #260]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800606a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fc fc50 	bl	8002910 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fc fc4c 	bl	8002910 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e10e      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006086:	4b39      	ldr	r3, [pc, #228]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006092:	4b36      	ldr	r3, [pc, #216]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006096:	4b37      	ldr	r3, [pc, #220]	@ (8006174 <HAL_RCC_OscConfig+0x774>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060a2:	0112      	lsls	r2, r2, #4
 80060a4:	430a      	orrs	r2, r1
 80060a6:	4931      	ldr	r1, [pc, #196]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	3b01      	subs	r3, #1
 80060b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	3b01      	subs	r3, #1
 80060bc:	025b      	lsls	r3, r3, #9
 80060be:	b29b      	uxth	r3, r3
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	3b01      	subs	r3, #1
 80060c8:	041b      	lsls	r3, r3, #16
 80060ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	3b01      	subs	r3, #1
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060dc:	4923      	ldr	r1, [pc, #140]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060e2:	4b22      	ldr	r3, [pc, #136]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	4a21      	ldr	r2, [pc, #132]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060ee:	4b1f      	ldr	r3, [pc, #124]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f2:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <HAL_RCC_OscConfig+0x778>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060fa:	00d2      	lsls	r2, r2, #3
 80060fc:	491b      	ldr	r1, [pc, #108]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006102:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	f023 020c 	bic.w	r2, r3, #12
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	4917      	ldr	r1, [pc, #92]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006110:	4313      	orrs	r3, r2
 8006112:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006114:	4b15      	ldr	r3, [pc, #84]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	f023 0202 	bic.w	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006120:	4912      	ldr	r1, [pc, #72]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006126:	4b11      	ldr	r3, [pc, #68]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	4a10      	ldr	r2, [pc, #64]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 800612c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006132:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	4a0d      	ldr	r2, [pc, #52]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800613e:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800614a:	4b08      	ldr	r3, [pc, #32]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	4a07      	ldr	r2, [pc, #28]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a04      	ldr	r2, [pc, #16]	@ (800616c <HAL_RCC_OscConfig+0x76c>)
 800615c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fc fbd5 	bl	8002910 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006168:	e011      	b.n	800618e <HAL_RCC_OscConfig+0x78e>
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	58024800 	.word	0x58024800
 8006174:	fffffc0c 	.word	0xfffffc0c
 8006178:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fc fbc8 	bl	8002910 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e08a      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800618e:	4b47      	ldr	r3, [pc, #284]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x77c>
 800619a:	e082      	b.n	80062a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619c:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a42      	ldr	r2, [pc, #264]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 80061a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fc fbb2 	bl	8002910 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b0:	f7fc fbae 	bl	8002910 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e070      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061c2:	4b3a      	ldr	r3, [pc, #232]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x7b0>
 80061ce:	e068      	b.n	80062a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061d0:	4b36      	ldr	r3, [pc, #216]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061d6:	4b35      	ldr	r3, [pc, #212]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d031      	beq.n	8006248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f003 0203 	and.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d12a      	bne.n	8006248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	429a      	cmp	r2, r3
 8006200:	d122      	bne.n	8006248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800620e:	429a      	cmp	r2, r3
 8006210:	d11a      	bne.n	8006248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	0a5b      	lsrs	r3, r3, #9
 8006216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006220:	429a      	cmp	r2, r3
 8006222:	d111      	bne.n	8006248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	0c1b      	lsrs	r3, r3, #16
 8006228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d108      	bne.n	8006248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e02b      	b.n	80062a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800624c:	4b17      	ldr	r3, [pc, #92]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 800624e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006250:	08db      	lsrs	r3, r3, #3
 8006252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006256:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d01f      	beq.n	80062a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006262:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	4a11      	ldr	r2, [pc, #68]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800626e:	f7fc fb4f 	bl	8002910 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006274:	bf00      	nop
 8006276:	f7fc fb4b 	bl	8002910 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	4293      	cmp	r3, r2
 8006280:	d0f9      	beq.n	8006276 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006282:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <HAL_RCC_OscConfig+0x8b0>)
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800628e:	00d2      	lsls	r2, r2, #3
 8006290:	4906      	ldr	r1, [pc, #24]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006292:	4313      	orrs	r3, r2
 8006294:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006296:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	4a04      	ldr	r2, [pc, #16]	@ (80062ac <HAL_RCC_OscConfig+0x8ac>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3730      	adds	r7, #48	@ 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	58024400 	.word	0x58024400
 80062b0:	ffff0007 	.word	0xffff0007

080062b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e19c      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062c8:	4b8a      	ldr	r3, [pc, #552]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d910      	bls.n	80062f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b87      	ldr	r3, [pc, #540]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 020f 	bic.w	r2, r3, #15
 80062de:	4985      	ldr	r1, [pc, #532]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b83      	ldr	r3, [pc, #524]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e184      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006310:	429a      	cmp	r2, r3
 8006312:	d908      	bls.n	8006326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006314:	4b78      	ldr	r3, [pc, #480]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4975      	ldr	r1, [pc, #468]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006322:	4313      	orrs	r3, r2
 8006324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d010      	beq.n	8006354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	4b70      	ldr	r3, [pc, #448]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800633e:	429a      	cmp	r2, r3
 8006340:	d908      	bls.n	8006354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006342:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	496a      	ldr	r1, [pc, #424]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006350:	4313      	orrs	r3, r2
 8006352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	4b64      	ldr	r3, [pc, #400]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800636c:	429a      	cmp	r2, r3
 800636e:	d908      	bls.n	8006382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006370:	4b61      	ldr	r3, [pc, #388]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	495e      	ldr	r1, [pc, #376]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 800637e:	4313      	orrs	r3, r2
 8006380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	4b59      	ldr	r3, [pc, #356]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639a:	429a      	cmp	r2, r3
 800639c:	d908      	bls.n	80063b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800639e:	4b56      	ldr	r3, [pc, #344]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4953      	ldr	r1, [pc, #332]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	4b4d      	ldr	r3, [pc, #308]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d908      	bls.n	80063de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063cc:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f023 020f 	bic.w	r2, r3, #15
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4947      	ldr	r1, [pc, #284]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d055      	beq.n	8006496 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ea:	4b43      	ldr	r3, [pc, #268]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4940      	ldr	r1, [pc, #256]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d107      	bne.n	8006414 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006404:	4b3c      	ldr	r3, [pc, #240]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d121      	bne.n	8006454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0f6      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d107      	bne.n	800642c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800641c:	4b36      	ldr	r3, [pc, #216]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d115      	bne.n	8006454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0ea      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d107      	bne.n	8006444 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006434:	4b30      	ldr	r3, [pc, #192]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0de      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006444:	4b2c      	ldr	r3, [pc, #176]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0d6      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006454:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f023 0207 	bic.w	r2, r3, #7
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4925      	ldr	r1, [pc, #148]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006466:	f7fc fa53 	bl	8002910 <HAL_GetTick>
 800646a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646c:	e00a      	b.n	8006484 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800646e:	f7fc fa4f 	bl	8002910 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0be      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	429a      	cmp	r2, r3
 8006494:	d1eb      	bne.n	800646e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d208      	bcs.n	80064c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b2:	4b11      	ldr	r3, [pc, #68]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f023 020f 	bic.w	r2, r3, #15
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	490e      	ldr	r1, [pc, #56]	@ (80064f8 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c4:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d214      	bcs.n	80064fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d2:	4b08      	ldr	r3, [pc, #32]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 020f 	bic.w	r2, r3, #15
 80064da:	4906      	ldr	r1, [pc, #24]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e2:	4b04      	ldr	r3, [pc, #16]	@ (80064f4 <HAL_RCC_ClockConfig+0x240>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d005      	beq.n	80064fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e086      	b.n	8006602 <HAL_RCC_ClockConfig+0x34e>
 80064f4:	52002000 	.word	0x52002000
 80064f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d010      	beq.n	800652a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	4b3f      	ldr	r3, [pc, #252]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006514:	429a      	cmp	r2, r3
 8006516:	d208      	bcs.n	800652a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006518:	4b3c      	ldr	r3, [pc, #240]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	4939      	ldr	r1, [pc, #228]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006526:	4313      	orrs	r3, r2
 8006528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d010      	beq.n	8006558 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	4b34      	ldr	r3, [pc, #208]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006542:	429a      	cmp	r2, r3
 8006544:	d208      	bcs.n	8006558 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006546:	4b31      	ldr	r3, [pc, #196]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	492e      	ldr	r1, [pc, #184]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006554:	4313      	orrs	r3, r2
 8006556:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	4b28      	ldr	r3, [pc, #160]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006570:	429a      	cmp	r2, r3
 8006572:	d208      	bcs.n	8006586 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006574:	4b25      	ldr	r3, [pc, #148]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4922      	ldr	r1, [pc, #136]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006582:	4313      	orrs	r3, r2
 8006584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69da      	ldr	r2, [r3, #28]
 8006596:	4b1d      	ldr	r3, [pc, #116]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800659e:	429a      	cmp	r2, r3
 80065a0:	d208      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065a2:	4b1a      	ldr	r3, [pc, #104]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	4917      	ldr	r1, [pc, #92]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b4:	f000 f834 	bl	8006620 <HAL_RCC_GetSysClockFreq>
 80065b8:	4602      	mov	r2, r0
 80065ba:	4b14      	ldr	r3, [pc, #80]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	4912      	ldr	r1, [pc, #72]	@ (8006610 <HAL_RCC_ClockConfig+0x35c>)
 80065c6:	5ccb      	ldrb	r3, [r1, r3]
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065d2:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <HAL_RCC_ClockConfig+0x358>)
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	4a0d      	ldr	r2, [pc, #52]	@ (8006610 <HAL_RCC_ClockConfig+0x35c>)
 80065dc:	5cd3      	ldrb	r3, [r2, r3]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_RCC_ClockConfig+0x360>)
 80065ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x364>)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065f2:	4b0a      	ldr	r3, [pc, #40]	@ (800661c <HAL_RCC_ClockConfig+0x368>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fb fde0 	bl	80021bc <HAL_InitTick>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	58024400 	.word	0x58024400
 8006610:	08022db4 	.word	0x08022db4
 8006614:	24000004 	.word	0x24000004
 8006618:	24000000 	.word	0x24000000
 800661c:	24000008 	.word	0x24000008

08006620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006620:	b480      	push	{r7}
 8006622:	b089      	sub	sp, #36	@ 0x24
 8006624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006626:	4bb3      	ldr	r3, [pc, #716]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800662e:	2b18      	cmp	r3, #24
 8006630:	f200 8155 	bhi.w	80068de <HAL_RCC_GetSysClockFreq+0x2be>
 8006634:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	080066a1 	.word	0x080066a1
 8006640:	080068df 	.word	0x080068df
 8006644:	080068df 	.word	0x080068df
 8006648:	080068df 	.word	0x080068df
 800664c:	080068df 	.word	0x080068df
 8006650:	080068df 	.word	0x080068df
 8006654:	080068df 	.word	0x080068df
 8006658:	080068df 	.word	0x080068df
 800665c:	080066c7 	.word	0x080066c7
 8006660:	080068df 	.word	0x080068df
 8006664:	080068df 	.word	0x080068df
 8006668:	080068df 	.word	0x080068df
 800666c:	080068df 	.word	0x080068df
 8006670:	080068df 	.word	0x080068df
 8006674:	080068df 	.word	0x080068df
 8006678:	080068df 	.word	0x080068df
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080068df 	.word	0x080068df
 8006684:	080068df 	.word	0x080068df
 8006688:	080068df 	.word	0x080068df
 800668c:	080068df 	.word	0x080068df
 8006690:	080068df 	.word	0x080068df
 8006694:	080068df 	.word	0x080068df
 8006698:	080068df 	.word	0x080068df
 800669c:	080066d3 	.word	0x080066d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a0:	4b94      	ldr	r3, [pc, #592]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066ac:	4b91      	ldr	r3, [pc, #580]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	08db      	lsrs	r3, r3, #3
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	4a90      	ldr	r2, [pc, #576]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
 80066bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066be:	e111      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066c0:	4b8d      	ldr	r3, [pc, #564]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066c2:	61bb      	str	r3, [r7, #24]
      break;
 80066c4:	e10e      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066c6:	4b8d      	ldr	r3, [pc, #564]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066c8:	61bb      	str	r3, [r7, #24]
      break;
 80066ca:	e10b      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066ce:	61bb      	str	r3, [r7, #24]
      break;
 80066d0:	e108      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d2:	4b88      	ldr	r3, [pc, #544]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066dc:	4b85      	ldr	r3, [pc, #532]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066e8:	4b82      	ldr	r3, [pc, #520]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066f2:	4b80      	ldr	r3, [pc, #512]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f6:	08db      	lsrs	r3, r3, #3
 80066f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80e1 	beq.w	80068d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2b02      	cmp	r3, #2
 800671a:	f000 8083 	beq.w	8006824 <HAL_RCC_GetSysClockFreq+0x204>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b02      	cmp	r3, #2
 8006722:	f200 80a1 	bhi.w	8006868 <HAL_RCC_GetSysClockFreq+0x248>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCC_GetSysClockFreq+0x114>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d056      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006732:	e099      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006734:	4b6f      	ldr	r3, [pc, #444]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d02d      	beq.n	800679c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006740:	4b6c      	ldr	r3, [pc, #432]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	08db      	lsrs	r3, r3, #3
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	4a6b      	ldr	r2, [pc, #428]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
 8006750:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676a:	4b62      	ldr	r3, [pc, #392]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677a:	ed97 6a02 	vldr	s12, [r7, #8]
 800677e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800679a:	e087      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b51      	ldr	r3, [pc, #324]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067de:	e065      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800690c <HAL_RCC_GetSysClockFreq+0x2ec>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b40      	ldr	r3, [pc, #256]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a02 	vldr	s12, [r7, #8]
 8006806:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006822:	e043      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b2f      	ldr	r3, [pc, #188]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a02 	vldr	s12, [r7, #8]
 800684a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006866:	e021      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800690c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b1e      	ldr	r3, [pc, #120]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a02 	vldr	s12, [r7, #8]
 800688e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068ac:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b0:	0a5b      	lsrs	r3, r3, #9
 80068b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068b6:	3301      	adds	r3, #1
 80068b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	ee07 3a90 	vmov	s15, r3
 80068c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d0:	ee17 3a90 	vmov	r3, s15
 80068d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068d6:	e005      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
      break;
 80068dc:	e002      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068e0:	61bb      	str	r3, [r7, #24]
      break;
 80068e2:	bf00      	nop
  }

  return sysclockfreq;
 80068e4:	69bb      	ldr	r3, [r7, #24]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3724      	adds	r7, #36	@ 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	03d09000 	.word	0x03d09000
 80068fc:	003d0900 	.word	0x003d0900
 8006900:	007a1200 	.word	0x007a1200
 8006904:	46000000 	.word	0x46000000
 8006908:	4c742400 	.word	0x4c742400
 800690c:	4a742400 	.word	0x4a742400
 8006910:	4af42400 	.word	0x4af42400

08006914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800691a:	f7ff fe81 	bl	8006620 <HAL_RCC_GetSysClockFreq>
 800691e:	4602      	mov	r2, r0
 8006920:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <HAL_RCC_GetHCLKFreq+0x50>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	490f      	ldr	r1, [pc, #60]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x54>)
 800692c:	5ccb      	ldrb	r3, [r1, r3]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006938:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <HAL_RCC_GetHCLKFreq+0x50>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x54>)
 8006942:	5cd3      	ldrb	r3, [r2, r3]
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	fa22 f303 	lsr.w	r3, r2, r3
 800694e:	4a07      	ldr	r2, [pc, #28]	@ (800696c <HAL_RCC_GetHCLKFreq+0x58>)
 8006950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006952:	4a07      	ldr	r2, [pc, #28]	@ (8006970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <HAL_RCC_GetHCLKFreq+0x58>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	58024400 	.word	0x58024400
 8006968:	08022db4 	.word	0x08022db4
 800696c:	24000004 	.word	0x24000004
 8006970:	24000000 	.word	0x24000000

08006974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006978:	f7ff ffcc 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 800697c:	4602      	mov	r2, r0
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	4904      	ldr	r1, [pc, #16]	@ (800699c <HAL_RCC_GetPCLK1Freq+0x28>)
 800698a:	5ccb      	ldrb	r3, [r1, r3]
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006994:	4618      	mov	r0, r3
 8006996:	bd80      	pop	{r7, pc}
 8006998:	58024400 	.word	0x58024400
 800699c:	08022db4 	.word	0x08022db4

080069a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069a4:	f7ff ffb6 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	4904      	ldr	r1, [pc, #16]	@ (80069c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069b6:	5ccb      	ldrb	r3, [r1, r3]
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	58024400 	.word	0x58024400
 80069c8:	08022db4 	.word	0x08022db4

080069cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	223f      	movs	r2, #63	@ 0x3f
 80069da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0207 	and.w	r2, r3, #7
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80069e8:	4b17      	ldr	r3, [pc, #92]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80069f4:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006a00:	4b11      	ldr	r3, [pc, #68]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006a18:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006a24:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <HAL_RCC_GetClockConfig+0x7c>)
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <HAL_RCC_GetClockConfig+0x80>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	601a      	str	r2, [r3, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	52002000 	.word	0x52002000

08006a50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a54:	b0ca      	sub	sp, #296	@ 0x128
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a74:	2500      	movs	r5, #0
 8006a76:	ea54 0305 	orrs.w	r3, r4, r5
 8006a7a:	d049      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a86:	d02f      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a8c:	d828      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a92:	d01a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a98:	d822      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa2:	d007      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006aa4:	e01c      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa6:	4bb8      	ldr	r3, [pc, #736]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	4ab7      	ldr	r2, [pc, #732]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab2:	e01a      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	3308      	adds	r3, #8
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fc8f 	bl	80083e0 <RCCEx_PLL2_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ac8:	e00f      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ace:	3328      	adds	r3, #40	@ 0x28
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 fd36 	bl	8008544 <RCCEx_PLL3_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ade:	e004      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006af2:	4ba5      	ldr	r3, [pc, #660]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b00:	4aa1      	ldr	r2, [pc, #644]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b02:	430b      	orrs	r3, r1
 8006b04:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b1c:	f04f 0900 	mov.w	r9, #0
 8006b20:	ea58 0309 	orrs.w	r3, r8, r9
 8006b24:	d047      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d82a      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b30:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b4d 	.word	0x08006b4d
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b71 	.word	0x08006b71
 8006b44:	08006b8f 	.word	0x08006b8f
 8006b48:	08006b8f 	.word	0x08006b8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4b8e      	ldr	r3, [pc, #568]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	4a8d      	ldr	r2, [pc, #564]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b58:	e01a      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	3308      	adds	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fc3c 	bl	80083e0 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b6e:	e00f      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3328      	adds	r3, #40	@ 0x28
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fce3 	bl	8008544 <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b84:	e004      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8c:	e000      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b98:	4b7b      	ldr	r3, [pc, #492]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b9c:	f023 0107 	bic.w	r1, r3, #7
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba6:	4a78      	ldr	r2, [pc, #480]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006bc2:	f04f 0b00 	mov.w	fp, #0
 8006bc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bca:	d04c      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	d030      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bdc:	d829      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006be0:	d02d      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006be4:	d825      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006be6:	2b80      	cmp	r3, #128	@ 0x80
 8006be8:	d018      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006bea:	2b80      	cmp	r3, #128	@ 0x80
 8006bec:	d821      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006bf2:	2b40      	cmp	r3, #64	@ 0x40
 8006bf4:	d007      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006bf6:	e01c      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf8:	4b63      	ldr	r3, [pc, #396]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	4a62      	ldr	r2, [pc, #392]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c04:	e01c      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 fbe6 	bl	80083e0 <RCCEx_PLL2_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c1a:	e011      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	3328      	adds	r3, #40	@ 0x28
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fc8d 	bl	8008544 <RCCEx_PLL3_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c30:	e006      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c48:	4b4f      	ldr	r3, [pc, #316]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c56:	4a4c      	ldr	r2, [pc, #304]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c5c:	e003      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006c72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006c76:	2300      	movs	r3, #0
 8006c78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006c7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006c80:	460b      	mov	r3, r1
 8006c82:	4313      	orrs	r3, r2
 8006c84:	d053      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c92:	d035      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c98:	d82e      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c9e:	d031      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ca0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ca4:	d828      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006caa:	d01a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cb0:	d822      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006cb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cba:	d007      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006cbc:	e01c      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cbe:	4b32      	ldr	r3, [pc, #200]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	4a31      	ldr	r2, [pc, #196]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cca:	e01c      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fb83 	bl	80083e0 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ce0:	e011      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	3328      	adds	r3, #40	@ 0x28
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 fc2a 	bl	8008544 <RCCEx_PLL3_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cf6:	e006      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d12:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d24:	e003      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006d3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	d056      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5a:	d038      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d60:	d831      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d66:	d034      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d6c:	d82b      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d72:	d01d      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d78:	d825      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d82:	d00a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d84:	e01f      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d8c:	4ba2      	ldr	r3, [pc, #648]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	4aa1      	ldr	r2, [pc, #644]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d98:	e01c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9e:	3308      	adds	r3, #8
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fb1c 	bl	80083e0 <RCCEx_PLL2_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006dae:	e011      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	3328      	adds	r3, #40	@ 0x28
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fbc3 	bl	8008544 <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dc4:	e006      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dec:	4a8a      	ldr	r2, [pc, #552]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d03a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e22:	2b30      	cmp	r3, #48	@ 0x30
 8006e24:	d01f      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006e26:	2b30      	cmp	r3, #48	@ 0x30
 8006e28:	d819      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d00c      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d815      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d111      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3a:	4b77      	ldr	r3, [pc, #476]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	4a76      	ldr	r2, [pc, #472]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e46:	e011      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 fac5 	bl	80083e0 <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e5c:	e006      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e74:	4b68      	ldr	r3, [pc, #416]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e82:	4a65      	ldr	r2, [pc, #404]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e84:	430b      	orrs	r3, r1
 8006e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e88:	e003      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d051      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ebc:	d035      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec2:	d82e      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ec8:	d031      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006eca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ece:	d828      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ed4:	d01a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eda:	d822      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ee6:	e01c      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a4a      	ldr	r2, [pc, #296]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e01c      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fa6e 	bl	80083e0 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	3328      	adds	r3, #40	@ 0x28
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 fb15 	bl	8008544 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f38:	4b37      	ldr	r3, [pc, #220]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f46:	4a34      	ldr	r2, [pc, #208]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d056      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f80:	d033      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f86:	d82c      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f8c:	d02f      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f92:	d826      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f98:	d02b      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f9e:	d820      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa4:	d012      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006faa:	d81a      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d022      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb4:	d115      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fa0e 	bl	80083e0 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fca:	e015      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd0:	3328      	adds	r3, #40	@ 0x28
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fab5 	bl	8008544 <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fe8:	e006      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fea:	bf00      	nop
 8006fec:	e004      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10d      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007004:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700e:	4a02      	ldr	r2, [pc, #8]	@ (8007018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6513      	str	r3, [r2, #80]	@ 0x50
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800703a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d055      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800704c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007050:	d033      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007056:	d82c      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d02f      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007062:	d826      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007068:	d02b      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800706a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800706e:	d820      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007074:	d012      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800707a:	d81a      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d022      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007084:	d115      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	3308      	adds	r3, #8
 800708c:	2101      	movs	r1, #1
 800708e:	4618      	mov	r0, r3
 8007090:	f001 f9a6 	bl	80083e0 <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800709a:	e015      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	3328      	adds	r3, #40	@ 0x28
 80070a2:	2101      	movs	r1, #1
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 fa4d 	bl	8008544 <RCCEx_PLL3_Config>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070b0:	e00a      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070ba:	bf00      	nop
 80070bc:	e004      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070be:	bf00      	nop
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070d0:	4ba3      	ldr	r3, [pc, #652]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070e0:	4a9f      	ldr	r2, [pc, #636]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e2:	430b      	orrs	r3, r1
 80070e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d037      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711a:	d00e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007120:	d816      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d018      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800712a:	d111      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4b8c      	ldr	r3, [pc, #560]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	4a8b      	ldr	r2, [pc, #556]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713e:	3308      	adds	r3, #8
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 f94c 	bl	80083e0 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007162:	4b7f      	ldr	r3, [pc, #508]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007166:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007170:	4a7b      	ldr	r2, [pc, #492]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6513      	str	r3, [r2, #80]	@ 0x50
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800718c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007196:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d039      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d81c      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80071aa:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071c1 	.word	0x080071c1
 80071b8:	080071cf 	.word	0x080071cf
 80071bc:	080071ed 	.word	0x080071ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c0:	4b67      	ldr	r3, [pc, #412]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a66      	ldr	r2, [pc, #408]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071cc:	e00f      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d2:	3308      	adds	r3, #8
 80071d4:	2102      	movs	r1, #2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 f902 	bl	80083e0 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071e2:	e004      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80071ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071f6:	4b5a      	ldr	r3, [pc, #360]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fa:	f023 0103 	bic.w	r1, r3, #3
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007204:	4a56      	ldr	r2, [pc, #344]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007206:	430b      	orrs	r3, r1
 8007208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800722a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	f000 809f 	beq.w	8007374 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007236:	4b4b      	ldr	r3, [pc, #300]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a4a      	ldr	r2, [pc, #296]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800723c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007242:	f7fb fb65 	bl	8002910 <HAL_GetTick>
 8007246:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724a:	e00b      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724c:	f7fb fb60 	bl	8002910 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b64      	cmp	r3, #100	@ 0x64
 800725a:	d903      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007262:	e005      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007264:	4b3f      	ldr	r3, [pc, #252]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ed      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007274:	2b00      	cmp	r3, #0
 8007276:	d179      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007278:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800727a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007284:	4053      	eors	r3, r2
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800728e:	4b34      	ldr	r3, [pc, #208]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007296:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800729a:	4b31      	ldr	r3, [pc, #196]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729e:	4a30      	ldr	r2, [pc, #192]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80072b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c6:	d118      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fb fb22 	bl	8002910 <HAL_GetTick>
 80072cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d0:	e00d      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fb fb1d 	bl	8002910 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d903      	bls.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80072ec:	e005      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0eb      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d129      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800730a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007312:	d10e      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007314:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007324:	091a      	lsrs	r2, r3, #4
 8007326:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007328:	4013      	ands	r3, r2
 800732a:	4a0d      	ldr	r2, [pc, #52]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732c:	430b      	orrs	r3, r1
 800732e:	6113      	str	r3, [r2, #16]
 8007330:	e005      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007340:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800734a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734e:	4a04      	ldr	r2, [pc, #16]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6713      	str	r3, [r2, #112]	@ 0x70
 8007354:	e00e      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800735e:	e009      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007360:	58024400 	.word	0x58024400
 8007364:	58024800 	.word	0x58024800
 8007368:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f002 0301 	and.w	r3, r2, #1
 8007380:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007384:	2300      	movs	r3, #0
 8007386:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800738a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800738e:	460b      	mov	r3, r1
 8007390:	4313      	orrs	r3, r2
 8007392:	f000 8089 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800739c:	2b28      	cmp	r3, #40	@ 0x28
 800739e:	d86b      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80073a0:	a201      	add	r2, pc, #4	@ (adr r2, 80073a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	08007481 	.word	0x08007481
 80073ac:	08007479 	.word	0x08007479
 80073b0:	08007479 	.word	0x08007479
 80073b4:	08007479 	.word	0x08007479
 80073b8:	08007479 	.word	0x08007479
 80073bc:	08007479 	.word	0x08007479
 80073c0:	08007479 	.word	0x08007479
 80073c4:	08007479 	.word	0x08007479
 80073c8:	0800744d 	.word	0x0800744d
 80073cc:	08007479 	.word	0x08007479
 80073d0:	08007479 	.word	0x08007479
 80073d4:	08007479 	.word	0x08007479
 80073d8:	08007479 	.word	0x08007479
 80073dc:	08007479 	.word	0x08007479
 80073e0:	08007479 	.word	0x08007479
 80073e4:	08007479 	.word	0x08007479
 80073e8:	08007463 	.word	0x08007463
 80073ec:	08007479 	.word	0x08007479
 80073f0:	08007479 	.word	0x08007479
 80073f4:	08007479 	.word	0x08007479
 80073f8:	08007479 	.word	0x08007479
 80073fc:	08007479 	.word	0x08007479
 8007400:	08007479 	.word	0x08007479
 8007404:	08007479 	.word	0x08007479
 8007408:	08007481 	.word	0x08007481
 800740c:	08007479 	.word	0x08007479
 8007410:	08007479 	.word	0x08007479
 8007414:	08007479 	.word	0x08007479
 8007418:	08007479 	.word	0x08007479
 800741c:	08007479 	.word	0x08007479
 8007420:	08007479 	.word	0x08007479
 8007424:	08007479 	.word	0x08007479
 8007428:	08007481 	.word	0x08007481
 800742c:	08007479 	.word	0x08007479
 8007430:	08007479 	.word	0x08007479
 8007434:	08007479 	.word	0x08007479
 8007438:	08007479 	.word	0x08007479
 800743c:	08007479 	.word	0x08007479
 8007440:	08007479 	.word	0x08007479
 8007444:	08007479 	.word	0x08007479
 8007448:	08007481 	.word	0x08007481
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007450:	3308      	adds	r3, #8
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f000 ffc3 	bl	80083e0 <RCCEx_PLL2_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007466:	3328      	adds	r3, #40	@ 0x28
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f001 f86a 	bl	8008544 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800748a:	4bbf      	ldr	r3, [pc, #764]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007498:	4abb      	ldr	r2, [pc, #748]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800749a:	430b      	orrs	r3, r1
 800749c:	6553      	str	r3, [r2, #84]	@ 0x54
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 0302 	and.w	r3, r2, #2
 80074b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80074be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d041      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d824      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	08007525 	.word	0x08007525
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	08007507 	.word	0x08007507
 80074e4:	08007525 	.word	0x08007525
 80074e8:	08007525 	.word	0x08007525
 80074ec:	08007525 	.word	0x08007525
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	3308      	adds	r3, #8
 80074f6:	2101      	movs	r1, #1
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 ff71 	bl	80083e0 <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007504:	e00f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750a:	3328      	adds	r3, #40	@ 0x28
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f818 	bl	8008544 <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800752e:	4b96      	ldr	r3, [pc, #600]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	f023 0107 	bic.w	r1, r3, #7
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800753c:	4a92      	ldr	r2, [pc, #584]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800753e:	430b      	orrs	r3, r1
 8007540:	6553      	str	r3, [r2, #84]	@ 0x54
 8007542:	e003      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f002 0304 	and.w	r3, r2, #4
 8007558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800755c:	2300      	movs	r3, #0
 800755e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007562:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d044      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007574:	2b05      	cmp	r3, #5
 8007576:	d825      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075cd 	.word	0x080075cd
 8007584:	08007599 	.word	0x08007599
 8007588:	080075af 	.word	0x080075af
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759c:	3308      	adds	r3, #8
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 ff1d 	bl	80083e0 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e00f      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	3328      	adds	r3, #40	@ 0x28
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 ffc4 	bl	8008544 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80075cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075da:	f023 0107 	bic.w	r1, r3, #7
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e6:	4a68      	ldr	r2, [pc, #416]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f002 0320 	and.w	r3, r2, #32
 8007602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007606:	2300      	movs	r3, #0
 8007608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800760c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007610:	460b      	mov	r3, r1
 8007612:	4313      	orrs	r3, r2
 8007614:	d055      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007622:	d033      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007628:	d82c      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d02f      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007634:	d826      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800763a:	d02b      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800763c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007640:	d820      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007646:	d012      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800764c:	d81a      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d022      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007656:	d115      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765c:	3308      	adds	r3, #8
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f000 febd 	bl	80083e0 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800766c:	e015      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800766e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007672:	3328      	adds	r3, #40	@ 0x28
 8007674:	2102      	movs	r1, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f000 ff64 	bl	8008544 <RCCEx_PLL3_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007682:	e00a      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800768a:	e006      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800768c:	bf00      	nop
 800768e:	e004      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a2:	4b39      	ldr	r3, [pc, #228]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b2:	4a35      	ldr	r2, [pc, #212]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d058      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076ee:	d033      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80076f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076f4:	d82c      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d02f      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	d826      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007706:	d02b      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800770c:	d820      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800770e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007718:	d81a      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d022      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800771e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007722:	d115      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	3308      	adds	r3, #8
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fe57 	bl	80083e0 <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007738:	e015      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	3328      	adds	r3, #40	@ 0x28
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fefe 	bl	8008544 <RCCEx_PLL3_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800774e:	e00a      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007756:	e006      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007758:	bf00      	nop
 800775a:	e004      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800775c:	bf00      	nop
 800775e:	e002      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10e      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800776e:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007772:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800777e:	4a02      	ldr	r2, [pc, #8]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007780:	430b      	orrs	r3, r1
 8007782:	6593      	str	r3, [r2, #88]	@ 0x58
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80077a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d055      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077c0:	d033      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80077c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077c6:	d82c      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077cc:	d02f      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80077ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d2:	d826      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077d8:	d02b      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80077da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077de:	d820      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077e4:	d012      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80077e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ea:	d81a      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d022      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80077f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f4:	d115      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fa:	3308      	adds	r3, #8
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fdee 	bl	80083e0 <RCCEx_PLL2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800780a:	e015      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007810:	3328      	adds	r3, #40	@ 0x28
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fe95 	bl	8008544 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007820:	e00a      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007840:	4ba1      	ldr	r3, [pc, #644]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007850:	4a9d      	ldr	r2, [pc, #628]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007852:	430b      	orrs	r3, r1
 8007854:	6593      	str	r3, [r2, #88]	@ 0x58
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800785c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f002 0308 	and.w	r3, r2, #8
 800786c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007876:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d01e      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788c:	d10c      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3328      	adds	r3, #40	@ 0x28
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fe54 	bl	8008544 <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078a8:	4b87      	ldr	r3, [pc, #540]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078b8:	4a83      	ldr	r2, [pc, #524]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f002 0310 	and.w	r3, r2, #16
 80078ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d01e      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ea:	d10c      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	3328      	adds	r3, #40	@ 0x28
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fe25 	bl	8008544 <RCCEx_PLL3_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007906:	4b70      	ldr	r3, [pc, #448]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007916:	4a6c      	ldr	r2, [pc, #432]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007918:	430b      	orrs	r3, r1
 800791a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800792c:	2300      	movs	r3, #0
 800792e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007932:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007936:	460b      	mov	r3, r1
 8007938:	4313      	orrs	r3, r2
 800793a:	d03e      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007948:	d022      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800794a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800794e:	d81b      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007958:	d00b      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800795a:	e015      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	3308      	adds	r3, #8
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fd3b 	bl	80083e0 <RCCEx_PLL2_Config>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007970:	e00f      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	3328      	adds	r3, #40	@ 0x28
 8007978:	2102      	movs	r1, #2
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fde2 	bl	8008544 <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007986:	e004      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800799a:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800799c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80079aa:	4a47      	ldr	r2, [pc, #284]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80079c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c8:	2300      	movs	r3, #0
 80079ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80079d0:	460b      	mov	r3, r1
 80079d2:	4313      	orrs	r3, r2
 80079d4:	d03b      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079e2:	d01f      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80079e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079e8:	d818      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80079ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ee:	d003      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80079f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079f4:	d007      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80079f6:	e011      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f8:	4b33      	ldr	r3, [pc, #204]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	4a32      	ldr	r2, [pc, #200]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a04:	e00f      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0a:	3328      	adds	r3, #40	@ 0x28
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fd98 	bl	8008544 <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a1a:	e004      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a22:	e000      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a2e:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3e:	4a22      	ldr	r2, [pc, #136]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a64:	460b      	mov	r3, r1
 8007a66:	4313      	orrs	r3, r2
 8007a68:	d034      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a78:	d007      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a7a:	e011      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7c:	4b12      	ldr	r3, [pc, #72]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	4a11      	ldr	r2, [pc, #68]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a88:	e00e      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8e:	3308      	adds	r3, #8
 8007a90:	2102      	movs	r1, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fca4 	bl	80083e0 <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a9e:	e003      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10d      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ab0:	4b05      	ldr	r3, [pc, #20]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007abe:	4a02      	ldr	r2, [pc, #8]	@ (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ac4:	e006      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007ac6:	bf00      	nop
 8007ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ae6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d00c      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af4:	3328      	adds	r3, #40	@ 0x28
 8007af6:	2102      	movs	r1, #2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fd23 	bl	8008544 <RCCEx_PLL3_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b18:	2300      	movs	r3, #0
 8007b1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b20:	460b      	mov	r3, r1
 8007b22:	4313      	orrs	r3, r2
 8007b24:	d038      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b32:	d018      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b38:	d811      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3e:	d014      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b44:	d80b      	bhi.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b4e:	d106      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b50:	4bc3      	ldr	r3, [pc, #780]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	4ac2      	ldr	r2, [pc, #776]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b5c:	e008      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b66:	bf00      	nop
 8007b68:	e002      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b6a:	bf00      	nop
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b78:	4bb9      	ldr	r3, [pc, #740]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b88:	4ab5      	ldr	r2, [pc, #724]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b8e:	e003      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007baa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bb4:	4baa      	ldr	r3, [pc, #680]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bc2:	4aa7      	ldr	r2, [pc, #668]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007bd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007bde:	460b      	mov	r3, r1
 8007be0:	4313      	orrs	r3, r2
 8007be2:	d00a      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007be4:	4b9e      	ldr	r3, [pc, #632]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bf4:	4a9a      	ldr	r2, [pc, #616]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c08:	2300      	movs	r3, #0
 8007c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d009      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c16:	4b92      	ldr	r3, [pc, #584]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c24:	4a8e      	ldr	r2, [pc, #568]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c38:	2300      	movs	r3, #0
 8007c3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007c40:	460b      	mov	r3, r1
 8007c42:	4313      	orrs	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c46:	4b86      	ldr	r3, [pc, #536]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	4a85      	ldr	r2, [pc, #532]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c50:	6113      	str	r3, [r2, #16]
 8007c52:	4b83      	ldr	r3, [pc, #524]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c54:	6919      	ldr	r1, [r3, #16]
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007c5e:	4a80      	ldr	r2, [pc, #512]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c72:	2300      	movs	r3, #0
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c80:	4b77      	ldr	r3, [pc, #476]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c84:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	4a74      	ldr	r2, [pc, #464]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c90:	430b      	orrs	r3, r1
 8007c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007caa:	460b      	mov	r3, r1
 8007cac:	4313      	orrs	r3, r2
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc0:	4a67      	ldr	r2, [pc, #412]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d011      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fb78 	bl	80083e0 <RCCEx_PLL2_Config>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	6239      	str	r1, [r7, #32]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d011      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	3308      	adds	r3, #8
 8007d28:	2101      	movs	r1, #1
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fb58 	bl	80083e0 <RCCEx_PLL2_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	61b9      	str	r1, [r7, #24]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d011      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d66:	3308      	adds	r3, #8
 8007d68:	2102      	movs	r1, #2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fb38 	bl	80083e0 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6139      	str	r1, [r7, #16]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	d011      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da6:	3328      	adds	r3, #40	@ 0x28
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fbca 	bl	8008544 <RCCEx_PLL3_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	2100      	movs	r1, #0
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d011      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	3328      	adds	r3, #40	@ 0x28
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fbaa 	bl	8008544 <RCCEx_PLL3_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d011      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e26:	3328      	adds	r3, #40	@ 0x28
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fb8a 	bl	8008544 <RCCEx_PLL3_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007e46:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e60:	58024400 	.word	0x58024400

08007e64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e68:	f7fe fd54 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	4904      	ldr	r1, [pc, #16]	@ (8007e8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e7a:	5ccb      	ldrb	r3, [r1, r3]
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	08022db4 	.word	0x08022db4

08007e90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	@ 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e98:	4ba1      	ldr	r3, [pc, #644]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007ea2:	4b9f      	ldr	r3, [pc, #636]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	0b1b      	lsrs	r3, r3, #12
 8007ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007eae:	4b9c      	ldr	r3, [pc, #624]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007eba:	4b99      	ldr	r3, [pc, #612]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebe:	08db      	lsrs	r3, r3, #3
 8007ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8111 	beq.w	8008100 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	f000 8083 	beq.w	8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f200 80a1 	bhi.w	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d056      	beq.n	8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007efa:	e099      	b.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007efc:	4b88      	ldr	r3, [pc, #544]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02d      	beq.n	8007f64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f08:	4b85      	ldr	r3, [pc, #532]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	08db      	lsrs	r3, r3, #3
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	4a84      	ldr	r2, [pc, #528]	@ (8008124 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
 8007f18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b7b      	ldr	r3, [pc, #492]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f62:	e087      	b.n	8008074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800812c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b6a      	ldr	r3, [pc, #424]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa6:	e065      	b.n	8008074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b59      	ldr	r3, [pc, #356]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fea:	e043      	b.n	8008074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b48      	ldr	r3, [pc, #288]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008012:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802e:	e021      	b.n	8008074 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008042:	4b37      	ldr	r3, [pc, #220]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	ed97 6a03 	vldr	s12, [r7, #12]
 8008056:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008128 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008072:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008074:	4b2a      	ldr	r3, [pc, #168]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	0a5b      	lsrs	r3, r3, #9
 800807a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800808a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809a:	ee17 2a90 	vmov	r2, s15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80080a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c8:	ee17 2a90 	vmov	r2, s15
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80080d0:	4b13      	ldr	r3, [pc, #76]	@ (8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	0e1b      	lsrs	r3, r3, #24
 80080d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f6:	ee17 2a90 	vmov	r2, s15
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080fe:	e008      	b.n	8008112 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
}
 8008112:	bf00      	nop
 8008114:	3724      	adds	r7, #36	@ 0x24
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	58024400 	.word	0x58024400
 8008124:	03d09000 	.word	0x03d09000
 8008128:	46000000 	.word	0x46000000
 800812c:	4c742400 	.word	0x4c742400
 8008130:	4a742400 	.word	0x4a742400
 8008134:	4af42400 	.word	0x4af42400

08008138 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	@ 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008140:	4ba1      	ldr	r3, [pc, #644]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800814a:	4b9f      	ldr	r3, [pc, #636]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	0d1b      	lsrs	r3, r3, #20
 8008150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008154:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008156:	4b9c      	ldr	r3, [pc, #624]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008162:	4b99      	ldr	r3, [pc, #612]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008166:	08db      	lsrs	r3, r3, #3
 8008168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8111 	beq.w	80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b02      	cmp	r3, #2
 800818a:	f000 8083 	beq.w	8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b02      	cmp	r3, #2
 8008192:	f200 80a1 	bhi.w	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d056      	beq.n	8008250 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081a2:	e099      	b.n	80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a4:	4b88      	ldr	r3, [pc, #544]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02d      	beq.n	800820c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081b0:	4b85      	ldr	r3, [pc, #532]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	08db      	lsrs	r3, r3, #3
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	4a84      	ldr	r2, [pc, #528]	@ (80083cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
 80081c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b7b      	ldr	r3, [pc, #492]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800820a:	e087      	b.n	800831c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b6a      	ldr	r3, [pc, #424]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008232:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800824e:	e065      	b.n	800831c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b59      	ldr	r3, [pc, #356]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	ed97 6a03 	vldr	s12, [r7, #12]
 8008276:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008292:	e043      	b.n	800831c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a6:	4b48      	ldr	r3, [pc, #288]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d6:	e021      	b.n	800831c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ea:	4b37      	ldr	r3, [pc, #220]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800831a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800831c:	4b2a      	ldr	r3, [pc, #168]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008320:	0a5b      	lsrs	r3, r3, #9
 8008322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008336:	edd7 6a07 	vldr	s13, [r7, #28]
 800833a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008342:	ee17 2a90 	vmov	r2, s15
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800834a:	4b1f      	ldr	r3, [pc, #124]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834e:	0c1b      	lsrs	r3, r3, #16
 8008350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008354:	ee07 3a90 	vmov	s15, r3
 8008358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008360:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008364:	edd7 6a07 	vldr	s13, [r7, #28]
 8008368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800836c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008370:	ee17 2a90 	vmov	r2, s15
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008378:	4b13      	ldr	r3, [pc, #76]	@ (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	0e1b      	lsrs	r3, r3, #24
 800837e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800838e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008392:	edd7 6a07 	vldr	s13, [r7, #28]
 8008396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839e:	ee17 2a90 	vmov	r2, s15
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80083a6:	e008      	b.n	80083ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	bf00      	nop
 80083bc:	3724      	adds	r7, #36	@ 0x24
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	58024400 	.word	0x58024400
 80083cc:	03d09000 	.word	0x03d09000
 80083d0:	46000000 	.word	0x46000000
 80083d4:	4c742400 	.word	0x4c742400
 80083d8:	4a742400 	.word	0x4a742400
 80083dc:	4af42400 	.word	0x4af42400

080083e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083ee:	4b53      	ldr	r3, [pc, #332]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d101      	bne.n	80083fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e099      	b.n	8008532 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083fe:	4b4f      	ldr	r3, [pc, #316]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a4e      	ldr	r2, [pc, #312]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008404:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800840a:	f7fa fa81 	bl	8002910 <HAL_GetTick>
 800840e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008410:	e008      	b.n	8008424 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008412:	f7fa fa7d 	bl	8002910 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e086      	b.n	8008532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008424:	4b45      	ldr	r3, [pc, #276]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1f0      	bne.n	8008412 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008430:	4b42      	ldr	r3, [pc, #264]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	031b      	lsls	r3, r3, #12
 800843e:	493f      	ldr	r1, [pc, #252]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008440:	4313      	orrs	r3, r2
 8008442:	628b      	str	r3, [r1, #40]	@ 0x28
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	3b01      	subs	r3, #1
 800844a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	3b01      	subs	r3, #1
 8008454:	025b      	lsls	r3, r3, #9
 8008456:	b29b      	uxth	r3, r3
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	3b01      	subs	r3, #1
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	3b01      	subs	r3, #1
 800846e:	061b      	lsls	r3, r3, #24
 8008470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008474:	4931      	ldr	r1, [pc, #196]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008476:	4313      	orrs	r3, r2
 8008478:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800847a:	4b30      	ldr	r3, [pc, #192]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	492d      	ldr	r1, [pc, #180]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008488:	4313      	orrs	r3, r2
 800848a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800848c:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	f023 0220 	bic.w	r2, r3, #32
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	4928      	ldr	r1, [pc, #160]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a2:	4a26      	ldr	r2, [pc, #152]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084a4:	f023 0310 	bic.w	r3, r3, #16
 80084a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084aa:	4b24      	ldr	r3, [pc, #144]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ae:	4b24      	ldr	r3, [pc, #144]	@ (8008540 <RCCEx_PLL2_Config+0x160>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	69d2      	ldr	r2, [r2, #28]
 80084b6:	00d2      	lsls	r2, r2, #3
 80084b8:	4920      	ldr	r1, [pc, #128]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084be:	4b1f      	ldr	r3, [pc, #124]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c2:	4a1e      	ldr	r2, [pc, #120]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084c4:	f043 0310 	orr.w	r3, r3, #16
 80084c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084d0:	4b1a      	ldr	r3, [pc, #104]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	4a19      	ldr	r2, [pc, #100]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084dc:	e00f      	b.n	80084fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d106      	bne.n	80084f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80084e4:	4b15      	ldr	r3, [pc, #84]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	4a14      	ldr	r2, [pc, #80]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084f0:	e005      	b.n	80084fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084f2:	4b12      	ldr	r3, [pc, #72]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	4a11      	ldr	r2, [pc, #68]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 80084f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084fe:	4b0f      	ldr	r3, [pc, #60]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a0e      	ldr	r2, [pc, #56]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800850a:	f7fa fa01 	bl	8002910 <HAL_GetTick>
 800850e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008510:	e008      	b.n	8008524 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008512:	f7fa f9fd 	bl	8002910 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008524:	4b05      	ldr	r3, [pc, #20]	@ (800853c <RCCEx_PLL2_Config+0x15c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0f0      	beq.n	8008512 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	58024400 	.word	0x58024400
 8008540:	ffff0007 	.word	0xffff0007

08008544 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008552:	4b53      	ldr	r3, [pc, #332]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	2b03      	cmp	r3, #3
 800855c:	d101      	bne.n	8008562 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e099      	b.n	8008696 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008562:	4b4f      	ldr	r3, [pc, #316]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a4e      	ldr	r2, [pc, #312]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800856c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856e:	f7fa f9cf 	bl	8002910 <HAL_GetTick>
 8008572:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008574:	e008      	b.n	8008588 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008576:	f7fa f9cb 	bl	8002910 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e086      	b.n	8008696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008588:	4b45      	ldr	r3, [pc, #276]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1f0      	bne.n	8008576 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008594:	4b42      	ldr	r3, [pc, #264]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	051b      	lsls	r3, r3, #20
 80085a2:	493f      	ldr	r1, [pc, #252]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	025b      	lsls	r3, r3, #9
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	041b      	lsls	r3, r3, #16
 80085c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	061b      	lsls	r3, r3, #24
 80085d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085d8:	4931      	ldr	r1, [pc, #196]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085de:	4b30      	ldr	r3, [pc, #192]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	492d      	ldr	r1, [pc, #180]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085f0:	4b2b      	ldr	r3, [pc, #172]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	4928      	ldr	r1, [pc, #160]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008602:	4b27      	ldr	r3, [pc, #156]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	4a26      	ldr	r2, [pc, #152]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800860c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800860e:	4b24      	ldr	r3, [pc, #144]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008612:	4b24      	ldr	r3, [pc, #144]	@ (80086a4 <RCCEx_PLL3_Config+0x160>)
 8008614:	4013      	ands	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	69d2      	ldr	r2, [r2, #28]
 800861a:	00d2      	lsls	r2, r2, #3
 800861c:	4920      	ldr	r1, [pc, #128]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800861e:	4313      	orrs	r3, r2
 8008620:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008622:	4b1f      	ldr	r3, [pc, #124]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008626:	4a1e      	ldr	r2, [pc, #120]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800862c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008634:	4b1a      	ldr	r3, [pc, #104]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	4a19      	ldr	r2, [pc, #100]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800863a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800863e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008640:	e00f      	b.n	8008662 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d106      	bne.n	8008656 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008648:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	4a14      	ldr	r2, [pc, #80]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800864e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008654:	e005      	b.n	8008662 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008656:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	4a11      	ldr	r2, [pc, #68]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800865c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008662:	4b0f      	ldr	r3, [pc, #60]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a0e      	ldr	r2, [pc, #56]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 8008668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800866c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800866e:	f7fa f94f 	bl	8002910 <HAL_GetTick>
 8008672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008674:	e008      	b.n	8008688 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008676:	f7fa f94b 	bl	8002910 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e006      	b.n	8008696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008688:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <RCCEx_PLL3_Config+0x15c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	58024400 	.word	0x58024400
 80086a4:	ffff0007 	.word	0xffff0007

080086a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e054      	b.n	8008764 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d111      	bne.n	80086ea <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 ff98 	bl	800a604 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a23      	ldr	r2, [pc, #140]	@ (800876c <HAL_TIM_Base_Init+0xc4>)
 80086e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f001 fa17 	bl	8009b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	08001e99 	.word	0x08001e99

08008770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d001      	beq.n	8008788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e054      	b.n	8008832 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0201 	orr.w	r2, r2, #1
 800879e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a26      	ldr	r2, [pc, #152]	@ (8008840 <HAL_TIM_Base_Start_IT+0xd0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b2:	d01d      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a22      	ldr	r2, [pc, #136]	@ (8008844 <HAL_TIM_Base_Start_IT+0xd4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <HAL_TIM_Base_Start_IT+0xd8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1f      	ldr	r2, [pc, #124]	@ (800884c <HAL_TIM_Base_Start_IT+0xdc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <HAL_TIM_Base_Start_IT+0xe0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008854 <HAL_TIM_Base_Start_IT+0xe4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIM_Base_Start_IT+0x80>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008858 <HAL_TIM_Base_Start_IT+0xe8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d115      	bne.n	800881c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	4b19      	ldr	r3, [pc, #100]	@ (800885c <HAL_TIM_Base_Start_IT+0xec>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b06      	cmp	r3, #6
 8008800:	d015      	beq.n	800882e <HAL_TIM_Base_Start_IT+0xbe>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008808:	d011      	beq.n	800882e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0201 	orr.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881a:	e008      	b.n	800882e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e000      	b.n	8008830 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40010000 	.word	0x40010000
 8008844:	40000400 	.word	0x40000400
 8008848:	40000800 	.word	0x40000800
 800884c:	40000c00 	.word	0x40000c00
 8008850:	40010400 	.word	0x40010400
 8008854:	40001800 	.word	0x40001800
 8008858:	40014000 	.word	0x40014000
 800885c:	00010007 	.word	0x00010007

08008860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e054      	b.n	800891c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d111      	bne.n	80088a2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 febc 	bl	800a604 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a23      	ldr	r2, [pc, #140]	@ (8008924 <HAL_TIM_PWM_Init+0xc4>)
 8008898:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f001 f93b 	bl	8009b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	08008929 	.word	0x08008929

08008928 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <HAL_TIM_PWM_Start+0x24>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	bf14      	ite	ne
 8008958:	2301      	movne	r3, #1
 800895a:	2300      	moveq	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	e03c      	b.n	80089da <HAL_TIM_PWM_Start+0x9e>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b04      	cmp	r3, #4
 8008964:	d109      	bne.n	800897a <HAL_TIM_PWM_Start+0x3e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	bf14      	ite	ne
 8008972:	2301      	movne	r3, #1
 8008974:	2300      	moveq	r3, #0
 8008976:	b2db      	uxtb	r3, r3
 8008978:	e02f      	b.n	80089da <HAL_TIM_PWM_Start+0x9e>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d109      	bne.n	8008994 <HAL_TIM_PWM_Start+0x58>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	e022      	b.n	80089da <HAL_TIM_PWM_Start+0x9e>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b0c      	cmp	r3, #12
 8008998:	d109      	bne.n	80089ae <HAL_TIM_PWM_Start+0x72>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	e015      	b.n	80089da <HAL_TIM_PWM_Start+0x9e>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d109      	bne.n	80089c8 <HAL_TIM_PWM_Start+0x8c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	e008      	b.n	80089da <HAL_TIM_PWM_Start+0x9e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	bf14      	ite	ne
 80089d4:	2301      	movne	r3, #1
 80089d6:	2300      	moveq	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e0a1      	b.n	8008b26 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <HAL_TIM_PWM_Start+0xb6>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089f0:	e023      	b.n	8008a3a <HAL_TIM_PWM_Start+0xfe>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d104      	bne.n	8008a02 <HAL_TIM_PWM_Start+0xc6>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a00:	e01b      	b.n	8008a3a <HAL_TIM_PWM_Start+0xfe>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d104      	bne.n	8008a12 <HAL_TIM_PWM_Start+0xd6>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a10:	e013      	b.n	8008a3a <HAL_TIM_PWM_Start+0xfe>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b0c      	cmp	r3, #12
 8008a16:	d104      	bne.n	8008a22 <HAL_TIM_PWM_Start+0xe6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a20:	e00b      	b.n	8008a3a <HAL_TIM_PWM_Start+0xfe>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d104      	bne.n	8008a32 <HAL_TIM_PWM_Start+0xf6>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a30:	e003      	b.n	8008a3a <HAL_TIM_PWM_Start+0xfe>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2202      	movs	r2, #2
 8008a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 fdb8 	bl	800a5b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a38      	ldr	r2, [pc, #224]	@ (8008b30 <HAL_TIM_PWM_Start+0x1f4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <HAL_TIM_PWM_Start+0x13e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a37      	ldr	r2, [pc, #220]	@ (8008b34 <HAL_TIM_PWM_Start+0x1f8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00e      	beq.n	8008a7a <HAL_TIM_PWM_Start+0x13e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a35      	ldr	r2, [pc, #212]	@ (8008b38 <HAL_TIM_PWM_Start+0x1fc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d009      	beq.n	8008a7a <HAL_TIM_PWM_Start+0x13e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a34      	ldr	r2, [pc, #208]	@ (8008b3c <HAL_TIM_PWM_Start+0x200>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d004      	beq.n	8008a7a <HAL_TIM_PWM_Start+0x13e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a32      	ldr	r2, [pc, #200]	@ (8008b40 <HAL_TIM_PWM_Start+0x204>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d101      	bne.n	8008a7e <HAL_TIM_PWM_Start+0x142>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <HAL_TIM_PWM_Start+0x144>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a25      	ldr	r2, [pc, #148]	@ (8008b30 <HAL_TIM_PWM_Start+0x1f4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa6:	d01d      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a25      	ldr	r2, [pc, #148]	@ (8008b44 <HAL_TIM_PWM_Start+0x208>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a24      	ldr	r2, [pc, #144]	@ (8008b48 <HAL_TIM_PWM_Start+0x20c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a22      	ldr	r2, [pc, #136]	@ (8008b4c <HAL_TIM_PWM_Start+0x210>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1a      	ldr	r2, [pc, #104]	@ (8008b34 <HAL_TIM_PWM_Start+0x1f8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b50 <HAL_TIM_PWM_Start+0x214>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIM_PWM_Start+0x1a8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a16      	ldr	r2, [pc, #88]	@ (8008b38 <HAL_TIM_PWM_Start+0x1fc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d115      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	4b1a      	ldr	r3, [pc, #104]	@ (8008b54 <HAL_TIM_PWM_Start+0x218>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b06      	cmp	r3, #6
 8008af4:	d015      	beq.n	8008b22 <HAL_TIM_PWM_Start+0x1e6>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008afc:	d011      	beq.n	8008b22 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0201 	orr.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0e:	e008      	b.n	8008b22 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e000      	b.n	8008b24 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40010400 	.word	0x40010400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800
 8008b44:	40000400 	.word	0x40000400
 8008b48:	40000800 	.word	0x40000800
 8008b4c:	40000c00 	.word	0x40000c00
 8008b50:	40001800 	.word	0x40001800
 8008b54:	00010007 	.word	0x00010007

08008b58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e054      	b.n	8008c14 <HAL_TIM_IC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d111      	bne.n	8008b9a <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 fd40 	bl	800a604 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a23      	ldr	r2, [pc, #140]	@ (8008c1c <HAL_TIM_IC_Init+0xc4>)
 8008b90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 ffbf 	bl	8009b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	08008c21 	.word	0x08008c21

08008c20 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <HAL_TIM_IC_Start_IT+0x1e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	e023      	b.n	8008c9a <HAL_TIM_IC_Start_IT+0x66>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_IC_Start_IT+0x2e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	e01b      	b.n	8008c9a <HAL_TIM_IC_Start_IT+0x66>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_IC_Start_IT+0x3e>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	e013      	b.n	8008c9a <HAL_TIM_IC_Start_IT+0x66>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_IC_Start_IT+0x4e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	e00b      	b.n	8008c9a <HAL_TIM_IC_Start_IT+0x66>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b10      	cmp	r3, #16
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_IC_Start_IT+0x5e>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	e003      	b.n	8008c9a <HAL_TIM_IC_Start_IT+0x66>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <HAL_TIM_IC_Start_IT+0x78>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	e013      	b.n	8008cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d104      	bne.n	8008cbc <HAL_TIM_IC_Start_IT+0x88>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e00b      	b.n	8008cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d104      	bne.n	8008ccc <HAL_TIM_IC_Start_IT+0x98>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	e003      	b.n	8008cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d102      	bne.n	8008ce2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cdc:	7b7b      	ldrb	r3, [r7, #13]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d001      	beq.n	8008ce6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e0e2      	b.n	8008eac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_IC_Start_IT+0xc2>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cf4:	e023      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x10a>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_IC_Start_IT+0xd2>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d04:	e01b      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x10a>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_IC_Start_IT+0xe2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d14:	e013      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x10a>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_IC_Start_IT+0xf2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d24:	e00b      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x10a>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b10      	cmp	r3, #16
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_IC_Start_IT+0x102>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d34:	e003      	b.n	8008d3e <HAL_TIM_IC_Start_IT+0x10a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <HAL_TIM_IC_Start_IT+0x11a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d4c:	e013      	b.n	8008d76 <HAL_TIM_IC_Start_IT+0x142>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d104      	bne.n	8008d5e <HAL_TIM_IC_Start_IT+0x12a>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d5c:	e00b      	b.n	8008d76 <HAL_TIM_IC_Start_IT+0x142>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d104      	bne.n	8008d6e <HAL_TIM_IC_Start_IT+0x13a>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d6c:	e003      	b.n	8008d76 <HAL_TIM_IC_Start_IT+0x142>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b0c      	cmp	r3, #12
 8008d7a:	d841      	bhi.n	8008e00 <HAL_TIM_IC_Start_IT+0x1cc>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <HAL_TIM_IC_Start_IT+0x150>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008db9 	.word	0x08008db9
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008e01 	.word	0x08008e01
 8008d90:	08008e01 	.word	0x08008e01
 8008d94:	08008dcb 	.word	0x08008dcb
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008e01 	.word	0x08008e01
 8008da0:	08008e01 	.word	0x08008e01
 8008da4:	08008ddd 	.word	0x08008ddd
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008def 	.word	0x08008def
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0202 	orr.w	r2, r2, #2
 8008dc6:	60da      	str	r2, [r3, #12]
      break;
 8008dc8:	e01d      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0204 	orr.w	r2, r2, #4
 8008dd8:	60da      	str	r2, [r3, #12]
      break;
 8008dda:	e014      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0208 	orr.w	r2, r2, #8
 8008dea:	60da      	str	r2, [r3, #12]
      break;
 8008dec:	e00b      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0210 	orr.w	r2, r2, #16
 8008dfc:	60da      	str	r2, [r3, #12]
      break;
 8008dfe:	e002      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
      break;
 8008e04:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d14e      	bne.n	8008eaa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2201      	movs	r2, #1
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 fbcf 	bl	800a5b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	@ (8008eb4 <HAL_TIM_IC_Start_IT+0x280>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d022      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e2c:	d01d      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a21      	ldr	r2, [pc, #132]	@ (8008eb8 <HAL_TIM_IC_Start_IT+0x284>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d018      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8008ebc <HAL_TIM_IC_Start_IT+0x288>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d013      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec0 <HAL_TIM_IC_Start_IT+0x28c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00e      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec4 <HAL_TIM_IC_Start_IT+0x290>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec8 <HAL_TIM_IC_Start_IT+0x294>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d004      	beq.n	8008e6a <HAL_TIM_IC_Start_IT+0x236>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a19      	ldr	r2, [pc, #100]	@ (8008ecc <HAL_TIM_IC_Start_IT+0x298>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d115      	bne.n	8008e96 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	4b17      	ldr	r3, [pc, #92]	@ (8008ed0 <HAL_TIM_IC_Start_IT+0x29c>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d015      	beq.n	8008ea8 <HAL_TIM_IC_Start_IT+0x274>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e82:	d011      	beq.n	8008ea8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f042 0201 	orr.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e94:	e008      	b.n	8008ea8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0201 	orr.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e000      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40010000 	.word	0x40010000
 8008eb8:	40000400 	.word	0x40000400
 8008ebc:	40000800 	.word	0x40000800
 8008ec0:	40000c00 	.word	0x40000c00
 8008ec4:	40010400 	.word	0x40010400
 8008ec8:	40001800 	.word	0x40001800
 8008ecc:	40014000 	.word	0x40014000
 8008ed0:	00010007 	.word	0x00010007

08008ed4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d841      	bhi.n	8008f6c <HAL_TIM_IC_Stop_IT+0x98>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <HAL_TIM_IC_Stop_IT+0x1c>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f37 	.word	0x08008f37
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f5b 	.word	0x08008f5b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0202 	bic.w	r2, r2, #2
 8008f32:	60da      	str	r2, [r3, #12]
      break;
 8008f34:	e01d      	b.n	8008f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0204 	bic.w	r2, r2, #4
 8008f44:	60da      	str	r2, [r3, #12]
      break;
 8008f46:	e014      	b.n	8008f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0208 	bic.w	r2, r2, #8
 8008f56:	60da      	str	r2, [r3, #12]
      break;
 8008f58:	e00b      	b.n	8008f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0210 	bic.w	r2, r2, #16
 8008f68:	60da      	str	r2, [r3, #12]
      break;
 8008f6a:	e002      	b.n	8008f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d166      	bne.n	8009046 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 fb19 	bl	800a5b8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6a1a      	ldr	r2, [r3, #32]
 8008f8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10f      	bne.n	8008fb6 <HAL_TIM_IC_Stop_IT+0xe2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d107      	bne.n	8008fb6 <HAL_TIM_IC_Stop_IT+0xe2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0201 	bic.w	r2, r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_IC_Stop_IT+0xf2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fc4:	e023      	b.n	800900e <HAL_TIM_IC_Stop_IT+0x13a>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_IC_Stop_IT+0x102>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fd4:	e01b      	b.n	800900e <HAL_TIM_IC_Stop_IT+0x13a>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_IC_Stop_IT+0x112>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fe4:	e013      	b.n	800900e <HAL_TIM_IC_Stop_IT+0x13a>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b0c      	cmp	r3, #12
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_IC_Stop_IT+0x122>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ff4:	e00b      	b.n	800900e <HAL_TIM_IC_Stop_IT+0x13a>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d104      	bne.n	8009006 <HAL_TIM_IC_Stop_IT+0x132>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009004:	e003      	b.n	800900e <HAL_TIM_IC_Stop_IT+0x13a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <HAL_TIM_IC_Stop_IT+0x14a>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800901c:	e013      	b.n	8009046 <HAL_TIM_IC_Stop_IT+0x172>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b04      	cmp	r3, #4
 8009022:	d104      	bne.n	800902e <HAL_TIM_IC_Stop_IT+0x15a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800902c:	e00b      	b.n	8009046 <HAL_TIM_IC_Stop_IT+0x172>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b08      	cmp	r3, #8
 8009032:	d104      	bne.n	800903e <HAL_TIM_IC_Stop_IT+0x16a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800903c:	e003      	b.n	8009046 <HAL_TIM_IC_Stop_IT+0x172>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d026      	beq.n	80090c0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d021      	beq.n	80090c0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0202 	mvn.w	r2, #2
 8009084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	e009      	b.n	80090ba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d026      	beq.n	8009118 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d021      	beq.n	8009118 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0204 	mvn.w	r2, #4
 80090dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2202      	movs	r2, #2
 80090e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
 80090fc:	e009      	b.n	8009112 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d026      	beq.n	8009170 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 0308 	and.w	r3, r3, #8
 8009128:	2b00      	cmp	r3, #0
 800912a:	d021      	beq.n	8009170 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0208 	mvn.w	r2, #8
 8009134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2204      	movs	r2, #4
 800913a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
 8009154:	e009      	b.n	800916a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f003 0310 	and.w	r3, r3, #16
 8009176:	2b00      	cmp	r3, #0
 8009178:	d026      	beq.n	80091c8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	d021      	beq.n	80091c8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f06f 0210 	mvn.w	r2, #16
 800918c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2208      	movs	r2, #8
 8009192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
 80091ac:	e009      	b.n	80091c2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00e      	beq.n	80091f0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0201 	mvn.w	r2, #1
 80091e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00e      	beq.n	800924a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00e      	beq.n	8009272 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f06f 0220 	mvn.w	r2, #32
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800929a:	bf00      	nop
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80092bc:	2302      	movs	r3, #2
 80092be:	e088      	b.n	80093d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d11b      	bne.n	8009306 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80092de:	f000 ffa3 	bl	800a228 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 020c 	bic.w	r2, r2, #12
 80092f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6999      	ldr	r1, [r3, #24]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	619a      	str	r2, [r3, #24]
 8009304:	e060      	b.n	80093c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d11c      	bne.n	8009346 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800931c:	f001 f827 	bl	800a36e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800932e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6999      	ldr	r1, [r3, #24]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	021a      	lsls	r2, r3, #8
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	619a      	str	r2, [r3, #24]
 8009344:	e040      	b.n	80093c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b08      	cmp	r3, #8
 800934a:	d11b      	bne.n	8009384 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800935c:	f001 f874 	bl	800a448 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69da      	ldr	r2, [r3, #28]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f022 020c 	bic.w	r2, r2, #12
 800936e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	69d9      	ldr	r1, [r3, #28]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	61da      	str	r2, [r3, #28]
 8009382:	e021      	b.n	80093c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b0c      	cmp	r3, #12
 8009388:	d11c      	bne.n	80093c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800939a:	f001 f891 	bl	800a4c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80093ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69d9      	ldr	r1, [r3, #28]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	021a      	lsls	r2, r3, #8
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	61da      	str	r2, [r3, #28]
 80093c2:	e001      	b.n	80093c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e0ff      	b.n	80095fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b14      	cmp	r3, #20
 8009406:	f200 80f0 	bhi.w	80095ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009465 	.word	0x08009465
 8009414:	080095eb 	.word	0x080095eb
 8009418:	080095eb 	.word	0x080095eb
 800941c:	080095eb 	.word	0x080095eb
 8009420:	080094a5 	.word	0x080094a5
 8009424:	080095eb 	.word	0x080095eb
 8009428:	080095eb 	.word	0x080095eb
 800942c:	080095eb 	.word	0x080095eb
 8009430:	080094e7 	.word	0x080094e7
 8009434:	080095eb 	.word	0x080095eb
 8009438:	080095eb 	.word	0x080095eb
 800943c:	080095eb 	.word	0x080095eb
 8009440:	08009527 	.word	0x08009527
 8009444:	080095eb 	.word	0x080095eb
 8009448:	080095eb 	.word	0x080095eb
 800944c:	080095eb 	.word	0x080095eb
 8009450:	08009569 	.word	0x08009569
 8009454:	080095eb 	.word	0x080095eb
 8009458:	080095eb 	.word	0x080095eb
 800945c:	080095eb 	.word	0x080095eb
 8009460:	080095a9 	.word	0x080095a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fc06 	bl	8009c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699a      	ldr	r2, [r3, #24]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0208 	orr.w	r2, r2, #8
 800947e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699a      	ldr	r2, [r3, #24]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0204 	bic.w	r2, r2, #4
 800948e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6999      	ldr	r1, [r3, #24]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	691a      	ldr	r2, [r3, #16]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	619a      	str	r2, [r3, #24]
      break;
 80094a2:	e0a5      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fc76 	bl	8009d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6999      	ldr	r1, [r3, #24]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	021a      	lsls	r2, r3, #8
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	619a      	str	r2, [r3, #24]
      break;
 80094e4:	e084      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fcdf 	bl	8009eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f042 0208 	orr.w	r2, r2, #8
 8009500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69da      	ldr	r2, [r3, #28]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0204 	bic.w	r2, r2, #4
 8009510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69d9      	ldr	r1, [r3, #28]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	61da      	str	r2, [r3, #28]
      break;
 8009524:	e064      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fd47 	bl	8009fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69d9      	ldr	r1, [r3, #28]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	021a      	lsls	r2, r3, #8
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	61da      	str	r2, [r3, #28]
      break;
 8009566:	e043      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fd90 	bl	800a094 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f042 0208 	orr.w	r2, r2, #8
 8009582:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0204 	bic.w	r2, r2, #4
 8009592:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095a6:	e023      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fdd4 	bl	800a15c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	021a      	lsls	r2, r3, #8
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095e8:	e002      	b.n	80095f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
      break;
 80095ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop

08009604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_TIM_ConfigClockSource+0x1c>
 800961c:	2302      	movs	r3, #2
 800961e:	e0dc      	b.n	80097da <HAL_TIM_ConfigClockSource+0x1d6>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4b6a      	ldr	r3, [pc, #424]	@ (80097e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800963c:	4013      	ands	r3, r2
 800963e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a64      	ldr	r2, [pc, #400]	@ (80097e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	f000 80a9 	beq.w	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 800965c:	4a62      	ldr	r2, [pc, #392]	@ (80097e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	f200 80ae 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009664:	4a61      	ldr	r2, [pc, #388]	@ (80097ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009666:	4293      	cmp	r3, r2
 8009668:	f000 80a1 	beq.w	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 800966c:	4a5f      	ldr	r2, [pc, #380]	@ (80097ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	f200 80a6 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009674:	4a5e      	ldr	r2, [pc, #376]	@ (80097f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009676:	4293      	cmp	r3, r2
 8009678:	f000 8099 	beq.w	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 800967c:	4a5c      	ldr	r2, [pc, #368]	@ (80097f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800967e:	4293      	cmp	r3, r2
 8009680:	f200 809e 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009684:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009688:	f000 8091 	beq.w	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 800968c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009690:	f200 8096 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009698:	f000 8089 	beq.w	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 800969c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096a0:	f200 808e 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a8:	d03e      	beq.n	8009728 <HAL_TIM_ConfigClockSource+0x124>
 80096aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ae:	f200 8087 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	f000 8086 	beq.w	80097c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096be:	d87f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096c0:	2b70      	cmp	r3, #112	@ 0x70
 80096c2:	d01a      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0xf6>
 80096c4:	2b70      	cmp	r3, #112	@ 0x70
 80096c6:	d87b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096c8:	2b60      	cmp	r3, #96	@ 0x60
 80096ca:	d050      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x16a>
 80096cc:	2b60      	cmp	r3, #96	@ 0x60
 80096ce:	d877      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096d0:	2b50      	cmp	r3, #80	@ 0x50
 80096d2:	d03c      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x14a>
 80096d4:	2b50      	cmp	r3, #80	@ 0x50
 80096d6:	d873      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	d058      	beq.n	800978e <HAL_TIM_ConfigClockSource+0x18a>
 80096dc:	2b40      	cmp	r3, #64	@ 0x40
 80096de:	d86f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096e0:	2b30      	cmp	r3, #48	@ 0x30
 80096e2:	d064      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 80096e4:	2b30      	cmp	r3, #48	@ 0x30
 80096e6:	d86b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d060      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d867      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05c      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d05a      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x1aa>
 80096f8:	e062      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800970a:	f000 ff35 	bl	800a578 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800971c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	609a      	str	r2, [r3, #8]
      break;
 8009726:	e04f      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009738:	f000 ff1e 	bl	800a578 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800974a:	609a      	str	r2, [r3, #8]
      break;
 800974c:	e03c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800975a:	461a      	mov	r2, r3
 800975c:	f000 fdd8 	bl	800a310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2150      	movs	r1, #80	@ 0x50
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fee8 	bl	800a53c <TIM_ITRx_SetConfig>
      break;
 800976c:	e02c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800977a:	461a      	mov	r2, r3
 800977c:	f000 fe34 	bl	800a3e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2160      	movs	r1, #96	@ 0x60
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fed8 	bl	800a53c <TIM_ITRx_SetConfig>
      break;
 800978c:	e01c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800979a:	461a      	mov	r2, r3
 800979c:	f000 fdb8 	bl	800a310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2140      	movs	r1, #64	@ 0x40
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fec8 	bl	800a53c <TIM_ITRx_SetConfig>
      break;
 80097ac:	e00c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f000 febf 	bl	800a53c <TIM_ITRx_SetConfig>
      break;
 80097be:	e003      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
      break;
 80097c4:	e000      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80097c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	ffceff88 	.word	0xffceff88
 80097e8:	00100040 	.word	0x00100040
 80097ec:	00100030 	.word	0x00100030
 80097f0:	00100020 	.word	0x00100020

080097f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	460b      	mov	r3, r1
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e12e      	b.n	8009b22 <HAL_TIM_RegisterCallback+0x27a>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	f040 80c1 	bne.w	8009a54 <HAL_TIM_RegisterCallback+0x1ac>
  {
    switch (CallbackID)
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	2b1b      	cmp	r3, #27
 80098d6:	f200 80ba 	bhi.w	8009a4e <HAL_TIM_RegisterCallback+0x1a6>
 80098da:	a201      	add	r2, pc, #4	@ (adr r2, 80098e0 <HAL_TIM_RegisterCallback+0x38>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009959 	.word	0x08009959
 80098e8:	08009961 	.word	0x08009961
 80098ec:	08009969 	.word	0x08009969
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009979 	.word	0x08009979
 80098f8:	08009981 	.word	0x08009981
 80098fc:	08009989 	.word	0x08009989
 8009900:	08009991 	.word	0x08009991
 8009904:	08009999 	.word	0x08009999
 8009908:	080099a1 	.word	0x080099a1
 800990c:	080099a9 	.word	0x080099a9
 8009910:	080099b1 	.word	0x080099b1
 8009914:	080099b9 	.word	0x080099b9
 8009918:	080099c3 	.word	0x080099c3
 800991c:	080099cd 	.word	0x080099cd
 8009920:	080099d7 	.word	0x080099d7
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099eb 	.word	0x080099eb
 800992c:	080099f5 	.word	0x080099f5
 8009930:	080099ff 	.word	0x080099ff
 8009934:	08009a09 	.word	0x08009a09
 8009938:	08009a13 	.word	0x08009a13
 800993c:	08009a1d 	.word	0x08009a1d
 8009940:	08009a27 	.word	0x08009a27
 8009944:	08009a31 	.word	0x08009a31
 8009948:	08009a3b 	.word	0x08009a3b
 800994c:	08009a45 	.word	0x08009a45
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009956:	e0e3      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800995e:	e0df      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009966:	e0db      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800996e:	e0d7      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009976:	e0d3      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800997e:	e0cf      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009986:	e0cb      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800998e:	e0c7      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009996:	e0c3      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800999e:	e0bf      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80099a6:	e0bb      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80099ae:	e0b7      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80099b6:	e0b3      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80099c0:	e0ae      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80099ca:	e0a9      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80099d4:	e0a4      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80099de:	e09f      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80099e8:	e09a      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80099f2:	e095      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80099fc:	e090      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009a06:	e08b      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009a10:	e086      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009a1a:	e081      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009a24:	e07c      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009a2e:	e077      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009a38:	e072      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009a42:	e06d      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009a4c:	e068      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
        break;
 8009a52:	e065      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d15d      	bne.n	8009b1c <HAL_TIM_RegisterCallback+0x274>
  {
    switch (CallbackID)
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	2b0d      	cmp	r3, #13
 8009a64:	d857      	bhi.n	8009b16 <HAL_TIM_RegisterCallback+0x26e>
 8009a66:	a201      	add	r2, pc, #4	@ (adr r2, 8009a6c <HAL_TIM_RegisterCallback+0x1c4>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009aa5 	.word	0x08009aa5
 8009a70:	08009aad 	.word	0x08009aad
 8009a74:	08009ab5 	.word	0x08009ab5
 8009a78:	08009abd 	.word	0x08009abd
 8009a7c:	08009ac5 	.word	0x08009ac5
 8009a80:	08009acd 	.word	0x08009acd
 8009a84:	08009ad5 	.word	0x08009ad5
 8009a88:	08009add 	.word	0x08009add
 8009a8c:	08009ae5 	.word	0x08009ae5
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	08009afd 	.word	0x08009afd
 8009a9c:	08009b05 	.word	0x08009b05
 8009aa0:	08009b0d 	.word	0x08009b0d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009aaa:	e039      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009ab2:	e035      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009aba:	e031      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009ac2:	e02d      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009aca:	e029      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009ad2:	e025      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009ada:	e021      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009ae2:	e01d      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009aea:	e019      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009af2:	e015      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009afa:	e011      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009b02:	e00d      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009b0a:	e009      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009b14:	e004      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	75fb      	strb	r3, [r7, #23]
        break;
 8009b1a:	e001      	b.n	8009b20 <HAL_TIM_RegisterCallback+0x278>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop

08009b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a46      	ldr	r2, [pc, #280]	@ (8009c5c <TIM_Base_SetConfig+0x12c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d013      	beq.n	8009b70 <TIM_Base_SetConfig+0x40>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4e:	d00f      	beq.n	8009b70 <TIM_Base_SetConfig+0x40>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a43      	ldr	r2, [pc, #268]	@ (8009c60 <TIM_Base_SetConfig+0x130>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00b      	beq.n	8009b70 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a42      	ldr	r2, [pc, #264]	@ (8009c64 <TIM_Base_SetConfig+0x134>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d007      	beq.n	8009b70 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a41      	ldr	r2, [pc, #260]	@ (8009c68 <TIM_Base_SetConfig+0x138>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_Base_SetConfig+0x40>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a40      	ldr	r2, [pc, #256]	@ (8009c6c <TIM_Base_SetConfig+0x13c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d108      	bne.n	8009b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a35      	ldr	r2, [pc, #212]	@ (8009c5c <TIM_Base_SetConfig+0x12c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d01f      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b90:	d01b      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a32      	ldr	r2, [pc, #200]	@ (8009c60 <TIM_Base_SetConfig+0x130>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d017      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a31      	ldr	r2, [pc, #196]	@ (8009c64 <TIM_Base_SetConfig+0x134>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d013      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a30      	ldr	r2, [pc, #192]	@ (8009c68 <TIM_Base_SetConfig+0x138>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d00f      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a2f      	ldr	r2, [pc, #188]	@ (8009c6c <TIM_Base_SetConfig+0x13c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d00b      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8009c70 <TIM_Base_SetConfig+0x140>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d007      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8009c74 <TIM_Base_SetConfig+0x144>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_Base_SetConfig+0x9a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009c78 <TIM_Base_SetConfig+0x148>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d108      	bne.n	8009bdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a16      	ldr	r2, [pc, #88]	@ (8009c5c <TIM_Base_SetConfig+0x12c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00f      	beq.n	8009c28 <TIM_Base_SetConfig+0xf8>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a18      	ldr	r2, [pc, #96]	@ (8009c6c <TIM_Base_SetConfig+0x13c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00b      	beq.n	8009c28 <TIM_Base_SetConfig+0xf8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a17      	ldr	r2, [pc, #92]	@ (8009c70 <TIM_Base_SetConfig+0x140>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <TIM_Base_SetConfig+0xf8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a16      	ldr	r2, [pc, #88]	@ (8009c74 <TIM_Base_SetConfig+0x144>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_Base_SetConfig+0xf8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a15      	ldr	r2, [pc, #84]	@ (8009c78 <TIM_Base_SetConfig+0x148>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d103      	bne.n	8009c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d105      	bne.n	8009c4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f023 0201 	bic.w	r2, r3, #1
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	611a      	str	r2, [r3, #16]
  }
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	40010000 	.word	0x40010000
 8009c60:	40000400 	.word	0x40000400
 8009c64:	40000800 	.word	0x40000800
 8009c68:	40000c00 	.word	0x40000c00
 8009c6c:	40010400 	.word	0x40010400
 8009c70:	40014000 	.word	0x40014000
 8009c74:	40014400 	.word	0x40014400
 8009c78:	40014800 	.word	0x40014800

08009c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f023 0201 	bic.w	r2, r3, #1
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4b37      	ldr	r3, [pc, #220]	@ (8009d84 <TIM_OC1_SetConfig+0x108>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f023 0302 	bic.w	r3, r3, #2
 8009cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8009d88 <TIM_OC1_SetConfig+0x10c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00f      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x7c>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a2c      	ldr	r2, [pc, #176]	@ (8009d8c <TIM_OC1_SetConfig+0x110>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d00b      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x7c>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8009d90 <TIM_OC1_SetConfig+0x114>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d007      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x7c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2a      	ldr	r2, [pc, #168]	@ (8009d94 <TIM_OC1_SetConfig+0x118>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x7c>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a29      	ldr	r2, [pc, #164]	@ (8009d98 <TIM_OC1_SetConfig+0x11c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10c      	bne.n	8009d12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0308 	bic.w	r3, r3, #8
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f023 0304 	bic.w	r3, r3, #4
 8009d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a1c      	ldr	r2, [pc, #112]	@ (8009d88 <TIM_OC1_SetConfig+0x10c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <TIM_OC1_SetConfig+0xbe>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8009d8c <TIM_OC1_SetConfig+0x110>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00b      	beq.n	8009d3a <TIM_OC1_SetConfig+0xbe>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a1a      	ldr	r2, [pc, #104]	@ (8009d90 <TIM_OC1_SetConfig+0x114>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d007      	beq.n	8009d3a <TIM_OC1_SetConfig+0xbe>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a19      	ldr	r2, [pc, #100]	@ (8009d94 <TIM_OC1_SetConfig+0x118>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <TIM_OC1_SetConfig+0xbe>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a18      	ldr	r2, [pc, #96]	@ (8009d98 <TIM_OC1_SetConfig+0x11c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d111      	bne.n	8009d5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	621a      	str	r2, [r3, #32]
}
 8009d78:	bf00      	nop
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	fffeff8f 	.word	0xfffeff8f
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400
 8009d90:	40014000 	.word	0x40014000
 8009d94:	40014400 	.word	0x40014400
 8009d98:	40014800 	.word	0x40014800

08009d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	f023 0210 	bic.w	r2, r3, #16
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4b34      	ldr	r3, [pc, #208]	@ (8009e98 <TIM_OC2_SetConfig+0xfc>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	021b      	lsls	r3, r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0320 	bic.w	r3, r3, #32
 8009de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a29      	ldr	r2, [pc, #164]	@ (8009e9c <TIM_OC2_SetConfig+0x100>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_OC2_SetConfig+0x68>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a28      	ldr	r2, [pc, #160]	@ (8009ea0 <TIM_OC2_SetConfig+0x104>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10d      	bne.n	8009e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a1e      	ldr	r2, [pc, #120]	@ (8009e9c <TIM_OC2_SetConfig+0x100>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00f      	beq.n	8009e48 <TIM_OC2_SetConfig+0xac>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea0 <TIM_OC2_SetConfig+0x104>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00b      	beq.n	8009e48 <TIM_OC2_SetConfig+0xac>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea4 <TIM_OC2_SetConfig+0x108>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d007      	beq.n	8009e48 <TIM_OC2_SetConfig+0xac>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <TIM_OC2_SetConfig+0x10c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_OC2_SetConfig+0xac>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1a      	ldr	r2, [pc, #104]	@ (8009eac <TIM_OC2_SetConfig+0x110>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d113      	bne.n	8009e70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	621a      	str	r2, [r3, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	feff8fff 	.word	0xfeff8fff
 8009e9c:	40010000 	.word	0x40010000
 8009ea0:	40010400 	.word	0x40010400
 8009ea4:	40014000 	.word	0x40014000
 8009ea8:	40014400 	.word	0x40014400
 8009eac:	40014800 	.word	0x40014800

08009eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4b33      	ldr	r3, [pc, #204]	@ (8009fa8 <TIM_OC3_SetConfig+0xf8>)
 8009edc:	4013      	ands	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a28      	ldr	r2, [pc, #160]	@ (8009fac <TIM_OC3_SetConfig+0xfc>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_OC3_SetConfig+0x66>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a27      	ldr	r2, [pc, #156]	@ (8009fb0 <TIM_OC3_SetConfig+0x100>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d10d      	bne.n	8009f32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a1d      	ldr	r2, [pc, #116]	@ (8009fac <TIM_OC3_SetConfig+0xfc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00f      	beq.n	8009f5a <TIM_OC3_SetConfig+0xaa>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb0 <TIM_OC3_SetConfig+0x100>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00b      	beq.n	8009f5a <TIM_OC3_SetConfig+0xaa>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb4 <TIM_OC3_SetConfig+0x104>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d007      	beq.n	8009f5a <TIM_OC3_SetConfig+0xaa>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009fb8 <TIM_OC3_SetConfig+0x108>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_OC3_SetConfig+0xaa>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a19      	ldr	r2, [pc, #100]	@ (8009fbc <TIM_OC3_SetConfig+0x10c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d113      	bne.n	8009f82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	621a      	str	r2, [r3, #32]
}
 8009f9c:	bf00      	nop
 8009f9e:	371c      	adds	r7, #28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	fffeff8f 	.word	0xfffeff8f
 8009fac:	40010000 	.word	0x40010000
 8009fb0:	40010400 	.word	0x40010400
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	40014400 	.word	0x40014400
 8009fbc:	40014800 	.word	0x40014800

08009fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4b24      	ldr	r3, [pc, #144]	@ (800a07c <TIM_OC4_SetConfig+0xbc>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4313      	orrs	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a00a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4313      	orrs	r3, r2
 800a016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a19      	ldr	r2, [pc, #100]	@ (800a080 <TIM_OC4_SetConfig+0xc0>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d00f      	beq.n	800a040 <TIM_OC4_SetConfig+0x80>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a18      	ldr	r2, [pc, #96]	@ (800a084 <TIM_OC4_SetConfig+0xc4>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00b      	beq.n	800a040 <TIM_OC4_SetConfig+0x80>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a17      	ldr	r2, [pc, #92]	@ (800a088 <TIM_OC4_SetConfig+0xc8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d007      	beq.n	800a040 <TIM_OC4_SetConfig+0x80>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a16      	ldr	r2, [pc, #88]	@ (800a08c <TIM_OC4_SetConfig+0xcc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d003      	beq.n	800a040 <TIM_OC4_SetConfig+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a15      	ldr	r2, [pc, #84]	@ (800a090 <TIM_OC4_SetConfig+0xd0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d109      	bne.n	800a054 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	019b      	lsls	r3, r3, #6
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	4313      	orrs	r3, r2
 800a052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	621a      	str	r2, [r3, #32]
}
 800a06e:	bf00      	nop
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	feff8fff 	.word	0xfeff8fff
 800a080:	40010000 	.word	0x40010000
 800a084:	40010400 	.word	0x40010400
 800a088:	40014000 	.word	0x40014000
 800a08c:	40014400 	.word	0x40014400
 800a090:	40014800 	.word	0x40014800

0800a094 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	4b21      	ldr	r3, [pc, #132]	@ (800a144 <TIM_OC5_SetConfig+0xb0>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a18      	ldr	r2, [pc, #96]	@ (800a148 <TIM_OC5_SetConfig+0xb4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00f      	beq.n	800a10a <TIM_OC5_SetConfig+0x76>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a17      	ldr	r2, [pc, #92]	@ (800a14c <TIM_OC5_SetConfig+0xb8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d00b      	beq.n	800a10a <TIM_OC5_SetConfig+0x76>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a16      	ldr	r2, [pc, #88]	@ (800a150 <TIM_OC5_SetConfig+0xbc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d007      	beq.n	800a10a <TIM_OC5_SetConfig+0x76>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a15      	ldr	r2, [pc, #84]	@ (800a154 <TIM_OC5_SetConfig+0xc0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d003      	beq.n	800a10a <TIM_OC5_SetConfig+0x76>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a14      	ldr	r2, [pc, #80]	@ (800a158 <TIM_OC5_SetConfig+0xc4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d109      	bne.n	800a11e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	021b      	lsls	r3, r3, #8
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	621a      	str	r2, [r3, #32]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	fffeff8f 	.word	0xfffeff8f
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400
 800a150:	40014000 	.word	0x40014000
 800a154:	40014400 	.word	0x40014400
 800a158:	40014800 	.word	0x40014800

0800a15c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4b22      	ldr	r3, [pc, #136]	@ (800a210 <TIM_OC6_SetConfig+0xb4>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4313      	orrs	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a19e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	051b      	lsls	r3, r3, #20
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a19      	ldr	r2, [pc, #100]	@ (800a214 <TIM_OC6_SetConfig+0xb8>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00f      	beq.n	800a1d4 <TIM_OC6_SetConfig+0x78>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a18      	ldr	r2, [pc, #96]	@ (800a218 <TIM_OC6_SetConfig+0xbc>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00b      	beq.n	800a1d4 <TIM_OC6_SetConfig+0x78>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a17      	ldr	r2, [pc, #92]	@ (800a21c <TIM_OC6_SetConfig+0xc0>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d007      	beq.n	800a1d4 <TIM_OC6_SetConfig+0x78>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a16      	ldr	r2, [pc, #88]	@ (800a220 <TIM_OC6_SetConfig+0xc4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_OC6_SetConfig+0x78>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a15      	ldr	r2, [pc, #84]	@ (800a224 <TIM_OC6_SetConfig+0xc8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d109      	bne.n	800a1e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	029b      	lsls	r3, r3, #10
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	621a      	str	r2, [r3, #32]
}
 800a202:	bf00      	nop
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	feff8fff 	.word	0xfeff8fff
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800

0800a228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	f023 0201 	bic.w	r2, r3, #1
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4a28      	ldr	r2, [pc, #160]	@ (800a2f4 <TIM_TI1_SetConfig+0xcc>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d01b      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25c:	d017      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a25      	ldr	r2, [pc, #148]	@ (800a2f8 <TIM_TI1_SetConfig+0xd0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d013      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	4a24      	ldr	r2, [pc, #144]	@ (800a2fc <TIM_TI1_SetConfig+0xd4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00f      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4a23      	ldr	r2, [pc, #140]	@ (800a300 <TIM_TI1_SetConfig+0xd8>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d00b      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4a22      	ldr	r2, [pc, #136]	@ (800a304 <TIM_TI1_SetConfig+0xdc>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d007      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a21      	ldr	r2, [pc, #132]	@ (800a308 <TIM_TI1_SetConfig+0xe0>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d003      	beq.n	800a28e <TIM_TI1_SetConfig+0x66>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4a20      	ldr	r2, [pc, #128]	@ (800a30c <TIM_TI1_SetConfig+0xe4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d101      	bne.n	800a292 <TIM_TI1_SetConfig+0x6a>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <TIM_TI1_SetConfig+0x6c>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d008      	beq.n	800a2aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e003      	b.n	800a2b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f043 0301 	orr.w	r3, r3, #1
 800a2b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f023 030a 	bic.w	r3, r3, #10
 800a2cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f003 030a 	and.w	r3, r3, #10
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40000400 	.word	0x40000400
 800a2fc:	40000800 	.word	0x40000800
 800a300:	40000c00 	.word	0x40000c00
 800a304:	40010400 	.word	0x40010400
 800a308:	40001800 	.word	0x40001800
 800a30c:	40014000 	.word	0x40014000

0800a310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0201 	bic.w	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a33a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 030a 	bic.w	r3, r3, #10
 800a34c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a36e:	b480      	push	{r7}
 800a370:	b087      	sub	sp, #28
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	f023 0210 	bic.w	r2, r3, #16
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a39a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	031b      	lsls	r3, r3, #12
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	011b      	lsls	r3, r3, #4
 800a3c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	621a      	str	r2, [r3, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f023 0210 	bic.w	r2, r3, #16
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	031b      	lsls	r3, r3, #12
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a424:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	011b      	lsls	r3, r3, #4
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	621a      	str	r2, [r3, #32]
}
 800a43c:	bf00      	nop
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f023 0303 	bic.w	r3, r3, #3
 800a474:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a484:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a498:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	621a      	str	r2, [r3, #32]
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	031b      	lsls	r3, r3, #12
 800a504:	b29b      	uxth	r3, r3
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a512:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	031b      	lsls	r3, r3, #12
 800a518:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	4313      	orrs	r3, r2
 800a520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4b09      	ldr	r3, [pc, #36]	@ (800a574 <TIM_ITRx_SetConfig+0x38>)
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	f043 0307 	orr.w	r3, r3, #7
 800a55e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	609a      	str	r2, [r3, #8]
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	ffcfff8f 	.word	0xffcfff8f

0800a578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a578:	b480      	push	{r7}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	021a      	lsls	r2, r3, #8
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	431a      	orrs	r2, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	609a      	str	r2, [r3, #8]
}
 800a5ac:	bf00      	nop
 800a5ae:	371c      	adds	r7, #28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f003 031f 	and.w	r3, r3, #31
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1a      	ldr	r2, [r3, #32]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	43db      	mvns	r3, r3
 800a5da:	401a      	ands	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6a1a      	ldr	r2, [r3, #32]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f003 031f 	and.w	r3, r3, #31
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	621a      	str	r2, [r3, #32]
}
 800a5f6:	bf00      	nop
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
	...

0800a604 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a1e      	ldr	r2, [pc, #120]	@ (800a688 <TIM_ResetCallback+0x84>)
 800a610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a1d      	ldr	r2, [pc, #116]	@ (800a68c <TIM_ResetCallback+0x88>)
 800a618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a1c      	ldr	r2, [pc, #112]	@ (800a690 <TIM_ResetCallback+0x8c>)
 800a620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a1b      	ldr	r2, [pc, #108]	@ (800a694 <TIM_ResetCallback+0x90>)
 800a628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a1a      	ldr	r2, [pc, #104]	@ (800a698 <TIM_ResetCallback+0x94>)
 800a630:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a19      	ldr	r2, [pc, #100]	@ (800a69c <TIM_ResetCallback+0x98>)
 800a638:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a18      	ldr	r2, [pc, #96]	@ (800a6a0 <TIM_ResetCallback+0x9c>)
 800a640:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a17      	ldr	r2, [pc, #92]	@ (800a6a4 <TIM_ResetCallback+0xa0>)
 800a648:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a16      	ldr	r2, [pc, #88]	@ (800a6a8 <TIM_ResetCallback+0xa4>)
 800a650:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a15      	ldr	r2, [pc, #84]	@ (800a6ac <TIM_ResetCallback+0xa8>)
 800a658:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a14      	ldr	r2, [pc, #80]	@ (800a6b0 <TIM_ResetCallback+0xac>)
 800a660:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a13      	ldr	r2, [pc, #76]	@ (800a6b4 <TIM_ResetCallback+0xb0>)
 800a668:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a12      	ldr	r2, [pc, #72]	@ (800a6b8 <TIM_ResetCallback+0xb4>)
 800a670:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a11      	ldr	r2, [pc, #68]	@ (800a6bc <TIM_ResetCallback+0xb8>)
 800a678:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	08001ce5 	.word	0x08001ce5
 800a68c:	080097f5 	.word	0x080097f5
 800a690:	0800986d 	.word	0x0800986d
 800a694:	08009881 	.word	0x08009881
 800a698:	0800981d 	.word	0x0800981d
 800a69c:	08009831 	.word	0x08009831
 800a6a0:	08009809 	.word	0x08009809
 800a6a4:	08009845 	.word	0x08009845
 800a6a8:	08009859 	.word	0x08009859
 800a6ac:	08009895 	.word	0x08009895
 800a6b0:	0800a7dd 	.word	0x0800a7dd
 800a6b4:	0800a7f1 	.word	0x0800a7f1
 800a6b8:	0800a805 	.word	0x0800a805
 800a6bc:	0800a819 	.word	0x0800a819

0800a6c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d101      	bne.n	800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e06d      	b.n	800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a30      	ldr	r2, [pc, #192]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a2f      	ldr	r2, [pc, #188]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d108      	bne.n	800a71e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a712:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a724:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a20      	ldr	r2, [pc, #128]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d022      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74a:	d01d      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d018      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d013      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d00e      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a15      	ldr	r2, [pc, #84]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d009      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a16      	ldr	r2, [pc, #88]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d004      	beq.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a15      	ldr	r2, [pc, #84]	@ (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d10c      	bne.n	800a7a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a78e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4313      	orrs	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	40010000 	.word	0x40010000
 800a7c4:	40010400 	.word	0x40010400
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40001800 	.word	0x40001800
 800a7d8:	40014000 	.word	0x40014000

0800a7dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e042      	b.n	800a8c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7f7 fbcd 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2224      	movs	r2, #36	@ 0x24
 800a85a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 0201 	bic.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fd90 	bl	800b39c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f825 	bl	800a8cc <UART_SetConfig>
 800a882:	4603      	mov	r3, r0
 800a884:	2b01      	cmp	r3, #1
 800a886:	d101      	bne.n	800a88c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e01b      	b.n	800a8c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a89a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0201 	orr.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fe0f 	bl	800b4e0 <UART_CheckIdleState>
 800a8c2:	4603      	mov	r3, r0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8d0:	b092      	sub	sp, #72	@ 0x48
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4bbe      	ldr	r3, [pc, #760]	@ (800abf4 <UART_SetConfig+0x328>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	6812      	ldr	r2, [r2, #0]
 800a902:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a904:	430b      	orrs	r3, r1
 800a906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4ab3      	ldr	r2, [pc, #716]	@ (800abf8 <UART_SetConfig+0x32c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a934:	4313      	orrs	r3, r2
 800a936:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	4baf      	ldr	r3, [pc, #700]	@ (800abfc <UART_SetConfig+0x330>)
 800a940:	4013      	ands	r3, r2
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	6812      	ldr	r2, [r2, #0]
 800a946:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a948:	430b      	orrs	r3, r1
 800a94a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a952:	f023 010f 	bic.w	r1, r3, #15
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4aa6      	ldr	r2, [pc, #664]	@ (800ac00 <UART_SetConfig+0x334>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d177      	bne.n	800aa5c <UART_SetConfig+0x190>
 800a96c:	4ba5      	ldr	r3, [pc, #660]	@ (800ac04 <UART_SetConfig+0x338>)
 800a96e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a970:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a974:	2b28      	cmp	r3, #40	@ 0x28
 800a976:	d86d      	bhi.n	800aa54 <UART_SetConfig+0x188>
 800a978:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <UART_SetConfig+0xb4>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800aa25 	.word	0x0800aa25
 800a984:	0800aa55 	.word	0x0800aa55
 800a988:	0800aa55 	.word	0x0800aa55
 800a98c:	0800aa55 	.word	0x0800aa55
 800a990:	0800aa55 	.word	0x0800aa55
 800a994:	0800aa55 	.word	0x0800aa55
 800a998:	0800aa55 	.word	0x0800aa55
 800a99c:	0800aa55 	.word	0x0800aa55
 800a9a0:	0800aa2d 	.word	0x0800aa2d
 800a9a4:	0800aa55 	.word	0x0800aa55
 800a9a8:	0800aa55 	.word	0x0800aa55
 800a9ac:	0800aa55 	.word	0x0800aa55
 800a9b0:	0800aa55 	.word	0x0800aa55
 800a9b4:	0800aa55 	.word	0x0800aa55
 800a9b8:	0800aa55 	.word	0x0800aa55
 800a9bc:	0800aa55 	.word	0x0800aa55
 800a9c0:	0800aa35 	.word	0x0800aa35
 800a9c4:	0800aa55 	.word	0x0800aa55
 800a9c8:	0800aa55 	.word	0x0800aa55
 800a9cc:	0800aa55 	.word	0x0800aa55
 800a9d0:	0800aa55 	.word	0x0800aa55
 800a9d4:	0800aa55 	.word	0x0800aa55
 800a9d8:	0800aa55 	.word	0x0800aa55
 800a9dc:	0800aa55 	.word	0x0800aa55
 800a9e0:	0800aa3d 	.word	0x0800aa3d
 800a9e4:	0800aa55 	.word	0x0800aa55
 800a9e8:	0800aa55 	.word	0x0800aa55
 800a9ec:	0800aa55 	.word	0x0800aa55
 800a9f0:	0800aa55 	.word	0x0800aa55
 800a9f4:	0800aa55 	.word	0x0800aa55
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa45 	.word	0x0800aa45
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800aa55 	.word	0x0800aa55
 800aa0c:	0800aa55 	.word	0x0800aa55
 800aa10:	0800aa55 	.word	0x0800aa55
 800aa14:	0800aa55 	.word	0x0800aa55
 800aa18:	0800aa55 	.word	0x0800aa55
 800aa1c:	0800aa55 	.word	0x0800aa55
 800aa20:	0800aa4d 	.word	0x0800aa4d
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e222      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e21e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa34:	2308      	movs	r3, #8
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e21a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e216      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa44:	2320      	movs	r3, #32
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e212      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa4c:	2340      	movs	r3, #64	@ 0x40
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e20e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa54:	2380      	movs	r3, #128	@ 0x80
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e20a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a69      	ldr	r2, [pc, #420]	@ (800ac08 <UART_SetConfig+0x33c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d130      	bne.n	800aac8 <UART_SetConfig+0x1fc>
 800aa66:	4b67      	ldr	r3, [pc, #412]	@ (800ac04 <UART_SetConfig+0x338>)
 800aa68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d826      	bhi.n	800aac0 <UART_SetConfig+0x1f4>
 800aa72:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <UART_SetConfig+0x1ac>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aa99 	.word	0x0800aa99
 800aa80:	0800aaa1 	.word	0x0800aaa1
 800aa84:	0800aaa9 	.word	0x0800aaa9
 800aa88:	0800aab1 	.word	0x0800aab1
 800aa8c:	0800aab9 	.word	0x0800aab9
 800aa90:	2300      	movs	r3, #0
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa96:	e1ec      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aa98:	2304      	movs	r3, #4
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9e:	e1e8      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aaa0:	2308      	movs	r3, #8
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa6:	e1e4      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaae:	e1e0      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aab0:	2320      	movs	r3, #32
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e1dc      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aab8:	2340      	movs	r3, #64	@ 0x40
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e1d8      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aac0:	2380      	movs	r3, #128	@ 0x80
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e1d4      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a4f      	ldr	r2, [pc, #316]	@ (800ac0c <UART_SetConfig+0x340>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d130      	bne.n	800ab34 <UART_SetConfig+0x268>
 800aad2:	4b4c      	ldr	r3, [pc, #304]	@ (800ac04 <UART_SetConfig+0x338>)
 800aad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b05      	cmp	r3, #5
 800aadc:	d826      	bhi.n	800ab2c <UART_SetConfig+0x260>
 800aade:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <UART_SetConfig+0x218>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800aafd 	.word	0x0800aafd
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab0d 	.word	0x0800ab0d
 800aaf0:	0800ab15 	.word	0x0800ab15
 800aaf4:	0800ab1d 	.word	0x0800ab1d
 800aaf8:	0800ab25 	.word	0x0800ab25
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e1b6      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab04:	2304      	movs	r3, #4
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e1b2      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e1ae      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab14:	2310      	movs	r3, #16
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1a:	e1aa      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e1a6      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab24:	2340      	movs	r3, #64	@ 0x40
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e1a2      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab2c:	2380      	movs	r3, #128	@ 0x80
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e19e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a35      	ldr	r2, [pc, #212]	@ (800ac10 <UART_SetConfig+0x344>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d130      	bne.n	800aba0 <UART_SetConfig+0x2d4>
 800ab3e:	4b31      	ldr	r3, [pc, #196]	@ (800ac04 <UART_SetConfig+0x338>)
 800ab40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	2b05      	cmp	r3, #5
 800ab48:	d826      	bhi.n	800ab98 <UART_SetConfig+0x2cc>
 800ab4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab50 <UART_SetConfig+0x284>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800ab69 	.word	0x0800ab69
 800ab54:	0800ab71 	.word	0x0800ab71
 800ab58:	0800ab79 	.word	0x0800ab79
 800ab5c:	0800ab81 	.word	0x0800ab81
 800ab60:	0800ab89 	.word	0x0800ab89
 800ab64:	0800ab91 	.word	0x0800ab91
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6e:	e180      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab70:	2304      	movs	r3, #4
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab76:	e17c      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab78:	2308      	movs	r3, #8
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7e:	e178      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab80:	2310      	movs	r3, #16
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab86:	e174      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab88:	2320      	movs	r3, #32
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e170      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab90:	2340      	movs	r3, #64	@ 0x40
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e16c      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ab98:	2380      	movs	r3, #128	@ 0x80
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e168      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac14 <UART_SetConfig+0x348>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d142      	bne.n	800ac30 <UART_SetConfig+0x364>
 800abaa:	4b16      	ldr	r3, [pc, #88]	@ (800ac04 <UART_SetConfig+0x338>)
 800abac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	d838      	bhi.n	800ac28 <UART_SetConfig+0x35c>
 800abb6:	a201      	add	r2, pc, #4	@ (adr r2, 800abbc <UART_SetConfig+0x2f0>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800abd5 	.word	0x0800abd5
 800abc0:	0800abdd 	.word	0x0800abdd
 800abc4:	0800abe5 	.word	0x0800abe5
 800abc8:	0800abed 	.word	0x0800abed
 800abcc:	0800ac19 	.word	0x0800ac19
 800abd0:	0800ac21 	.word	0x0800ac21
 800abd4:	2300      	movs	r3, #0
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e14a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800abdc:	2304      	movs	r3, #4
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe2:	e146      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800abe4:	2308      	movs	r3, #8
 800abe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abea:	e142      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800abec:	2310      	movs	r3, #16
 800abee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf2:	e13e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800abf4:	cfff69f3 	.word	0xcfff69f3
 800abf8:	58000c00 	.word	0x58000c00
 800abfc:	11fff4ff 	.word	0x11fff4ff
 800ac00:	40011000 	.word	0x40011000
 800ac04:	58024400 	.word	0x58024400
 800ac08:	40004400 	.word	0x40004400
 800ac0c:	40004800 	.word	0x40004800
 800ac10:	40004c00 	.word	0x40004c00
 800ac14:	40005000 	.word	0x40005000
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e128      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ac20:	2340      	movs	r3, #64	@ 0x40
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e124      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ac28:	2380      	movs	r3, #128	@ 0x80
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e120      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4acb      	ldr	r2, [pc, #812]	@ (800af64 <UART_SetConfig+0x698>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d176      	bne.n	800ad28 <UART_SetConfig+0x45c>
 800ac3a:	4bcb      	ldr	r3, [pc, #812]	@ (800af68 <UART_SetConfig+0x69c>)
 800ac3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac42:	2b28      	cmp	r3, #40	@ 0x28
 800ac44:	d86c      	bhi.n	800ad20 <UART_SetConfig+0x454>
 800ac46:	a201      	add	r2, pc, #4	@ (adr r2, 800ac4c <UART_SetConfig+0x380>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800acf1 	.word	0x0800acf1
 800ac50:	0800ad21 	.word	0x0800ad21
 800ac54:	0800ad21 	.word	0x0800ad21
 800ac58:	0800ad21 	.word	0x0800ad21
 800ac5c:	0800ad21 	.word	0x0800ad21
 800ac60:	0800ad21 	.word	0x0800ad21
 800ac64:	0800ad21 	.word	0x0800ad21
 800ac68:	0800ad21 	.word	0x0800ad21
 800ac6c:	0800acf9 	.word	0x0800acf9
 800ac70:	0800ad21 	.word	0x0800ad21
 800ac74:	0800ad21 	.word	0x0800ad21
 800ac78:	0800ad21 	.word	0x0800ad21
 800ac7c:	0800ad21 	.word	0x0800ad21
 800ac80:	0800ad21 	.word	0x0800ad21
 800ac84:	0800ad21 	.word	0x0800ad21
 800ac88:	0800ad21 	.word	0x0800ad21
 800ac8c:	0800ad01 	.word	0x0800ad01
 800ac90:	0800ad21 	.word	0x0800ad21
 800ac94:	0800ad21 	.word	0x0800ad21
 800ac98:	0800ad21 	.word	0x0800ad21
 800ac9c:	0800ad21 	.word	0x0800ad21
 800aca0:	0800ad21 	.word	0x0800ad21
 800aca4:	0800ad21 	.word	0x0800ad21
 800aca8:	0800ad21 	.word	0x0800ad21
 800acac:	0800ad09 	.word	0x0800ad09
 800acb0:	0800ad21 	.word	0x0800ad21
 800acb4:	0800ad21 	.word	0x0800ad21
 800acb8:	0800ad21 	.word	0x0800ad21
 800acbc:	0800ad21 	.word	0x0800ad21
 800acc0:	0800ad21 	.word	0x0800ad21
 800acc4:	0800ad21 	.word	0x0800ad21
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad11 	.word	0x0800ad11
 800acd0:	0800ad21 	.word	0x0800ad21
 800acd4:	0800ad21 	.word	0x0800ad21
 800acd8:	0800ad21 	.word	0x0800ad21
 800acdc:	0800ad21 	.word	0x0800ad21
 800ace0:	0800ad21 	.word	0x0800ad21
 800ace4:	0800ad21 	.word	0x0800ad21
 800ace8:	0800ad21 	.word	0x0800ad21
 800acec:	0800ad19 	.word	0x0800ad19
 800acf0:	2301      	movs	r3, #1
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e0bc      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800acf8:	2304      	movs	r3, #4
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e0b8      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad00:	2308      	movs	r3, #8
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e0b4      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad08:	2310      	movs	r3, #16
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e0b0      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad10:	2320      	movs	r3, #32
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e0ac      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad18:	2340      	movs	r3, #64	@ 0x40
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e0a8      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad20:	2380      	movs	r3, #128	@ 0x80
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e0a4      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a8f      	ldr	r2, [pc, #572]	@ (800af6c <UART_SetConfig+0x6a0>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d130      	bne.n	800ad94 <UART_SetConfig+0x4c8>
 800ad32:	4b8d      	ldr	r3, [pc, #564]	@ (800af68 <UART_SetConfig+0x69c>)
 800ad34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	d826      	bhi.n	800ad8c <UART_SetConfig+0x4c0>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <UART_SetConfig+0x478>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad5d 	.word	0x0800ad5d
 800ad48:	0800ad65 	.word	0x0800ad65
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	0800ad75 	.word	0x0800ad75
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad85 	.word	0x0800ad85
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e086      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad64:	2304      	movs	r3, #4
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e082      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e07e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad74:	2310      	movs	r3, #16
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e07a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e076      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad84:	2340      	movs	r3, #64	@ 0x40
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e072      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad8c:	2380      	movs	r3, #128	@ 0x80
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e06e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a75      	ldr	r2, [pc, #468]	@ (800af70 <UART_SetConfig+0x6a4>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d130      	bne.n	800ae00 <UART_SetConfig+0x534>
 800ad9e:	4b72      	ldr	r3, [pc, #456]	@ (800af68 <UART_SetConfig+0x69c>)
 800ada0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada2:	f003 0307 	and.w	r3, r3, #7
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d826      	bhi.n	800adf8 <UART_SetConfig+0x52c>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <UART_SetConfig+0x4e4>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800adc9 	.word	0x0800adc9
 800adb4:	0800add1 	.word	0x0800add1
 800adb8:	0800add9 	.word	0x0800add9
 800adbc:	0800ade1 	.word	0x0800ade1
 800adc0:	0800ade9 	.word	0x0800ade9
 800adc4:	0800adf1 	.word	0x0800adf1
 800adc8:	2300      	movs	r3, #0
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e050      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e04c      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e048      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e044      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ade8:	2320      	movs	r3, #32
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e040      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800adf0:	2340      	movs	r3, #64	@ 0x40
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e03c      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800adf8:	2380      	movs	r3, #128	@ 0x80
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e038      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a5b      	ldr	r2, [pc, #364]	@ (800af74 <UART_SetConfig+0x6a8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d130      	bne.n	800ae6c <UART_SetConfig+0x5a0>
 800ae0a:	4b57      	ldr	r3, [pc, #348]	@ (800af68 <UART_SetConfig+0x69c>)
 800ae0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d826      	bhi.n	800ae64 <UART_SetConfig+0x598>
 800ae16:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <UART_SetConfig+0x550>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800ae35 	.word	0x0800ae35
 800ae20:	0800ae3d 	.word	0x0800ae3d
 800ae24:	0800ae45 	.word	0x0800ae45
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	2302      	movs	r3, #2
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e01a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e016      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae44:	2308      	movs	r3, #8
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e012      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e00e      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae54:	2320      	movs	r3, #32
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e00a      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae5c:	2340      	movs	r3, #64	@ 0x40
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e006      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae64:	2380      	movs	r3, #128	@ 0x80
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e002      	b.n	800ae72 <UART_SetConfig+0x5a6>
 800ae6c:	2380      	movs	r3, #128	@ 0x80
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a3f      	ldr	r2, [pc, #252]	@ (800af74 <UART_SetConfig+0x6a8>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	f040 80f8 	bne.w	800b06e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	dc46      	bgt.n	800af14 <UART_SetConfig+0x648>
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	f2c0 8082 	blt.w	800af90 <UART_SetConfig+0x6c4>
 800ae8c:	3b02      	subs	r3, #2
 800ae8e:	2b1e      	cmp	r3, #30
 800ae90:	d87e      	bhi.n	800af90 <UART_SetConfig+0x6c4>
 800ae92:	a201      	add	r2, pc, #4	@ (adr r2, 800ae98 <UART_SetConfig+0x5cc>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800af1b 	.word	0x0800af1b
 800ae9c:	0800af91 	.word	0x0800af91
 800aea0:	0800af23 	.word	0x0800af23
 800aea4:	0800af91 	.word	0x0800af91
 800aea8:	0800af91 	.word	0x0800af91
 800aeac:	0800af91 	.word	0x0800af91
 800aeb0:	0800af33 	.word	0x0800af33
 800aeb4:	0800af91 	.word	0x0800af91
 800aeb8:	0800af91 	.word	0x0800af91
 800aebc:	0800af91 	.word	0x0800af91
 800aec0:	0800af91 	.word	0x0800af91
 800aec4:	0800af91 	.word	0x0800af91
 800aec8:	0800af91 	.word	0x0800af91
 800aecc:	0800af91 	.word	0x0800af91
 800aed0:	0800af43 	.word	0x0800af43
 800aed4:	0800af91 	.word	0x0800af91
 800aed8:	0800af91 	.word	0x0800af91
 800aedc:	0800af91 	.word	0x0800af91
 800aee0:	0800af91 	.word	0x0800af91
 800aee4:	0800af91 	.word	0x0800af91
 800aee8:	0800af91 	.word	0x0800af91
 800aeec:	0800af91 	.word	0x0800af91
 800aef0:	0800af91 	.word	0x0800af91
 800aef4:	0800af91 	.word	0x0800af91
 800aef8:	0800af91 	.word	0x0800af91
 800aefc:	0800af91 	.word	0x0800af91
 800af00:	0800af91 	.word	0x0800af91
 800af04:	0800af91 	.word	0x0800af91
 800af08:	0800af91 	.word	0x0800af91
 800af0c:	0800af91 	.word	0x0800af91
 800af10:	0800af83 	.word	0x0800af83
 800af14:	2b40      	cmp	r3, #64	@ 0x40
 800af16:	d037      	beq.n	800af88 <UART_SetConfig+0x6bc>
 800af18:	e03a      	b.n	800af90 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800af1a:	f7fc ffa3 	bl	8007e64 <HAL_RCCEx_GetD3PCLK1Freq>
 800af1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af20:	e03c      	b.n	800af9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af26:	4618      	mov	r0, r3
 800af28:	f7fc ffb2 	bl	8007e90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af30:	e034      	b.n	800af9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af32:	f107 0318 	add.w	r3, r7, #24
 800af36:	4618      	mov	r0, r3
 800af38:	f7fd f8fe 	bl	8008138 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af40:	e02c      	b.n	800af9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af42:	4b09      	ldr	r3, [pc, #36]	@ (800af68 <UART_SetConfig+0x69c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0320 	and.w	r3, r3, #32
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d016      	beq.n	800af7c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af4e:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <UART_SetConfig+0x69c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	08db      	lsrs	r3, r3, #3
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	4a07      	ldr	r2, [pc, #28]	@ (800af78 <UART_SetConfig+0x6ac>)
 800af5a:	fa22 f303 	lsr.w	r3, r2, r3
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af60:	e01c      	b.n	800af9c <UART_SetConfig+0x6d0>
 800af62:	bf00      	nop
 800af64:	40011400 	.word	0x40011400
 800af68:	58024400 	.word	0x58024400
 800af6c:	40007800 	.word	0x40007800
 800af70:	40007c00 	.word	0x40007c00
 800af74:	58000c00 	.word	0x58000c00
 800af78:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800af7c:	4b9d      	ldr	r3, [pc, #628]	@ (800b1f4 <UART_SetConfig+0x928>)
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e00c      	b.n	800af9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af82:	4b9d      	ldr	r3, [pc, #628]	@ (800b1f8 <UART_SetConfig+0x92c>)
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af86:	e009      	b.n	800af9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e005      	b.n	800af9c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 81de 	beq.w	800b360 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa8:	4a94      	ldr	r2, [pc, #592]	@ (800b1fc <UART_SetConfig+0x930>)
 800afaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afae:	461a      	mov	r2, r3
 800afb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800afb6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	4413      	add	r3, r2
 800afc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d305      	bcc.n	800afd4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d903      	bls.n	800afdc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800afda:	e1c1      	b.n	800b360 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afde:	2200      	movs	r2, #0
 800afe0:	60bb      	str	r3, [r7, #8]
 800afe2:	60fa      	str	r2, [r7, #12]
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe8:	4a84      	ldr	r2, [pc, #528]	@ (800b1fc <UART_SetConfig+0x930>)
 800afea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	2200      	movs	r2, #0
 800aff2:	603b      	str	r3, [r7, #0]
 800aff4:	607a      	str	r2, [r7, #4]
 800aff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800affa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800affe:	f7f5 f9bf 	bl	8000380 <__aeabi_uldivmod>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4610      	mov	r0, r2
 800b008:	4619      	mov	r1, r3
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	020b      	lsls	r3, r1, #8
 800b014:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b018:	0202      	lsls	r2, r0, #8
 800b01a:	6979      	ldr	r1, [r7, #20]
 800b01c:	6849      	ldr	r1, [r1, #4]
 800b01e:	0849      	lsrs	r1, r1, #1
 800b020:	2000      	movs	r0, #0
 800b022:	460c      	mov	r4, r1
 800b024:	4605      	mov	r5, r0
 800b026:	eb12 0804 	adds.w	r8, r2, r4
 800b02a:	eb43 0905 	adc.w	r9, r3, r5
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	469a      	mov	sl, r3
 800b036:	4693      	mov	fp, r2
 800b038:	4652      	mov	r2, sl
 800b03a:	465b      	mov	r3, fp
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 f99e 	bl	8000380 <__aeabi_uldivmod>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4613      	mov	r3, r2
 800b04a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b052:	d308      	bcc.n	800b066 <UART_SetConfig+0x79a>
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b05a:	d204      	bcs.n	800b066 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b062:	60da      	str	r2, [r3, #12]
 800b064:	e17c      	b.n	800b360 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b06c:	e178      	b.n	800b360 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b076:	f040 80c5 	bne.w	800b204 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b07a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b07e:	2b20      	cmp	r3, #32
 800b080:	dc48      	bgt.n	800b114 <UART_SetConfig+0x848>
 800b082:	2b00      	cmp	r3, #0
 800b084:	db7b      	blt.n	800b17e <UART_SetConfig+0x8b2>
 800b086:	2b20      	cmp	r3, #32
 800b088:	d879      	bhi.n	800b17e <UART_SetConfig+0x8b2>
 800b08a:	a201      	add	r2, pc, #4	@ (adr r2, 800b090 <UART_SetConfig+0x7c4>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b11b 	.word	0x0800b11b
 800b094:	0800b123 	.word	0x0800b123
 800b098:	0800b17f 	.word	0x0800b17f
 800b09c:	0800b17f 	.word	0x0800b17f
 800b0a0:	0800b12b 	.word	0x0800b12b
 800b0a4:	0800b17f 	.word	0x0800b17f
 800b0a8:	0800b17f 	.word	0x0800b17f
 800b0ac:	0800b17f 	.word	0x0800b17f
 800b0b0:	0800b13b 	.word	0x0800b13b
 800b0b4:	0800b17f 	.word	0x0800b17f
 800b0b8:	0800b17f 	.word	0x0800b17f
 800b0bc:	0800b17f 	.word	0x0800b17f
 800b0c0:	0800b17f 	.word	0x0800b17f
 800b0c4:	0800b17f 	.word	0x0800b17f
 800b0c8:	0800b17f 	.word	0x0800b17f
 800b0cc:	0800b17f 	.word	0x0800b17f
 800b0d0:	0800b14b 	.word	0x0800b14b
 800b0d4:	0800b17f 	.word	0x0800b17f
 800b0d8:	0800b17f 	.word	0x0800b17f
 800b0dc:	0800b17f 	.word	0x0800b17f
 800b0e0:	0800b17f 	.word	0x0800b17f
 800b0e4:	0800b17f 	.word	0x0800b17f
 800b0e8:	0800b17f 	.word	0x0800b17f
 800b0ec:	0800b17f 	.word	0x0800b17f
 800b0f0:	0800b17f 	.word	0x0800b17f
 800b0f4:	0800b17f 	.word	0x0800b17f
 800b0f8:	0800b17f 	.word	0x0800b17f
 800b0fc:	0800b17f 	.word	0x0800b17f
 800b100:	0800b17f 	.word	0x0800b17f
 800b104:	0800b17f 	.word	0x0800b17f
 800b108:	0800b17f 	.word	0x0800b17f
 800b10c:	0800b17f 	.word	0x0800b17f
 800b110:	0800b171 	.word	0x0800b171
 800b114:	2b40      	cmp	r3, #64	@ 0x40
 800b116:	d02e      	beq.n	800b176 <UART_SetConfig+0x8aa>
 800b118:	e031      	b.n	800b17e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b11a:	f7fb fc2b 	bl	8006974 <HAL_RCC_GetPCLK1Freq>
 800b11e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b120:	e033      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b122:	f7fb fc3d 	bl	80069a0 <HAL_RCC_GetPCLK2Freq>
 800b126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b128:	e02f      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b12a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fc feae 	bl	8007e90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b138:	e027      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b13a:	f107 0318 	add.w	r3, r7, #24
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc fffa 	bl	8008138 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b148:	e01f      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b14a:	4b2d      	ldr	r3, [pc, #180]	@ (800b200 <UART_SetConfig+0x934>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0320 	and.w	r3, r3, #32
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b156:	4b2a      	ldr	r3, [pc, #168]	@ (800b200 <UART_SetConfig+0x934>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	08db      	lsrs	r3, r3, #3
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	4a24      	ldr	r2, [pc, #144]	@ (800b1f4 <UART_SetConfig+0x928>)
 800b162:	fa22 f303 	lsr.w	r3, r2, r3
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b168:	e00f      	b.n	800b18a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b16a:	4b22      	ldr	r3, [pc, #136]	@ (800b1f4 <UART_SetConfig+0x928>)
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b16e:	e00c      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b170:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <UART_SetConfig+0x92c>)
 800b172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b174:	e009      	b.n	800b18a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b17c:	e005      	b.n	800b18a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b18a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80e7 	beq.w	800b360 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b196:	4a19      	ldr	r2, [pc, #100]	@ (800b1fc <UART_SetConfig+0x930>)
 800b198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b19c:	461a      	mov	r2, r3
 800b19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a4:	005a      	lsls	r2, r3, #1
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	085b      	lsrs	r3, r3, #1
 800b1ac:	441a      	add	r2, r3
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	2b0f      	cmp	r3, #15
 800b1bc:	d916      	bls.n	800b1ec <UART_SetConfig+0x920>
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1c4:	d212      	bcs.n	800b1ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f023 030f 	bic.w	r3, r3, #15
 800b1ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d2:	085b      	lsrs	r3, r3, #1
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b1e8:	60da      	str	r2, [r3, #12]
 800b1ea:	e0b9      	b.n	800b360 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1f2:	e0b5      	b.n	800b360 <UART_SetConfig+0xa94>
 800b1f4:	03d09000 	.word	0x03d09000
 800b1f8:	003d0900 	.word	0x003d0900
 800b1fc:	08022dc4 	.word	0x08022dc4
 800b200:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b204:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b208:	2b20      	cmp	r3, #32
 800b20a:	dc49      	bgt.n	800b2a0 <UART_SetConfig+0x9d4>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	db7c      	blt.n	800b30a <UART_SetConfig+0xa3e>
 800b210:	2b20      	cmp	r3, #32
 800b212:	d87a      	bhi.n	800b30a <UART_SetConfig+0xa3e>
 800b214:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0x950>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b2a7 	.word	0x0800b2a7
 800b220:	0800b2af 	.word	0x0800b2af
 800b224:	0800b30b 	.word	0x0800b30b
 800b228:	0800b30b 	.word	0x0800b30b
 800b22c:	0800b2b7 	.word	0x0800b2b7
 800b230:	0800b30b 	.word	0x0800b30b
 800b234:	0800b30b 	.word	0x0800b30b
 800b238:	0800b30b 	.word	0x0800b30b
 800b23c:	0800b2c7 	.word	0x0800b2c7
 800b240:	0800b30b 	.word	0x0800b30b
 800b244:	0800b30b 	.word	0x0800b30b
 800b248:	0800b30b 	.word	0x0800b30b
 800b24c:	0800b30b 	.word	0x0800b30b
 800b250:	0800b30b 	.word	0x0800b30b
 800b254:	0800b30b 	.word	0x0800b30b
 800b258:	0800b30b 	.word	0x0800b30b
 800b25c:	0800b2d7 	.word	0x0800b2d7
 800b260:	0800b30b 	.word	0x0800b30b
 800b264:	0800b30b 	.word	0x0800b30b
 800b268:	0800b30b 	.word	0x0800b30b
 800b26c:	0800b30b 	.word	0x0800b30b
 800b270:	0800b30b 	.word	0x0800b30b
 800b274:	0800b30b 	.word	0x0800b30b
 800b278:	0800b30b 	.word	0x0800b30b
 800b27c:	0800b30b 	.word	0x0800b30b
 800b280:	0800b30b 	.word	0x0800b30b
 800b284:	0800b30b 	.word	0x0800b30b
 800b288:	0800b30b 	.word	0x0800b30b
 800b28c:	0800b30b 	.word	0x0800b30b
 800b290:	0800b30b 	.word	0x0800b30b
 800b294:	0800b30b 	.word	0x0800b30b
 800b298:	0800b30b 	.word	0x0800b30b
 800b29c:	0800b2fd 	.word	0x0800b2fd
 800b2a0:	2b40      	cmp	r3, #64	@ 0x40
 800b2a2:	d02e      	beq.n	800b302 <UART_SetConfig+0xa36>
 800b2a4:	e031      	b.n	800b30a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a6:	f7fb fb65 	bl	8006974 <HAL_RCC_GetPCLK1Freq>
 800b2aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2ac:	e033      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2ae:	f7fb fb77 	bl	80069a0 <HAL_RCC_GetPCLK2Freq>
 800b2b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2b4:	e02f      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fc fde8 	bl	8007e90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e027      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c6:	f107 0318 	add.w	r3, r7, #24
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fc ff34 	bl	8008138 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e01f      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800b38c <UART_SetConfig+0xac0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d009      	beq.n	800b2f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b38c <UART_SetConfig+0xac0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	08db      	lsrs	r3, r3, #3
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	4a28      	ldr	r2, [pc, #160]	@ (800b390 <UART_SetConfig+0xac4>)
 800b2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2f4:	e00f      	b.n	800b316 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b2f6:	4b26      	ldr	r3, [pc, #152]	@ (800b390 <UART_SetConfig+0xac4>)
 800b2f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2fa:	e00c      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2fc:	4b25      	ldr	r3, [pc, #148]	@ (800b394 <UART_SetConfig+0xac8>)
 800b2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b300:	e009      	b.n	800b316 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b308:	e005      	b.n	800b316 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b314:	bf00      	nop
    }

    if (pclk != 0U)
 800b316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d021      	beq.n	800b360 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b320:	4a1d      	ldr	r2, [pc, #116]	@ (800b398 <UART_SetConfig+0xacc>)
 800b322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b326:	461a      	mov	r2, r3
 800b328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	441a      	add	r2, r3
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b342:	2b0f      	cmp	r3, #15
 800b344:	d909      	bls.n	800b35a <UART_SetConfig+0xa8e>
 800b346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b34c:	d205      	bcs.n	800b35a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b350:	b29a      	uxth	r2, r3
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60da      	str	r2, [r3, #12]
 800b358:	e002      	b.n	800b360 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2200      	movs	r2, #0
 800b374:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2200      	movs	r2, #0
 800b37a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b37c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b380:	4618      	mov	r0, r3
 800b382:	3748      	adds	r7, #72	@ 0x48
 800b384:	46bd      	mov	sp, r7
 800b386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b38a:	bf00      	nop
 800b38c:	58024400 	.word	0x58024400
 800b390:	03d09000 	.word	0x03d09000
 800b394:	003d0900 	.word	0x003d0900
 800b398:	08022dc4 	.word	0x08022dc4

0800b39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a8:	f003 0308 	and.w	r3, r3, #8
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00a      	beq.n	800b3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00a      	beq.n	800b3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40e:	f003 0304 	and.w	r3, r3, #4
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b430:	f003 0310 	and.w	r3, r3, #16
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b49a:	d10a      	bne.n	800b4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b098      	sub	sp, #96	@ 0x60
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4f0:	f7f7 fa0e 	bl	8002910 <HAL_GetTick>
 800b4f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b08      	cmp	r3, #8
 800b502:	d12f      	bne.n	800b564 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b50c:	2200      	movs	r2, #0
 800b50e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f88e 	bl	800b634 <UART_WaitOnFlagUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d022      	beq.n	800b564 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b532:	653b      	str	r3, [r7, #80]	@ 0x50
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b53c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b53e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e6      	bne.n	800b51e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e063      	b.n	800b62c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d149      	bne.n	800b606 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b572:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b57a:	2200      	movs	r2, #0
 800b57c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f857 	bl	800b634 <UART_WaitOnFlagUntilTimeout>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d03c      	beq.n	800b606 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	623b      	str	r3, [r7, #32]
   return(result);
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e6      	bne.n	800b58c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f023 0301 	bic.w	r3, r3, #1
 800b5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3308      	adds	r3, #8
 800b5dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5de:	61fa      	str	r2, [r7, #28]
 800b5e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	69b9      	ldr	r1, [r7, #24]
 800b5e4:	69fa      	ldr	r2, [r7, #28]
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	617b      	str	r3, [r7, #20]
   return(result);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e5      	bne.n	800b5be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e012      	b.n	800b62c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2220      	movs	r2, #32
 800b60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2220      	movs	r2, #32
 800b612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3758      	adds	r7, #88	@ 0x58
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	4613      	mov	r3, r2
 800b642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b644:	e04f      	b.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64c:	d04b      	beq.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b64e:	f7f7 f95f 	bl	8002910 <HAL_GetTick>
 800b652:	4602      	mov	r2, r0
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d302      	bcc.n	800b664 <UART_WaitOnFlagUntilTimeout+0x30>
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e04e      	b.n	800b706 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	d037      	beq.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2b80      	cmp	r3, #128	@ 0x80
 800b67a:	d034      	beq.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b40      	cmp	r3, #64	@ 0x40
 800b680:	d031      	beq.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f003 0308 	and.w	r3, r3, #8
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	d110      	bne.n	800b6b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2208      	movs	r2, #8
 800b696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f839 	bl	800b710 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e029      	b.n	800b706 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69db      	ldr	r3, [r3, #28]
 800b6b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6c0:	d111      	bne.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 f81f 	bl	800b710 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e00f      	b.n	800b706 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69da      	ldr	r2, [r3, #28]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	bf0c      	ite	eq
 800b6f6:	2301      	moveq	r3, #1
 800b6f8:	2300      	movne	r3, #0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	429a      	cmp	r2, r3
 800b702:	d0a0      	beq.n	800b646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b095      	sub	sp, #84	@ 0x54
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b72c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b736:	643b      	str	r3, [r7, #64]	@ 0x40
 800b738:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b73c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e6      	bne.n	800b718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	61fb      	str	r3, [r7, #28]
   return(result);
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d8 <UART_EndRxTransfer+0xc8>)
 800b75e:	4013      	ands	r3, r2
 800b760:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b76a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b76c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e5      	bne.n	800b74a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b782:	2b01      	cmp	r3, #1
 800b784:	d118      	bne.n	800b7b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	60bb      	str	r3, [r7, #8]
   return(result);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f023 0310 	bic.w	r3, r3, #16
 800b79a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a4:	61bb      	str	r3, [r7, #24]
 800b7a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	69ba      	ldr	r2, [r7, #24]
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e6      	bne.n	800b786 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7cc:	bf00      	nop
 800b7ce:	3754      	adds	r7, #84	@ 0x54
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	effffffe 	.word	0xeffffffe

0800b7dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e027      	b.n	800b842 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2224      	movs	r2, #36	@ 0x24
 800b7fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0201 	bic.w	r2, r2, #1
 800b818:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b820:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b862:	2302      	movs	r3, #2
 800b864:	e02d      	b.n	800b8c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2224      	movs	r2, #36	@ 0x24
 800b872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f022 0201 	bic.w	r2, r2, #1
 800b88c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f850 	bl	800b948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d101      	bne.n	800b8e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e02d      	b.n	800b93e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2224      	movs	r2, #36	@ 0x24
 800b8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 0201 	bic.w	r2, r2, #1
 800b908:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f812 	bl	800b948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2220      	movs	r2, #32
 800b930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b954:	2b00      	cmp	r3, #0
 800b956:	d108      	bne.n	800b96a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b968:	e031      	b.n	800b9ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b96a:	2310      	movs	r3, #16
 800b96c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b96e:	2310      	movs	r3, #16
 800b970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	0e5b      	lsrs	r3, r3, #25
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	0f5b      	lsrs	r3, r3, #29
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	f003 0307 	and.w	r3, r3, #7
 800b990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	7b3a      	ldrb	r2, [r7, #12]
 800b996:	4911      	ldr	r1, [pc, #68]	@ (800b9dc <UARTEx_SetNbDataToProcess+0x94>)
 800b998:	5c8a      	ldrb	r2, [r1, r2]
 800b99a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b99e:	7b3a      	ldrb	r2, [r7, #12]
 800b9a0:	490f      	ldr	r1, [pc, #60]	@ (800b9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b9a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	7b7a      	ldrb	r2, [r7, #13]
 800b9b4:	4909      	ldr	r1, [pc, #36]	@ (800b9dc <UARTEx_SetNbDataToProcess+0x94>)
 800b9b6:	5c8a      	ldrb	r2, [r1, r2]
 800b9b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9bc:	7b7a      	ldrb	r2, [r7, #13]
 800b9be:	4908      	ldr	r1, [pc, #32]	@ (800b9e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b9c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	08022ddc 	.word	0x08022ddc
 800b9e0:	08022de4 	.word	0x08022de4

0800b9e4 <LL_GPIO_SetPinMode>:
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6819      	ldr	r1, [r3, #0]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	fb03 f203 	mul.w	r2, r3, r3
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	4413      	add	r3, r2
 800ba00:	43db      	mvns	r3, r3
 800ba02:	ea01 0203 	and.w	r2, r1, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	fb03 f303 	mul.w	r3, r3, r3
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	fb01 f303 	mul.w	r3, r1, r3
 800ba12:	431a      	orrs	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	601a      	str	r2, [r3, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <LL_GPIO_SetPinOutputType>:
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	43db      	mvns	r3, r3
 800ba38:	401a      	ands	r2, r3
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	fb01 f303 	mul.w	r3, r1, r3
 800ba42:	431a      	orrs	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	605a      	str	r2, [r3, #4]
}
 800ba48:	bf00      	nop
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <LL_GPIO_SetPinSpeed>:
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6899      	ldr	r1, [r3, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	fb03 f203 	mul.w	r2, r3, r3
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	4413      	add	r3, r2
 800ba70:	43db      	mvns	r3, r3
 800ba72:	ea01 0203 	and.w	r2, r1, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	fb03 f303 	mul.w	r3, r3, r3
 800ba7c:	6879      	ldr	r1, [r7, #4]
 800ba7e:	fb01 f303 	mul.w	r3, r1, r3
 800ba82:	431a      	orrs	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	609a      	str	r2, [r3, #8]
}
 800ba88:	bf00      	nop
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <LL_GPIO_SetPinPull>:
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68d9      	ldr	r1, [r3, #12]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	fb03 f203 	mul.w	r2, r3, r3
 800baaa:	4613      	mov	r3, r2
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	4413      	add	r3, r2
 800bab0:	43db      	mvns	r3, r3
 800bab2:	ea01 0203 	and.w	r2, r1, r3
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	fb03 f303 	mul.w	r3, r3, r3
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	fb01 f303 	mul.w	r3, r1, r3
 800bac2:	431a      	orrs	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	60da      	str	r2, [r3, #12]
}
 800bac8:	bf00      	nop
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <LL_GPIO_SetAFPin_0_7>:
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6a19      	ldr	r1, [r3, #32]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	fb03 f303 	mul.w	r3, r3, r3
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	fb02 f303 	mul.w	r3, r2, r3
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	fb03 f202 	mul.w	r2, r3, r2
 800baf6:	4613      	mov	r3, r2
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	1a9b      	subs	r3, r3, r2
 800bafc:	43db      	mvns	r3, r3
 800bafe:	ea01 0203 	and.w	r2, r1, r3
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	fb03 f303 	mul.w	r3, r3, r3
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	fb01 f303 	mul.w	r3, r1, r3
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	fb01 f303 	mul.w	r3, r1, r3
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	621a      	str	r2, [r3, #32]
}
 800bb20:	bf00      	nop
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <LL_GPIO_SetAFPin_8_15>:
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	0a12      	lsrs	r2, r2, #8
 800bb44:	fb02 f303 	mul.w	r3, r2, r3
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	0a12      	lsrs	r2, r2, #8
 800bb4c:	fb02 f303 	mul.w	r3, r2, r3
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	0a12      	lsrs	r2, r2, #8
 800bb54:	fb03 f202 	mul.w	r2, r3, r2
 800bb58:	4613      	mov	r3, r2
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	1a9b      	subs	r3, r3, r2
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	ea01 0203 	and.w	r2, r1, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	0a1b      	lsrs	r3, r3, #8
 800bb68:	68b9      	ldr	r1, [r7, #8]
 800bb6a:	0a09      	lsrs	r1, r1, #8
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	0a09      	lsrs	r1, r1, #8
 800bb74:	fb01 f303 	mul.w	r3, r1, r3
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	0a09      	lsrs	r1, r1, #8
 800bb7c:	fb01 f303 	mul.w	r3, r1, r3
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	fb01 f303 	mul.w	r3, r1, r3
 800bb86:	431a      	orrs	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bb8c:	bf00      	nop
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	fa93 f3a3 	rbit	r3, r3
 800bbae:	60fb      	str	r3, [r7, #12]
  return result;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <LL_GPIO_Init+0x26>
    return 32U;
 800bbba:	2320      	movs	r3, #32
 800bbbc:	e003      	b.n	800bbc6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	fab3 f383 	clz	r3, r3
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800bbc8:	e048      	b.n	800bc5c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	2101      	movs	r1, #1
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d03a      	beq.n	800bc56 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d003      	beq.n	800bbf0 <LL_GPIO_Init+0x58>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d10e      	bne.n	800bc0e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	69b9      	ldr	r1, [r7, #24]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff ff2b 	bl	800ba54 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	6819      	ldr	r1, [r3, #0]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	461a      	mov	r2, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff ff0b 	bl	800ba24 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	461a      	mov	r2, r3
 800bc14:	69b9      	ldr	r1, [r7, #24]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff ff3c 	bl	800ba94 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d111      	bne.n	800bc48 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	2bff      	cmp	r3, #255	@ 0xff
 800bc28:	d807      	bhi.n	800bc3a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	69b9      	ldr	r1, [r7, #24]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff ff4e 	bl	800bad4 <LL_GPIO_SetAFPin_0_7>
 800bc38:	e006      	b.n	800bc48 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	69b9      	ldr	r1, [r7, #24]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff ff72 	bl	800bb2c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	69b9      	ldr	r1, [r7, #24]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff fec7 	bl	800b9e4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	fa22 f303 	lsr.w	r3, r2, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1af      	bne.n	800bbca <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3720      	adds	r7, #32
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <LL_TIM_SetPrescaler>:
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <LL_TIM_SetAutoReload>:
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <LL_TIM_SetRepetitionCounter>:
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	f043 0201 	orr.w	r2, r3, #1
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	615a      	str	r2, [r3, #20]
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a3d      	ldr	r2, [pc, #244]	@ (800bdf0 <LL_TIM_Init+0x108>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d013      	beq.n	800bd28 <LL_TIM_Init+0x40>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd06:	d00f      	beq.n	800bd28 <LL_TIM_Init+0x40>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a3a      	ldr	r2, [pc, #232]	@ (800bdf4 <LL_TIM_Init+0x10c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d00b      	beq.n	800bd28 <LL_TIM_Init+0x40>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a39      	ldr	r2, [pc, #228]	@ (800bdf8 <LL_TIM_Init+0x110>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d007      	beq.n	800bd28 <LL_TIM_Init+0x40>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a38      	ldr	r2, [pc, #224]	@ (800bdfc <LL_TIM_Init+0x114>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d003      	beq.n	800bd28 <LL_TIM_Init+0x40>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a37      	ldr	r2, [pc, #220]	@ (800be00 <LL_TIM_Init+0x118>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d106      	bne.n	800bd36 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a2d      	ldr	r2, [pc, #180]	@ (800bdf0 <LL_TIM_Init+0x108>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d01f      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd44:	d01b      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf4 <LL_TIM_Init+0x10c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d017      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a29      	ldr	r2, [pc, #164]	@ (800bdf8 <LL_TIM_Init+0x110>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d013      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a28      	ldr	r2, [pc, #160]	@ (800bdfc <LL_TIM_Init+0x114>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00f      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a27      	ldr	r2, [pc, #156]	@ (800be00 <LL_TIM_Init+0x118>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00b      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a26      	ldr	r2, [pc, #152]	@ (800be04 <LL_TIM_Init+0x11c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d007      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a25      	ldr	r2, [pc, #148]	@ (800be08 <LL_TIM_Init+0x120>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d003      	beq.n	800bd7e <LL_TIM_Init+0x96>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a24      	ldr	r2, [pc, #144]	@ (800be0c <LL_TIM_Init+0x124>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d106      	bne.n	800bd8c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff ff79 	bl	800bc90 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff ff65 	bl	800bc74 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <LL_TIM_Init+0x108>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00f      	beq.n	800bdd2 <LL_TIM_Init+0xea>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a12      	ldr	r2, [pc, #72]	@ (800be00 <LL_TIM_Init+0x118>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d00b      	beq.n	800bdd2 <LL_TIM_Init+0xea>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a11      	ldr	r2, [pc, #68]	@ (800be04 <LL_TIM_Init+0x11c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d007      	beq.n	800bdd2 <LL_TIM_Init+0xea>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a10      	ldr	r2, [pc, #64]	@ (800be08 <LL_TIM_Init+0x120>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d003      	beq.n	800bdd2 <LL_TIM_Init+0xea>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a0f      	ldr	r2, [pc, #60]	@ (800be0c <LL_TIM_Init+0x124>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d105      	bne.n	800bdde <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff ff67 	bl	800bcac <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff ff72 	bl	800bcc8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	40010000 	.word	0x40010000
 800bdf4:	40000400 	.word	0x40000400
 800bdf8:	40000800 	.word	0x40000800
 800bdfc:	40000c00 	.word	0x40000c00
 800be00:	40010400 	.word	0x40010400
 800be04:	40014000 	.word	0x40014000
 800be08:	40014400 	.word	0x40014400
 800be0c:	40014800 	.word	0x40014800

0800be10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be10:	b084      	sub	sp, #16
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	f107 001c 	add.w	r0, r7, #28
 800be1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800be26:	2b01      	cmp	r3, #1
 800be28:	d121      	bne.n	800be6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68da      	ldr	r2, [r3, #12]
 800be3a:	4b2c      	ldr	r3, [pc, #176]	@ (800beec <USB_CoreInit+0xdc>)
 800be3c:	4013      	ands	r3, r2
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be52:	2b01      	cmp	r3, #1
 800be54:	d105      	bne.n	800be62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 faaa 	bl	800c3bc <USB_CoreReset>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]
 800be6c:	e01b      	b.n	800bea6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa9e 	bl	800c3bc <USB_CoreReset>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d106      	bne.n	800be9a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	639a      	str	r2, [r3, #56]	@ 0x38
 800be98:	e005      	b.n	800bea6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bea6:	7fbb      	ldrb	r3, [r7, #30]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d116      	bne.n	800beda <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800beba:	4b0d      	ldr	r3, [pc, #52]	@ (800bef0 <USB_CoreInit+0xe0>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f043 0206 	orr.w	r2, r3, #6
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f043 0220 	orr.w	r2, r3, #32
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bee6:	b004      	add	sp, #16
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	ffbdffbf 	.word	0xffbdffbf
 800bef0:	03ee0000 	.word	0x03ee0000

0800bef4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f023 0201 	bic.w	r2, r3, #1
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf32:	78fb      	ldrb	r3, [r7, #3]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d115      	bne.n	800bf64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf44:	200a      	movs	r0, #10
 800bf46:	f7f6 fcef 	bl	8002928 <HAL_Delay>
      ms += 10U;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	330a      	adds	r3, #10
 800bf4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fa25 	bl	800c3a0 <USB_GetMode>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d01e      	beq.n	800bf9a <USB_SetCurrentMode+0x84>
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf60:	d9f0      	bls.n	800bf44 <USB_SetCurrentMode+0x2e>
 800bf62:	e01a      	b.n	800bf9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf64:	78fb      	ldrb	r3, [r7, #3]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d115      	bne.n	800bf96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bf76:	200a      	movs	r0, #10
 800bf78:	f7f6 fcd6 	bl	8002928 <HAL_Delay>
      ms += 10U;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	330a      	adds	r3, #10
 800bf80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa0c 	bl	800c3a0 <USB_GetMode>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d005      	beq.n	800bf9a <USB_SetCurrentMode+0x84>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf92:	d9f0      	bls.n	800bf76 <USB_SetCurrentMode+0x60>
 800bf94:	e001      	b.n	800bf9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e005      	b.n	800bfa6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2bc8      	cmp	r3, #200	@ 0xc8
 800bf9e:	d101      	bne.n	800bfa4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b086      	sub	sp, #24
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bfbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
 800bfce:	e009      	b.n	800bfe4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	3340      	adds	r3, #64	@ 0x40
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	2200      	movs	r2, #0
 800bfdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	2b0e      	cmp	r3, #14
 800bfe8:	d9f2      	bls.n	800bfd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bfea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d11c      	bne.n	800c02c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c000:	f043 0302 	orr.w	r3, r3, #2
 800c004:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	e005      	b.n	800c038 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c030:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c03e:	461a      	mov	r2, r3
 800c040:	2300      	movs	r3, #0
 800c042:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c044:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d10d      	bne.n	800c068 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c04c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c050:	2b00      	cmp	r3, #0
 800c052:	d104      	bne.n	800c05e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c054:	2100      	movs	r1, #0
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f968 	bl	800c32c <USB_SetDevSpeed>
 800c05c:	e008      	b.n	800c070 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c05e:	2101      	movs	r1, #1
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f963 	bl	800c32c <USB_SetDevSpeed>
 800c066:	e003      	b.n	800c070 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c068:	2103      	movs	r1, #3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f95e 	bl	800c32c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c070:	2110      	movs	r1, #16
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f8fa 	bl	800c26c <USB_FlushTxFifo>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f924 	bl	800c2d0 <USB_FlushRxFifo>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c098:	461a      	mov	r2, r3
 800c09a:	2300      	movs	r3, #0
 800c09c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	e043      	b.n	800c144 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0d2:	d118      	bne.n	800c106 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	e013      	b.n	800c118 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	e008      	b.n	800c118 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c112:	461a      	mov	r2, r3
 800c114:	2300      	movs	r3, #0
 800c116:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c124:	461a      	mov	r2, r3
 800c126:	2300      	movs	r3, #0
 800c128:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	4413      	add	r3, r2
 800c132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c136:	461a      	mov	r2, r3
 800c138:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c13c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	3301      	adds	r3, #1
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c148:	461a      	mov	r2, r3
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d3b5      	bcc.n	800c0bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c150:	2300      	movs	r3, #0
 800c152:	613b      	str	r3, [r7, #16]
 800c154:	e043      	b.n	800c1de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	015a      	lsls	r2, r3, #5
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4413      	add	r3, r2
 800c15e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c16c:	d118      	bne.n	800c1a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c180:	461a      	mov	r2, r3
 800c182:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	e013      	b.n	800c1b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c196:	461a      	mov	r2, r3
 800c198:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	e008      	b.n	800c1b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c1d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	613b      	str	r3, [r7, #16]
 800c1de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d3b5      	bcc.n	800c156 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c1f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c20a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c20c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	f043 0210 	orr.w	r2, r3, #16
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	699a      	ldr	r2, [r3, #24]
 800c224:	4b0f      	ldr	r3, [pc, #60]	@ (800c264 <USB_DevInit+0x2b4>)
 800c226:	4313      	orrs	r3, r2
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c22c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c230:	2b00      	cmp	r3, #0
 800c232:	d005      	beq.n	800c240 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	f043 0208 	orr.w	r2, r3, #8
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c240:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c244:	2b01      	cmp	r3, #1
 800c246:	d105      	bne.n	800c254 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699a      	ldr	r2, [r3, #24]
 800c24c:	4b06      	ldr	r3, [pc, #24]	@ (800c268 <USB_DevInit+0x2b8>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c260:	b004      	add	sp, #16
 800c262:	4770      	bx	lr
 800c264:	803c3800 	.word	0x803c3800
 800c268:	40000004 	.word	0x40000004

0800c26c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c286:	d901      	bls.n	800c28c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c288:	2303      	movs	r3, #3
 800c28a:	e01b      	b.n	800c2c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	daf2      	bge.n	800c27a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	019b      	lsls	r3, r3, #6
 800c29c:	f043 0220 	orr.w	r2, r3, #32
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c2b0:	d901      	bls.n	800c2b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e006      	b.n	800c2c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	2b20      	cmp	r3, #32
 800c2c0:	d0f0      	beq.n	800c2a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c2e8:	d901      	bls.n	800c2ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e018      	b.n	800c320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	daf2      	bge.n	800c2dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2210      	movs	r2, #16
 800c2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c30c:	d901      	bls.n	800c312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e006      	b.n	800c320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	f003 0310 	and.w	r3, r3, #16
 800c31a:	2b10      	cmp	r3, #16
 800c31c:	d0f0      	beq.n	800c300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	68f9      	ldr	r1, [r7, #12]
 800c348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c34c:	4313      	orrs	r3, r2
 800c34e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c35e:	b480      	push	{r7}
 800c360:	b085      	sub	sp, #20
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c38c:	f043 0302 	orr.w	r3, r3, #2
 800c390:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	f003 0301 	and.w	r3, r3, #1
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3d4:	d901      	bls.n	800c3da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e01b      	b.n	800c412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	daf2      	bge.n	800c3c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	f043 0201 	orr.w	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c3fe:	d901      	bls.n	800c404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c400:	2303      	movs	r3, #3
 800c402:	e006      	b.n	800c412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d0f0      	beq.n	800c3f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
	...

0800c420 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c426:	4b92      	ldr	r3, [pc, #584]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c428:	22c0      	movs	r2, #192	@ 0xc0
 800c42a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c42c:	4b90      	ldr	r3, [pc, #576]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c42e:	22a8      	movs	r2, #168	@ 0xa8
 800c430:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800c432:	4b8f      	ldr	r3, [pc, #572]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c434:	2208      	movs	r2, #8
 800c436:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800c438:	4b8d      	ldr	r3, [pc, #564]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c43a:	2202      	movs	r2, #2
 800c43c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c43e:	4b8d      	ldr	r3, [pc, #564]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c440:	22ff      	movs	r2, #255	@ 0xff
 800c442:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c444:	4b8b      	ldr	r3, [pc, #556]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c446:	22ff      	movs	r2, #255	@ 0xff
 800c448:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c44a:	4b8a      	ldr	r3, [pc, #552]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c44c:	22ff      	movs	r2, #255	@ 0xff
 800c44e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c450:	4b88      	ldr	r3, [pc, #544]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c452:	2200      	movs	r2, #0
 800c454:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800c456:	4b88      	ldr	r3, [pc, #544]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c458:	22c0      	movs	r2, #192	@ 0xc0
 800c45a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800c45c:	4b86      	ldr	r3, [pc, #536]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c45e:	22a8      	movs	r2, #168	@ 0xa8
 800c460:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 8;
 800c462:	4b85      	ldr	r3, [pc, #532]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c464:	2208      	movs	r2, #8
 800c466:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 3;
 800c468:	4b83      	ldr	r3, [pc, #524]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c46a:	2203      	movs	r2, #3
 800c46c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c46e:	2100      	movs	r1, #0
 800c470:	2000      	movs	r0, #0
 800c472:	f006 ffd3 	bl	801341c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c476:	4b7e      	ldr	r3, [pc, #504]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	061a      	lsls	r2, r3, #24
 800c47c:	4b7c      	ldr	r3, [pc, #496]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	041b      	lsls	r3, r3, #16
 800c482:	431a      	orrs	r2, r3
 800c484:	4b7a      	ldr	r3, [pc, #488]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c486:	789b      	ldrb	r3, [r3, #2]
 800c488:	021b      	lsls	r3, r3, #8
 800c48a:	4313      	orrs	r3, r2
 800c48c:	4a78      	ldr	r2, [pc, #480]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c48e:	78d2      	ldrb	r2, [r2, #3]
 800c490:	4313      	orrs	r3, r2
 800c492:	061a      	lsls	r2, r3, #24
 800c494:	4b76      	ldr	r3, [pc, #472]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	0619      	lsls	r1, r3, #24
 800c49a:	4b75      	ldr	r3, [pc, #468]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c49c:	785b      	ldrb	r3, [r3, #1]
 800c49e:	041b      	lsls	r3, r3, #16
 800c4a0:	4319      	orrs	r1, r3
 800c4a2:	4b73      	ldr	r3, [pc, #460]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4a4:	789b      	ldrb	r3, [r3, #2]
 800c4a6:	021b      	lsls	r3, r3, #8
 800c4a8:	430b      	orrs	r3, r1
 800c4aa:	4971      	ldr	r1, [pc, #452]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4ac:	78c9      	ldrb	r1, [r1, #3]
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	021b      	lsls	r3, r3, #8
 800c4b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c4b6:	431a      	orrs	r2, r3
 800c4b8:	4b6d      	ldr	r3, [pc, #436]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	0619      	lsls	r1, r3, #24
 800c4be:	4b6c      	ldr	r3, [pc, #432]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	041b      	lsls	r3, r3, #16
 800c4c4:	4319      	orrs	r1, r3
 800c4c6:	4b6a      	ldr	r3, [pc, #424]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4c8:	789b      	ldrb	r3, [r3, #2]
 800c4ca:	021b      	lsls	r3, r3, #8
 800c4cc:	430b      	orrs	r3, r1
 800c4ce:	4968      	ldr	r1, [pc, #416]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4d0:	78c9      	ldrb	r1, [r1, #3]
 800c4d2:	430b      	orrs	r3, r1
 800c4d4:	0a1b      	lsrs	r3, r3, #8
 800c4d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	4b64      	ldr	r3, [pc, #400]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	0619      	lsls	r1, r3, #24
 800c4e2:	4b63      	ldr	r3, [pc, #396]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4e4:	785b      	ldrb	r3, [r3, #1]
 800c4e6:	041b      	lsls	r3, r3, #16
 800c4e8:	4319      	orrs	r1, r3
 800c4ea:	4b61      	ldr	r3, [pc, #388]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4ec:	789b      	ldrb	r3, [r3, #2]
 800c4ee:	021b      	lsls	r3, r3, #8
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	495f      	ldr	r1, [pc, #380]	@ (800c670 <MX_LWIP_Init+0x250>)
 800c4f4:	78c9      	ldrb	r1, [r1, #3]
 800c4f6:	430b      	orrs	r3, r1
 800c4f8:	0e1b      	lsrs	r3, r3, #24
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	4a5f      	ldr	r2, [pc, #380]	@ (800c67c <MX_LWIP_Init+0x25c>)
 800c4fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c500:	4b5c      	ldr	r3, [pc, #368]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	061a      	lsls	r2, r3, #24
 800c506:	4b5b      	ldr	r3, [pc, #364]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	041b      	lsls	r3, r3, #16
 800c50c:	431a      	orrs	r2, r3
 800c50e:	4b59      	ldr	r3, [pc, #356]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c510:	789b      	ldrb	r3, [r3, #2]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	4313      	orrs	r3, r2
 800c516:	4a57      	ldr	r2, [pc, #348]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c518:	78d2      	ldrb	r2, [r2, #3]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	061a      	lsls	r2, r3, #24
 800c51e:	4b55      	ldr	r3, [pc, #340]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	0619      	lsls	r1, r3, #24
 800c524:	4b53      	ldr	r3, [pc, #332]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	041b      	lsls	r3, r3, #16
 800c52a:	4319      	orrs	r1, r3
 800c52c:	4b51      	ldr	r3, [pc, #324]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c52e:	789b      	ldrb	r3, [r3, #2]
 800c530:	021b      	lsls	r3, r3, #8
 800c532:	430b      	orrs	r3, r1
 800c534:	494f      	ldr	r1, [pc, #316]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c536:	78c9      	ldrb	r1, [r1, #3]
 800c538:	430b      	orrs	r3, r1
 800c53a:	021b      	lsls	r3, r3, #8
 800c53c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c540:	431a      	orrs	r2, r3
 800c542:	4b4c      	ldr	r3, [pc, #304]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	0619      	lsls	r1, r3, #24
 800c548:	4b4a      	ldr	r3, [pc, #296]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c54a:	785b      	ldrb	r3, [r3, #1]
 800c54c:	041b      	lsls	r3, r3, #16
 800c54e:	4319      	orrs	r1, r3
 800c550:	4b48      	ldr	r3, [pc, #288]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c552:	789b      	ldrb	r3, [r3, #2]
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	430b      	orrs	r3, r1
 800c558:	4946      	ldr	r1, [pc, #280]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c55a:	78c9      	ldrb	r1, [r1, #3]
 800c55c:	430b      	orrs	r3, r1
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c564:	431a      	orrs	r2, r3
 800c566:	4b43      	ldr	r3, [pc, #268]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	0619      	lsls	r1, r3, #24
 800c56c:	4b41      	ldr	r3, [pc, #260]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c56e:	785b      	ldrb	r3, [r3, #1]
 800c570:	041b      	lsls	r3, r3, #16
 800c572:	4319      	orrs	r1, r3
 800c574:	4b3f      	ldr	r3, [pc, #252]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c576:	789b      	ldrb	r3, [r3, #2]
 800c578:	021b      	lsls	r3, r3, #8
 800c57a:	430b      	orrs	r3, r1
 800c57c:	493d      	ldr	r1, [pc, #244]	@ (800c674 <MX_LWIP_Init+0x254>)
 800c57e:	78c9      	ldrb	r1, [r1, #3]
 800c580:	430b      	orrs	r3, r1
 800c582:	0e1b      	lsrs	r3, r3, #24
 800c584:	4313      	orrs	r3, r2
 800c586:	4a3e      	ldr	r2, [pc, #248]	@ (800c680 <MX_LWIP_Init+0x260>)
 800c588:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c58a:	4b3b      	ldr	r3, [pc, #236]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	061a      	lsls	r2, r3, #24
 800c590:	4b39      	ldr	r3, [pc, #228]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c592:	785b      	ldrb	r3, [r3, #1]
 800c594:	041b      	lsls	r3, r3, #16
 800c596:	431a      	orrs	r2, r3
 800c598:	4b37      	ldr	r3, [pc, #220]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c59a:	789b      	ldrb	r3, [r3, #2]
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	4a35      	ldr	r2, [pc, #212]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5a2:	78d2      	ldrb	r2, [r2, #3]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	061a      	lsls	r2, r3, #24
 800c5a8:	4b33      	ldr	r3, [pc, #204]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	0619      	lsls	r1, r3, #24
 800c5ae:	4b32      	ldr	r3, [pc, #200]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5b0:	785b      	ldrb	r3, [r3, #1]
 800c5b2:	041b      	lsls	r3, r3, #16
 800c5b4:	4319      	orrs	r1, r3
 800c5b6:	4b30      	ldr	r3, [pc, #192]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5b8:	789b      	ldrb	r3, [r3, #2]
 800c5ba:	021b      	lsls	r3, r3, #8
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	492e      	ldr	r1, [pc, #184]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5c0:	78c9      	ldrb	r1, [r1, #3]
 800c5c2:	430b      	orrs	r3, r1
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	4b2a      	ldr	r3, [pc, #168]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	0619      	lsls	r1, r3, #24
 800c5d2:	4b29      	ldr	r3, [pc, #164]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	041b      	lsls	r3, r3, #16
 800c5d8:	4319      	orrs	r1, r3
 800c5da:	4b27      	ldr	r3, [pc, #156]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5dc:	789b      	ldrb	r3, [r3, #2]
 800c5de:	021b      	lsls	r3, r3, #8
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	4925      	ldr	r1, [pc, #148]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5e4:	78c9      	ldrb	r1, [r1, #3]
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	0a1b      	lsrs	r3, r3, #8
 800c5ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	4b21      	ldr	r3, [pc, #132]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	0619      	lsls	r1, r3, #24
 800c5f6:	4b20      	ldr	r3, [pc, #128]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c5f8:	785b      	ldrb	r3, [r3, #1]
 800c5fa:	041b      	lsls	r3, r3, #16
 800c5fc:	4319      	orrs	r1, r3
 800c5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c600:	789b      	ldrb	r3, [r3, #2]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	430b      	orrs	r3, r1
 800c606:	491c      	ldr	r1, [pc, #112]	@ (800c678 <MX_LWIP_Init+0x258>)
 800c608:	78c9      	ldrb	r1, [r1, #3]
 800c60a:	430b      	orrs	r3, r1
 800c60c:	0e1b      	lsrs	r3, r3, #24
 800c60e:	4313      	orrs	r3, r2
 800c610:	4a1c      	ldr	r2, [pc, #112]	@ (800c684 <MX_LWIP_Init+0x264>)
 800c612:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c614:	4b1c      	ldr	r3, [pc, #112]	@ (800c688 <MX_LWIP_Init+0x268>)
 800c616:	9302      	str	r3, [sp, #8]
 800c618:	4b1c      	ldr	r3, [pc, #112]	@ (800c68c <MX_LWIP_Init+0x26c>)
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	2300      	movs	r3, #0
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	4b18      	ldr	r3, [pc, #96]	@ (800c684 <MX_LWIP_Init+0x264>)
 800c622:	4a17      	ldr	r2, [pc, #92]	@ (800c680 <MX_LWIP_Init+0x260>)
 800c624:	4915      	ldr	r1, [pc, #84]	@ (800c67c <MX_LWIP_Init+0x25c>)
 800c626:	481a      	ldr	r0, [pc, #104]	@ (800c690 <MX_LWIP_Init+0x270>)
 800c628:	f007 fd8a 	bl	8014140 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c62c:	4818      	ldr	r0, [pc, #96]	@ (800c690 <MX_LWIP_Init+0x270>)
 800c62e:	f007 ff39 	bl	80144a4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c632:	4817      	ldr	r0, [pc, #92]	@ (800c690 <MX_LWIP_Init+0x270>)
 800c634:	f007 ff46 	bl	80144c4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c638:	4916      	ldr	r1, [pc, #88]	@ (800c694 <MX_LWIP_Init+0x274>)
 800c63a:	4815      	ldr	r0, [pc, #84]	@ (800c690 <MX_LWIP_Init+0x270>)
 800c63c:	f008 f844 	bl	80146c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c640:	2224      	movs	r2, #36	@ 0x24
 800c642:	2100      	movs	r1, #0
 800c644:	4814      	ldr	r0, [pc, #80]	@ (800c698 <MX_LWIP_Init+0x278>)
 800c646:	f012 f990 	bl	801e96a <memset>
  attributes.name = "EthLink";
 800c64a:	4b13      	ldr	r3, [pc, #76]	@ (800c698 <MX_LWIP_Init+0x278>)
 800c64c:	4a13      	ldr	r2, [pc, #76]	@ (800c69c <MX_LWIP_Init+0x27c>)
 800c64e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c650:	4b11      	ldr	r3, [pc, #68]	@ (800c698 <MX_LWIP_Init+0x278>)
 800c652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c656:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c658:	4b0f      	ldr	r3, [pc, #60]	@ (800c698 <MX_LWIP_Init+0x278>)
 800c65a:	2210      	movs	r2, #16
 800c65c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c65e:	4a0e      	ldr	r2, [pc, #56]	@ (800c698 <MX_LWIP_Init+0x278>)
 800c660:	490b      	ldr	r1, [pc, #44]	@ (800c690 <MX_LWIP_Init+0x270>)
 800c662:	480f      	ldr	r0, [pc, #60]	@ (800c6a0 <MX_LWIP_Init+0x280>)
 800c664:	f000 fdc5 	bl	800d1f2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c668:	bf00      	nop
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	24000854 	.word	0x24000854
 800c674:	24000858 	.word	0x24000858
 800c678:	2400085c 	.word	0x2400085c
 800c67c:	24000848 	.word	0x24000848
 800c680:	2400084c 	.word	0x2400084c
 800c684:	24000850 	.word	0x24000850
 800c688:	0801332d 	.word	0x0801332d
 800c68c:	0800cb55 	.word	0x0800cb55
 800c690:	24000814 	.word	0x24000814
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	24000860 	.word	0x24000860
 800c69c:	0801f7c8 	.word	0x0801f7c8
 800c6a0:	0800ce49 	.word	0x0800ce49

0800c6a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c6c0:	4b04      	ldr	r3, [pc, #16]	@ (800c6d4 <HAL_ETH_RxCpltCallback+0x1c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f001 f84b 	bl	800d760 <osSemaphoreRelease>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2400088c 	.word	0x2400088c

0800c6d8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c6e0:	4b04      	ldr	r3, [pc, #16]	@ (800c6f4 <HAL_ETH_TxCpltCallback+0x1c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f001 f83b 	bl	800d760 <osSemaphoreRelease>
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	24000890 	.word	0x24000890

0800c6f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7f7 fa79 	bl	8003bf8 <HAL_ETH_GetDMAError>
 800c706:	4603      	mov	r3, r0
 800c708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c70c:	2b80      	cmp	r3, #128	@ 0x80
 800c70e:	d104      	bne.n	800c71a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c710:	4b04      	ldr	r3, [pc, #16]	@ (800c724 <HAL_ETH_ErrorCallback+0x2c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4618      	mov	r0, r3
 800c716:	f001 f823 	bl	800d760 <osSemaphoreRelease>
  }
}
 800c71a:	bf00      	nop
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	2400088c 	.word	0x2400088c

0800c728 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b0aa      	sub	sp, #168	@ 0xa8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c742:	f107 0310 	add.w	r3, r7, #16
 800c746:	2264      	movs	r2, #100	@ 0x64
 800c748:	2100      	movs	r1, #0
 800c74a:	4618      	mov	r0, r3
 800c74c:	f012 f90d 	bl	801e96a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c750:	4b85      	ldr	r3, [pc, #532]	@ (800c968 <low_level_init+0x240>)
 800c752:	4a86      	ldr	r2, [pc, #536]	@ (800c96c <low_level_init+0x244>)
 800c754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c756:	2300      	movs	r3, #0
 800c758:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c75a:	2380      	movs	r3, #128	@ 0x80
 800c75c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c75e:	23e1      	movs	r3, #225	@ 0xe1
 800c760:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c762:	2300      	movs	r3, #0
 800c764:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c766:	2300      	movs	r3, #0
 800c768:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c76a:	2300      	movs	r3, #0
 800c76c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c76e:	4a7e      	ldr	r2, [pc, #504]	@ (800c968 <low_level_init+0x240>)
 800c770:	f107 0308 	add.w	r3, r7, #8
 800c774:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c776:	4b7c      	ldr	r3, [pc, #496]	@ (800c968 <low_level_init+0x240>)
 800c778:	2201      	movs	r2, #1
 800c77a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c77c:	4b7a      	ldr	r3, [pc, #488]	@ (800c968 <low_level_init+0x240>)
 800c77e:	4a7c      	ldr	r2, [pc, #496]	@ (800c970 <low_level_init+0x248>)
 800c780:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c782:	4b79      	ldr	r3, [pc, #484]	@ (800c968 <low_level_init+0x240>)
 800c784:	4a7b      	ldr	r2, [pc, #492]	@ (800c974 <low_level_init+0x24c>)
 800c786:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c788:	4b77      	ldr	r3, [pc, #476]	@ (800c968 <low_level_init+0x240>)
 800c78a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c78e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c790:	4875      	ldr	r0, [pc, #468]	@ (800c968 <low_level_init+0x240>)
 800c792:	f7f6 fa65 	bl	8002c60 <HAL_ETH_Init>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c79c:	2238      	movs	r2, #56	@ 0x38
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4875      	ldr	r0, [pc, #468]	@ (800c978 <low_level_init+0x250>)
 800c7a2:	f012 f8e2 	bl	801e96a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c7a6:	4b74      	ldr	r3, [pc, #464]	@ (800c978 <low_level_init+0x250>)
 800c7a8:	2221      	movs	r2, #33	@ 0x21
 800c7aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c7ac:	4b72      	ldr	r3, [pc, #456]	@ (800c978 <low_level_init+0x250>)
 800c7ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800c7b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c7b4:	4b70      	ldr	r3, [pc, #448]	@ (800c978 <low_level_init+0x250>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c7ba:	4870      	ldr	r0, [pc, #448]	@ (800c97c <low_level_init+0x254>)
 800c7bc:	f007 fb7a 	bl	8013eb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2206      	movs	r2, #6
 800c7c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c7c8:	4b67      	ldr	r3, [pc, #412]	@ (800c968 <low_level_init+0x240>)
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	781a      	ldrb	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c7d4:	4b64      	ldr	r3, [pc, #400]	@ (800c968 <low_level_init+0x240>)
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	785a      	ldrb	r2, [r3, #1]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c7e0:	4b61      	ldr	r3, [pc, #388]	@ (800c968 <low_level_init+0x240>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	789a      	ldrb	r2, [r3, #2]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c7ec:	4b5e      	ldr	r3, [pc, #376]	@ (800c968 <low_level_init+0x240>)
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	78da      	ldrb	r2, [r3, #3]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c7f8:	4b5b      	ldr	r3, [pc, #364]	@ (800c968 <low_level_init+0x240>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	791a      	ldrb	r2, [r3, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c804:	4b58      	ldr	r3, [pc, #352]	@ (800c968 <low_level_init+0x240>)
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	795a      	ldrb	r2, [r3, #5]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c816:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c81e:	f043 030a 	orr.w	r3, r3, #10
 800c822:	b2da      	uxtb	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	2001      	movs	r0, #1
 800c830:	f000 febb 	bl	800d5aa <osSemaphoreNew>
 800c834:	4603      	mov	r3, r0
 800c836:	4a52      	ldr	r2, [pc, #328]	@ (800c980 <low_level_init+0x258>)
 800c838:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c83a:	2200      	movs	r2, #0
 800c83c:	2100      	movs	r1, #0
 800c83e:	2001      	movs	r0, #1
 800c840:	f000 feb3 	bl	800d5aa <osSemaphoreNew>
 800c844:	4603      	mov	r3, r0
 800c846:	4a4f      	ldr	r2, [pc, #316]	@ (800c984 <low_level_init+0x25c>)
 800c848:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c84a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c84e:	2224      	movs	r2, #36	@ 0x24
 800c850:	2100      	movs	r1, #0
 800c852:	4618      	mov	r0, r3
 800c854:	f012 f889 	bl	801e96a <memset>
  attributes.name = "EthIf";
 800c858:	4b4b      	ldr	r3, [pc, #300]	@ (800c988 <low_level_init+0x260>)
 800c85a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c85c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c864:	2330      	movs	r3, #48	@ 0x30
 800c866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c86a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c86e:	461a      	mov	r2, r3
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4846      	ldr	r0, [pc, #280]	@ (800c98c <low_level_init+0x264>)
 800c874:	f000 fcbd 	bl	800d1f2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c878:	4945      	ldr	r1, [pc, #276]	@ (800c990 <low_level_init+0x268>)
 800c87a:	4846      	ldr	r0, [pc, #280]	@ (800c994 <low_level_init+0x26c>)
 800c87c:	f7f5 fef1 	bl	8002662 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800c880:	4844      	ldr	r0, [pc, #272]	@ (800c994 <low_level_init+0x26c>)
 800c882:	f7f5 ff20 	bl	80026c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800c886:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d165      	bne.n	800c95a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c88e:	4841      	ldr	r0, [pc, #260]	@ (800c994 <low_level_init+0x26c>)
 800c890:	f7f5 ff66 	bl	8002760 <LAN8742_GetLinkState>
 800c894:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	dc06      	bgt.n	800c8ae <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f007 fee1 	bl	8014668 <netif_set_link_down>
      netif_set_down(netif);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f007 fe78 	bl	801459c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c8ac:	e057      	b.n	800c95e <low_level_init+0x236>
      switch (PHYLinkState)
 800c8ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8b2:	3b02      	subs	r3, #2
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d82b      	bhi.n	800c910 <low_level_init+0x1e8>
 800c8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c0 <low_level_init+0x198>)
 800c8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8be:	bf00      	nop
 800c8c0:	0800c8d1 	.word	0x0800c8d1
 800c8c4:	0800c8e3 	.word	0x0800c8e3
 800c8c8:	0800c8f3 	.word	0x0800c8f3
 800c8cc:	0800c903 	.word	0x0800c903
        duplex = ETH_FULLDUPLEX_MODE;
 800c8d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c8d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c8e0:	e01f      	b.n	800c922 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c8e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c8f0:	e017      	b.n	800c922 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800c8f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c900:	e00f      	b.n	800c922 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800c902:	2300      	movs	r3, #0
 800c904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c908:	2300      	movs	r3, #0
 800c90a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c90e:	e008      	b.n	800c922 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800c910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c914:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c91c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c920:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c922:	f107 0310 	add.w	r3, r7, #16
 800c926:	4619      	mov	r1, r3
 800c928:	480f      	ldr	r0, [pc, #60]	@ (800c968 <low_level_init+0x240>)
 800c92a:	f7f6 ff27 	bl	800377c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c92e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c932:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c93a:	f107 0310 	add.w	r3, r7, #16
 800c93e:	4619      	mov	r1, r3
 800c940:	4809      	ldr	r0, [pc, #36]	@ (800c968 <low_level_init+0x240>)
 800c942:	f7f7 f8ef 	bl	8003b24 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800c946:	4808      	ldr	r0, [pc, #32]	@ (800c968 <low_level_init+0x240>)
 800c948:	f7f6 fa88 	bl	8002e5c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f007 fdb9 	bl	80144c4 <netif_set_up>
    netif_set_link_up(netif);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f007 fe54 	bl	8014600 <netif_set_link_up>
}
 800c958:	e001      	b.n	800c95e <low_level_init+0x236>
    Error_Handler();
 800c95a:	f7f5 f9d5 	bl	8001d08 <Error_Handler>
}
 800c95e:	bf00      	nop
 800c960:	37a8      	adds	r7, #168	@ 0xa8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	24000894 	.word	0x24000894
 800c96c:	40028000 	.word	0x40028000
 800c970:	30000080 	.word	0x30000080
 800c974:	30000000 	.word	0x30000000
 800c978:	24000944 	.word	0x24000944
 800c97c:	08022dec 	.word	0x08022dec
 800c980:	2400088c 	.word	0x2400088c
 800c984:	24000890 	.word	0x24000890
 800c988:	0801f7d0 	.word	0x0801f7d0
 800c98c:	0800cb01 	.word	0x0800cb01
 800c990:	24000010 	.word	0x24000010
 800c994:	2400097c 	.word	0x2400097c

0800c998 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b092      	sub	sp, #72	@ 0x48
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c9b0:	f107 030c 	add.w	r3, r7, #12
 800c9b4:	2230      	movs	r2, #48	@ 0x30
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f011 ffd6 	bl	801e96a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c9be:	f107 030c 	add.w	r3, r7, #12
 800c9c2:	2230      	movs	r2, #48	@ 0x30
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f011 ffcf 	bl	801e96a <memset>

  for(q = p; q != NULL; q = q->next)
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9d0:	e045      	b.n	800ca5e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	d902      	bls.n	800c9de <low_level_output+0x46>
      return ERR_IF;
 800c9d8:	f06f 030b 	mvn.w	r3, #11
 800c9dc:	e06c      	b.n	800cab8 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800c9de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e0:	6859      	ldr	r1, [r3, #4]
 800c9e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	3348      	adds	r3, #72	@ 0x48
 800c9ee:	443b      	add	r3, r7
 800c9f0:	3b3c      	subs	r3, #60	@ 0x3c
 800c9f2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f6:	895b      	ldrh	r3, [r3, #10]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	4413      	add	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	3348      	adds	r3, #72	@ 0x48
 800ca06:	443b      	add	r3, r7
 800ca08:	3b38      	subs	r3, #56	@ 0x38
 800ca0a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ca0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d011      	beq.n	800ca36 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ca12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca14:	1e5a      	subs	r2, r3, #1
 800ca16:	f107 000c 	add.w	r0, r7, #12
 800ca1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	440b      	add	r3, r1
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	18c1      	adds	r1, r0, r3
 800ca26:	4613      	mov	r3, r2
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	3348      	adds	r3, #72	@ 0x48
 800ca30:	443b      	add	r3, r7
 800ca32:	3b34      	subs	r3, #52	@ 0x34
 800ca34:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ca36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d109      	bne.n	800ca52 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ca3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca40:	4613      	mov	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	4413      	add	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	3348      	adds	r3, #72	@ 0x48
 800ca4a:	443b      	add	r3, r7
 800ca4c:	3b34      	subs	r3, #52	@ 0x34
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ca52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca54:	3301      	adds	r3, #1
 800ca56:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ca58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1b6      	bne.n	800c9d2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	891b      	ldrh	r3, [r3, #8]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4b15      	ldr	r3, [pc, #84]	@ (800cac0 <low_level_output+0x128>)
 800ca6c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ca6e:	4a14      	ldr	r2, [pc, #80]	@ (800cac0 <low_level_output+0x128>)
 800ca70:	f107 030c 	add.w	r3, r7, #12
 800ca74:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ca76:	4a12      	ldr	r2, [pc, #72]	@ (800cac0 <low_level_output+0x128>)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ca7c:	6838      	ldr	r0, [r7, #0]
 800ca7e:	f008 fa77 	bl	8014f70 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800ca82:	490f      	ldr	r1, [pc, #60]	@ (800cac0 <low_level_output+0x128>)
 800ca84:	480f      	ldr	r0, [pc, #60]	@ (800cac4 <low_level_output+0x12c>)
 800ca86:	f7f6 fad5 	bl	8003034 <HAL_ETH_Transmit_IT>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10e      	bne.n	800caae <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800ca90:	bf00      	nop
 800ca92:	4b0d      	ldr	r3, [pc, #52]	@ (800cac8 <low_level_output+0x130>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f04f 31ff 	mov.w	r1, #4294967295
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fe0e 	bl	800d6bc <osSemaphoreAcquire>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1f5      	bne.n	800ca92 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800caa6:	4807      	ldr	r0, [pc, #28]	@ (800cac4 <low_level_output+0x12c>)
 800caa8:	f7f6 fc4b 	bl	8003342 <HAL_ETH_ReleaseTxPacket>
 800caac:	e002      	b.n	800cab4 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800caae:	6838      	ldr	r0, [r7, #0]
 800cab0:	f008 f9b8 	bl	8014e24 <pbuf_free>
  }

  return errval;
 800cab4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3748      	adds	r7, #72	@ 0x48
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	24000944 	.word	0x24000944
 800cac4:	24000894 	.word	0x24000894
 800cac8:	24000890 	.word	0x24000890

0800cacc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cad8:	4b07      	ldr	r3, [pc, #28]	@ (800caf8 <low_level_input+0x2c>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d105      	bne.n	800caec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cae0:	f107 030c 	add.w	r3, r7, #12
 800cae4:	4619      	mov	r1, r3
 800cae6:	4805      	ldr	r0, [pc, #20]	@ (800cafc <low_level_input+0x30>)
 800cae8:	f7f6 faf5 	bl	80030d6 <HAL_ETH_ReadData>
  }

  return p;
 800caec:	68fb      	ldr	r3, [r7, #12]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	24000888 	.word	0x24000888
 800cafc:	24000894 	.word	0x24000894

0800cb00 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cb10:	4b0f      	ldr	r3, [pc, #60]	@ (800cb50 <ethernetif_input+0x50>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f04f 31ff 	mov.w	r1, #4294967295
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 fdcf 	bl	800d6bc <osSemaphoreAcquire>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1f5      	bne.n	800cb10 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800cb24:	68b8      	ldr	r0, [r7, #8]
 800cb26:	f7ff ffd1 	bl	800cacc <low_level_input>
 800cb2a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00a      	beq.n	800cb48 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	4798      	blx	r3
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f008 f96e 	bl	8014e24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1ea      	bne.n	800cb24 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cb4e:	e7df      	b.n	800cb10 <ethernetif_input+0x10>
 800cb50:	2400088c 	.word	0x2400088c

0800cb54 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <ethernetif_init+0x1c>
 800cb62:	4b0e      	ldr	r3, [pc, #56]	@ (800cb9c <ethernetif_init+0x48>)
 800cb64:	f240 2202 	movw	r2, #514	@ 0x202
 800cb68:	490d      	ldr	r1, [pc, #52]	@ (800cba0 <ethernetif_init+0x4c>)
 800cb6a:	480e      	ldr	r0, [pc, #56]	@ (800cba4 <ethernetif_init+0x50>)
 800cb6c:	f011 fe98 	bl	801e8a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2273      	movs	r2, #115	@ 0x73
 800cb74:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2274      	movs	r2, #116	@ 0x74
 800cb7c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a09      	ldr	r2, [pc, #36]	@ (800cba8 <ethernetif_init+0x54>)
 800cb84:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a08      	ldr	r2, [pc, #32]	@ (800cbac <ethernetif_init+0x58>)
 800cb8a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff fdcb 	bl	800c728 <low_level_init>

  return ERR_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	0801f7d8 	.word	0x0801f7d8
 800cba0:	0801f7f4 	.word	0x0801f7f4
 800cba4:	0801f804 	.word	0x0801f804
 800cba8:	0801c5f5 	.word	0x0801c5f5
 800cbac:	0800c999 	.word	0x0800c999

0800cbb0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800cbbc:	68f9      	ldr	r1, [r7, #12]
 800cbbe:	4809      	ldr	r0, [pc, #36]	@ (800cbe4 <pbuf_free_custom+0x34>)
 800cbc0:	f007 fa68 	bl	8014094 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800cbc4:	4b08      	ldr	r3, [pc, #32]	@ (800cbe8 <pbuf_free_custom+0x38>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d107      	bne.n	800cbdc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800cbcc:	4b06      	ldr	r3, [pc, #24]	@ (800cbe8 <pbuf_free_custom+0x38>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800cbd2:	4b06      	ldr	r3, [pc, #24]	@ (800cbec <pbuf_free_custom+0x3c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fdc2 	bl	800d760 <osSemaphoreRelease>
  }
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	08022dec 	.word	0x08022dec
 800cbe8:	24000888 	.word	0x24000888
 800cbec:	2400088c 	.word	0x2400088c

0800cbf0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cbf4:	f7f5 fe8c 	bl	8002910 <HAL_GetTick>
 800cbf8:	4603      	mov	r3, r0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08e      	sub	sp, #56	@ 0x38
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	605a      	str	r2, [r3, #4]
 800cc12:	609a      	str	r2, [r3, #8]
 800cc14:	60da      	str	r2, [r3, #12]
 800cc16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a5d      	ldr	r2, [pc, #372]	@ (800cd94 <HAL_ETH_MspInit+0x194>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	f040 80b3 	bne.w	800cd8a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800cc24:	4b5c      	ldr	r3, [pc, #368]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc2a:	4a5b      	ldr	r2, [pc, #364]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cc34:	4b58      	ldr	r3, [pc, #352]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc3e:	623b      	str	r3, [r7, #32]
 800cc40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800cc42:	4b55      	ldr	r3, [pc, #340]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc48:	4a53      	ldr	r2, [pc, #332]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cc52:	4b51      	ldr	r3, [pc, #324]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc5c:	61fb      	str	r3, [r7, #28]
 800cc5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800cc60:	4b4d      	ldr	r3, [pc, #308]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc66:	4a4c      	ldr	r2, [pc, #304]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc6c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800cc70:	4b49      	ldr	r3, [pc, #292]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cc76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc7a:	61bb      	str	r3, [r7, #24]
 800cc7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc7e:	4b46      	ldr	r3, [pc, #280]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc84:	4a44      	ldr	r2, [pc, #272]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc86:	f043 0304 	orr.w	r3, r3, #4
 800cc8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cc8e:	4b42      	ldr	r3, [pc, #264]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc94:	f003 0304 	and.w	r3, r3, #4
 800cc98:	617b      	str	r3, [r7, #20]
 800cc9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc9c:	4b3e      	ldr	r3, [pc, #248]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cc9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cca2:	4a3d      	ldr	r2, [pc, #244]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cca4:	f043 0301 	orr.w	r3, r3, #1
 800cca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ccac:	4b3a      	ldr	r3, [pc, #232]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800ccae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	613b      	str	r3, [r7, #16]
 800ccb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccba:	4b37      	ldr	r3, [pc, #220]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800ccbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccc0:	4a35      	ldr	r2, [pc, #212]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800ccc2:	f043 0302 	orr.w	r3, r3, #2
 800ccc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ccca:	4b33      	ldr	r3, [pc, #204]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	60fb      	str	r3, [r7, #12]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ccd8:	4b2f      	ldr	r3, [pc, #188]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800ccda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccde:	4a2e      	ldr	r2, [pc, #184]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800cce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cce8:	4b2b      	ldr	r3, [pc, #172]	@ (800cd98 <HAL_ETH_MspInit+0x198>)
 800ccea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf2:	60bb      	str	r3, [r7, #8]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ccf6:	2332      	movs	r3, #50	@ 0x32
 800ccf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd02:	2303      	movs	r3, #3
 800cd04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd06:	230b      	movs	r3, #11
 800cd08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4822      	ldr	r0, [pc, #136]	@ (800cd9c <HAL_ETH_MspInit+0x19c>)
 800cd12:	f7f7 fd01 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800cd16:	2386      	movs	r3, #134	@ 0x86
 800cd18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd22:	2303      	movs	r3, #3
 800cd24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd26:	230b      	movs	r3, #11
 800cd28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd2e:	4619      	mov	r1, r3
 800cd30:	481b      	ldr	r0, [pc, #108]	@ (800cda0 <HAL_ETH_MspInit+0x1a0>)
 800cd32:	f7f7 fcf1 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cd36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd40:	2300      	movs	r3, #0
 800cd42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd44:	2303      	movs	r3, #3
 800cd46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd48:	230b      	movs	r3, #11
 800cd4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd50:	4619      	mov	r1, r3
 800cd52:	4814      	ldr	r0, [pc, #80]	@ (800cda4 <HAL_ETH_MspInit+0x1a4>)
 800cd54:	f7f7 fce0 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800cd58:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800cd5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd5e:	2302      	movs	r3, #2
 800cd60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd66:	2303      	movs	r3, #3
 800cd68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd6a:	230b      	movs	r3, #11
 800cd6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd72:	4619      	mov	r1, r3
 800cd74:	480c      	ldr	r0, [pc, #48]	@ (800cda8 <HAL_ETH_MspInit+0x1a8>)
 800cd76:	f7f7 fccf 	bl	8004718 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2105      	movs	r1, #5
 800cd7e:	203d      	movs	r0, #61	@ 0x3d
 800cd80:	f7f5 fece 	bl	8002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cd84:	203d      	movs	r0, #61	@ 0x3d
 800cd86:	f7f5 fee5 	bl	8002b54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	3738      	adds	r7, #56	@ 0x38
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	40028000 	.word	0x40028000
 800cd98:	58024400 	.word	0x58024400
 800cd9c:	58020800 	.word	0x58020800
 800cda0:	58020000 	.word	0x58020000
 800cda4:	58020400 	.word	0x58020400
 800cda8:	58021800 	.word	0x58021800

0800cdac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800cdb0:	4802      	ldr	r0, [pc, #8]	@ (800cdbc <ETH_PHY_IO_Init+0x10>)
 800cdb2:	f7f6 fed1 	bl	8003b58 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	24000894 	.word	0x24000894

0800cdc0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
  return 0;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	68f9      	ldr	r1, [r7, #12]
 800cde2:	4807      	ldr	r0, [pc, #28]	@ (800ce00 <ETH_PHY_IO_ReadReg+0x30>)
 800cde4:	f7f6 fc22 	bl	800362c <HAL_ETH_ReadPHYRegister>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800cdee:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf2:	e000      	b.n	800cdf6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	24000894 	.word	0x24000894

0800ce04 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	68f9      	ldr	r1, [r7, #12]
 800ce16:	4807      	ldr	r0, [pc, #28]	@ (800ce34 <ETH_PHY_IO_WriteReg+0x30>)
 800ce18:	f7f6 fc5c 	bl	80036d4 <HAL_ETH_WritePHYRegister>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d002      	beq.n	800ce28 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ce22:	f04f 33ff 	mov.w	r3, #4294967295
 800ce26:	e000      	b.n	800ce2a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	24000894 	.word	0x24000894

0800ce38 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ce3c:	f7f5 fd68 	bl	8002910 <HAL_GetTick>
 800ce40:	4603      	mov	r3, r0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b0a0      	sub	sp, #128	@ 0x80
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ce50:	f107 0308 	add.w	r3, r7, #8
 800ce54:	2264      	movs	r2, #100	@ 0x64
 800ce56:	2100      	movs	r1, #0
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f011 fd86 	bl	801e96a <memset>
  int32_t PHYLinkState = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ce62:	2300      	movs	r3, #0
 800ce64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce66:	2300      	movs	r3, #0
 800ce68:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ce72:	483a      	ldr	r0, [pc, #232]	@ (800cf5c <ethernet_link_thread+0x114>)
 800ce74:	f7f5 fc74 	bl	8002760 <LAN8742_GetLinkState>
 800ce78:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ce7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce80:	089b      	lsrs	r3, r3, #2
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00c      	beq.n	800cea6 <ethernet_link_thread+0x5e>
 800ce8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	dc09      	bgt.n	800cea6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ce92:	4833      	ldr	r0, [pc, #204]	@ (800cf60 <ethernet_link_thread+0x118>)
 800ce94:	f7f6 f856 	bl	8002f44 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ce98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ce9a:	f007 fb7f 	bl	801459c <netif_set_down>
    netif_set_link_down(netif);
 800ce9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cea0:	f007 fbe2 	bl	8014668 <netif_set_link_down>
 800cea4:	e055      	b.n	800cf52 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800cea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cea8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ceac:	f003 0304 	and.w	r3, r3, #4
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d14e      	bne.n	800cf52 <ethernet_link_thread+0x10a>
 800ceb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	dd4b      	ble.n	800cf52 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ceba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cebc:	3b02      	subs	r3, #2
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d82a      	bhi.n	800cf18 <ethernet_link_thread+0xd0>
 800cec2:	a201      	add	r2, pc, #4	@ (adr r2, 800cec8 <ethernet_link_thread+0x80>)
 800cec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec8:	0800ced9 	.word	0x0800ced9
 800cecc:	0800ceeb 	.word	0x0800ceeb
 800ced0:	0800cefb 	.word	0x0800cefb
 800ced4:	0800cf0b 	.word	0x0800cf0b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ced8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cedc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cede:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cee2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cee4:	2301      	movs	r3, #1
 800cee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cee8:	e017      	b.n	800cf1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ceea:	2300      	movs	r3, #0
 800ceec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ceee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cef2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cef4:	2301      	movs	r3, #1
 800cef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cef8:	e00f      	b.n	800cf1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cefa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cefe:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf00:	2300      	movs	r3, #0
 800cf02:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf04:	2301      	movs	r3, #1
 800cf06:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf08:	e007      	b.n	800cf1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf12:	2301      	movs	r3, #1
 800cf14:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf16:	e000      	b.n	800cf1a <ethernet_link_thread+0xd2>
    default:
      break;
 800cf18:	bf00      	nop
    }

    if(linkchanged)
 800cf1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d018      	beq.n	800cf52 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800cf20:	f107 0308 	add.w	r3, r7, #8
 800cf24:	4619      	mov	r1, r3
 800cf26:	480e      	ldr	r0, [pc, #56]	@ (800cf60 <ethernet_link_thread+0x118>)
 800cf28:	f7f6 fc28 	bl	800377c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800cf2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf2e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800cf30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf32:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800cf34:	f107 0308 	add.w	r3, r7, #8
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4809      	ldr	r0, [pc, #36]	@ (800cf60 <ethernet_link_thread+0x118>)
 800cf3c:	f7f6 fdf2 	bl	8003b24 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800cf40:	4807      	ldr	r0, [pc, #28]	@ (800cf60 <ethernet_link_thread+0x118>)
 800cf42:	f7f5 ff8b 	bl	8002e5c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800cf46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf48:	f007 fabc 	bl	80144c4 <netif_set_up>
      netif_set_link_up(netif);
 800cf4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf4e:	f007 fb57 	bl	8014600 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800cf52:	2064      	movs	r0, #100	@ 0x64
 800cf54:	f000 fa00 	bl	800d358 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cf58:	e78b      	b.n	800ce72 <ethernet_link_thread+0x2a>
 800cf5a:	bf00      	nop
 800cf5c:	2400097c 	.word	0x2400097c
 800cf60:	24000894 	.word	0x24000894

0800cf64 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800cf6c:	4812      	ldr	r0, [pc, #72]	@ (800cfb8 <HAL_ETH_RxAllocateCallback+0x54>)
 800cf6e:	f007 f81d 	bl	8013fac <memp_malloc_pool>
 800cf72:	60f8      	str	r0, [r7, #12]
  if (p)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d014      	beq.n	800cfa4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f103 0220 	add.w	r2, r3, #32
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	4a0d      	ldr	r2, [pc, #52]	@ (800cfbc <HAL_ETH_RxAllocateCallback+0x58>)
 800cf88:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800cf92:	9201      	str	r2, [sp, #4]
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2241      	movs	r2, #65	@ 0x41
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	f007 fd87 	bl	8014ab0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800cfa2:	e005      	b.n	800cfb0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800cfa4:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	601a      	str	r2, [r3, #0]
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	08022dec 	.word	0x08022dec
 800cfbc:	0800cbb1 	.word	0x0800cbb1
 800cfc0:	24000888 	.word	0x24000888

0800cfc4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b08d      	sub	sp, #52	@ 0x34
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3b20      	subs	r3, #32
 800cfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800cfea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfec:	2200      	movs	r2, #0
 800cfee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800cff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff2:	887a      	ldrh	r2, [r7, #2]
 800cff4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800cff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d103      	bne.n	800d006 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800cffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	e003      	b.n	800d00e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d00c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d012:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d01a:	e009      	b.n	800d030 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01e:	891a      	ldrh	r2, [r3, #8]
 800d020:	887b      	ldrh	r3, [r7, #2]
 800d022:	4413      	add	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d028:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1f2      	bne.n	800d01c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d036:	887b      	ldrh	r3, [r7, #2]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	623a      	str	r2, [r7, #32]
 800d03c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dd1d      	ble.n	800d080 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	f003 021f 	and.w	r2, r3, #31
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4413      	add	r3, r2
 800d04e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d054:	f3bf 8f4f 	dsb	sy
}
 800d058:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800d05a:	4a0d      	ldr	r2, [pc, #52]	@ (800d090 <HAL_ETH_RxLinkCallback+0xcc>)
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3320      	adds	r3, #32
 800d066:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	3b20      	subs	r3, #32
 800d06c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dcf2      	bgt.n	800d05a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800d074:	f3bf 8f4f 	dsb	sy
}
 800d078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d07a:	f3bf 8f6f 	isb	sy
}
 800d07e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800d080:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d082:	bf00      	nop
 800d084:	3734      	adds	r7, #52	@ 0x34
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	e000ed00 	.word	0xe000ed00

0800d094 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f007 fec1 	bl	8014e24 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <__NVIC_SetPriority>:
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	6039      	str	r1, [r7, #0]
 800d0b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d0b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	db0a      	blt.n	800d0d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	490c      	ldr	r1, [pc, #48]	@ (800d0f8 <__NVIC_SetPriority+0x4c>)
 800d0c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0ca:	0112      	lsls	r2, r2, #4
 800d0cc:	b2d2      	uxtb	r2, r2
 800d0ce:	440b      	add	r3, r1
 800d0d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d0d4:	e00a      	b.n	800d0ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	4908      	ldr	r1, [pc, #32]	@ (800d0fc <__NVIC_SetPriority+0x50>)
 800d0dc:	88fb      	ldrh	r3, [r7, #6]
 800d0de:	f003 030f 	and.w	r3, r3, #15
 800d0e2:	3b04      	subs	r3, #4
 800d0e4:	0112      	lsls	r2, r2, #4
 800d0e6:	b2d2      	uxtb	r2, r2
 800d0e8:	440b      	add	r3, r1
 800d0ea:	761a      	strb	r2, [r3, #24]
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	e000e100 	.word	0xe000e100
 800d0fc:	e000ed00 	.word	0xe000ed00

0800d100 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d100:	b580      	push	{r7, lr}
 800d102:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d104:	4b05      	ldr	r3, [pc, #20]	@ (800d11c <SysTick_Handler+0x1c>)
 800d106:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d108:	f002 fd8c 	bl	800fc24 <xTaskGetSchedulerState>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d001      	beq.n	800d116 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d112:	f003 fc81 	bl	8010a18 <xPortSysTickHandler>
  }
}
 800d116:	bf00      	nop
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	e000e010 	.word	0xe000e010

0800d120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d120:	b580      	push	{r7, lr}
 800d122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d124:	2100      	movs	r1, #0
 800d126:	f06f 0004 	mvn.w	r0, #4
 800d12a:	f7ff ffbf 	bl	800d0ac <__NVIC_SetPriority>
#endif
}
 800d12e:	bf00      	nop
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d13a:	f3ef 8305 	mrs	r3, IPSR
 800d13e:	603b      	str	r3, [r7, #0]
  return(result);
 800d140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d146:	f06f 0305 	mvn.w	r3, #5
 800d14a:	607b      	str	r3, [r7, #4]
 800d14c:	e00c      	b.n	800d168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d14e:	4b0a      	ldr	r3, [pc, #40]	@ (800d178 <osKernelInitialize+0x44>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d105      	bne.n	800d162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d156:	4b08      	ldr	r3, [pc, #32]	@ (800d178 <osKernelInitialize+0x44>)
 800d158:	2201      	movs	r2, #1
 800d15a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	607b      	str	r3, [r7, #4]
 800d160:	e002      	b.n	800d168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d162:	f04f 33ff 	mov.w	r3, #4294967295
 800d166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d168:	687b      	ldr	r3, [r7, #4]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	2400099c 	.word	0x2400099c

0800d17c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d182:	f3ef 8305 	mrs	r3, IPSR
 800d186:	603b      	str	r3, [r7, #0]
  return(result);
 800d188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d003      	beq.n	800d196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d18e:	f06f 0305 	mvn.w	r3, #5
 800d192:	607b      	str	r3, [r7, #4]
 800d194:	e010      	b.n	800d1b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d196:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c4 <osKernelStart+0x48>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d109      	bne.n	800d1b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d19e:	f7ff ffbf 	bl	800d120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d1a2:	4b08      	ldr	r3, [pc, #32]	@ (800d1c4 <osKernelStart+0x48>)
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d1a8:	f002 f8b6 	bl	800f318 <vTaskStartScheduler>
      stat = osOK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	607b      	str	r3, [r7, #4]
 800d1b0:	e002      	b.n	800d1b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d1b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d1b8:	687b      	ldr	r3, [r7, #4]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	2400099c 	.word	0x2400099c

0800d1c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1ce:	f3ef 8305 	mrs	r3, IPSR
 800d1d2:	603b      	str	r3, [r7, #0]
  return(result);
 800d1d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d1da:	f002 f9c9 	bl	800f570 <xTaskGetTickCountFromISR>
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	e002      	b.n	800d1e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d1e2:	f002 f9b5 	bl	800f550 <xTaskGetTickCount>
 800d1e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d1e8:	687b      	ldr	r3, [r7, #4]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b08e      	sub	sp, #56	@ 0x38
 800d1f6:	af04      	add	r7, sp, #16
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d1fe:	2300      	movs	r3, #0
 800d200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d202:	f3ef 8305 	mrs	r3, IPSR
 800d206:	617b      	str	r3, [r7, #20]
  return(result);
 800d208:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d17e      	bne.n	800d30c <osThreadNew+0x11a>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d07b      	beq.n	800d30c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d214:	2380      	movs	r3, #128	@ 0x80
 800d216:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d218:	2318      	movs	r3, #24
 800d21a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d220:	f04f 33ff 	mov.w	r3, #4294967295
 800d224:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d045      	beq.n	800d2b8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <osThreadNew+0x48>
        name = attr->name;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d008      	beq.n	800d260 <osThreadNew+0x6e>
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b38      	cmp	r3, #56	@ 0x38
 800d252:	d805      	bhi.n	800d260 <osThreadNew+0x6e>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <osThreadNew+0x72>
        return (NULL);
 800d260:	2300      	movs	r3, #0
 800d262:	e054      	b.n	800d30e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	089b      	lsrs	r3, r3, #2
 800d272:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00e      	beq.n	800d29a <osThreadNew+0xa8>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	2ba7      	cmp	r3, #167	@ 0xa7
 800d282:	d90a      	bls.n	800d29a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <osThreadNew+0xa8>
        mem = 1;
 800d294:	2301      	movs	r3, #1
 800d296:	61bb      	str	r3, [r7, #24]
 800d298:	e010      	b.n	800d2bc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10c      	bne.n	800d2bc <osThreadNew+0xca>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d108      	bne.n	800d2bc <osThreadNew+0xca>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d104      	bne.n	800d2bc <osThreadNew+0xca>
          mem = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	e001      	b.n	800d2bc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d110      	bne.n	800d2e4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2ca:	9202      	str	r2, [sp, #8]
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	6a3a      	ldr	r2, [r7, #32]
 800d2d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f001 fe29 	bl	800ef30 <xTaskCreateStatic>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	613b      	str	r3, [r7, #16]
 800d2e2:	e013      	b.n	800d30c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d110      	bne.n	800d30c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	f107 0310 	add.w	r3, r7, #16
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f001 fe77 	bl	800eff0 <xTaskCreate>
 800d302:	4603      	mov	r3, r0
 800d304:	2b01      	cmp	r3, #1
 800d306:	d001      	beq.n	800d30c <osThreadNew+0x11a>
            hTask = NULL;
 800d308:	2300      	movs	r3, #0
 800d30a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d30c:	693b      	ldr	r3, [r7, #16]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3728      	adds	r7, #40	@ 0x28
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d31e:	f3ef 8305 	mrs	r3, IPSR
 800d322:	603b      	str	r3, [r7, #0]
  return(result);
 800d324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <osThreadYield+0x1a>
    stat = osErrorISR;
 800d32a:	f06f 0305 	mvn.w	r3, #5
 800d32e:	607b      	str	r3, [r7, #4]
 800d330:	e009      	b.n	800d346 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800d332:	2300      	movs	r3, #0
 800d334:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800d336:	4b07      	ldr	r3, [pc, #28]	@ (800d354 <osThreadYield+0x3c>)
 800d338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800d346:	687b      	ldr	r3, [r7, #4]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	e000ed04 	.word	0xe000ed04

0800d358 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d360:	f3ef 8305 	mrs	r3, IPSR
 800d364:	60bb      	str	r3, [r7, #8]
  return(result);
 800d366:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <osDelay+0x1c>
    stat = osErrorISR;
 800d36c:	f06f 0305 	mvn.w	r3, #5
 800d370:	60fb      	str	r3, [r7, #12]
 800d372:	e007      	b.n	800d384 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d374:	2300      	movs	r3, #0
 800d376:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 ff94 	bl	800f2ac <vTaskDelay>
    }
  }

  return (stat);
 800d384:	68fb      	ldr	r3, [r7, #12]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d38e:	b580      	push	{r7, lr}
 800d390:	b088      	sub	sp, #32
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d396:	2300      	movs	r3, #0
 800d398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d39a:	f3ef 8305 	mrs	r3, IPSR
 800d39e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d174      	bne.n	800d490 <osMutexNew+0x102>
    if (attr != NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d003      	beq.n	800d3b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	61bb      	str	r3, [r7, #24]
 800d3b2:	e001      	b.n	800d3b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <osMutexNew+0x3a>
      rmtx = 1U;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	e001      	b.n	800d3cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	f003 0308 	and.w	r3, r3, #8
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d15c      	bne.n	800d490 <osMutexNew+0x102>
      mem = -1;
 800d3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d015      	beq.n	800d40e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <osMutexNew+0x6a>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	2b4f      	cmp	r3, #79	@ 0x4f
 800d3f0:	d902      	bls.n	800d3f8 <osMutexNew+0x6a>
          mem = 1;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	613b      	str	r3, [r7, #16]
 800d3f6:	e00c      	b.n	800d412 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d108      	bne.n	800d412 <osMutexNew+0x84>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d104      	bne.n	800d412 <osMutexNew+0x84>
            mem = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	613b      	str	r3, [r7, #16]
 800d40c:	e001      	b.n	800d412 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d112      	bne.n	800d43e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d007      	beq.n	800d42e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	4619      	mov	r1, r3
 800d424:	2004      	movs	r0, #4
 800d426:	f000 fdd8 	bl	800dfda <xQueueCreateMutexStatic>
 800d42a:	61f8      	str	r0, [r7, #28]
 800d42c:	e016      	b.n	800d45c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	4619      	mov	r1, r3
 800d434:	2001      	movs	r0, #1
 800d436:	f000 fdd0 	bl	800dfda <xQueueCreateMutexStatic>
 800d43a:	61f8      	str	r0, [r7, #28]
 800d43c:	e00e      	b.n	800d45c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10b      	bne.n	800d45c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d004      	beq.n	800d454 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d44a:	2004      	movs	r0, #4
 800d44c:	f000 fdad 	bl	800dfaa <xQueueCreateMutex>
 800d450:	61f8      	str	r0, [r7, #28]
 800d452:	e003      	b.n	800d45c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d454:	2001      	movs	r0, #1
 800d456:	f000 fda8 	bl	800dfaa <xQueueCreateMutex>
 800d45a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00c      	beq.n	800d47c <osMutexNew+0xee>
        if (attr != NULL) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <osMutexNew+0xe2>
          name = attr->name;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	e001      	b.n	800d474 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d474:	68f9      	ldr	r1, [r7, #12]
 800d476:	69f8      	ldr	r0, [r7, #28]
 800d478:	f001 fcd2 	bl	800ee20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d006      	beq.n	800d490 <osMutexNew+0x102>
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	f043 0301 	orr.w	r3, r3, #1
 800d48e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d490:	69fb      	ldr	r3, [r7, #28]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3720      	adds	r7, #32
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f023 0301 	bic.w	r3, r3, #1
 800d4aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f003 0301 	and.w	r3, r3, #1
 800d4b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4b8:	f3ef 8305 	mrs	r3, IPSR
 800d4bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d4c4:	f06f 0305 	mvn.w	r3, #5
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	e02c      	b.n	800d526 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d103      	bne.n	800d4da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d4d2:	f06f 0303 	mvn.w	r3, #3
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	e025      	b.n	800d526 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d011      	beq.n	800d504 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6938      	ldr	r0, [r7, #16]
 800d4e4:	f000 fdc9 	bl	800e07a <xQueueTakeMutexRecursive>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d01b      	beq.n	800d526 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d4f4:	f06f 0301 	mvn.w	r3, #1
 800d4f8:	617b      	str	r3, [r7, #20]
 800d4fa:	e014      	b.n	800d526 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d4fc:	f06f 0302 	mvn.w	r3, #2
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	e010      	b.n	800d526 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6938      	ldr	r0, [r7, #16]
 800d508:	f001 f96e 	bl	800e7e8 <xQueueSemaphoreTake>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d009      	beq.n	800d526 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d518:	f06f 0301 	mvn.w	r3, #1
 800d51c:	617b      	str	r3, [r7, #20]
 800d51e:	e002      	b.n	800d526 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d520:	f06f 0302 	mvn.w	r3, #2
 800d524:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d526:	697b      	ldr	r3, [r7, #20]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f023 0301 	bic.w	r3, r3, #1
 800d53e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d54c:	f3ef 8305 	mrs	r3, IPSR
 800d550:	60bb      	str	r3, [r7, #8]
  return(result);
 800d552:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d558:	f06f 0305 	mvn.w	r3, #5
 800d55c:	617b      	str	r3, [r7, #20]
 800d55e:	e01f      	b.n	800d5a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d566:	f06f 0303 	mvn.w	r3, #3
 800d56a:	617b      	str	r3, [r7, #20]
 800d56c:	e018      	b.n	800d5a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d009      	beq.n	800d588 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d574:	6938      	ldr	r0, [r7, #16]
 800d576:	f000 fd4b 	bl	800e010 <xQueueGiveMutexRecursive>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d00f      	beq.n	800d5a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d580:	f06f 0302 	mvn.w	r3, #2
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	e00b      	b.n	800d5a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d588:	2300      	movs	r3, #0
 800d58a:	2200      	movs	r2, #0
 800d58c:	2100      	movs	r1, #0
 800d58e:	6938      	ldr	r0, [r7, #16]
 800d590:	f000 fe18 	bl	800e1c4 <xQueueGenericSend>
 800d594:	4603      	mov	r3, r0
 800d596:	2b01      	cmp	r3, #1
 800d598:	d002      	beq.n	800d5a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d59a:	f06f 0302 	mvn.w	r3, #2
 800d59e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d5a0:	697b      	ldr	r3, [r7, #20]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b08a      	sub	sp, #40	@ 0x28
 800d5ae:	af02      	add	r7, sp, #8
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5ba:	f3ef 8305 	mrs	r3, IPSR
 800d5be:	613b      	str	r3, [r7, #16]
  return(result);
 800d5c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d175      	bne.n	800d6b2 <osSemaphoreNew+0x108>
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d072      	beq.n	800d6b2 <osSemaphoreNew+0x108>
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d86e      	bhi.n	800d6b2 <osSemaphoreNew+0x108>
    mem = -1;
 800d5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d015      	beq.n	800d60c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d006      	beq.n	800d5f6 <osSemaphoreNew+0x4c>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	2b4f      	cmp	r3, #79	@ 0x4f
 800d5ee:	d902      	bls.n	800d5f6 <osSemaphoreNew+0x4c>
        mem = 1;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	61bb      	str	r3, [r7, #24]
 800d5f4:	e00c      	b.n	800d610 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d108      	bne.n	800d610 <osSemaphoreNew+0x66>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <osSemaphoreNew+0x66>
          mem = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	61bb      	str	r3, [r7, #24]
 800d60a:	e001      	b.n	800d610 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d616:	d04c      	beq.n	800d6b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d128      	bne.n	800d670 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d10a      	bne.n	800d63a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	2203      	movs	r2, #3
 800d62a:	9200      	str	r2, [sp, #0]
 800d62c:	2200      	movs	r2, #0
 800d62e:	2100      	movs	r1, #0
 800d630:	2001      	movs	r0, #1
 800d632:	f000 fbc5 	bl	800ddc0 <xQueueGenericCreateStatic>
 800d636:	61f8      	str	r0, [r7, #28]
 800d638:	e005      	b.n	800d646 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d63a:	2203      	movs	r2, #3
 800d63c:	2100      	movs	r1, #0
 800d63e:	2001      	movs	r0, #1
 800d640:	f000 fc3b 	bl	800deba <xQueueGenericCreate>
 800d644:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d022      	beq.n	800d692 <osSemaphoreNew+0xe8>
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d01f      	beq.n	800d692 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d652:	2300      	movs	r3, #0
 800d654:	2200      	movs	r2, #0
 800d656:	2100      	movs	r1, #0
 800d658:	69f8      	ldr	r0, [r7, #28]
 800d65a:	f000 fdb3 	bl	800e1c4 <xQueueGenericSend>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b01      	cmp	r3, #1
 800d662:	d016      	beq.n	800d692 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d664:	69f8      	ldr	r0, [r7, #28]
 800d666:	f001 fa8f 	bl	800eb88 <vQueueDelete>
            hSemaphore = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]
 800d66e:	e010      	b.n	800d692 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d108      	bne.n	800d688 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	461a      	mov	r2, r3
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 fd32 	bl	800e0e8 <xQueueCreateCountingSemaphoreStatic>
 800d684:	61f8      	str	r0, [r7, #28]
 800d686:	e004      	b.n	800d692 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d688:	68b9      	ldr	r1, [r7, #8]
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f000 fd65 	bl	800e15a <xQueueCreateCountingSemaphore>
 800d690:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00c      	beq.n	800d6b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	e001      	b.n	800d6aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d6aa:	6979      	ldr	r1, [r7, #20]
 800d6ac:	69f8      	ldr	r0, [r7, #28]
 800d6ae:	f001 fbb7 	bl	800ee20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d6b2:	69fb      	ldr	r3, [r7, #28]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3720      	adds	r7, #32
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d103      	bne.n	800d6dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d6d4:	f06f 0303 	mvn.w	r3, #3
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	e039      	b.n	800d750 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6dc:	f3ef 8305 	mrs	r3, IPSR
 800d6e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d022      	beq.n	800d72e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d6ee:	f06f 0303 	mvn.w	r3, #3
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e02c      	b.n	800d750 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d6fa:	f107 0308 	add.w	r3, r7, #8
 800d6fe:	461a      	mov	r2, r3
 800d700:	2100      	movs	r1, #0
 800d702:	6938      	ldr	r0, [r7, #16]
 800d704:	f001 f980 	bl	800ea08 <xQueueReceiveFromISR>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d003      	beq.n	800d716 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d70e:	f06f 0302 	mvn.w	r3, #2
 800d712:	617b      	str	r3, [r7, #20]
 800d714:	e01c      	b.n	800d750 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d019      	beq.n	800d750 <osSemaphoreAcquire+0x94>
 800d71c:	4b0f      	ldr	r3, [pc, #60]	@ (800d75c <osSemaphoreAcquire+0xa0>)
 800d71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	e010      	b.n	800d750 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6938      	ldr	r0, [r7, #16]
 800d732:	f001 f859 	bl	800e7e8 <xQueueSemaphoreTake>
 800d736:	4603      	mov	r3, r0
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d009      	beq.n	800d750 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d742:	f06f 0301 	mvn.w	r3, #1
 800d746:	617b      	str	r3, [r7, #20]
 800d748:	e002      	b.n	800d750 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d74a:	f06f 0302 	mvn.w	r3, #2
 800d74e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d750:	697b      	ldr	r3, [r7, #20]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	e000ed04 	.word	0xe000ed04

0800d760 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d103      	bne.n	800d77e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d776:	f06f 0303 	mvn.w	r3, #3
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	e02c      	b.n	800d7d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d77e:	f3ef 8305 	mrs	r3, IPSR
 800d782:	60fb      	str	r3, [r7, #12]
  return(result);
 800d784:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d786:	2b00      	cmp	r3, #0
 800d788:	d01a      	beq.n	800d7c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d78e:	f107 0308 	add.w	r3, r7, #8
 800d792:	4619      	mov	r1, r3
 800d794:	6938      	ldr	r0, [r7, #16]
 800d796:	f000 feb5 	bl	800e504 <xQueueGiveFromISR>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d003      	beq.n	800d7a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d7a0:	f06f 0302 	mvn.w	r3, #2
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	e017      	b.n	800d7d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d014      	beq.n	800d7d8 <osSemaphoreRelease+0x78>
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e4 <osSemaphoreRelease+0x84>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	e00b      	b.n	800d7d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	6938      	ldr	r0, [r7, #16]
 800d7c8:	f000 fcfc 	bl	800e1c4 <xQueueGenericSend>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d002      	beq.n	800d7d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d7d2:	f06f 0302 	mvn.w	r3, #2
 800d7d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d7d8:	697b      	ldr	r3, [r7, #20]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	e000ed04 	.word	0xe000ed04

0800d7e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7f4:	f3ef 8305 	mrs	r3, IPSR
 800d7f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d003      	beq.n	800d808 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d800:	f06f 0305 	mvn.w	r3, #5
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	e00e      	b.n	800d826 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d103      	bne.n	800d816 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d80e:	f06f 0303 	mvn.w	r3, #3
 800d812:	617b      	str	r3, [r7, #20]
 800d814:	e007      	b.n	800d826 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d816:	6938      	ldr	r0, [r7, #16]
 800d818:	f001 fb2c 	bl	800ee74 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d820:	6938      	ldr	r0, [r7, #16]
 800d822:	f001 f9b1 	bl	800eb88 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d826:	697b      	ldr	r3, [r7, #20]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	@ 0x28
 800d834:	af02      	add	r7, sp, #8
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d840:	f3ef 8305 	mrs	r3, IPSR
 800d844:	613b      	str	r3, [r7, #16]
  return(result);
 800d846:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d15f      	bne.n	800d90c <osMessageQueueNew+0xdc>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d05c      	beq.n	800d90c <osMessageQueueNew+0xdc>
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d059      	beq.n	800d90c <osMessageQueueNew+0xdc>
    mem = -1;
 800d858:	f04f 33ff 	mov.w	r3, #4294967295
 800d85c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d029      	beq.n	800d8b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d012      	beq.n	800d892 <osMessageQueueNew+0x62>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	2b4f      	cmp	r3, #79	@ 0x4f
 800d872:	d90e      	bls.n	800d892 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	695a      	ldr	r2, [r3, #20]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	fb01 f303 	mul.w	r3, r1, r3
 800d888:	429a      	cmp	r2, r3
 800d88a:	d302      	bcc.n	800d892 <osMessageQueueNew+0x62>
        mem = 1;
 800d88c:	2301      	movs	r3, #1
 800d88e:	61bb      	str	r3, [r7, #24]
 800d890:	e014      	b.n	800d8bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d110      	bne.n	800d8bc <osMessageQueueNew+0x8c>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10c      	bne.n	800d8bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d108      	bne.n	800d8bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d104      	bne.n	800d8bc <osMessageQueueNew+0x8c>
          mem = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61bb      	str	r3, [r7, #24]
 800d8b6:	e001      	b.n	800d8bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d10b      	bne.n	800d8da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	691a      	ldr	r2, [r3, #16]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	9100      	str	r1, [sp, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f000 fa75 	bl	800ddc0 <xQueueGenericCreateStatic>
 800d8d6:	61f8      	str	r0, [r7, #28]
 800d8d8:	e008      	b.n	800d8ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d105      	bne.n	800d8ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f000 fae8 	bl	800deba <xQueueGenericCreate>
 800d8ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00c      	beq.n	800d90c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d003      	beq.n	800d900 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	617b      	str	r3, [r7, #20]
 800d8fe:	e001      	b.n	800d904 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d900:	2300      	movs	r3, #0
 800d902:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d904:	6979      	ldr	r1, [r7, #20]
 800d906:	69f8      	ldr	r0, [r7, #28]
 800d908:	f001 fa8a 	bl	800ee20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d90c:	69fb      	ldr	r3, [r7, #28]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3720      	adds	r7, #32
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
	...

0800d918 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	603b      	str	r3, [r7, #0]
 800d924:	4613      	mov	r3, r2
 800d926:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d930:	f3ef 8305 	mrs	r3, IPSR
 800d934:	617b      	str	r3, [r7, #20]
  return(result);
 800d936:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d028      	beq.n	800d98e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d005      	beq.n	800d94e <osMessageQueuePut+0x36>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <osMessageQueuePut+0x36>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d94e:	f06f 0303 	mvn.w	r3, #3
 800d952:	61fb      	str	r3, [r7, #28]
 800d954:	e038      	b.n	800d9c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d956:	2300      	movs	r3, #0
 800d958:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d95a:	f107 0210 	add.w	r2, r7, #16
 800d95e:	2300      	movs	r3, #0
 800d960:	68b9      	ldr	r1, [r7, #8]
 800d962:	69b8      	ldr	r0, [r7, #24]
 800d964:	f000 fd30 	bl	800e3c8 <xQueueGenericSendFromISR>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d003      	beq.n	800d976 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d96e:	f06f 0302 	mvn.w	r3, #2
 800d972:	61fb      	str	r3, [r7, #28]
 800d974:	e028      	b.n	800d9c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d025      	beq.n	800d9c8 <osMessageQueuePut+0xb0>
 800d97c:	4b15      	ldr	r3, [pc, #84]	@ (800d9d4 <osMessageQueuePut+0xbc>)
 800d97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	e01c      	b.n	800d9c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d002      	beq.n	800d99a <osMessageQueuePut+0x82>
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d103      	bne.n	800d9a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d99a:	f06f 0303 	mvn.w	r3, #3
 800d99e:	61fb      	str	r3, [r7, #28]
 800d9a0:	e012      	b.n	800d9c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	69b8      	ldr	r0, [r7, #24]
 800d9aa:	f000 fc0b 	bl	800e1c4 <xQueueGenericSend>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d009      	beq.n	800d9c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d9ba:	f06f 0301 	mvn.w	r3, #1
 800d9be:	61fb      	str	r3, [r7, #28]
 800d9c0:	e002      	b.n	800d9c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d9c2:	f06f 0302 	mvn.w	r3, #2
 800d9c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d9c8:	69fb      	ldr	r3, [r7, #28]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3720      	adds	r7, #32
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	e000ed04 	.word	0xe000ed04

0800d9d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b088      	sub	sp, #32
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ee:	f3ef 8305 	mrs	r3, IPSR
 800d9f2:	617b      	str	r3, [r7, #20]
  return(result);
 800d9f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d028      	beq.n	800da4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d005      	beq.n	800da0c <osMessageQueueGet+0x34>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <osMessageQueueGet+0x34>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800da0c:	f06f 0303 	mvn.w	r3, #3
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	e037      	b.n	800da84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800da14:	2300      	movs	r3, #0
 800da16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800da18:	f107 0310 	add.w	r3, r7, #16
 800da1c:	461a      	mov	r2, r3
 800da1e:	68b9      	ldr	r1, [r7, #8]
 800da20:	69b8      	ldr	r0, [r7, #24]
 800da22:	f000 fff1 	bl	800ea08 <xQueueReceiveFromISR>
 800da26:	4603      	mov	r3, r0
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d003      	beq.n	800da34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800da2c:	f06f 0302 	mvn.w	r3, #2
 800da30:	61fb      	str	r3, [r7, #28]
 800da32:	e027      	b.n	800da84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d024      	beq.n	800da84 <osMessageQueueGet+0xac>
 800da3a:	4b15      	ldr	r3, [pc, #84]	@ (800da90 <osMessageQueueGet+0xb8>)
 800da3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	e01b      	b.n	800da84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <osMessageQueueGet+0x80>
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d103      	bne.n	800da60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800da58:	f06f 0303 	mvn.w	r3, #3
 800da5c:	61fb      	str	r3, [r7, #28]
 800da5e:	e011      	b.n	800da84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	68b9      	ldr	r1, [r7, #8]
 800da64:	69b8      	ldr	r0, [r7, #24]
 800da66:	f000 fddd 	bl	800e624 <xQueueReceive>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d009      	beq.n	800da84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800da76:	f06f 0301 	mvn.w	r3, #1
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e002      	b.n	800da84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800da7e:	f06f 0302 	mvn.w	r3, #2
 800da82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800da84:	69fb      	ldr	r3, [r7, #28]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3720      	adds	r7, #32
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <osMessageQueueGetCount+0x18>
    count = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e00e      	b.n	800daca <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daac:	f3ef 8305 	mrs	r3, IPSR
 800dab0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dab2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d004      	beq.n	800dac2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800dab8:	6938      	ldr	r0, [r7, #16]
 800daba:	f001 f846 	bl	800eb4a <uxQueueMessagesWaitingFromISR>
 800dabe:	6178      	str	r0, [r7, #20]
 800dac0:	e003      	b.n	800daca <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f001 f822 	bl	800eb0c <uxQueueMessagesWaiting>
 800dac8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800daca:	697b      	ldr	r3, [r7, #20]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3718      	adds	r7, #24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dae0:	f3ef 8305 	mrs	r3, IPSR
 800dae4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dae6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800daec:	f06f 0305 	mvn.w	r3, #5
 800daf0:	617b      	str	r3, [r7, #20]
 800daf2:	e00e      	b.n	800db12 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d103      	bne.n	800db02 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800dafa:	f06f 0303 	mvn.w	r3, #3
 800dafe:	617b      	str	r3, [r7, #20]
 800db00:	e007      	b.n	800db12 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800db02:	6938      	ldr	r0, [r7, #16]
 800db04:	f001 f9b6 	bl	800ee74 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800db08:	2300      	movs	r3, #0
 800db0a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800db0c:	6938      	ldr	r0, [r7, #16]
 800db0e:	f001 f83b 	bl	800eb88 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800db12:	697b      	ldr	r3, [r7, #20]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	4a07      	ldr	r2, [pc, #28]	@ (800db48 <vApplicationGetIdleTaskMemory+0x2c>)
 800db2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	4a06      	ldr	r2, [pc, #24]	@ (800db4c <vApplicationGetIdleTaskMemory+0x30>)
 800db32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2280      	movs	r2, #128	@ 0x80
 800db38:	601a      	str	r2, [r3, #0]
}
 800db3a:	bf00      	nop
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	240009a0 	.word	0x240009a0
 800db4c:	24000a48 	.word	0x24000a48

0800db50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4a07      	ldr	r2, [pc, #28]	@ (800db7c <vApplicationGetTimerTaskMemory+0x2c>)
 800db60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	4a06      	ldr	r2, [pc, #24]	@ (800db80 <vApplicationGetTimerTaskMemory+0x30>)
 800db66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800db6e:	601a      	str	r2, [r3, #0]
}
 800db70:	bf00      	nop
 800db72:	3714      	adds	r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	24000c48 	.word	0x24000c48
 800db80:	24000cf0 	.word	0x24000cf0

0800db84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f103 0208 	add.w	r2, r3, #8
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f04f 32ff 	mov.w	r2, #4294967295
 800db9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f103 0208 	add.w	r2, r3, #8
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f103 0208 	add.w	r2, r3, #8
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dbd2:	bf00      	nop
 800dbd4:	370c      	adds	r7, #12
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr

0800dbde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbde:	b480      	push	{r7}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	689a      	ldr	r2, [r3, #8]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	601a      	str	r2, [r3, #0]
}
 800dc1a:	bf00      	nop
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc3c:	d103      	bne.n	800dc46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	e00c      	b.n	800dc60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	3308      	adds	r3, #8
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	e002      	b.n	800dc54 <vListInsert+0x2e>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d2f6      	bcs.n	800dc4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1c5a      	adds	r2, r3, #1
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	601a      	str	r2, [r3, #0]
}
 800dc8c:	bf00      	nop
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	6892      	ldr	r2, [r2, #8]
 800dcae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	6852      	ldr	r2, [r2, #4]
 800dcb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d103      	bne.n	800dccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	689a      	ldr	r2, [r3, #8]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	1e5a      	subs	r2, r3, #1
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3714      	adds	r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dd18:	f002 fdee 	bl	80108f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dd28:	fb01 f303 	mul.w	r3, r1, r3
 800dd2c:	441a      	add	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2200      	movs	r2, #0
 800dd36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dd4e:	fb01 f303 	mul.w	r3, r1, r3
 800dd52:	441a      	add	r2, r3
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	22ff      	movs	r2, #255	@ 0xff
 800dd5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	22ff      	movs	r2, #255	@ 0xff
 800dd64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d114      	bne.n	800dd98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d01a      	beq.n	800ddac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3310      	adds	r3, #16
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f001 fd7c 	bl	800f878 <xTaskRemoveFromEventList>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d012      	beq.n	800ddac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd86:	4b0d      	ldr	r3, [pc, #52]	@ (800ddbc <xQueueGenericReset+0xd0>)
 800dd88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	e009      	b.n	800ddac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3310      	adds	r3, #16
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fef1 	bl	800db84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3324      	adds	r3, #36	@ 0x24
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff feec 	bl	800db84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ddac:	f002 fdd6 	bl	801095c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ddb0:	2301      	movs	r3, #1
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	e000ed04 	.word	0xe000ed04

0800ddc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08e      	sub	sp, #56	@ 0x38
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10b      	bne.n	800ddec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dde6:	bf00      	nop
 800dde8:	bf00      	nop
 800ddea:	e7fd      	b.n	800dde8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10b      	bne.n	800de0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop
 800de08:	e7fd      	b.n	800de06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <xQueueGenericCreateStatic+0x56>
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <xQueueGenericCreateStatic+0x5a>
 800de16:	2301      	movs	r3, #1
 800de18:	e000      	b.n	800de1c <xQueueGenericCreateStatic+0x5c>
 800de1a:	2300      	movs	r3, #0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10b      	bne.n	800de38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	623b      	str	r3, [r7, #32]
}
 800de32:	bf00      	nop
 800de34:	bf00      	nop
 800de36:	e7fd      	b.n	800de34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <xQueueGenericCreateStatic+0x84>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <xQueueGenericCreateStatic+0x88>
 800de44:	2301      	movs	r3, #1
 800de46:	e000      	b.n	800de4a <xQueueGenericCreateStatic+0x8a>
 800de48:	2300      	movs	r3, #0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d10b      	bne.n	800de66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800de4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	61fb      	str	r3, [r7, #28]
}
 800de60:	bf00      	nop
 800de62:	bf00      	nop
 800de64:	e7fd      	b.n	800de62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800de66:	2350      	movs	r3, #80	@ 0x50
 800de68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2b50      	cmp	r3, #80	@ 0x50
 800de6e:	d00b      	beq.n	800de88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	61bb      	str	r3, [r7, #24]
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	e7fd      	b.n	800de84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800de8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00d      	beq.n	800deb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	2201      	movs	r2, #1
 800de98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	4613      	mov	r3, r2
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f000 f840 	bl	800df30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800deb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3730      	adds	r7, #48	@ 0x30
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800deba:	b580      	push	{r7, lr}
 800debc:	b08a      	sub	sp, #40	@ 0x28
 800debe:	af02      	add	r7, sp, #8
 800dec0:	60f8      	str	r0, [r7, #12]
 800dec2:	60b9      	str	r1, [r7, #8]
 800dec4:	4613      	mov	r3, r2
 800dec6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10b      	bne.n	800dee6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	613b      	str	r3, [r7, #16]
}
 800dee0:	bf00      	nop
 800dee2:	bf00      	nop
 800dee4:	e7fd      	b.n	800dee2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	fb02 f303 	mul.w	r3, r2, r3
 800deee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	3350      	adds	r3, #80	@ 0x50
 800def4:	4618      	mov	r0, r3
 800def6:	f002 fe21 	bl	8010b3c <pvPortMalloc>
 800defa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d011      	beq.n	800df26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	3350      	adds	r3, #80	@ 0x50
 800df0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df14:	79fa      	ldrb	r2, [r7, #7]
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	4613      	mov	r3, r2
 800df1c:	697a      	ldr	r2, [r7, #20]
 800df1e:	68b9      	ldr	r1, [r7, #8]
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 f805 	bl	800df30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df26:	69bb      	ldr	r3, [r7, #24]
	}
 800df28:	4618      	mov	r0, r3
 800df2a:	3720      	adds	r7, #32
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d103      	bne.n	800df4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	601a      	str	r2, [r3, #0]
 800df4a:	e002      	b.n	800df52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df5e:	2101      	movs	r1, #1
 800df60:	69b8      	ldr	r0, [r7, #24]
 800df62:	f7ff fec3 	bl	800dcec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	78fa      	ldrb	r2, [r7, #3]
 800df6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df6e:	bf00      	nop
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00e      	beq.n	800dfa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800df96:	2300      	movs	r3, #0
 800df98:	2200      	movs	r2, #0
 800df9a:	2100      	movs	r1, #0
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 f911 	bl	800e1c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dfbc:	79fb      	ldrb	r3, [r7, #7]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	6939      	ldr	r1, [r7, #16]
 800dfc2:	6978      	ldr	r0, [r7, #20]
 800dfc4:	f7ff ff79 	bl	800deba <xQueueGenericCreate>
 800dfc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff ffd3 	bl	800df76 <prvInitialiseMutex>

		return xNewQueue;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
	}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b088      	sub	sp, #32
 800dfde:	af02      	add	r7, sp, #8
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	6039      	str	r1, [r7, #0]
 800dfe4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	617b      	str	r3, [r7, #20]
 800dfea:	2300      	movs	r3, #0
 800dfec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2200      	movs	r2, #0
 800dff6:	6939      	ldr	r1, [r7, #16]
 800dff8:	6978      	ldr	r0, [r7, #20]
 800dffa:	f7ff fee1 	bl	800ddc0 <xQueueGenericCreateStatic>
 800dffe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff ffb8 	bl	800df76 <prvInitialiseMutex>

		return xNewQueue;
 800e006:	68fb      	ldr	r3, [r7, #12]
	}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e010:	b590      	push	{r4, r7, lr}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10b      	bne.n	800e03a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60fb      	str	r3, [r7, #12]
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop
 800e038:	e7fd      	b.n	800e036 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	689c      	ldr	r4, [r3, #8]
 800e03e:	f001 fde1 	bl	800fc04 <xTaskGetCurrentTaskHandle>
 800e042:	4603      	mov	r3, r0
 800e044:	429c      	cmp	r4, r3
 800e046:	d111      	bne.n	800e06c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	1e5a      	subs	r2, r3, #1
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d105      	bne.n	800e066 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e05a:	2300      	movs	r3, #0
 800e05c:	2200      	movs	r2, #0
 800e05e:	2100      	movs	r1, #0
 800e060:	6938      	ldr	r0, [r7, #16]
 800e062:	f000 f8af 	bl	800e1c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e066:	2301      	movs	r3, #1
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e001      	b.n	800e070 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e070:	697b      	ldr	r3, [r7, #20]
	}
 800e072:	4618      	mov	r0, r3
 800e074:	371c      	adds	r7, #28
 800e076:	46bd      	mov	sp, r7
 800e078:	bd90      	pop	{r4, r7, pc}

0800e07a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e07a:	b590      	push	{r4, r7, lr}
 800e07c:	b087      	sub	sp, #28
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10b      	bne.n	800e0a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	60fb      	str	r3, [r7, #12]
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	e7fd      	b.n	800e0a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	689c      	ldr	r4, [r3, #8]
 800e0aa:	f001 fdab 	bl	800fc04 <xTaskGetCurrentTaskHandle>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	429c      	cmp	r4, r3
 800e0b2:	d107      	bne.n	800e0c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	617b      	str	r3, [r7, #20]
 800e0c2:	e00c      	b.n	800e0de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6938      	ldr	r0, [r7, #16]
 800e0c8:	f000 fb8e 	bl	800e7e8 <xQueueSemaphoreTake>
 800e0cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e0de:	697b      	ldr	r3, [r7, #20]
	}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	371c      	adds	r7, #28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd90      	pop	{r4, r7, pc}

0800e0e8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	@ 0x28
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10b      	bne.n	800e112 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	61bb      	str	r3, [r7, #24]
}
 800e10c:	bf00      	nop
 800e10e:	bf00      	nop
 800e110:	e7fd      	b.n	800e10e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	429a      	cmp	r2, r3
 800e118:	d90b      	bls.n	800e132 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	617b      	str	r3, [r7, #20]
}
 800e12c:	bf00      	nop
 800e12e:	bf00      	nop
 800e130:	e7fd      	b.n	800e12e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e132:	2302      	movs	r3, #2
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	2100      	movs	r1, #0
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff fe3f 	bl	800ddc0 <xQueueGenericCreateStatic>
 800e142:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e150:	69fb      	ldr	r3, [r7, #28]
	}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b086      	sub	sp, #24
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10b      	bne.n	800e182 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	613b      	str	r3, [r7, #16]
}
 800e17c:	bf00      	nop
 800e17e:	bf00      	nop
 800e180:	e7fd      	b.n	800e17e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	429a      	cmp	r2, r3
 800e188:	d90b      	bls.n	800e1a2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800e18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e18e:	f383 8811 	msr	BASEPRI, r3
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	f3bf 8f4f 	dsb	sy
 800e19a:	60fb      	str	r3, [r7, #12]
}
 800e19c:	bf00      	nop
 800e19e:	bf00      	nop
 800e1a0:	e7fd      	b.n	800e19e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff fe87 	bl	800deba <xQueueGenericCreate>
 800e1ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e1ba:	697b      	ldr	r3, [r7, #20]
	}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b08e      	sub	sp, #56	@ 0x38
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	607a      	str	r2, [r7, #4]
 800e1d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10b      	bne.n	800e1f8 <xQueueGenericSend+0x34>
	__asm volatile
 800e1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e4:	f383 8811 	msr	BASEPRI, r3
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e1f2:	bf00      	nop
 800e1f4:	bf00      	nop
 800e1f6:	e7fd      	b.n	800e1f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d103      	bne.n	800e206 <xQueueGenericSend+0x42>
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <xQueueGenericSend+0x46>
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <xQueueGenericSend+0x48>
 800e20a:	2300      	movs	r3, #0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10b      	bne.n	800e228 <xQueueGenericSend+0x64>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	e7fd      	b.n	800e224 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d103      	bne.n	800e236 <xQueueGenericSend+0x72>
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e232:	2b01      	cmp	r3, #1
 800e234:	d101      	bne.n	800e23a <xQueueGenericSend+0x76>
 800e236:	2301      	movs	r3, #1
 800e238:	e000      	b.n	800e23c <xQueueGenericSend+0x78>
 800e23a:	2300      	movs	r3, #0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10b      	bne.n	800e258 <xQueueGenericSend+0x94>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	623b      	str	r3, [r7, #32]
}
 800e252:	bf00      	nop
 800e254:	bf00      	nop
 800e256:	e7fd      	b.n	800e254 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e258:	f001 fce4 	bl	800fc24 <xTaskGetSchedulerState>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d102      	bne.n	800e268 <xQueueGenericSend+0xa4>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <xQueueGenericSend+0xa8>
 800e268:	2301      	movs	r3, #1
 800e26a:	e000      	b.n	800e26e <xQueueGenericSend+0xaa>
 800e26c:	2300      	movs	r3, #0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10b      	bne.n	800e28a <xQueueGenericSend+0xc6>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	61fb      	str	r3, [r7, #28]
}
 800e284:	bf00      	nop
 800e286:	bf00      	nop
 800e288:	e7fd      	b.n	800e286 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e28a:	f002 fb35 	bl	80108f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e296:	429a      	cmp	r2, r3
 800e298:	d302      	bcc.n	800e2a0 <xQueueGenericSend+0xdc>
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d129      	bne.n	800e2f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	68b9      	ldr	r1, [r7, #8]
 800e2a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2a6:	f000 fcab 	bl	800ec00 <prvCopyDataToQueue>
 800e2aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d010      	beq.n	800e2d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b6:	3324      	adds	r3, #36	@ 0x24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f001 fadd 	bl	800f878 <xTaskRemoveFromEventList>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d013      	beq.n	800e2ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e2c4:	4b3f      	ldr	r3, [pc, #252]	@ (800e3c4 <xQueueGenericSend+0x200>)
 800e2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	e00a      	b.n	800e2ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d007      	beq.n	800e2ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e2dc:	4b39      	ldr	r3, [pc, #228]	@ (800e3c4 <xQueueGenericSend+0x200>)
 800e2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e2ec:	f002 fb36 	bl	801095c <vPortExitCritical>
				return pdPASS;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e063      	b.n	800e3bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d103      	bne.n	800e302 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2fa:	f002 fb2f 	bl	801095c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	e05c      	b.n	800e3bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e308:	f107 0314 	add.w	r3, r7, #20
 800e30c:	4618      	mov	r0, r3
 800e30e:	f001 fb17 	bl	800f940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e312:	2301      	movs	r3, #1
 800e314:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e316:	f002 fb21 	bl	801095c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e31a:	f001 f86d 	bl	800f3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e31e:	f002 faeb 	bl	80108f8 <vPortEnterCritical>
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e328:	b25b      	sxtb	r3, r3
 800e32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32e:	d103      	bne.n	800e338 <xQueueGenericSend+0x174>
 800e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e33e:	b25b      	sxtb	r3, r3
 800e340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e344:	d103      	bne.n	800e34e <xQueueGenericSend+0x18a>
 800e346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e34e:	f002 fb05 	bl	801095c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e352:	1d3a      	adds	r2, r7, #4
 800e354:	f107 0314 	add.w	r3, r7, #20
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f001 fb06 	bl	800f96c <xTaskCheckForTimeOut>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d124      	bne.n	800e3b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e366:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e368:	f000 fd42 	bl	800edf0 <prvIsQueueFull>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d018      	beq.n	800e3a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e374:	3310      	adds	r3, #16
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f001 fa2a 	bl	800f7d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e382:	f000 fccd 	bl	800ed20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e386:	f001 f845 	bl	800f414 <xTaskResumeAll>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f47f af7c 	bne.w	800e28a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e392:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c4 <xQueueGenericSend+0x200>)
 800e394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	e772      	b.n	800e28a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3a6:	f000 fcbb 	bl	800ed20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3aa:	f001 f833 	bl	800f414 <xTaskResumeAll>
 800e3ae:	e76c      	b.n	800e28a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e3b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3b2:	f000 fcb5 	bl	800ed20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3b6:	f001 f82d 	bl	800f414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e3ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3738      	adds	r7, #56	@ 0x38
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b090      	sub	sp, #64	@ 0x40
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10b      	bne.n	800e3f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	e7fd      	b.n	800e3f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d103      	bne.n	800e406 <xQueueGenericSendFromISR+0x3e>
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <xQueueGenericSendFromISR+0x42>
 800e406:	2301      	movs	r3, #1
 800e408:	e000      	b.n	800e40c <xQueueGenericSendFromISR+0x44>
 800e40a:	2300      	movs	r3, #0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10b      	bne.n	800e428 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	e7fd      	b.n	800e424 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d103      	bne.n	800e436 <xQueueGenericSendFromISR+0x6e>
 800e42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e432:	2b01      	cmp	r3, #1
 800e434:	d101      	bne.n	800e43a <xQueueGenericSendFromISR+0x72>
 800e436:	2301      	movs	r3, #1
 800e438:	e000      	b.n	800e43c <xQueueGenericSendFromISR+0x74>
 800e43a:	2300      	movs	r3, #0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10b      	bne.n	800e458 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	623b      	str	r3, [r7, #32]
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	e7fd      	b.n	800e454 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e458:	f002 fb2e 	bl	8010ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e45c:	f3ef 8211 	mrs	r2, BASEPRI
 800e460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	61fa      	str	r2, [r7, #28]
 800e472:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e474:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e476:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e480:	429a      	cmp	r2, r3
 800e482:	d302      	bcc.n	800e48a <xQueueGenericSendFromISR+0xc2>
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b02      	cmp	r3, #2
 800e488:	d12f      	bne.n	800e4ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e490:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e498:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4a0:	f000 fbae 	bl	800ec00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ac:	d112      	bne.n	800e4d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d016      	beq.n	800e4e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b8:	3324      	adds	r3, #36	@ 0x24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f001 f9dc 	bl	800f878 <xTaskRemoveFromEventList>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00e      	beq.n	800e4e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	601a      	str	r2, [r3, #0]
 800e4d2:	e007      	b.n	800e4e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e4d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e4d8:	3301      	adds	r3, #1
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	b25a      	sxtb	r2, r3
 800e4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e4e8:	e001      	b.n	800e4ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e4f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3740      	adds	r7, #64	@ 0x40
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08e      	sub	sp, #56	@ 0x38
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10b      	bne.n	800e530 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	623b      	str	r3, [r7, #32]
}
 800e52a:	bf00      	nop
 800e52c:	bf00      	nop
 800e52e:	e7fd      	b.n	800e52c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	61fb      	str	r3, [r7, #28]
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	e7fd      	b.n	800e54c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d103      	bne.n	800e560 <xQueueGiveFromISR+0x5c>
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	689b      	ldr	r3, [r3, #8]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <xQueueGiveFromISR+0x60>
 800e560:	2301      	movs	r3, #1
 800e562:	e000      	b.n	800e566 <xQueueGiveFromISR+0x62>
 800e564:	2300      	movs	r3, #0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10b      	bne.n	800e582 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	61bb      	str	r3, [r7, #24]
}
 800e57c:	bf00      	nop
 800e57e:	bf00      	nop
 800e580:	e7fd      	b.n	800e57e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e582:	f002 fa99 	bl	8010ab8 <vPortValidateInterruptPriority>
	__asm volatile
 800e586:	f3ef 8211 	mrs	r2, BASEPRI
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	617a      	str	r2, [r7, #20]
 800e59c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e59e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d22b      	bcs.n	800e60a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5be:	1c5a      	adds	r2, r3, #1
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5cc:	d112      	bne.n	800e5f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d016      	beq.n	800e604 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d8:	3324      	adds	r3, #36	@ 0x24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f001 f94c 	bl	800f878 <xTaskRemoveFromEventList>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00e      	beq.n	800e604 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	e007      	b.n	800e604 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	b25a      	sxtb	r2, r3
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e604:	2301      	movs	r3, #1
 800e606:	637b      	str	r3, [r7, #52]	@ 0x34
 800e608:	e001      	b.n	800e60e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e610:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f383 8811 	msr	BASEPRI, r3
}
 800e618:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3738      	adds	r7, #56	@ 0x38
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08c      	sub	sp, #48	@ 0x30
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e630:	2300      	movs	r3, #0
 800e632:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <xQueueReceive+0x32>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	623b      	str	r3, [r7, #32]
}
 800e650:	bf00      	nop
 800e652:	bf00      	nop
 800e654:	e7fd      	b.n	800e652 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d103      	bne.n	800e664 <xQueueReceive+0x40>
 800e65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <xQueueReceive+0x44>
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <xQueueReceive+0x46>
 800e668:	2300      	movs	r3, #0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <xQueueReceive+0x62>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	61fb      	str	r3, [r7, #28]
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	e7fd      	b.n	800e682 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e686:	f001 facd 	bl	800fc24 <xTaskGetSchedulerState>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <xQueueReceive+0x72>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <xQueueReceive+0x76>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <xQueueReceive+0x78>
 800e69a:	2300      	movs	r3, #0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10b      	bne.n	800e6b8 <xQueueReceive+0x94>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	61bb      	str	r3, [r7, #24]
}
 800e6b2:	bf00      	nop
 800e6b4:	bf00      	nop
 800e6b6:	e7fd      	b.n	800e6b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6b8:	f002 f91e 	bl	80108f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d01f      	beq.n	800e708 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6cc:	f000 fb02 	bl	800ecd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	1e5a      	subs	r2, r3, #1
 800e6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00f      	beq.n	800e700 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e2:	3310      	adds	r3, #16
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f001 f8c7 	bl	800f878 <xTaskRemoveFromEventList>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d007      	beq.n	800e700 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6f0:	4b3c      	ldr	r3, [pc, #240]	@ (800e7e4 <xQueueReceive+0x1c0>)
 800e6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e700:	f002 f92c 	bl	801095c <vPortExitCritical>
				return pdPASS;
 800e704:	2301      	movs	r3, #1
 800e706:	e069      	b.n	800e7dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e70e:	f002 f925 	bl	801095c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e712:	2300      	movs	r3, #0
 800e714:	e062      	b.n	800e7dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e71c:	f107 0310 	add.w	r3, r7, #16
 800e720:	4618      	mov	r0, r3
 800e722:	f001 f90d 	bl	800f940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e726:	2301      	movs	r3, #1
 800e728:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e72a:	f002 f917 	bl	801095c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e72e:	f000 fe63 	bl	800f3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e732:	f002 f8e1 	bl	80108f8 <vPortEnterCritical>
 800e736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e73c:	b25b      	sxtb	r3, r3
 800e73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e742:	d103      	bne.n	800e74c <xQueueReceive+0x128>
 800e744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e746:	2200      	movs	r2, #0
 800e748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e752:	b25b      	sxtb	r3, r3
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d103      	bne.n	800e762 <xQueueReceive+0x13e>
 800e75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e762:	f002 f8fb 	bl	801095c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e766:	1d3a      	adds	r2, r7, #4
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f001 f8fc 	bl	800f96c <xTaskCheckForTimeOut>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d123      	bne.n	800e7c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e77c:	f000 fb22 	bl	800edc4 <prvIsQueueEmpty>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d017      	beq.n	800e7b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e788:	3324      	adds	r3, #36	@ 0x24
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f001 f820 	bl	800f7d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e796:	f000 fac3 	bl	800ed20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e79a:	f000 fe3b 	bl	800f414 <xTaskResumeAll>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d189      	bne.n	800e6b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e4 <xQueueReceive+0x1c0>)
 800e7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	e780      	b.n	800e6b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7b8:	f000 fab2 	bl	800ed20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7bc:	f000 fe2a 	bl	800f414 <xTaskResumeAll>
 800e7c0:	e77a      	b.n	800e6b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7c4:	f000 faac 	bl	800ed20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7c8:	f000 fe24 	bl	800f414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7ce:	f000 faf9 	bl	800edc4 <prvIsQueueEmpty>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f43f af6f 	beq.w	800e6b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3730      	adds	r7, #48	@ 0x30
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	e000ed04 	.word	0xe000ed04

0800e7e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08e      	sub	sp, #56	@ 0x38
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	623b      	str	r3, [r7, #32]
}
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	61fb      	str	r3, [r7, #28]
}
 800e836:	bf00      	nop
 800e838:	bf00      	nop
 800e83a:	e7fd      	b.n	800e838 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e83c:	f001 f9f2 	bl	800fc24 <xTaskGetSchedulerState>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <xQueueSemaphoreTake+0x64>
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <xQueueSemaphoreTake+0x68>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e000      	b.n	800e852 <xQueueSemaphoreTake+0x6a>
 800e850:	2300      	movs	r3, #0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10b      	bne.n	800e86e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	61bb      	str	r3, [r7, #24]
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	e7fd      	b.n	800e86a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e86e:	f002 f843 	bl	80108f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e876:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d024      	beq.n	800e8c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	1e5a      	subs	r2, r3, #1
 800e882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e884:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d104      	bne.n	800e898 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e88e:	f001 fb43 	bl	800ff18 <pvTaskIncrementMutexHeldCount>
 800e892:	4602      	mov	r2, r0
 800e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e896:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00f      	beq.n	800e8c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a2:	3310      	adds	r3, #16
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 ffe7 	bl	800f878 <xTaskRemoveFromEventList>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d007      	beq.n	800e8c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8b0:	4b54      	ldr	r3, [pc, #336]	@ (800ea04 <xQueueSemaphoreTake+0x21c>)
 800e8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8c0:	f002 f84c 	bl	801095c <vPortExitCritical>
				return pdPASS;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	e098      	b.n	800e9fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d112      	bne.n	800e8f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00b      	beq.n	800e8ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	617b      	str	r3, [r7, #20]
}
 800e8e6:	bf00      	nop
 800e8e8:	bf00      	nop
 800e8ea:	e7fd      	b.n	800e8e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e8ec:	f002 f836 	bl	801095c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e082      	b.n	800e9fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8fa:	f107 030c 	add.w	r3, r7, #12
 800e8fe:	4618      	mov	r0, r3
 800e900:	f001 f81e 	bl	800f940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e904:	2301      	movs	r3, #1
 800e906:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e908:	f002 f828 	bl	801095c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e90c:	f000 fd74 	bl	800f3f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e910:	f001 fff2 	bl	80108f8 <vPortEnterCritical>
 800e914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e91a:	b25b      	sxtb	r3, r3
 800e91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e920:	d103      	bne.n	800e92a <xQueueSemaphoreTake+0x142>
 800e922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e924:	2200      	movs	r2, #0
 800e926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e930:	b25b      	sxtb	r3, r3
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e936:	d103      	bne.n	800e940 <xQueueSemaphoreTake+0x158>
 800e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e940:	f002 f80c 	bl	801095c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e944:	463a      	mov	r2, r7
 800e946:	f107 030c 	add.w	r3, r7, #12
 800e94a:	4611      	mov	r1, r2
 800e94c:	4618      	mov	r0, r3
 800e94e:	f001 f80d 	bl	800f96c <xTaskCheckForTimeOut>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d132      	bne.n	800e9be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e95a:	f000 fa33 	bl	800edc4 <prvIsQueueEmpty>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d026      	beq.n	800e9b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e96c:	f001 ffc4 	bl	80108f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	4618      	mov	r0, r3
 800e976:	f001 f973 	bl	800fc60 <xTaskPriorityInherit>
 800e97a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e97c:	f001 ffee 	bl	801095c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e982:	3324      	adds	r3, #36	@ 0x24
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	4611      	mov	r1, r2
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 ff23 	bl	800f7d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e98e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e990:	f000 f9c6 	bl	800ed20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e994:	f000 fd3e 	bl	800f414 <xTaskResumeAll>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f47f af67 	bne.w	800e86e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e9a0:	4b18      	ldr	r3, [pc, #96]	@ (800ea04 <xQueueSemaphoreTake+0x21c>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	e75d      	b.n	800e86e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e9b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9b4:	f000 f9b4 	bl	800ed20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9b8:	f000 fd2c 	bl	800f414 <xTaskResumeAll>
 800e9bc:	e757      	b.n	800e86e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e9be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9c0:	f000 f9ae 	bl	800ed20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9c4:	f000 fd26 	bl	800f414 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9ca:	f000 f9fb 	bl	800edc4 <prvIsQueueEmpty>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f43f af4c 	beq.w	800e86e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00d      	beq.n	800e9f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e9dc:	f001 ff8c 	bl	80108f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e9e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9e2:	f000 f8f5 	bl	800ebd0 <prvGetDisinheritPriorityAfterTimeout>
 800e9e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 fa0e 	bl	800fe10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e9f4:	f001 ffb2 	bl	801095c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3738      	adds	r7, #56	@ 0x38
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	e000ed04 	.word	0xe000ed04

0800ea08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08e      	sub	sp, #56	@ 0x38
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ea18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10b      	bne.n	800ea36 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	623b      	str	r3, [r7, #32]
}
 800ea30:	bf00      	nop
 800ea32:	bf00      	nop
 800ea34:	e7fd      	b.n	800ea32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <xQueueReceiveFromISR+0x3c>
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <xQueueReceiveFromISR+0x40>
 800ea44:	2301      	movs	r3, #1
 800ea46:	e000      	b.n	800ea4a <xQueueReceiveFromISR+0x42>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10b      	bne.n	800ea66 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	61fb      	str	r3, [r7, #28]
}
 800ea60:	bf00      	nop
 800ea62:	bf00      	nop
 800ea64:	e7fd      	b.n	800ea62 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea66:	f002 f827 	bl	8010ab8 <vPortValidateInterruptPriority>
	__asm volatile
 800ea6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ea6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	61ba      	str	r2, [r7, #24]
 800ea80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea8a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d02f      	beq.n	800eaf2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea9c:	68b9      	ldr	r1, [r7, #8]
 800ea9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eaa0:	f000 f918 	bl	800ecd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa6:	1e5a      	subs	r2, r3, #1
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaaa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eaac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab4:	d112      	bne.n	800eadc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d016      	beq.n	800eaec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	3310      	adds	r3, #16
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 fed8 	bl	800f878 <xTaskRemoveFromEventList>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00e      	beq.n	800eaec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00b      	beq.n	800eaec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	e007      	b.n	800eaec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae0:	3301      	adds	r3, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	b25a      	sxtb	r2, r3
 800eae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800eaec:	2301      	movs	r3, #1
 800eaee:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaf0:	e001      	b.n	800eaf6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	f383 8811 	msr	BASEPRI, r3
}
 800eb00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3738      	adds	r7, #56	@ 0x38
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10b      	bne.n	800eb32 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800eb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	60bb      	str	r3, [r7, #8]
}
 800eb2c:	bf00      	nop
 800eb2e:	bf00      	nop
 800eb30:	e7fd      	b.n	800eb2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800eb32:	f001 fee1 	bl	80108f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb3a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800eb3c:	f001 ff0e 	bl	801095c <vPortExitCritical>

	return uxReturn;
 800eb40:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b087      	sub	sp, #28
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10b      	bne.n	800eb74 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	60fb      	str	r3, [r7, #12]
}
 800eb6e:	bf00      	nop
 800eb70:	bf00      	nop
 800eb72:	e7fd      	b.n	800eb70 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb78:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800eb7a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	371c      	adds	r7, #28
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10b      	bne.n	800ebb2 <vQueueDelete+0x2a>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	60bb      	str	r3, [r7, #8]
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	e7fd      	b.n	800ebae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f000 f95e 	bl	800ee74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d102      	bne.n	800ebc8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f002 f888 	bl	8010cd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ebc8:	bf00      	nop
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	e001      	b.n	800ebf2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
	}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3714      	adds	r7, #20
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10d      	bne.n	800ec3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d14d      	bne.n	800ecc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f001 f880 	bl	800fd30 <xTaskPriorityDisinherit>
 800ec30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	609a      	str	r2, [r3, #8]
 800ec38:	e043      	b.n	800ecc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d119      	bne.n	800ec74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6858      	ldr	r0, [r3, #4]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec48:	461a      	mov	r2, r3
 800ec4a:	68b9      	ldr	r1, [r7, #8]
 800ec4c:	f00f ff59 	bl	801eb02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec58:	441a      	add	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d32b      	bcc.n	800ecc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	605a      	str	r2, [r3, #4]
 800ec72:	e026      	b.n	800ecc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68d8      	ldr	r0, [r3, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	f00f ff3f 	bl	801eb02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68da      	ldr	r2, [r3, #12]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec8c:	425b      	negs	r3, r3
 800ec8e:	441a      	add	r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	68da      	ldr	r2, [r3, #12]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d207      	bcs.n	800ecb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca8:	425b      	negs	r3, r3
 800ecaa:	441a      	add	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d105      	bne.n	800ecc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ecca:	697b      	ldr	r3, [r7, #20]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d018      	beq.n	800ed18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68da      	ldr	r2, [r3, #12]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecee:	441a      	add	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68da      	ldr	r2, [r3, #12]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d303      	bcc.n	800ed08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	68d9      	ldr	r1, [r3, #12]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed10:	461a      	mov	r2, r3
 800ed12:	6838      	ldr	r0, [r7, #0]
 800ed14:	f00f fef5 	bl	801eb02 <memcpy>
	}
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed28:	f001 fde6 	bl	80108f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed34:	e011      	b.n	800ed5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d012      	beq.n	800ed64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3324      	adds	r3, #36	@ 0x24
 800ed42:	4618      	mov	r0, r3
 800ed44:	f000 fd98 	bl	800f878 <xTaskRemoveFromEventList>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed4e:	f000 fe71 	bl	800fa34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	dce9      	bgt.n	800ed36 <prvUnlockQueue+0x16>
 800ed62:	e000      	b.n	800ed66 <prvUnlockQueue+0x46>
					break;
 800ed64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	22ff      	movs	r2, #255	@ 0xff
 800ed6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ed6e:	f001 fdf5 	bl	801095c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed72:	f001 fdc1 	bl	80108f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed7e:	e011      	b.n	800eda4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d012      	beq.n	800edae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3310      	adds	r3, #16
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 fd73 	bl	800f878 <xTaskRemoveFromEventList>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ed98:	f000 fe4c 	bl	800fa34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	dce9      	bgt.n	800ed80 <prvUnlockQueue+0x60>
 800edac:	e000      	b.n	800edb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800edae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	22ff      	movs	r2, #255	@ 0xff
 800edb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800edb8:	f001 fdd0 	bl	801095c <vPortExitCritical>
}
 800edbc:	bf00      	nop
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edcc:	f001 fd94 	bl	80108f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d102      	bne.n	800edde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800edd8:	2301      	movs	r3, #1
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	e001      	b.n	800ede2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800edde:	2300      	movs	r3, #0
 800ede0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ede2:	f001 fdbb 	bl	801095c <vPortExitCritical>

	return xReturn;
 800ede6:	68fb      	ldr	r3, [r7, #12]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edf8:	f001 fd7e 	bl	80108f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d102      	bne.n	800ee0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e001      	b.n	800ee12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee12:	f001 fda3 	bl	801095c <vPortExitCritical>

	return xReturn;
 800ee16:	68fb      	ldr	r3, [r7, #12]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	60fb      	str	r3, [r7, #12]
 800ee2e:	e014      	b.n	800ee5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee30:	4a0f      	ldr	r2, [pc, #60]	@ (800ee70 <vQueueAddToRegistry+0x50>)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10b      	bne.n	800ee54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee3c:	490c      	ldr	r1, [pc, #48]	@ (800ee70 <vQueueAddToRegistry+0x50>)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee46:	4a0a      	ldr	r2, [pc, #40]	@ (800ee70 <vQueueAddToRegistry+0x50>)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	00db      	lsls	r3, r3, #3
 800ee4c:	4413      	add	r3, r2
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ee52:	e006      	b.n	800ee62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3301      	adds	r3, #1
 800ee58:	60fb      	str	r3, [r7, #12]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b07      	cmp	r3, #7
 800ee5e:	d9e7      	bls.n	800ee30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee60:	bf00      	nop
 800ee62:	bf00      	nop
 800ee64:	3714      	adds	r7, #20
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	240010f0 	.word	0x240010f0

0800ee74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	e016      	b.n	800eeb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ee82:	4a10      	ldr	r2, [pc, #64]	@ (800eec4 <vQueueUnregisterQueue+0x50>)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	4413      	add	r3, r2
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d10b      	bne.n	800eeaa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ee92:	4a0c      	ldr	r2, [pc, #48]	@ (800eec4 <vQueueUnregisterQueue+0x50>)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2100      	movs	r1, #0
 800ee98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ee9c:	4a09      	ldr	r2, [pc, #36]	@ (800eec4 <vQueueUnregisterQueue+0x50>)
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	4413      	add	r3, r2
 800eea4:	2200      	movs	r2, #0
 800eea6:	605a      	str	r2, [r3, #4]
				break;
 800eea8:	e006      	b.n	800eeb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3301      	adds	r3, #1
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2b07      	cmp	r3, #7
 800eeb4:	d9e5      	bls.n	800ee82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800eeb6:	bf00      	nop
 800eeb8:	bf00      	nop
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	240010f0 	.word	0x240010f0

0800eec8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b086      	sub	sp, #24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eed8:	f001 fd0e 	bl	80108f8 <vPortEnterCritical>
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eee2:	b25b      	sxtb	r3, r3
 800eee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee8:	d103      	bne.n	800eef2 <vQueueWaitForMessageRestricted+0x2a>
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eef8:	b25b      	sxtb	r3, r3
 800eefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eefe:	d103      	bne.n	800ef08 <vQueueWaitForMessageRestricted+0x40>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef08:	f001 fd28 	bl	801095c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d106      	bne.n	800ef22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	3324      	adds	r3, #36	@ 0x24
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 fc7f 	bl	800f820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ef22:	6978      	ldr	r0, [r7, #20]
 800ef24:	f7ff fefc 	bl	800ed20 <prvUnlockQueue>
	}
 800ef28:	bf00      	nop
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b08e      	sub	sp, #56	@ 0x38
 800ef34:	af04      	add	r7, sp, #16
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
 800ef3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10b      	bne.n	800ef5c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	623b      	str	r3, [r7, #32]
}
 800ef56:	bf00      	nop
 800ef58:	bf00      	nop
 800ef5a:	e7fd      	b.n	800ef58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10b      	bne.n	800ef7a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef66:	f383 8811 	msr	BASEPRI, r3
 800ef6a:	f3bf 8f6f 	isb	sy
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	61fb      	str	r3, [r7, #28]
}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop
 800ef78:	e7fd      	b.n	800ef76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ef7a:	23a8      	movs	r3, #168	@ 0xa8
 800ef7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	2ba8      	cmp	r3, #168	@ 0xa8
 800ef82:	d00b      	beq.n	800ef9c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ef84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	61bb      	str	r3, [r7, #24]
}
 800ef96:	bf00      	nop
 800ef98:	bf00      	nop
 800ef9a:	e7fd      	b.n	800ef98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ef9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d01e      	beq.n	800efe2 <xTaskCreateStatic+0xb2>
 800efa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d01b      	beq.n	800efe2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	2202      	movs	r2, #2
 800efb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800efbc:	2300      	movs	r3, #0
 800efbe:	9303      	str	r3, [sp, #12]
 800efc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	f107 0314 	add.w	r3, r7, #20
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 f851 	bl	800f07c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800efda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800efdc:	f000 f8f6 	bl	800f1cc <prvAddNewTaskToReadyList>
 800efe0:	e001      	b.n	800efe6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800efe6:	697b      	ldr	r3, [r7, #20]
	}
 800efe8:	4618      	mov	r0, r3
 800efea:	3728      	adds	r7, #40	@ 0x28
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08c      	sub	sp, #48	@ 0x30
 800eff4:	af04      	add	r7, sp, #16
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	603b      	str	r3, [r7, #0]
 800effc:	4613      	mov	r3, r2
 800effe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f000:	88fb      	ldrh	r3, [r7, #6]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4618      	mov	r0, r3
 800f006:	f001 fd99 	bl	8010b3c <pvPortMalloc>
 800f00a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00e      	beq.n	800f030 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f012:	20a8      	movs	r0, #168	@ 0xa8
 800f014:	f001 fd92 	bl	8010b3c <pvPortMalloc>
 800f018:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d003      	beq.n	800f028 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	631a      	str	r2, [r3, #48]	@ 0x30
 800f026:	e005      	b.n	800f034 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f028:	6978      	ldr	r0, [r7, #20]
 800f02a:	f001 fe55 	bl	8010cd8 <vPortFree>
 800f02e:	e001      	b.n	800f034 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d017      	beq.n	800f06a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f042:	88fa      	ldrh	r2, [r7, #6]
 800f044:	2300      	movs	r3, #0
 800f046:	9303      	str	r3, [sp, #12]
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	68b9      	ldr	r1, [r7, #8]
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f000 f80f 	bl	800f07c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f05e:	69f8      	ldr	r0, [r7, #28]
 800f060:	f000 f8b4 	bl	800f1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f064:	2301      	movs	r3, #1
 800f066:	61bb      	str	r3, [r7, #24]
 800f068:	e002      	b.n	800f070 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f06a:	f04f 33ff 	mov.w	r3, #4294967295
 800f06e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f070:	69bb      	ldr	r3, [r7, #24]
	}
 800f072:	4618      	mov	r0, r3
 800f074:	3720      	adds	r7, #32
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
	...

0800f07c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b088      	sub	sp, #32
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	607a      	str	r2, [r7, #4]
 800f088:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	461a      	mov	r2, r3
 800f094:	21a5      	movs	r1, #165	@ 0xa5
 800f096:	f00f fc68 	bl	801e96a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f09e:	6879      	ldr	r1, [r7, #4]
 800f0a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f0a4:	440b      	add	r3, r1
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	4413      	add	r3, r2
 800f0aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	f023 0307 	bic.w	r3, r3, #7
 800f0b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	f003 0307 	and.w	r3, r3, #7
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00b      	beq.n	800f0d6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	617b      	str	r3, [r7, #20]
}
 800f0d0:	bf00      	nop
 800f0d2:	bf00      	nop
 800f0d4:	e7fd      	b.n	800f0d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01f      	beq.n	800f11c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0dc:	2300      	movs	r3, #0
 800f0de:	61fb      	str	r3, [r7, #28]
 800f0e0:	e012      	b.n	800f108 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	4413      	add	r3, r2
 800f0e8:	7819      	ldrb	r1, [r3, #0]
 800f0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	3334      	adds	r3, #52	@ 0x34
 800f0f2:	460a      	mov	r2, r1
 800f0f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d006      	beq.n	800f110 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	3301      	adds	r3, #1
 800f106:	61fb      	str	r3, [r7, #28]
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	2b0f      	cmp	r3, #15
 800f10c:	d9e9      	bls.n	800f0e2 <prvInitialiseNewTask+0x66>
 800f10e:	e000      	b.n	800f112 <prvInitialiseNewTask+0x96>
			{
				break;
 800f110:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	2200      	movs	r2, #0
 800f116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f11a:	e003      	b.n	800f124 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f126:	2b37      	cmp	r3, #55	@ 0x37
 800f128:	d901      	bls.n	800f12e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f12a:	2337      	movs	r3, #55	@ 0x37
 800f12c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f132:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f138:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13c:	2200      	movs	r2, #0
 800f13e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f142:	3304      	adds	r3, #4
 800f144:	4618      	mov	r0, r3
 800f146:	f7fe fd3d 	bl	800dbc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14c:	3318      	adds	r3, #24
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fe fd38 	bl	800dbc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f158:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f162:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f168:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f174:	2200      	movs	r2, #0
 800f176:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17c:	3354      	adds	r3, #84	@ 0x54
 800f17e:	224c      	movs	r2, #76	@ 0x4c
 800f180:	2100      	movs	r1, #0
 800f182:	4618      	mov	r0, r3
 800f184:	f00f fbf1 	bl	801e96a <memset>
 800f188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18a:	4a0d      	ldr	r2, [pc, #52]	@ (800f1c0 <prvInitialiseNewTask+0x144>)
 800f18c:	659a      	str	r2, [r3, #88]	@ 0x58
 800f18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f190:	4a0c      	ldr	r2, [pc, #48]	@ (800f1c4 <prvInitialiseNewTask+0x148>)
 800f192:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f196:	4a0c      	ldr	r2, [pc, #48]	@ (800f1c8 <prvInitialiseNewTask+0x14c>)
 800f198:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	68f9      	ldr	r1, [r7, #12]
 800f19e:	69b8      	ldr	r0, [r7, #24]
 800f1a0:	f001 fa7c 	bl	801069c <pxPortInitialiseStack>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1b6:	bf00      	nop
 800f1b8:	3720      	adds	r7, #32
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	240088f4 	.word	0x240088f4
 800f1c4:	2400895c 	.word	0x2400895c
 800f1c8:	240089c4 	.word	0x240089c4

0800f1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1d4:	f001 fb90 	bl	80108f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1d8:	4b2d      	ldr	r3, [pc, #180]	@ (800f290 <prvAddNewTaskToReadyList+0xc4>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	4a2c      	ldr	r2, [pc, #176]	@ (800f290 <prvAddNewTaskToReadyList+0xc4>)
 800f1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f294 <prvAddNewTaskToReadyList+0xc8>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d109      	bne.n	800f1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1ea:	4a2a      	ldr	r2, [pc, #168]	@ (800f294 <prvAddNewTaskToReadyList+0xc8>)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f1f0:	4b27      	ldr	r3, [pc, #156]	@ (800f290 <prvAddNewTaskToReadyList+0xc4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d110      	bne.n	800f21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f1f8:	f000 fc40 	bl	800fa7c <prvInitialiseTaskLists>
 800f1fc:	e00d      	b.n	800f21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f1fe:	4b26      	ldr	r3, [pc, #152]	@ (800f298 <prvAddNewTaskToReadyList+0xcc>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d109      	bne.n	800f21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f206:	4b23      	ldr	r3, [pc, #140]	@ (800f294 <prvAddNewTaskToReadyList+0xc8>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f210:	429a      	cmp	r2, r3
 800f212:	d802      	bhi.n	800f21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f214:	4a1f      	ldr	r2, [pc, #124]	@ (800f294 <prvAddNewTaskToReadyList+0xc8>)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f21a:	4b20      	ldr	r3, [pc, #128]	@ (800f29c <prvAddNewTaskToReadyList+0xd0>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3301      	adds	r3, #1
 800f220:	4a1e      	ldr	r2, [pc, #120]	@ (800f29c <prvAddNewTaskToReadyList+0xd0>)
 800f222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f224:	4b1d      	ldr	r3, [pc, #116]	@ (800f29c <prvAddNewTaskToReadyList+0xd0>)
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f230:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a0 <prvAddNewTaskToReadyList+0xd4>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d903      	bls.n	800f240 <prvAddNewTaskToReadyList+0x74>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f23c:	4a18      	ldr	r2, [pc, #96]	@ (800f2a0 <prvAddNewTaskToReadyList+0xd4>)
 800f23e:	6013      	str	r3, [r2, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f244:	4613      	mov	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4413      	add	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	4a15      	ldr	r2, [pc, #84]	@ (800f2a4 <prvAddNewTaskToReadyList+0xd8>)
 800f24e:	441a      	add	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3304      	adds	r3, #4
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f7fe fcc1 	bl	800dbde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f25c:	f001 fb7e 	bl	801095c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f260:	4b0d      	ldr	r3, [pc, #52]	@ (800f298 <prvAddNewTaskToReadyList+0xcc>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00e      	beq.n	800f286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f268:	4b0a      	ldr	r3, [pc, #40]	@ (800f294 <prvAddNewTaskToReadyList+0xc8>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f272:	429a      	cmp	r2, r3
 800f274:	d207      	bcs.n	800f286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f276:	4b0c      	ldr	r3, [pc, #48]	@ (800f2a8 <prvAddNewTaskToReadyList+0xdc>)
 800f278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f27c:	601a      	str	r2, [r3, #0]
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f286:	bf00      	nop
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	24001604 	.word	0x24001604
 800f294:	24001130 	.word	0x24001130
 800f298:	24001610 	.word	0x24001610
 800f29c:	24001620 	.word	0x24001620
 800f2a0:	2400160c 	.word	0x2400160c
 800f2a4:	24001134 	.word	0x24001134
 800f2a8:	e000ed04 	.word	0xe000ed04

0800f2ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d018      	beq.n	800f2f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f2be:	4b14      	ldr	r3, [pc, #80]	@ (800f310 <vTaskDelay+0x64>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00b      	beq.n	800f2de <vTaskDelay+0x32>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	60bb      	str	r3, [r7, #8]
}
 800f2d8:	bf00      	nop
 800f2da:	bf00      	nop
 800f2dc:	e7fd      	b.n	800f2da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f2de:	f000 f88b 	bl	800f3f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 fe2b 	bl	800ff40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f2ea:	f000 f893 	bl	800f414 <xTaskResumeAll>
 800f2ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d107      	bne.n	800f306 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f2f6:	4b07      	ldr	r3, [pc, #28]	@ (800f314 <vTaskDelay+0x68>)
 800f2f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f306:	bf00      	nop
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	2400162c 	.word	0x2400162c
 800f314:	e000ed04 	.word	0xe000ed04

0800f318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b08a      	sub	sp, #40	@ 0x28
 800f31c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f31e:	2300      	movs	r3, #0
 800f320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f322:	2300      	movs	r3, #0
 800f324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f326:	463a      	mov	r2, r7
 800f328:	1d39      	adds	r1, r7, #4
 800f32a:	f107 0308 	add.w	r3, r7, #8
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fbf4 	bl	800db1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68ba      	ldr	r2, [r7, #8]
 800f33a:	9202      	str	r2, [sp, #8]
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	2300      	movs	r3, #0
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	2300      	movs	r3, #0
 800f344:	460a      	mov	r2, r1
 800f346:	4924      	ldr	r1, [pc, #144]	@ (800f3d8 <vTaskStartScheduler+0xc0>)
 800f348:	4824      	ldr	r0, [pc, #144]	@ (800f3dc <vTaskStartScheduler+0xc4>)
 800f34a:	f7ff fdf1 	bl	800ef30 <xTaskCreateStatic>
 800f34e:	4603      	mov	r3, r0
 800f350:	4a23      	ldr	r2, [pc, #140]	@ (800f3e0 <vTaskStartScheduler+0xc8>)
 800f352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f354:	4b22      	ldr	r3, [pc, #136]	@ (800f3e0 <vTaskStartScheduler+0xc8>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d002      	beq.n	800f362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f35c:	2301      	movs	r3, #1
 800f35e:	617b      	str	r3, [r7, #20]
 800f360:	e001      	b.n	800f366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f362:	2300      	movs	r3, #0
 800f364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d102      	bne.n	800f372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f36c:	f000 fe3c 	bl	800ffe8 <xTimerCreateTimerTask>
 800f370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d11b      	bne.n	800f3b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	613b      	str	r3, [r7, #16]
}
 800f38a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f38c:	4b15      	ldr	r3, [pc, #84]	@ (800f3e4 <vTaskStartScheduler+0xcc>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	3354      	adds	r3, #84	@ 0x54
 800f392:	4a15      	ldr	r2, [pc, #84]	@ (800f3e8 <vTaskStartScheduler+0xd0>)
 800f394:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f396:	4b15      	ldr	r3, [pc, #84]	@ (800f3ec <vTaskStartScheduler+0xd4>)
 800f398:	f04f 32ff 	mov.w	r2, #4294967295
 800f39c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f39e:	4b14      	ldr	r3, [pc, #80]	@ (800f3f0 <vTaskStartScheduler+0xd8>)
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f3a4:	4b13      	ldr	r3, [pc, #76]	@ (800f3f4 <vTaskStartScheduler+0xdc>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f3aa:	f001 fa01 	bl	80107b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f3ae:	e00f      	b.n	800f3d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b6:	d10b      	bne.n	800f3d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3bc:	f383 8811 	msr	BASEPRI, r3
 800f3c0:	f3bf 8f6f 	isb	sy
 800f3c4:	f3bf 8f4f 	dsb	sy
 800f3c8:	60fb      	str	r3, [r7, #12]
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	e7fd      	b.n	800f3cc <vTaskStartScheduler+0xb4>
}
 800f3d0:	bf00      	nop
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	0801f82c 	.word	0x0801f82c
 800f3dc:	0800fa4d 	.word	0x0800fa4d
 800f3e0:	24001628 	.word	0x24001628
 800f3e4:	24001130 	.word	0x24001130
 800f3e8:	24000040 	.word	0x24000040
 800f3ec:	24001624 	.word	0x24001624
 800f3f0:	24001610 	.word	0x24001610
 800f3f4:	24001608 	.word	0x24001608

0800f3f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f3fc:	4b04      	ldr	r3, [pc, #16]	@ (800f410 <vTaskSuspendAll+0x18>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3301      	adds	r3, #1
 800f402:	4a03      	ldr	r2, [pc, #12]	@ (800f410 <vTaskSuspendAll+0x18>)
 800f404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f406:	bf00      	nop
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr
 800f410:	2400162c 	.word	0x2400162c

0800f414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f41e:	2300      	movs	r3, #0
 800f420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f422:	4b42      	ldr	r3, [pc, #264]	@ (800f52c <xTaskResumeAll+0x118>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10b      	bne.n	800f442 <xTaskResumeAll+0x2e>
	__asm volatile
 800f42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42e:	f383 8811 	msr	BASEPRI, r3
 800f432:	f3bf 8f6f 	isb	sy
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	603b      	str	r3, [r7, #0]
}
 800f43c:	bf00      	nop
 800f43e:	bf00      	nop
 800f440:	e7fd      	b.n	800f43e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f442:	f001 fa59 	bl	80108f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f446:	4b39      	ldr	r3, [pc, #228]	@ (800f52c <xTaskResumeAll+0x118>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	4a37      	ldr	r2, [pc, #220]	@ (800f52c <xTaskResumeAll+0x118>)
 800f44e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f450:	4b36      	ldr	r3, [pc, #216]	@ (800f52c <xTaskResumeAll+0x118>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d162      	bne.n	800f51e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f458:	4b35      	ldr	r3, [pc, #212]	@ (800f530 <xTaskResumeAll+0x11c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d05e      	beq.n	800f51e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f460:	e02f      	b.n	800f4c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f462:	4b34      	ldr	r3, [pc, #208]	@ (800f534 <xTaskResumeAll+0x120>)
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3318      	adds	r3, #24
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fe fc12 	bl	800dc98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3304      	adds	r3, #4
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fc0d 	bl	800dc98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f482:	4b2d      	ldr	r3, [pc, #180]	@ (800f538 <xTaskResumeAll+0x124>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d903      	bls.n	800f492 <xTaskResumeAll+0x7e>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f48e:	4a2a      	ldr	r2, [pc, #168]	@ (800f538 <xTaskResumeAll+0x124>)
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f496:	4613      	mov	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	4a27      	ldr	r2, [pc, #156]	@ (800f53c <xTaskResumeAll+0x128>)
 800f4a0:	441a      	add	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	f7fe fb98 	bl	800dbde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b2:	4b23      	ldr	r3, [pc, #140]	@ (800f540 <xTaskResumeAll+0x12c>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d302      	bcc.n	800f4c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f4bc:	4b21      	ldr	r3, [pc, #132]	@ (800f544 <xTaskResumeAll+0x130>)
 800f4be:	2201      	movs	r2, #1
 800f4c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4c2:	4b1c      	ldr	r3, [pc, #112]	@ (800f534 <xTaskResumeAll+0x120>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1cb      	bne.n	800f462 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f4d0:	f000 fb78 	bl	800fbc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f4d4:	4b1c      	ldr	r3, [pc, #112]	@ (800f548 <xTaskResumeAll+0x134>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d010      	beq.n	800f502 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f4e0:	f000 f858 	bl	800f594 <xTaskIncrementTick>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f4ea:	4b16      	ldr	r3, [pc, #88]	@ (800f544 <xTaskResumeAll+0x130>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1f1      	bne.n	800f4e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f4fc:	4b12      	ldr	r3, [pc, #72]	@ (800f548 <xTaskResumeAll+0x134>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f502:	4b10      	ldr	r3, [pc, #64]	@ (800f544 <xTaskResumeAll+0x130>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d009      	beq.n	800f51e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f50a:	2301      	movs	r3, #1
 800f50c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f50e:	4b0f      	ldr	r3, [pc, #60]	@ (800f54c <xTaskResumeAll+0x138>)
 800f510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f51e:	f001 fa1d 	bl	801095c <vPortExitCritical>

	return xAlreadyYielded;
 800f522:	68bb      	ldr	r3, [r7, #8]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2400162c 	.word	0x2400162c
 800f530:	24001604 	.word	0x24001604
 800f534:	240015c4 	.word	0x240015c4
 800f538:	2400160c 	.word	0x2400160c
 800f53c:	24001134 	.word	0x24001134
 800f540:	24001130 	.word	0x24001130
 800f544:	24001618 	.word	0x24001618
 800f548:	24001614 	.word	0x24001614
 800f54c:	e000ed04 	.word	0xe000ed04

0800f550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f556:	4b05      	ldr	r3, [pc, #20]	@ (800f56c <xTaskGetTickCount+0x1c>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f55c:	687b      	ldr	r3, [r7, #4]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	370c      	adds	r7, #12
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	24001608 	.word	0x24001608

0800f570 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f576:	f001 fa9f 	bl	8010ab8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f57a:	2300      	movs	r3, #0
 800f57c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f57e:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <xTaskGetTickCountFromISR+0x20>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f584:	683b      	ldr	r3, [r7, #0]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	24001608 	.word	0x24001608

0800f594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f59e:	4b48      	ldr	r3, [pc, #288]	@ (800f6c0 <xTaskIncrementTick+0x12c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 8082 	bne.w	800f6ac <xTaskIncrementTick+0x118>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5a8:	4b46      	ldr	r3, [pc, #280]	@ (800f6c4 <xTaskIncrementTick+0x130>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5b0:	4a44      	ldr	r2, [pc, #272]	@ (800f6c4 <xTaskIncrementTick+0x130>)
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d121      	bne.n	800f600 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5bc:	4b42      	ldr	r3, [pc, #264]	@ (800f6c8 <xTaskIncrementTick+0x134>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00b      	beq.n	800f5de <xTaskIncrementTick+0x4a>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	603b      	str	r3, [r7, #0]
}
 800f5d8:	bf00      	nop
 800f5da:	bf00      	nop
 800f5dc:	e7fd      	b.n	800f5da <xTaskIncrementTick+0x46>
 800f5de:	4b3a      	ldr	r3, [pc, #232]	@ (800f6c8 <xTaskIncrementTick+0x134>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	4b39      	ldr	r3, [pc, #228]	@ (800f6cc <xTaskIncrementTick+0x138>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a37      	ldr	r2, [pc, #220]	@ (800f6c8 <xTaskIncrementTick+0x134>)
 800f5ea:	6013      	str	r3, [r2, #0]
 800f5ec:	4a37      	ldr	r2, [pc, #220]	@ (800f6cc <xTaskIncrementTick+0x138>)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	4b37      	ldr	r3, [pc, #220]	@ (800f6d0 <xTaskIncrementTick+0x13c>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	4a35      	ldr	r2, [pc, #212]	@ (800f6d0 <xTaskIncrementTick+0x13c>)
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	f000 fae2 	bl	800fbc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f600:	4b34      	ldr	r3, [pc, #208]	@ (800f6d4 <xTaskIncrementTick+0x140>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	429a      	cmp	r2, r3
 800f608:	d349      	bcc.n	800f69e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f60a:	4b2f      	ldr	r3, [pc, #188]	@ (800f6c8 <xTaskIncrementTick+0x134>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f614:	4b2f      	ldr	r3, [pc, #188]	@ (800f6d4 <xTaskIncrementTick+0x140>)
 800f616:	f04f 32ff 	mov.w	r2, #4294967295
 800f61a:	601a      	str	r2, [r3, #0]
					break;
 800f61c:	e03f      	b.n	800f69e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f61e:	4b2a      	ldr	r3, [pc, #168]	@ (800f6c8 <xTaskIncrementTick+0x134>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	429a      	cmp	r2, r3
 800f634:	d203      	bcs.n	800f63e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f636:	4a27      	ldr	r2, [pc, #156]	@ (800f6d4 <xTaskIncrementTick+0x140>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f63c:	e02f      	b.n	800f69e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	3304      	adds	r3, #4
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe fb28 	bl	800dc98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d004      	beq.n	800f65a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3318      	adds	r3, #24
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe fb1f 	bl	800dc98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f65e:	4b1e      	ldr	r3, [pc, #120]	@ (800f6d8 <xTaskIncrementTick+0x144>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	429a      	cmp	r2, r3
 800f664:	d903      	bls.n	800f66e <xTaskIncrementTick+0xda>
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f66a:	4a1b      	ldr	r2, [pc, #108]	@ (800f6d8 <xTaskIncrementTick+0x144>)
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f672:	4613      	mov	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4a18      	ldr	r2, [pc, #96]	@ (800f6dc <xTaskIncrementTick+0x148>)
 800f67c:	441a      	add	r2, r3
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	3304      	adds	r3, #4
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7fe faaa 	bl	800dbde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f68e:	4b14      	ldr	r3, [pc, #80]	@ (800f6e0 <xTaskIncrementTick+0x14c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f694:	429a      	cmp	r2, r3
 800f696:	d3b8      	bcc.n	800f60a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f698:	2301      	movs	r3, #1
 800f69a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f69c:	e7b5      	b.n	800f60a <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f69e:	4b11      	ldr	r3, [pc, #68]	@ (800f6e4 <xTaskIncrementTick+0x150>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d007      	beq.n	800f6b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	617b      	str	r3, [r7, #20]
 800f6aa:	e004      	b.n	800f6b6 <xTaskIncrementTick+0x122>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f6e8 <xTaskIncrementTick+0x154>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	4a0d      	ldr	r2, [pc, #52]	@ (800f6e8 <xTaskIncrementTick+0x154>)
 800f6b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f6b6:	697b      	ldr	r3, [r7, #20]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	2400162c 	.word	0x2400162c
 800f6c4:	24001608 	.word	0x24001608
 800f6c8:	240015bc 	.word	0x240015bc
 800f6cc:	240015c0 	.word	0x240015c0
 800f6d0:	2400161c 	.word	0x2400161c
 800f6d4:	24001624 	.word	0x24001624
 800f6d8:	2400160c 	.word	0x2400160c
 800f6dc:	24001134 	.word	0x24001134
 800f6e0:	24001130 	.word	0x24001130
 800f6e4:	24001618 	.word	0x24001618
 800f6e8:	24001614 	.word	0x24001614

0800f6ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f6f2:	4b32      	ldr	r3, [pc, #200]	@ (800f7bc <vTaskSwitchContext+0xd0>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f6fa:	4b31      	ldr	r3, [pc, #196]	@ (800f7c0 <vTaskSwitchContext+0xd4>)
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f700:	e058      	b.n	800f7b4 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800f702:	4b2f      	ldr	r3, [pc, #188]	@ (800f7c0 <vTaskSwitchContext+0xd4>)
 800f704:	2200      	movs	r2, #0
 800f706:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f708:	4b2e      	ldr	r3, [pc, #184]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	4b2d      	ldr	r3, [pc, #180]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f714:	429a      	cmp	r2, r3
 800f716:	d808      	bhi.n	800f72a <vTaskSwitchContext+0x3e>
 800f718:	4b2a      	ldr	r3, [pc, #168]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	4b29      	ldr	r3, [pc, #164]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	3334      	adds	r3, #52	@ 0x34
 800f722:	4619      	mov	r1, r3
 800f724:	4610      	mov	r0, r2
 800f726:	f7f1 fa37 	bl	8000b98 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f72a:	4b27      	ldr	r3, [pc, #156]	@ (800f7c8 <vTaskSwitchContext+0xdc>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	60fb      	str	r3, [r7, #12]
 800f730:	e011      	b.n	800f756 <vTaskSwitchContext+0x6a>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10b      	bne.n	800f750 <vTaskSwitchContext+0x64>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	607b      	str	r3, [r7, #4]
}
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	e7fd      	b.n	800f74c <vTaskSwitchContext+0x60>
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	3b01      	subs	r3, #1
 800f754:	60fb      	str	r3, [r7, #12]
 800f756:	491d      	ldr	r1, [pc, #116]	@ (800f7cc <vTaskSwitchContext+0xe0>)
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	4613      	mov	r3, r2
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	440b      	add	r3, r1
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d0e3      	beq.n	800f732 <vTaskSwitchContext+0x46>
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4613      	mov	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4a15      	ldr	r2, [pc, #84]	@ (800f7cc <vTaskSwitchContext+0xe0>)
 800f776:	4413      	add	r3, r2
 800f778:	60bb      	str	r3, [r7, #8]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	605a      	str	r2, [r3, #4]
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	3308      	adds	r3, #8
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d104      	bne.n	800f79a <vTaskSwitchContext+0xae>
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	685a      	ldr	r2, [r3, #4]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	605a      	str	r2, [r3, #4]
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	4a08      	ldr	r2, [pc, #32]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f7a2:	6013      	str	r3, [r2, #0]
 800f7a4:	4a08      	ldr	r2, [pc, #32]	@ (800f7c8 <vTaskSwitchContext+0xdc>)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7aa:	4b06      	ldr	r3, [pc, #24]	@ (800f7c4 <vTaskSwitchContext+0xd8>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3354      	adds	r3, #84	@ 0x54
 800f7b0:	4a07      	ldr	r2, [pc, #28]	@ (800f7d0 <vTaskSwitchContext+0xe4>)
 800f7b2:	6013      	str	r3, [r2, #0]
}
 800f7b4:	bf00      	nop
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	2400162c 	.word	0x2400162c
 800f7c0:	24001618 	.word	0x24001618
 800f7c4:	24001130 	.word	0x24001130
 800f7c8:	2400160c 	.word	0x2400160c
 800f7cc:	24001134 	.word	0x24001134
 800f7d0:	24000040 	.word	0x24000040

0800f7d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d10b      	bne.n	800f7fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	60fb      	str	r3, [r7, #12]
}
 800f7f6:	bf00      	nop
 800f7f8:	bf00      	nop
 800f7fa:	e7fd      	b.n	800f7f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7fc:	4b07      	ldr	r3, [pc, #28]	@ (800f81c <vTaskPlaceOnEventList+0x48>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3318      	adds	r3, #24
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7fe fa0e 	bl	800dc26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f80a:	2101      	movs	r1, #1
 800f80c:	6838      	ldr	r0, [r7, #0]
 800f80e:	f000 fb97 	bl	800ff40 <prvAddCurrentTaskToDelayedList>
}
 800f812:	bf00      	nop
 800f814:	3710      	adds	r7, #16
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	24001130 	.word	0x24001130

0800f820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d10b      	bne.n	800f84a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	617b      	str	r3, [r7, #20]
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop
 800f848:	e7fd      	b.n	800f846 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f84a:	4b0a      	ldr	r3, [pc, #40]	@ (800f874 <vTaskPlaceOnEventListRestricted+0x54>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	3318      	adds	r3, #24
 800f850:	4619      	mov	r1, r3
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7fe f9c3 	bl	800dbde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f85e:	f04f 33ff 	mov.w	r3, #4294967295
 800f862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f864:	6879      	ldr	r1, [r7, #4]
 800f866:	68b8      	ldr	r0, [r7, #8]
 800f868:	f000 fb6a 	bl	800ff40 <prvAddCurrentTaskToDelayedList>
	}
 800f86c:	bf00      	nop
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	24001130 	.word	0x24001130

0800f878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b086      	sub	sp, #24
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10b      	bne.n	800f8a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	60fb      	str	r3, [r7, #12]
}
 800f8a0:	bf00      	nop
 800f8a2:	bf00      	nop
 800f8a4:	e7fd      	b.n	800f8a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	3318      	adds	r3, #24
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fe f9f4 	bl	800dc98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800f928 <xTaskRemoveFromEventList+0xb0>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d11d      	bne.n	800f8f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	3304      	adds	r3, #4
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fe f9eb 	bl	800dc98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8c6:	4b19      	ldr	r3, [pc, #100]	@ (800f92c <xTaskRemoveFromEventList+0xb4>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d903      	bls.n	800f8d6 <xTaskRemoveFromEventList+0x5e>
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d2:	4a16      	ldr	r2, [pc, #88]	@ (800f92c <xTaskRemoveFromEventList+0xb4>)
 800f8d4:	6013      	str	r3, [r2, #0]
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4a13      	ldr	r2, [pc, #76]	@ (800f930 <xTaskRemoveFromEventList+0xb8>)
 800f8e4:	441a      	add	r2, r3
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	f7fe f976 	bl	800dbde <vListInsertEnd>
 800f8f2:	e005      	b.n	800f900 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	3318      	adds	r3, #24
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	480e      	ldr	r0, [pc, #56]	@ (800f934 <xTaskRemoveFromEventList+0xbc>)
 800f8fc:	f7fe f96f 	bl	800dbde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f904:	4b0c      	ldr	r3, [pc, #48]	@ (800f938 <xTaskRemoveFromEventList+0xc0>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d905      	bls.n	800f91a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f90e:	2301      	movs	r3, #1
 800f910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f912:	4b0a      	ldr	r3, [pc, #40]	@ (800f93c <xTaskRemoveFromEventList+0xc4>)
 800f914:	2201      	movs	r2, #1
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	e001      	b.n	800f91e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f91a:	2300      	movs	r3, #0
 800f91c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f91e:	697b      	ldr	r3, [r7, #20]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	2400162c 	.word	0x2400162c
 800f92c:	2400160c 	.word	0x2400160c
 800f930:	24001134 	.word	0x24001134
 800f934:	240015c4 	.word	0x240015c4
 800f938:	24001130 	.word	0x24001130
 800f93c:	24001618 	.word	0x24001618

0800f940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f948:	4b06      	ldr	r3, [pc, #24]	@ (800f964 <vTaskInternalSetTimeOutState+0x24>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f950:	4b05      	ldr	r3, [pc, #20]	@ (800f968 <vTaskInternalSetTimeOutState+0x28>)
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	605a      	str	r2, [r3, #4]
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	2400161c 	.word	0x2400161c
 800f968:	24001608 	.word	0x24001608

0800f96c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b088      	sub	sp, #32
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10b      	bne.n	800f994 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	613b      	str	r3, [r7, #16]
}
 800f98e:	bf00      	nop
 800f990:	bf00      	nop
 800f992:	e7fd      	b.n	800f990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10b      	bne.n	800f9b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	60fb      	str	r3, [r7, #12]
}
 800f9ac:	bf00      	nop
 800f9ae:	bf00      	nop
 800f9b0:	e7fd      	b.n	800f9ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f9b2:	f000 ffa1 	bl	80108f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800fa2c <xTaskCheckForTimeOut+0xc0>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	69ba      	ldr	r2, [r7, #24]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ce:	d102      	bne.n	800f9d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	61fb      	str	r3, [r7, #28]
 800f9d4:	e023      	b.n	800fa1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	4b15      	ldr	r3, [pc, #84]	@ (800fa30 <xTaskCheckForTimeOut+0xc4>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d007      	beq.n	800f9f2 <xTaskCheckForTimeOut+0x86>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	69ba      	ldr	r2, [r7, #24]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d302      	bcc.n	800f9f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	e015      	b.n	800fa1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	697a      	ldr	r2, [r7, #20]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d20b      	bcs.n	800fa14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	1ad2      	subs	r2, r2, r3
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ff99 	bl	800f940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	61fb      	str	r3, [r7, #28]
 800fa12:	e004      	b.n	800fa1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2200      	movs	r2, #0
 800fa18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa1e:	f000 ff9d 	bl	801095c <vPortExitCritical>

	return xReturn;
 800fa22:	69fb      	ldr	r3, [r7, #28]
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3720      	adds	r7, #32
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	24001608 	.word	0x24001608
 800fa30:	2400161c 	.word	0x2400161c

0800fa34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa34:	b480      	push	{r7}
 800fa36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa38:	4b03      	ldr	r3, [pc, #12]	@ (800fa48 <vTaskMissedYield+0x14>)
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	601a      	str	r2, [r3, #0]
}
 800fa3e:	bf00      	nop
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr
 800fa48:	24001618 	.word	0x24001618

0800fa4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa54:	f000 f852 	bl	800fafc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa58:	4b06      	ldr	r3, [pc, #24]	@ (800fa74 <prvIdleTask+0x28>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d9f9      	bls.n	800fa54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa60:	4b05      	ldr	r3, [pc, #20]	@ (800fa78 <prvIdleTask+0x2c>)
 800fa62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa70:	e7f0      	b.n	800fa54 <prvIdleTask+0x8>
 800fa72:	bf00      	nop
 800fa74:	24001134 	.word	0x24001134
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa82:	2300      	movs	r3, #0
 800fa84:	607b      	str	r3, [r7, #4]
 800fa86:	e00c      	b.n	800faa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4a12      	ldr	r2, [pc, #72]	@ (800fadc <prvInitialiseTaskLists+0x60>)
 800fa94:	4413      	add	r3, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe f874 	bl	800db84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	607b      	str	r3, [r7, #4]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b37      	cmp	r3, #55	@ 0x37
 800faa6:	d9ef      	bls.n	800fa88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800faa8:	480d      	ldr	r0, [pc, #52]	@ (800fae0 <prvInitialiseTaskLists+0x64>)
 800faaa:	f7fe f86b 	bl	800db84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800faae:	480d      	ldr	r0, [pc, #52]	@ (800fae4 <prvInitialiseTaskLists+0x68>)
 800fab0:	f7fe f868 	bl	800db84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fab4:	480c      	ldr	r0, [pc, #48]	@ (800fae8 <prvInitialiseTaskLists+0x6c>)
 800fab6:	f7fe f865 	bl	800db84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800faba:	480c      	ldr	r0, [pc, #48]	@ (800faec <prvInitialiseTaskLists+0x70>)
 800fabc:	f7fe f862 	bl	800db84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fac0:	480b      	ldr	r0, [pc, #44]	@ (800faf0 <prvInitialiseTaskLists+0x74>)
 800fac2:	f7fe f85f 	bl	800db84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fac6:	4b0b      	ldr	r3, [pc, #44]	@ (800faf4 <prvInitialiseTaskLists+0x78>)
 800fac8:	4a05      	ldr	r2, [pc, #20]	@ (800fae0 <prvInitialiseTaskLists+0x64>)
 800faca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800facc:	4b0a      	ldr	r3, [pc, #40]	@ (800faf8 <prvInitialiseTaskLists+0x7c>)
 800face:	4a05      	ldr	r2, [pc, #20]	@ (800fae4 <prvInitialiseTaskLists+0x68>)
 800fad0:	601a      	str	r2, [r3, #0]
}
 800fad2:	bf00      	nop
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	24001134 	.word	0x24001134
 800fae0:	24001594 	.word	0x24001594
 800fae4:	240015a8 	.word	0x240015a8
 800fae8:	240015c4 	.word	0x240015c4
 800faec:	240015d8 	.word	0x240015d8
 800faf0:	240015f0 	.word	0x240015f0
 800faf4:	240015bc 	.word	0x240015bc
 800faf8:	240015c0 	.word	0x240015c0

0800fafc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb02:	e019      	b.n	800fb38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb04:	f000 fef8 	bl	80108f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb08:	4b10      	ldr	r3, [pc, #64]	@ (800fb4c <prvCheckTasksWaitingTermination+0x50>)
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3304      	adds	r3, #4
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fe f8bf 	bl	800dc98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb50 <prvCheckTasksWaitingTermination+0x54>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4a0b      	ldr	r2, [pc, #44]	@ (800fb50 <prvCheckTasksWaitingTermination+0x54>)
 800fb22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb24:	4b0b      	ldr	r3, [pc, #44]	@ (800fb54 <prvCheckTasksWaitingTermination+0x58>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	4a0a      	ldr	r2, [pc, #40]	@ (800fb54 <prvCheckTasksWaitingTermination+0x58>)
 800fb2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb2e:	f000 ff15 	bl	801095c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f810 	bl	800fb58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb38:	4b06      	ldr	r3, [pc, #24]	@ (800fb54 <prvCheckTasksWaitingTermination+0x58>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1e1      	bne.n	800fb04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb40:	bf00      	nop
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	240015d8 	.word	0x240015d8
 800fb50:	24001604 	.word	0x24001604
 800fb54:	240015ec 	.word	0x240015ec

0800fb58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	3354      	adds	r3, #84	@ 0x54
 800fb64:	4618      	mov	r0, r3
 800fb66:	f00e ff19 	bl	801e99c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d108      	bne.n	800fb86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f001 f8ad 	bl	8010cd8 <vPortFree>
				vPortFree( pxTCB );
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f001 f8aa 	bl	8010cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb84:	e019      	b.n	800fbba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d103      	bne.n	800fb98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f001 f8a1 	bl	8010cd8 <vPortFree>
	}
 800fb96:	e010      	b.n	800fbba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d00b      	beq.n	800fbba <prvDeleteTCB+0x62>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	60fb      	str	r3, [r7, #12]
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop
 800fbb8:	e7fd      	b.n	800fbb6 <prvDeleteTCB+0x5e>
	}
 800fbba:	bf00      	nop
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
	...

0800fbc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbca:	4b0c      	ldr	r3, [pc, #48]	@ (800fbfc <prvResetNextTaskUnblockTime+0x38>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d104      	bne.n	800fbde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbd4:	4b0a      	ldr	r3, [pc, #40]	@ (800fc00 <prvResetNextTaskUnblockTime+0x3c>)
 800fbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbdc:	e008      	b.n	800fbf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbde:	4b07      	ldr	r3, [pc, #28]	@ (800fbfc <prvResetNextTaskUnblockTime+0x38>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	4a04      	ldr	r2, [pc, #16]	@ (800fc00 <prvResetNextTaskUnblockTime+0x3c>)
 800fbee:	6013      	str	r3, [r2, #0]
}
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr
 800fbfc:	240015bc 	.word	0x240015bc
 800fc00:	24001624 	.word	0x24001624

0800fc04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fc0a:	4b05      	ldr	r3, [pc, #20]	@ (800fc20 <xTaskGetCurrentTaskHandle+0x1c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fc10:	687b      	ldr	r3, [r7, #4]
	}
 800fc12:	4618      	mov	r0, r3
 800fc14:	370c      	adds	r7, #12
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	24001130 	.word	0x24001130

0800fc24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800fc58 <xTaskGetSchedulerState+0x34>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d102      	bne.n	800fc38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc32:	2301      	movs	r3, #1
 800fc34:	607b      	str	r3, [r7, #4]
 800fc36:	e008      	b.n	800fc4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc38:	4b08      	ldr	r3, [pc, #32]	@ (800fc5c <xTaskGetSchedulerState+0x38>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d102      	bne.n	800fc46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc40:	2302      	movs	r3, #2
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	e001      	b.n	800fc4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc46:	2300      	movs	r3, #0
 800fc48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc4a:	687b      	ldr	r3, [r7, #4]
	}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	24001610 	.word	0x24001610
 800fc5c:	2400162c 	.word	0x2400162c

0800fc60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d051      	beq.n	800fd1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7a:	4b2a      	ldr	r3, [pc, #168]	@ (800fd24 <xTaskPriorityInherit+0xc4>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d241      	bcs.n	800fd08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	db06      	blt.n	800fc9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc8c:	4b25      	ldr	r3, [pc, #148]	@ (800fd24 <xTaskPriorityInherit+0xc4>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	6959      	ldr	r1, [r3, #20]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fca2:	4613      	mov	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	4413      	add	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4a1f      	ldr	r2, [pc, #124]	@ (800fd28 <xTaskPriorityInherit+0xc8>)
 800fcac:	4413      	add	r3, r2
 800fcae:	4299      	cmp	r1, r3
 800fcb0:	d122      	bne.n	800fcf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fd ffee 	bl	800dc98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcbc:	4b19      	ldr	r3, [pc, #100]	@ (800fd24 <xTaskPriorityInherit+0xc4>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcca:	4b18      	ldr	r3, [pc, #96]	@ (800fd2c <xTaskPriorityInherit+0xcc>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d903      	bls.n	800fcda <xTaskPriorityInherit+0x7a>
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd6:	4a15      	ldr	r2, [pc, #84]	@ (800fd2c <xTaskPriorityInherit+0xcc>)
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcde:	4613      	mov	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4413      	add	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	4a10      	ldr	r2, [pc, #64]	@ (800fd28 <xTaskPriorityInherit+0xc8>)
 800fce8:	441a      	add	r2, r3
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7fd ff74 	bl	800dbde <vListInsertEnd>
 800fcf6:	e004      	b.n	800fd02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800fd24 <xTaskPriorityInherit+0xc4>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd02:	2301      	movs	r3, #1
 800fd04:	60fb      	str	r3, [r7, #12]
 800fd06:	e008      	b.n	800fd1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd0c:	4b05      	ldr	r3, [pc, #20]	@ (800fd24 <xTaskPriorityInherit+0xc4>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d201      	bcs.n	800fd1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd16:	2301      	movs	r3, #1
 800fd18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	24001130 	.word	0x24001130
 800fd28:	24001134 	.word	0x24001134
 800fd2c:	2400160c 	.word	0x2400160c

0800fd30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d058      	beq.n	800fdf8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd46:	4b2f      	ldr	r3, [pc, #188]	@ (800fe04 <xTaskPriorityDisinherit+0xd4>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	693a      	ldr	r2, [r7, #16]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d00b      	beq.n	800fd68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	60fb      	str	r3, [r7, #12]
}
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	e7fd      	b.n	800fd64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10b      	bne.n	800fd88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	60bb      	str	r3, [r7, #8]
}
 800fd82:	bf00      	nop
 800fd84:	bf00      	nop
 800fd86:	e7fd      	b.n	800fd84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd8c:	1e5a      	subs	r2, r3, #1
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d02c      	beq.n	800fdf8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d128      	bne.n	800fdf8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	3304      	adds	r3, #4
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fd ff74 	bl	800dc98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdc8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe08 <xTaskPriorityDisinherit+0xd8>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d903      	bls.n	800fdd8 <xTaskPriorityDisinherit+0xa8>
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd4:	4a0c      	ldr	r2, [pc, #48]	@ (800fe08 <xTaskPriorityDisinherit+0xd8>)
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fddc:	4613      	mov	r3, r2
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	4413      	add	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4a09      	ldr	r2, [pc, #36]	@ (800fe0c <xTaskPriorityDisinherit+0xdc>)
 800fde6:	441a      	add	r2, r3
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	3304      	adds	r3, #4
 800fdec:	4619      	mov	r1, r3
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7fd fef5 	bl	800dbde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdf8:	697b      	ldr	r3, [r7, #20]
	}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3718      	adds	r7, #24
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	24001130 	.word	0x24001130
 800fe08:	2400160c 	.word	0x2400160c
 800fe0c:	24001134 	.word	0x24001134

0800fe10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b088      	sub	sp, #32
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d06c      	beq.n	800ff02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10b      	bne.n	800fe48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fe30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	60fb      	str	r3, [r7, #12]
}
 800fe42:	bf00      	nop
 800fe44:	bf00      	nop
 800fe46:	e7fd      	b.n	800fe44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe4c:	683a      	ldr	r2, [r7, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d902      	bls.n	800fe58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	61fb      	str	r3, [r7, #28]
 800fe56:	e002      	b.n	800fe5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe62:	69fa      	ldr	r2, [r7, #28]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d04c      	beq.n	800ff02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d147      	bne.n	800ff02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fe72:	4b26      	ldr	r3, [pc, #152]	@ (800ff0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	69ba      	ldr	r2, [r7, #24]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d10b      	bne.n	800fe94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fe7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe80:	f383 8811 	msr	BASEPRI, r3
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	f3bf 8f4f 	dsb	sy
 800fe8c:	60bb      	str	r3, [r7, #8]
}
 800fe8e:	bf00      	nop
 800fe90:	bf00      	nop
 800fe92:	e7fd      	b.n	800fe90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	69fa      	ldr	r2, [r7, #28]
 800fe9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	db04      	blt.n	800feb2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	6959      	ldr	r1, [r3, #20]
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	4613      	mov	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	4413      	add	r3, r2
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	4a13      	ldr	r2, [pc, #76]	@ (800ff10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fec2:	4413      	add	r3, r2
 800fec4:	4299      	cmp	r1, r3
 800fec6:	d11c      	bne.n	800ff02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	3304      	adds	r3, #4
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fd fee3 	bl	800dc98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fed6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d903      	bls.n	800fee6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee2:	4a0c      	ldr	r2, [pc, #48]	@ (800ff14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fee4:	6013      	str	r3, [r2, #0]
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	4a07      	ldr	r2, [pc, #28]	@ (800ff10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fef4:	441a      	add	r2, r3
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	3304      	adds	r3, #4
 800fefa:	4619      	mov	r1, r3
 800fefc:	4610      	mov	r0, r2
 800fefe:	f7fd fe6e 	bl	800dbde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff02:	bf00      	nop
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	24001130 	.word	0x24001130
 800ff10:	24001134 	.word	0x24001134
 800ff14:	2400160c 	.word	0x2400160c

0800ff18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff18:	b480      	push	{r7}
 800ff1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff1c:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d004      	beq.n	800ff2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff24:	4b05      	ldr	r3, [pc, #20]	@ (800ff3c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff2a:	3201      	adds	r2, #1
 800ff2c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ff2e:	4b03      	ldr	r3, [pc, #12]	@ (800ff3c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff30:	681b      	ldr	r3, [r3, #0]
	}
 800ff32:	4618      	mov	r0, r3
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	24001130 	.word	0x24001130

0800ff40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff4a:	4b21      	ldr	r3, [pc, #132]	@ (800ffd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff50:	4b20      	ldr	r3, [pc, #128]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3304      	adds	r3, #4
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fd fe9e 	bl	800dc98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff62:	d10a      	bne.n	800ff7a <prvAddCurrentTaskToDelayedList+0x3a>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d007      	beq.n	800ff7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff6a:	4b1a      	ldr	r3, [pc, #104]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	3304      	adds	r3, #4
 800ff70:	4619      	mov	r1, r3
 800ff72:	4819      	ldr	r0, [pc, #100]	@ (800ffd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ff74:	f7fd fe33 	bl	800dbde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ff78:	e026      	b.n	800ffc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ff7a:	68fa      	ldr	r2, [r7, #12]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4413      	add	r3, r2
 800ff80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ff82:	4b14      	ldr	r3, [pc, #80]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ff8a:	68ba      	ldr	r2, [r7, #8]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d209      	bcs.n	800ffa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff92:	4b12      	ldr	r3, [pc, #72]	@ (800ffdc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	f7fd fe41 	bl	800dc26 <vListInsert>
}
 800ffa4:	e010      	b.n	800ffc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffa6:	4b0e      	ldr	r3, [pc, #56]	@ (800ffe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	4610      	mov	r0, r2
 800ffb4:	f7fd fe37 	bl	800dc26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ffb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ffe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68ba      	ldr	r2, [r7, #8]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d202      	bcs.n	800ffc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ffc2:	4a08      	ldr	r2, [pc, #32]	@ (800ffe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	6013      	str	r3, [r2, #0]
}
 800ffc8:	bf00      	nop
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	24001608 	.word	0x24001608
 800ffd4:	24001130 	.word	0x24001130
 800ffd8:	240015f0 	.word	0x240015f0
 800ffdc:	240015c0 	.word	0x240015c0
 800ffe0:	240015bc 	.word	0x240015bc
 800ffe4:	24001624 	.word	0x24001624

0800ffe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	@ 0x28
 800ffec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fff2:	f000 fb13 	bl	801061c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fff6:	4b1d      	ldr	r3, [pc, #116]	@ (801006c <xTimerCreateTimerTask+0x84>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d021      	beq.n	8010042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010002:	2300      	movs	r3, #0
 8010004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010006:	1d3a      	adds	r2, r7, #4
 8010008:	f107 0108 	add.w	r1, r7, #8
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	4618      	mov	r0, r3
 8010012:	f7fd fd9d 	bl	800db50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010016:	6879      	ldr	r1, [r7, #4]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	9202      	str	r2, [sp, #8]
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	2302      	movs	r3, #2
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	2300      	movs	r3, #0
 8010026:	460a      	mov	r2, r1
 8010028:	4911      	ldr	r1, [pc, #68]	@ (8010070 <xTimerCreateTimerTask+0x88>)
 801002a:	4812      	ldr	r0, [pc, #72]	@ (8010074 <xTimerCreateTimerTask+0x8c>)
 801002c:	f7fe ff80 	bl	800ef30 <xTaskCreateStatic>
 8010030:	4603      	mov	r3, r0
 8010032:	4a11      	ldr	r2, [pc, #68]	@ (8010078 <xTimerCreateTimerTask+0x90>)
 8010034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010036:	4b10      	ldr	r3, [pc, #64]	@ (8010078 <xTimerCreateTimerTask+0x90>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801003e:	2301      	movs	r3, #1
 8010040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10b      	bne.n	8010060 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	613b      	str	r3, [r7, #16]
}
 801005a:	bf00      	nop
 801005c:	bf00      	nop
 801005e:	e7fd      	b.n	801005c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010060:	697b      	ldr	r3, [r7, #20]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3718      	adds	r7, #24
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	24001660 	.word	0x24001660
 8010070:	0801f834 	.word	0x0801f834
 8010074:	080101b5 	.word	0x080101b5
 8010078:	24001664 	.word	0x24001664

0801007c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08a      	sub	sp, #40	@ 0x28
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801008a:	2300      	movs	r3, #0
 801008c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10b      	bne.n	80100ac <xTimerGenericCommand+0x30>
	__asm volatile
 8010094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	623b      	str	r3, [r7, #32]
}
 80100a6:	bf00      	nop
 80100a8:	bf00      	nop
 80100aa:	e7fd      	b.n	80100a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80100ac:	4b19      	ldr	r3, [pc, #100]	@ (8010114 <xTimerGenericCommand+0x98>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d02a      	beq.n	801010a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	2b05      	cmp	r3, #5
 80100c4:	dc18      	bgt.n	80100f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80100c6:	f7ff fdad 	bl	800fc24 <xTaskGetSchedulerState>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b02      	cmp	r3, #2
 80100ce:	d109      	bne.n	80100e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80100d0:	4b10      	ldr	r3, [pc, #64]	@ (8010114 <xTimerGenericCommand+0x98>)
 80100d2:	6818      	ldr	r0, [r3, #0]
 80100d4:	f107 0110 	add.w	r1, r7, #16
 80100d8:	2300      	movs	r3, #0
 80100da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100dc:	f7fe f872 	bl	800e1c4 <xQueueGenericSend>
 80100e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80100e2:	e012      	b.n	801010a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80100e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010114 <xTimerGenericCommand+0x98>)
 80100e6:	6818      	ldr	r0, [r3, #0]
 80100e8:	f107 0110 	add.w	r1, r7, #16
 80100ec:	2300      	movs	r3, #0
 80100ee:	2200      	movs	r2, #0
 80100f0:	f7fe f868 	bl	800e1c4 <xQueueGenericSend>
 80100f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80100f6:	e008      	b.n	801010a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80100f8:	4b06      	ldr	r3, [pc, #24]	@ (8010114 <xTimerGenericCommand+0x98>)
 80100fa:	6818      	ldr	r0, [r3, #0]
 80100fc:	f107 0110 	add.w	r1, r7, #16
 8010100:	2300      	movs	r3, #0
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	f7fe f960 	bl	800e3c8 <xQueueGenericSendFromISR>
 8010108:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801010a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801010c:	4618      	mov	r0, r3
 801010e:	3728      	adds	r7, #40	@ 0x28
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	24001660 	.word	0x24001660

08010118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b088      	sub	sp, #32
 801011c:	af02      	add	r7, sp, #8
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010122:	4b23      	ldr	r3, [pc, #140]	@ (80101b0 <prvProcessExpiredTimer+0x98>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	3304      	adds	r3, #4
 8010130:	4618      	mov	r0, r3
 8010132:	f7fd fdb1 	bl	800dc98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801013c:	f003 0304 	and.w	r3, r3, #4
 8010140:	2b00      	cmp	r3, #0
 8010142:	d023      	beq.n	801018c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	699a      	ldr	r2, [r3, #24]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	18d1      	adds	r1, r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	6978      	ldr	r0, [r7, #20]
 8010152:	f000 f8d5 	bl	8010300 <prvInsertTimerInActiveList>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d020      	beq.n	801019e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801015c:	2300      	movs	r3, #0
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2300      	movs	r3, #0
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	2100      	movs	r1, #0
 8010166:	6978      	ldr	r0, [r7, #20]
 8010168:	f7ff ff88 	bl	801007c <xTimerGenericCommand>
 801016c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d114      	bne.n	801019e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	60fb      	str	r3, [r7, #12]
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	e7fd      	b.n	8010188 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010192:	f023 0301 	bic.w	r3, r3, #1
 8010196:	b2da      	uxtb	r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	6a1b      	ldr	r3, [r3, #32]
 80101a2:	6978      	ldr	r0, [r7, #20]
 80101a4:	4798      	blx	r3
}
 80101a6:	bf00      	nop
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	24001658 	.word	0x24001658

080101b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80101bc:	f107 0308 	add.w	r3, r7, #8
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 f859 	bl	8010278 <prvGetNextExpireTime>
 80101c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	4619      	mov	r1, r3
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f000 f805 	bl	80101dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80101d2:	f000 f8d7 	bl	8010384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80101d6:	bf00      	nop
 80101d8:	e7f0      	b.n	80101bc <prvTimerTask+0x8>
	...

080101dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80101e6:	f7ff f907 	bl	800f3f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101ea:	f107 0308 	add.w	r3, r7, #8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f000 f866 	bl	80102c0 <prvSampleTimeNow>
 80101f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d130      	bne.n	801025e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d10a      	bne.n	8010218 <prvProcessTimerOrBlockTask+0x3c>
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	429a      	cmp	r2, r3
 8010208:	d806      	bhi.n	8010218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801020a:	f7ff f903 	bl	800f414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801020e:	68f9      	ldr	r1, [r7, #12]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ff81 	bl	8010118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010216:	e024      	b.n	8010262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d008      	beq.n	8010230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801021e:	4b13      	ldr	r3, [pc, #76]	@ (801026c <prvProcessTimerOrBlockTask+0x90>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <prvProcessTimerOrBlockTask+0x50>
 8010228:	2301      	movs	r3, #1
 801022a:	e000      	b.n	801022e <prvProcessTimerOrBlockTask+0x52>
 801022c:	2300      	movs	r3, #0
 801022e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010230:	4b0f      	ldr	r3, [pc, #60]	@ (8010270 <prvProcessTimerOrBlockTask+0x94>)
 8010232:	6818      	ldr	r0, [r3, #0]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	1ad3      	subs	r3, r2, r3
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	4619      	mov	r1, r3
 801023e:	f7fe fe43 	bl	800eec8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010242:	f7ff f8e7 	bl	800f414 <xTaskResumeAll>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10a      	bne.n	8010262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801024c:	4b09      	ldr	r3, [pc, #36]	@ (8010274 <prvProcessTimerOrBlockTask+0x98>)
 801024e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	f3bf 8f4f 	dsb	sy
 8010258:	f3bf 8f6f 	isb	sy
}
 801025c:	e001      	b.n	8010262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801025e:	f7ff f8d9 	bl	800f414 <xTaskResumeAll>
}
 8010262:	bf00      	nop
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	2400165c 	.word	0x2400165c
 8010270:	24001660 	.word	0x24001660
 8010274:	e000ed04 	.word	0xe000ed04

08010278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010278:	b480      	push	{r7}
 801027a:	b085      	sub	sp, #20
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010280:	4b0e      	ldr	r3, [pc, #56]	@ (80102bc <prvGetNextExpireTime+0x44>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d101      	bne.n	801028e <prvGetNextExpireTime+0x16>
 801028a:	2201      	movs	r2, #1
 801028c:	e000      	b.n	8010290 <prvGetNextExpireTime+0x18>
 801028e:	2200      	movs	r2, #0
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d105      	bne.n	80102a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801029c:	4b07      	ldr	r3, [pc, #28]	@ (80102bc <prvGetNextExpireTime+0x44>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	e001      	b.n	80102ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80102a8:	2300      	movs	r3, #0
 80102aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80102ac:	68fb      	ldr	r3, [r7, #12]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	24001658 	.word	0x24001658

080102c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80102c8:	f7ff f942 	bl	800f550 <xTaskGetTickCount>
 80102cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80102ce:	4b0b      	ldr	r3, [pc, #44]	@ (80102fc <prvSampleTimeNow+0x3c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d205      	bcs.n	80102e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80102d8:	f000 f93a 	bl	8010550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	601a      	str	r2, [r3, #0]
 80102e2:	e002      	b.n	80102ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80102ea:	4a04      	ldr	r2, [pc, #16]	@ (80102fc <prvSampleTimeNow+0x3c>)
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80102f0:	68fb      	ldr	r3, [r7, #12]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	24001668 	.word	0x24001668

08010300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
 801030c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801030e:	2300      	movs	r3, #0
 8010310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	429a      	cmp	r2, r3
 8010324:	d812      	bhi.n	801034c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	1ad2      	subs	r2, r2, r3
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	429a      	cmp	r2, r3
 8010332:	d302      	bcc.n	801033a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010334:	2301      	movs	r3, #1
 8010336:	617b      	str	r3, [r7, #20]
 8010338:	e01b      	b.n	8010372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801033a:	4b10      	ldr	r3, [pc, #64]	@ (801037c <prvInsertTimerInActiveList+0x7c>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3304      	adds	r3, #4
 8010342:	4619      	mov	r1, r3
 8010344:	4610      	mov	r0, r2
 8010346:	f7fd fc6e 	bl	800dc26 <vListInsert>
 801034a:	e012      	b.n	8010372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	429a      	cmp	r2, r3
 8010352:	d206      	bcs.n	8010362 <prvInsertTimerInActiveList+0x62>
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	429a      	cmp	r2, r3
 801035a:	d302      	bcc.n	8010362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	617b      	str	r3, [r7, #20]
 8010360:	e007      	b.n	8010372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010362:	4b07      	ldr	r3, [pc, #28]	@ (8010380 <prvInsertTimerInActiveList+0x80>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	3304      	adds	r3, #4
 801036a:	4619      	mov	r1, r3
 801036c:	4610      	mov	r0, r2
 801036e:	f7fd fc5a 	bl	800dc26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010372:	697b      	ldr	r3, [r7, #20]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	2400165c 	.word	0x2400165c
 8010380:	24001658 	.word	0x24001658

08010384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b08e      	sub	sp, #56	@ 0x38
 8010388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801038a:	e0ce      	b.n	801052a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	da19      	bge.n	80103c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010392:	1d3b      	adds	r3, r7, #4
 8010394:	3304      	adds	r3, #4
 8010396:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039a:	2b00      	cmp	r3, #0
 801039c:	d10b      	bne.n	80103b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	61fb      	str	r3, [r7, #28]
}
 80103b0:	bf00      	nop
 80103b2:	bf00      	nop
 80103b4:	e7fd      	b.n	80103b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80103b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103bc:	6850      	ldr	r0, [r2, #4]
 80103be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103c0:	6892      	ldr	r2, [r2, #8]
 80103c2:	4611      	mov	r1, r2
 80103c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f2c0 80ae 	blt.w	801052a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80103d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d4:	695b      	ldr	r3, [r3, #20]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d004      	beq.n	80103e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103dc:	3304      	adds	r3, #4
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fd fc5a 	bl	800dc98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103e4:	463b      	mov	r3, r7
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ff ff6a 	bl	80102c0 <prvSampleTimeNow>
 80103ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b09      	cmp	r3, #9
 80103f2:	f200 8097 	bhi.w	8010524 <prvProcessReceivedCommands+0x1a0>
 80103f6:	a201      	add	r2, pc, #4	@ (adr r2, 80103fc <prvProcessReceivedCommands+0x78>)
 80103f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fc:	08010425 	.word	0x08010425
 8010400:	08010425 	.word	0x08010425
 8010404:	08010425 	.word	0x08010425
 8010408:	0801049b 	.word	0x0801049b
 801040c:	080104af 	.word	0x080104af
 8010410:	080104fb 	.word	0x080104fb
 8010414:	08010425 	.word	0x08010425
 8010418:	08010425 	.word	0x08010425
 801041c:	0801049b 	.word	0x0801049b
 8010420:	080104af 	.word	0x080104af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801042a:	f043 0301 	orr.w	r3, r3, #1
 801042e:	b2da      	uxtb	r2, r3
 8010430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	18d1      	adds	r1, r2, r3
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010444:	f7ff ff5c 	bl	8010300 <prvInsertTimerInActiveList>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d06c      	beq.n	8010528 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801044e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010450:	6a1b      	ldr	r3, [r3, #32]
 8010452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801045c:	f003 0304 	and.w	r3, r3, #4
 8010460:	2b00      	cmp	r3, #0
 8010462:	d061      	beq.n	8010528 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010468:	699b      	ldr	r3, [r3, #24]
 801046a:	441a      	add	r2, r3
 801046c:	2300      	movs	r3, #0
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	2300      	movs	r3, #0
 8010472:	2100      	movs	r1, #0
 8010474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010476:	f7ff fe01 	bl	801007c <xTimerGenericCommand>
 801047a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d152      	bne.n	8010528 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	61bb      	str	r3, [r7, #24]
}
 8010494:	bf00      	nop
 8010496:	bf00      	nop
 8010498:	e7fd      	b.n	8010496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801049a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80104a0:	f023 0301 	bic.w	r3, r3, #1
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80104ac:	e03d      	b.n	801052a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80104b4:	f043 0301 	orr.w	r3, r3, #1
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80104c0:	68ba      	ldr	r2, [r7, #8]
 80104c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80104c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10b      	bne.n	80104e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	617b      	str	r3, [r7, #20]
}
 80104e0:	bf00      	nop
 80104e2:	bf00      	nop
 80104e4:	e7fd      	b.n	80104e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80104e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e8:	699a      	ldr	r2, [r3, #24]
 80104ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ec:	18d1      	adds	r1, r2, r3
 80104ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104f4:	f7ff ff04 	bl	8010300 <prvInsertTimerInActiveList>
					break;
 80104f8:	e017      	b.n	801052a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80104fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010500:	f003 0302 	and.w	r3, r3, #2
 8010504:	2b00      	cmp	r3, #0
 8010506:	d103      	bne.n	8010510 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801050a:	f000 fbe5 	bl	8010cd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801050e:	e00c      	b.n	801052a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010512:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010516:	f023 0301 	bic.w	r3, r3, #1
 801051a:	b2da      	uxtb	r2, r3
 801051c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801051e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010522:	e002      	b.n	801052a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010524:	bf00      	nop
 8010526:	e000      	b.n	801052a <prvProcessReceivedCommands+0x1a6>
					break;
 8010528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801052a:	4b08      	ldr	r3, [pc, #32]	@ (801054c <prvProcessReceivedCommands+0x1c8>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	1d39      	adds	r1, r7, #4
 8010530:	2200      	movs	r2, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7fe f876 	bl	800e624 <xQueueReceive>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	f47f af26 	bne.w	801038c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010540:	bf00      	nop
 8010542:	bf00      	nop
 8010544:	3730      	adds	r7, #48	@ 0x30
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	24001660 	.word	0x24001660

08010550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010556:	e049      	b.n	80105ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010558:	4b2e      	ldr	r3, [pc, #184]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010562:	4b2c      	ldr	r3, [pc, #176]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	3304      	adds	r3, #4
 8010570:	4618      	mov	r0, r3
 8010572:	f7fd fb91 	bl	800dc98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d02f      	beq.n	80105ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	693a      	ldr	r2, [r7, #16]
 8010592:	4413      	add	r3, r2
 8010594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010596:	68ba      	ldr	r2, [r7, #8]
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	429a      	cmp	r2, r3
 801059c:	d90e      	bls.n	80105bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	68ba      	ldr	r2, [r7, #8]
 80105a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3304      	adds	r3, #4
 80105b2:	4619      	mov	r1, r3
 80105b4:	4610      	mov	r0, r2
 80105b6:	f7fd fb36 	bl	800dc26 <vListInsert>
 80105ba:	e017      	b.n	80105ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105bc:	2300      	movs	r3, #0
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	2300      	movs	r3, #0
 80105c2:	693a      	ldr	r2, [r7, #16]
 80105c4:	2100      	movs	r1, #0
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f7ff fd58 	bl	801007c <xTimerGenericCommand>
 80105cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10b      	bne.n	80105ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80105d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d8:	f383 8811 	msr	BASEPRI, r3
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	603b      	str	r3, [r7, #0]
}
 80105e6:	bf00      	nop
 80105e8:	bf00      	nop
 80105ea:	e7fd      	b.n	80105e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105ec:	4b09      	ldr	r3, [pc, #36]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1b0      	bne.n	8010558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80105f6:	4b07      	ldr	r3, [pc, #28]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80105fc:	4b06      	ldr	r3, [pc, #24]	@ (8010618 <prvSwitchTimerLists+0xc8>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4a04      	ldr	r2, [pc, #16]	@ (8010614 <prvSwitchTimerLists+0xc4>)
 8010602:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010604:	4a04      	ldr	r2, [pc, #16]	@ (8010618 <prvSwitchTimerLists+0xc8>)
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	6013      	str	r3, [r2, #0]
}
 801060a:	bf00      	nop
 801060c:	3718      	adds	r7, #24
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	24001658 	.word	0x24001658
 8010618:	2400165c 	.word	0x2400165c

0801061c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010622:	f000 f969 	bl	80108f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010626:	4b15      	ldr	r3, [pc, #84]	@ (801067c <prvCheckForValidListAndQueue+0x60>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d120      	bne.n	8010670 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801062e:	4814      	ldr	r0, [pc, #80]	@ (8010680 <prvCheckForValidListAndQueue+0x64>)
 8010630:	f7fd faa8 	bl	800db84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010634:	4813      	ldr	r0, [pc, #76]	@ (8010684 <prvCheckForValidListAndQueue+0x68>)
 8010636:	f7fd faa5 	bl	800db84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801063a:	4b13      	ldr	r3, [pc, #76]	@ (8010688 <prvCheckForValidListAndQueue+0x6c>)
 801063c:	4a10      	ldr	r2, [pc, #64]	@ (8010680 <prvCheckForValidListAndQueue+0x64>)
 801063e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010640:	4b12      	ldr	r3, [pc, #72]	@ (801068c <prvCheckForValidListAndQueue+0x70>)
 8010642:	4a10      	ldr	r2, [pc, #64]	@ (8010684 <prvCheckForValidListAndQueue+0x68>)
 8010644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010646:	2300      	movs	r3, #0
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	4b11      	ldr	r3, [pc, #68]	@ (8010690 <prvCheckForValidListAndQueue+0x74>)
 801064c:	4a11      	ldr	r2, [pc, #68]	@ (8010694 <prvCheckForValidListAndQueue+0x78>)
 801064e:	2110      	movs	r1, #16
 8010650:	200a      	movs	r0, #10
 8010652:	f7fd fbb5 	bl	800ddc0 <xQueueGenericCreateStatic>
 8010656:	4603      	mov	r3, r0
 8010658:	4a08      	ldr	r2, [pc, #32]	@ (801067c <prvCheckForValidListAndQueue+0x60>)
 801065a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801065c:	4b07      	ldr	r3, [pc, #28]	@ (801067c <prvCheckForValidListAndQueue+0x60>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d005      	beq.n	8010670 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010664:	4b05      	ldr	r3, [pc, #20]	@ (801067c <prvCheckForValidListAndQueue+0x60>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	490b      	ldr	r1, [pc, #44]	@ (8010698 <prvCheckForValidListAndQueue+0x7c>)
 801066a:	4618      	mov	r0, r3
 801066c:	f7fe fbd8 	bl	800ee20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010670:	f000 f974 	bl	801095c <vPortExitCritical>
}
 8010674:	bf00      	nop
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	24001660 	.word	0x24001660
 8010680:	24001630 	.word	0x24001630
 8010684:	24001644 	.word	0x24001644
 8010688:	24001658 	.word	0x24001658
 801068c:	2400165c 	.word	0x2400165c
 8010690:	2400170c 	.word	0x2400170c
 8010694:	2400166c 	.word	0x2400166c
 8010698:	0801f83c 	.word	0x0801f83c

0801069c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	3b04      	subs	r3, #4
 80106ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80106b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	3b04      	subs	r3, #4
 80106ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f023 0201 	bic.w	r2, r3, #1
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	3b04      	subs	r3, #4
 80106ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010700 <pxPortInitialiseStack+0x64>)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3b14      	subs	r3, #20
 80106d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3b04      	subs	r3, #4
 80106e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f06f 0202 	mvn.w	r2, #2
 80106ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	3b20      	subs	r3, #32
 80106f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80106f2:	68fb      	ldr	r3, [r7, #12]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	08010705 	.word	0x08010705

08010704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801070e:	4b13      	ldr	r3, [pc, #76]	@ (801075c <prvTaskExitError+0x58>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010716:	d00b      	beq.n	8010730 <prvTaskExitError+0x2c>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	60fb      	str	r3, [r7, #12]
}
 801072a:	bf00      	nop
 801072c:	bf00      	nop
 801072e:	e7fd      	b.n	801072c <prvTaskExitError+0x28>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010734:	f383 8811 	msr	BASEPRI, r3
 8010738:	f3bf 8f6f 	isb	sy
 801073c:	f3bf 8f4f 	dsb	sy
 8010740:	60bb      	str	r3, [r7, #8]
}
 8010742:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010744:	bf00      	nop
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d0fc      	beq.n	8010746 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801074c:	bf00      	nop
 801074e:	bf00      	nop
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	24000024 	.word	0x24000024

08010760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010760:	4b07      	ldr	r3, [pc, #28]	@ (8010780 <pxCurrentTCBConst2>)
 8010762:	6819      	ldr	r1, [r3, #0]
 8010764:	6808      	ldr	r0, [r1, #0]
 8010766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076a:	f380 8809 	msr	PSP, r0
 801076e:	f3bf 8f6f 	isb	sy
 8010772:	f04f 0000 	mov.w	r0, #0
 8010776:	f380 8811 	msr	BASEPRI, r0
 801077a:	4770      	bx	lr
 801077c:	f3af 8000 	nop.w

08010780 <pxCurrentTCBConst2>:
 8010780:	24001130 	.word	0x24001130
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010784:	bf00      	nop
 8010786:	bf00      	nop

08010788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010788:	4808      	ldr	r0, [pc, #32]	@ (80107ac <prvPortStartFirstTask+0x24>)
 801078a:	6800      	ldr	r0, [r0, #0]
 801078c:	6800      	ldr	r0, [r0, #0]
 801078e:	f380 8808 	msr	MSP, r0
 8010792:	f04f 0000 	mov.w	r0, #0
 8010796:	f380 8814 	msr	CONTROL, r0
 801079a:	b662      	cpsie	i
 801079c:	b661      	cpsie	f
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	df00      	svc	0
 80107a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107aa:	bf00      	nop
 80107ac:	e000ed08 	.word	0xe000ed08

080107b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b086      	sub	sp, #24
 80107b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80107b6:	4b47      	ldr	r3, [pc, #284]	@ (80108d4 <xPortStartScheduler+0x124>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a47      	ldr	r2, [pc, #284]	@ (80108d8 <xPortStartScheduler+0x128>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d10b      	bne.n	80107d8 <xPortStartScheduler+0x28>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	613b      	str	r3, [r7, #16]
}
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	e7fd      	b.n	80107d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80107d8:	4b3e      	ldr	r3, [pc, #248]	@ (80108d4 <xPortStartScheduler+0x124>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a3f      	ldr	r2, [pc, #252]	@ (80108dc <xPortStartScheduler+0x12c>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d10b      	bne.n	80107fa <xPortStartScheduler+0x4a>
	__asm volatile
 80107e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e6:	f383 8811 	msr	BASEPRI, r3
 80107ea:	f3bf 8f6f 	isb	sy
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	60fb      	str	r3, [r7, #12]
}
 80107f4:	bf00      	nop
 80107f6:	bf00      	nop
 80107f8:	e7fd      	b.n	80107f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80107fa:	4b39      	ldr	r3, [pc, #228]	@ (80108e0 <xPortStartScheduler+0x130>)
 80107fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	b2db      	uxtb	r3, r3
 8010804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	22ff      	movs	r2, #255	@ 0xff
 801080a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	b2db      	uxtb	r3, r3
 8010812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010814:	78fb      	ldrb	r3, [r7, #3]
 8010816:	b2db      	uxtb	r3, r3
 8010818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801081c:	b2da      	uxtb	r2, r3
 801081e:	4b31      	ldr	r3, [pc, #196]	@ (80108e4 <xPortStartScheduler+0x134>)
 8010820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010822:	4b31      	ldr	r3, [pc, #196]	@ (80108e8 <xPortStartScheduler+0x138>)
 8010824:	2207      	movs	r2, #7
 8010826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010828:	e009      	b.n	801083e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801082a:	4b2f      	ldr	r3, [pc, #188]	@ (80108e8 <xPortStartScheduler+0x138>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3b01      	subs	r3, #1
 8010830:	4a2d      	ldr	r2, [pc, #180]	@ (80108e8 <xPortStartScheduler+0x138>)
 8010832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010834:	78fb      	ldrb	r3, [r7, #3]
 8010836:	b2db      	uxtb	r3, r3
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	b2db      	uxtb	r3, r3
 801083c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801083e:	78fb      	ldrb	r3, [r7, #3]
 8010840:	b2db      	uxtb	r3, r3
 8010842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010846:	2b80      	cmp	r3, #128	@ 0x80
 8010848:	d0ef      	beq.n	801082a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801084a:	4b27      	ldr	r3, [pc, #156]	@ (80108e8 <xPortStartScheduler+0x138>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f1c3 0307 	rsb	r3, r3, #7
 8010852:	2b04      	cmp	r3, #4
 8010854:	d00b      	beq.n	801086e <xPortStartScheduler+0xbe>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	60bb      	str	r3, [r7, #8]
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	e7fd      	b.n	801086a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801086e:	4b1e      	ldr	r3, [pc, #120]	@ (80108e8 <xPortStartScheduler+0x138>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	021b      	lsls	r3, r3, #8
 8010874:	4a1c      	ldr	r2, [pc, #112]	@ (80108e8 <xPortStartScheduler+0x138>)
 8010876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010878:	4b1b      	ldr	r3, [pc, #108]	@ (80108e8 <xPortStartScheduler+0x138>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010880:	4a19      	ldr	r2, [pc, #100]	@ (80108e8 <xPortStartScheduler+0x138>)
 8010882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	b2da      	uxtb	r2, r3
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801088c:	4b17      	ldr	r3, [pc, #92]	@ (80108ec <xPortStartScheduler+0x13c>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a16      	ldr	r2, [pc, #88]	@ (80108ec <xPortStartScheduler+0x13c>)
 8010892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010898:	4b14      	ldr	r3, [pc, #80]	@ (80108ec <xPortStartScheduler+0x13c>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a13      	ldr	r2, [pc, #76]	@ (80108ec <xPortStartScheduler+0x13c>)
 801089e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80108a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108a4:	f000 f8da 	bl	8010a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108a8:	4b11      	ldr	r3, [pc, #68]	@ (80108f0 <xPortStartScheduler+0x140>)
 80108aa:	2200      	movs	r2, #0
 80108ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108ae:	f000 f8f9 	bl	8010aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108b2:	4b10      	ldr	r3, [pc, #64]	@ (80108f4 <xPortStartScheduler+0x144>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a0f      	ldr	r2, [pc, #60]	@ (80108f4 <xPortStartScheduler+0x144>)
 80108b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80108bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80108be:	f7ff ff63 	bl	8010788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108c2:	f7fe ff13 	bl	800f6ec <vTaskSwitchContext>
	prvTaskExitError();
 80108c6:	f7ff ff1d 	bl	8010704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	e000ed00 	.word	0xe000ed00
 80108d8:	410fc271 	.word	0x410fc271
 80108dc:	410fc270 	.word	0x410fc270
 80108e0:	e000e400 	.word	0xe000e400
 80108e4:	2400175c 	.word	0x2400175c
 80108e8:	24001760 	.word	0x24001760
 80108ec:	e000ed20 	.word	0xe000ed20
 80108f0:	24000024 	.word	0x24000024
 80108f4:	e000ef34 	.word	0xe000ef34

080108f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
	__asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	607b      	str	r3, [r7, #4]
}
 8010910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010912:	4b10      	ldr	r3, [pc, #64]	@ (8010954 <vPortEnterCritical+0x5c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3301      	adds	r3, #1
 8010918:	4a0e      	ldr	r2, [pc, #56]	@ (8010954 <vPortEnterCritical+0x5c>)
 801091a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801091c:	4b0d      	ldr	r3, [pc, #52]	@ (8010954 <vPortEnterCritical+0x5c>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b01      	cmp	r3, #1
 8010922:	d110      	bne.n	8010946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010924:	4b0c      	ldr	r3, [pc, #48]	@ (8010958 <vPortEnterCritical+0x60>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	b2db      	uxtb	r3, r3
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00b      	beq.n	8010946 <vPortEnterCritical+0x4e>
	__asm volatile
 801092e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	603b      	str	r3, [r7, #0]
}
 8010940:	bf00      	nop
 8010942:	bf00      	nop
 8010944:	e7fd      	b.n	8010942 <vPortEnterCritical+0x4a>
	}
}
 8010946:	bf00      	nop
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	24000024 	.word	0x24000024
 8010958:	e000ed04 	.word	0xe000ed04

0801095c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010962:	4b12      	ldr	r3, [pc, #72]	@ (80109ac <vPortExitCritical+0x50>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d10b      	bne.n	8010982 <vPortExitCritical+0x26>
	__asm volatile
 801096a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	607b      	str	r3, [r7, #4]
}
 801097c:	bf00      	nop
 801097e:	bf00      	nop
 8010980:	e7fd      	b.n	801097e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010982:	4b0a      	ldr	r3, [pc, #40]	@ (80109ac <vPortExitCritical+0x50>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	3b01      	subs	r3, #1
 8010988:	4a08      	ldr	r2, [pc, #32]	@ (80109ac <vPortExitCritical+0x50>)
 801098a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801098c:	4b07      	ldr	r3, [pc, #28]	@ (80109ac <vPortExitCritical+0x50>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d105      	bne.n	80109a0 <vPortExitCritical+0x44>
 8010994:	2300      	movs	r3, #0
 8010996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	f383 8811 	msr	BASEPRI, r3
}
 801099e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109a0:	bf00      	nop
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr
 80109ac:	24000024 	.word	0x24000024

080109b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109b0:	f3ef 8009 	mrs	r0, PSP
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	4b15      	ldr	r3, [pc, #84]	@ (8010a10 <pxCurrentTCBConst>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	f01e 0f10 	tst.w	lr, #16
 80109c0:	bf08      	it	eq
 80109c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ca:	6010      	str	r0, [r2, #0]
 80109cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80109d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80109d4:	f380 8811 	msr	BASEPRI, r0
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f7fe fe84 	bl	800f6ec <vTaskSwitchContext>
 80109e4:	f04f 0000 	mov.w	r0, #0
 80109e8:	f380 8811 	msr	BASEPRI, r0
 80109ec:	bc09      	pop	{r0, r3}
 80109ee:	6819      	ldr	r1, [r3, #0]
 80109f0:	6808      	ldr	r0, [r1, #0]
 80109f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f6:	f01e 0f10 	tst.w	lr, #16
 80109fa:	bf08      	it	eq
 80109fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a00:	f380 8809 	msr	PSP, r0
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	f3af 8000 	nop.w

08010a10 <pxCurrentTCBConst>:
 8010a10:	24001130 	.word	0x24001130
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop

08010a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a22:	f383 8811 	msr	BASEPRI, r3
 8010a26:	f3bf 8f6f 	isb	sy
 8010a2a:	f3bf 8f4f 	dsb	sy
 8010a2e:	607b      	str	r3, [r7, #4]
}
 8010a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a32:	f7fe fdaf 	bl	800f594 <xTaskIncrementTick>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d003      	beq.n	8010a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a3c:	4b06      	ldr	r3, [pc, #24]	@ (8010a58 <xPortSysTickHandler+0x40>)
 8010a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	2300      	movs	r3, #0
 8010a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f383 8811 	msr	BASEPRI, r3
}
 8010a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	e000ed04 	.word	0xe000ed04

08010a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a60:	4b0b      	ldr	r3, [pc, #44]	@ (8010a90 <vPortSetupTimerInterrupt+0x34>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a66:	4b0b      	ldr	r3, [pc, #44]	@ (8010a94 <vPortSetupTimerInterrupt+0x38>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a98 <vPortSetupTimerInterrupt+0x3c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a0a      	ldr	r2, [pc, #40]	@ (8010a9c <vPortSetupTimerInterrupt+0x40>)
 8010a72:	fba2 2303 	umull	r2, r3, r2, r3
 8010a76:	095b      	lsrs	r3, r3, #5
 8010a78:	4a09      	ldr	r2, [pc, #36]	@ (8010aa0 <vPortSetupTimerInterrupt+0x44>)
 8010a7a:	3b01      	subs	r3, #1
 8010a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a7e:	4b04      	ldr	r3, [pc, #16]	@ (8010a90 <vPortSetupTimerInterrupt+0x34>)
 8010a80:	2207      	movs	r2, #7
 8010a82:	601a      	str	r2, [r3, #0]
}
 8010a84:	bf00      	nop
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	e000e010 	.word	0xe000e010
 8010a94:	e000e018 	.word	0xe000e018
 8010a98:	24000000 	.word	0x24000000
 8010a9c:	51eb851f 	.word	0x51eb851f
 8010aa0:	e000e014 	.word	0xe000e014

08010aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010ab4 <vPortEnableVFP+0x10>
 8010aa8:	6801      	ldr	r1, [r0, #0]
 8010aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010aae:	6001      	str	r1, [r0, #0]
 8010ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ab2:	bf00      	nop
 8010ab4:	e000ed88 	.word	0xe000ed88

08010ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ab8:	b480      	push	{r7}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010abe:	f3ef 8305 	mrs	r3, IPSR
 8010ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b0f      	cmp	r3, #15
 8010ac8:	d915      	bls.n	8010af6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010aca:	4a18      	ldr	r2, [pc, #96]	@ (8010b2c <vPortValidateInterruptPriority+0x74>)
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ad4:	4b16      	ldr	r3, [pc, #88]	@ (8010b30 <vPortValidateInterruptPriority+0x78>)
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	7afa      	ldrb	r2, [r7, #11]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d20b      	bcs.n	8010af6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	607b      	str	r3, [r7, #4]
}
 8010af0:	bf00      	nop
 8010af2:	bf00      	nop
 8010af4:	e7fd      	b.n	8010af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010af6:	4b0f      	ldr	r3, [pc, #60]	@ (8010b34 <vPortValidateInterruptPriority+0x7c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010afe:	4b0e      	ldr	r3, [pc, #56]	@ (8010b38 <vPortValidateInterruptPriority+0x80>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d90b      	bls.n	8010b1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	603b      	str	r3, [r7, #0]
}
 8010b18:	bf00      	nop
 8010b1a:	bf00      	nop
 8010b1c:	e7fd      	b.n	8010b1a <vPortValidateInterruptPriority+0x62>
	}
 8010b1e:	bf00      	nop
 8010b20:	3714      	adds	r7, #20
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	e000e3f0 	.word	0xe000e3f0
 8010b30:	2400175c 	.word	0x2400175c
 8010b34:	e000ed0c 	.word	0xe000ed0c
 8010b38:	24001760 	.word	0x24001760

08010b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b08a      	sub	sp, #40	@ 0x28
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b44:	2300      	movs	r3, #0
 8010b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b48:	f7fe fc56 	bl	800f3f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8010cc0 <pvPortMalloc+0x184>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d101      	bne.n	8010b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b54:	f000 f924 	bl	8010da0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b58:	4b5a      	ldr	r3, [pc, #360]	@ (8010cc4 <pvPortMalloc+0x188>)
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4013      	ands	r3, r2
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f040 8095 	bne.w	8010c90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d01e      	beq.n	8010baa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010b6c:	2208      	movs	r2, #8
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4413      	add	r3, r2
 8010b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f003 0307 	and.w	r3, r3, #7
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d015      	beq.n	8010baa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f023 0307 	bic.w	r3, r3, #7
 8010b84:	3308      	adds	r3, #8
 8010b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d00b      	beq.n	8010baa <pvPortMalloc+0x6e>
	__asm volatile
 8010b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	617b      	str	r3, [r7, #20]
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	e7fd      	b.n	8010ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d06f      	beq.n	8010c90 <pvPortMalloc+0x154>
 8010bb0:	4b45      	ldr	r3, [pc, #276]	@ (8010cc8 <pvPortMalloc+0x18c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d86a      	bhi.n	8010c90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010bba:	4b44      	ldr	r3, [pc, #272]	@ (8010ccc <pvPortMalloc+0x190>)
 8010bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010bbe:	4b43      	ldr	r3, [pc, #268]	@ (8010ccc <pvPortMalloc+0x190>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bc4:	e004      	b.n	8010bd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d903      	bls.n	8010be2 <pvPortMalloc+0xa6>
 8010bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1f1      	bne.n	8010bc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010be2:	4b37      	ldr	r3, [pc, #220]	@ (8010cc0 <pvPortMalloc+0x184>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d051      	beq.n	8010c90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2208      	movs	r2, #8
 8010bf2:	4413      	add	r3, r2
 8010bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	6a3b      	ldr	r3, [r7, #32]
 8010bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	1ad2      	subs	r2, r2, r3
 8010c06:	2308      	movs	r3, #8
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d920      	bls.n	8010c50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4413      	add	r3, r2
 8010c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c16:	69bb      	ldr	r3, [r7, #24]
 8010c18:	f003 0307 	and.w	r3, r3, #7
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d00b      	beq.n	8010c38 <pvPortMalloc+0xfc>
	__asm volatile
 8010c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	613b      	str	r3, [r7, #16]
}
 8010c32:	bf00      	nop
 8010c34:	bf00      	nop
 8010c36:	e7fd      	b.n	8010c34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	1ad2      	subs	r2, r2, r3
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c4a:	69b8      	ldr	r0, [r7, #24]
 8010c4c:	f000 f90a 	bl	8010e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c50:	4b1d      	ldr	r3, [pc, #116]	@ (8010cc8 <pvPortMalloc+0x18c>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8010cc8 <pvPortMalloc+0x18c>)
 8010c5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8010cc8 <pvPortMalloc+0x18c>)
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	4b1b      	ldr	r3, [pc, #108]	@ (8010cd0 <pvPortMalloc+0x194>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d203      	bcs.n	8010c72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c6a:	4b17      	ldr	r3, [pc, #92]	@ (8010cc8 <pvPortMalloc+0x18c>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4a18      	ldr	r2, [pc, #96]	@ (8010cd0 <pvPortMalloc+0x194>)
 8010c70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c74:	685a      	ldr	r2, [r3, #4]
 8010c76:	4b13      	ldr	r3, [pc, #76]	@ (8010cc4 <pvPortMalloc+0x188>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	431a      	orrs	r2, r3
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c82:	2200      	movs	r2, #0
 8010c84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c86:	4b13      	ldr	r3, [pc, #76]	@ (8010cd4 <pvPortMalloc+0x198>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	4a11      	ldr	r2, [pc, #68]	@ (8010cd4 <pvPortMalloc+0x198>)
 8010c8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c90:	f7fe fbc0 	bl	800f414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	f003 0307 	and.w	r3, r3, #7
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00b      	beq.n	8010cb6 <pvPortMalloc+0x17a>
	__asm volatile
 8010c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	60fb      	str	r3, [r7, #12]
}
 8010cb0:	bf00      	nop
 8010cb2:	bf00      	nop
 8010cb4:	e7fd      	b.n	8010cb2 <pvPortMalloc+0x176>
	return pvReturn;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3728      	adds	r7, #40	@ 0x28
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	2400536c 	.word	0x2400536c
 8010cc4:	24005380 	.word	0x24005380
 8010cc8:	24005370 	.word	0x24005370
 8010ccc:	24005364 	.word	0x24005364
 8010cd0:	24005374 	.word	0x24005374
 8010cd4:	24005378 	.word	0x24005378

08010cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d04f      	beq.n	8010d8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010cea:	2308      	movs	r3, #8
 8010cec:	425b      	negs	r3, r3
 8010cee:	697a      	ldr	r2, [r7, #20]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	4b25      	ldr	r3, [pc, #148]	@ (8010d94 <vPortFree+0xbc>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4013      	ands	r3, r2
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10b      	bne.n	8010d1e <vPortFree+0x46>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	60fb      	str	r3, [r7, #12]
}
 8010d18:	bf00      	nop
 8010d1a:	bf00      	nop
 8010d1c:	e7fd      	b.n	8010d1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00b      	beq.n	8010d3e <vPortFree+0x66>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	60bb      	str	r3, [r7, #8]
}
 8010d38:	bf00      	nop
 8010d3a:	bf00      	nop
 8010d3c:	e7fd      	b.n	8010d3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	685a      	ldr	r2, [r3, #4]
 8010d42:	4b14      	ldr	r3, [pc, #80]	@ (8010d94 <vPortFree+0xbc>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4013      	ands	r3, r2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d01e      	beq.n	8010d8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d11a      	bne.n	8010d8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	685a      	ldr	r2, [r3, #4]
 8010d58:	4b0e      	ldr	r3, [pc, #56]	@ (8010d94 <vPortFree+0xbc>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	43db      	mvns	r3, r3
 8010d5e:	401a      	ands	r2, r3
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d64:	f7fe fb48 	bl	800f3f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d98 <vPortFree+0xc0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4413      	add	r3, r2
 8010d72:	4a09      	ldr	r2, [pc, #36]	@ (8010d98 <vPortFree+0xc0>)
 8010d74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d76:	6938      	ldr	r0, [r7, #16]
 8010d78:	f000 f874 	bl	8010e64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d7c:	4b07      	ldr	r3, [pc, #28]	@ (8010d9c <vPortFree+0xc4>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	3301      	adds	r3, #1
 8010d82:	4a06      	ldr	r2, [pc, #24]	@ (8010d9c <vPortFree+0xc4>)
 8010d84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d86:	f7fe fb45 	bl	800f414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d8a:	bf00      	nop
 8010d8c:	3718      	adds	r7, #24
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	24005380 	.word	0x24005380
 8010d98:	24005370 	.word	0x24005370
 8010d9c:	2400537c 	.word	0x2400537c

08010da0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010da0:	b480      	push	{r7}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010da6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010daa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010dac:	4b27      	ldr	r3, [pc, #156]	@ (8010e4c <prvHeapInit+0xac>)
 8010dae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f003 0307 	and.w	r3, r3, #7
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00c      	beq.n	8010dd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3307      	adds	r3, #7
 8010dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f023 0307 	bic.w	r3, r3, #7
 8010dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	4a1f      	ldr	r2, [pc, #124]	@ (8010e4c <prvHeapInit+0xac>)
 8010dd0:	4413      	add	r3, r2
 8010dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8010e50 <prvHeapInit+0xb0>)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010dde:	4b1c      	ldr	r3, [pc, #112]	@ (8010e50 <prvHeapInit+0xb0>)
 8010de0:	2200      	movs	r2, #0
 8010de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	4413      	add	r3, r2
 8010dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010dec:	2208      	movs	r2, #8
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f023 0307 	bic.w	r3, r3, #7
 8010dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4a15      	ldr	r2, [pc, #84]	@ (8010e54 <prvHeapInit+0xb4>)
 8010e00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e02:	4b14      	ldr	r3, [pc, #80]	@ (8010e54 <prvHeapInit+0xb4>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2200      	movs	r2, #0
 8010e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e0a:	4b12      	ldr	r3, [pc, #72]	@ (8010e54 <prvHeapInit+0xb4>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	1ad2      	subs	r2, r2, r3
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e20:	4b0c      	ldr	r3, [pc, #48]	@ (8010e54 <prvHeapInit+0xb4>)
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8010e58 <prvHeapInit+0xb8>)
 8010e2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	4a09      	ldr	r2, [pc, #36]	@ (8010e5c <prvHeapInit+0xbc>)
 8010e36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e38:	4b09      	ldr	r3, [pc, #36]	@ (8010e60 <prvHeapInit+0xc0>)
 8010e3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010e3e:	601a      	str	r2, [r3, #0]
}
 8010e40:	bf00      	nop
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	24001764 	.word	0x24001764
 8010e50:	24005364 	.word	0x24005364
 8010e54:	2400536c 	.word	0x2400536c
 8010e58:	24005374 	.word	0x24005374
 8010e5c:	24005370 	.word	0x24005370
 8010e60:	24005380 	.word	0x24005380

08010e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e6c:	4b28      	ldr	r3, [pc, #160]	@ (8010f10 <prvInsertBlockIntoFreeList+0xac>)
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	e002      	b.n	8010e78 <prvInsertBlockIntoFreeList+0x14>
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d8f7      	bhi.n	8010e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	68ba      	ldr	r2, [r7, #8]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d108      	bne.n	8010ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	685a      	ldr	r2, [r3, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	441a      	add	r2, r3
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	68ba      	ldr	r2, [r7, #8]
 8010eb0:	441a      	add	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d118      	bne.n	8010eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	4b15      	ldr	r3, [pc, #84]	@ (8010f14 <prvInsertBlockIntoFreeList+0xb0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d00d      	beq.n	8010ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	441a      	add	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	601a      	str	r2, [r3, #0]
 8010ee0:	e008      	b.n	8010ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8010f14 <prvInsertBlockIntoFreeList+0xb0>)
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	601a      	str	r2, [r3, #0]
 8010eea:	e003      	b.n	8010ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d002      	beq.n	8010f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f02:	bf00      	nop
 8010f04:	3714      	adds	r7, #20
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	24005364 	.word	0x24005364
 8010f14:	2400536c 	.word	0x2400536c

08010f18 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	330c      	adds	r3, #12
 8010f28:	461a      	mov	r2, r3
 8010f2a:	6839      	ldr	r1, [r7, #0]
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f002 fa5f 	bl	80133f0 <tcpip_send_msg_wait_sem>
 8010f32:	4603      	mov	r3, r0
 8010f34:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d103      	bne.n	8010f46 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010f44:	e001      	b.n	8010f4a <netconn_apimsg+0x32>
  }
  return err;
 8010f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
	...

08010f54 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08c      	sub	sp, #48	@ 0x30
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	603a      	str	r2, [r7, #0]
 8010f5e:	71fb      	strb	r3, [r7, #7]
 8010f60:	460b      	mov	r3, r1
 8010f62:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	6839      	ldr	r1, [r7, #0]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f001 f927 	bl	80121bc <netconn_alloc>
 8010f6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d054      	beq.n	8011020 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010f76:	79bb      	ldrb	r3, [r7, #6]
 8010f78:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f7c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010f7e:	f107 0308 	add.w	r3, r7, #8
 8010f82:	4619      	mov	r1, r3
 8010f84:	4829      	ldr	r0, [pc, #164]	@ (801102c <netconn_new_with_proto_and_callback+0xd8>)
 8010f86:	f7ff ffc7 	bl	8010f18 <netconn_apimsg>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010f90:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d043      	beq.n	8011020 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d005      	beq.n	8010fac <netconn_new_with_proto_and_callback+0x58>
 8010fa0:	4b23      	ldr	r3, [pc, #140]	@ (8011030 <netconn_new_with_proto_and_callback+0xdc>)
 8010fa2:	22a3      	movs	r2, #163	@ 0xa3
 8010fa4:	4923      	ldr	r1, [pc, #140]	@ (8011034 <netconn_new_with_proto_and_callback+0xe0>)
 8010fa6:	4824      	ldr	r0, [pc, #144]	@ (8011038 <netconn_new_with_proto_and_callback+0xe4>)
 8010fa8:	f00d fc7a 	bl	801e8a0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fae:	3310      	adds	r3, #16
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f00d fa4d 	bl	801e450 <sys_mbox_valid>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d105      	bne.n	8010fc8 <netconn_new_with_proto_and_callback+0x74>
 8010fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8011030 <netconn_new_with_proto_and_callback+0xdc>)
 8010fbe:	22a4      	movs	r2, #164	@ 0xa4
 8010fc0:	491e      	ldr	r1, [pc, #120]	@ (801103c <netconn_new_with_proto_and_callback+0xe8>)
 8010fc2:	481d      	ldr	r0, [pc, #116]	@ (8011038 <netconn_new_with_proto_and_callback+0xe4>)
 8010fc4:	f00d fc6c 	bl	801e8a0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fca:	3314      	adds	r3, #20
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f00d fa3f 	bl	801e450 <sys_mbox_valid>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d005      	beq.n	8010fe4 <netconn_new_with_proto_and_callback+0x90>
 8010fd8:	4b15      	ldr	r3, [pc, #84]	@ (8011030 <netconn_new_with_proto_and_callback+0xdc>)
 8010fda:	22a6      	movs	r2, #166	@ 0xa6
 8010fdc:	4918      	ldr	r1, [pc, #96]	@ (8011040 <netconn_new_with_proto_and_callback+0xec>)
 8010fde:	4816      	ldr	r0, [pc, #88]	@ (8011038 <netconn_new_with_proto_and_callback+0xe4>)
 8010fe0:	f00d fc5e 	bl	801e8a0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fe6:	330c      	adds	r3, #12
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f00d fabf 	bl	801e56c <sys_sem_valid>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d105      	bne.n	8011000 <netconn_new_with_proto_and_callback+0xac>
 8010ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8011030 <netconn_new_with_proto_and_callback+0xdc>)
 8010ff6:	22a9      	movs	r2, #169	@ 0xa9
 8010ff8:	4912      	ldr	r1, [pc, #72]	@ (8011044 <netconn_new_with_proto_and_callback+0xf0>)
 8010ffa:	480f      	ldr	r0, [pc, #60]	@ (8011038 <netconn_new_with_proto_and_callback+0xe4>)
 8010ffc:	f00d fc50 	bl	801e8a0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011002:	330c      	adds	r3, #12
 8011004:	4618      	mov	r0, r3
 8011006:	f00d faa4 	bl	801e552 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801100a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801100c:	3310      	adds	r3, #16
 801100e:	4618      	mov	r0, r3
 8011010:	f00d f9aa 	bl	801e368 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011016:	2007      	movs	r0, #7
 8011018:	f003 f860 	bl	80140dc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801101c:	2300      	movs	r3, #0
 801101e:	e000      	b.n	8011022 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011022:	4618      	mov	r0, r3
 8011024:	3730      	adds	r7, #48	@ 0x30
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08012191 	.word	0x08012191
 8011030:	0801f844 	.word	0x0801f844
 8011034:	0801f878 	.word	0x0801f878
 8011038:	0801f89c 	.word	0x0801f89c
 801103c:	0801f8c4 	.word	0x0801f8c4
 8011040:	0801f8dc 	.word	0x0801f8dc
 8011044:	0801f900 	.word	0x0801f900

08011048 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b08c      	sub	sp, #48	@ 0x30
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d101      	bne.n	801105a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011056:	2300      	movs	r3, #0
 8011058:	e014      	b.n	8011084 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801105e:	2329      	movs	r3, #41	@ 0x29
 8011060:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8011062:	f107 030c 	add.w	r3, r7, #12
 8011066:	4619      	mov	r1, r3
 8011068:	4808      	ldr	r0, [pc, #32]	@ (801108c <netconn_prepare_delete+0x44>)
 801106a:	f7ff ff55 	bl	8010f18 <netconn_apimsg>
 801106e:	4603      	mov	r3, r0
 8011070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011074:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011078:	2b00      	cmp	r3, #0
 801107a:	d002      	beq.n	8011082 <netconn_prepare_delete+0x3a>
    return err;
 801107c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011080:	e000      	b.n	8011084 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8011082:	2300      	movs	r3, #0
}
 8011084:	4618      	mov	r0, r3
 8011086:	3730      	adds	r7, #48	@ 0x30
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	080126fd 	.word	0x080126fd

08011090 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <netconn_delete+0x12>
    return ERR_OK;
 801109e:	2300      	movs	r3, #0
 80110a0:	e00d      	b.n	80110be <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff ffd0 	bl	8011048 <netconn_prepare_delete>
 80110a8:	4603      	mov	r3, r0
 80110aa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80110ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <netconn_delete+0x2a>
    netconn_free(conn);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f001 f8ef 	bl	8012298 <netconn_free>
  }
  return err;
 80110ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
	...

080110c8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b08e      	sub	sp, #56	@ 0x38
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	4613      	mov	r3, r2
 80110d4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d109      	bne.n	80110f0 <netconn_bind+0x28>
 80110dc:	4b11      	ldr	r3, [pc, #68]	@ (8011124 <netconn_bind+0x5c>)
 80110de:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80110e2:	4911      	ldr	r1, [pc, #68]	@ (8011128 <netconn_bind+0x60>)
 80110e4:	4811      	ldr	r0, [pc, #68]	@ (801112c <netconn_bind+0x64>)
 80110e6:	f00d fbdb 	bl	801e8a0 <iprintf>
 80110ea:	f06f 030f 	mvn.w	r3, #15
 80110ee:	e015      	b.n	801111c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80110f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011130 <netconn_bind+0x68>)
 80110f8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011102:	88fb      	ldrh	r3, [r7, #6]
 8011104:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	4619      	mov	r1, r3
 801110c:	4809      	ldr	r0, [pc, #36]	@ (8011134 <netconn_bind+0x6c>)
 801110e:	f7ff ff03 	bl	8010f18 <netconn_apimsg>
 8011112:	4603      	mov	r3, r0
 8011114:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011118:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801111c:	4618      	mov	r0, r3
 801111e:	3738      	adds	r7, #56	@ 0x38
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	0801f844 	.word	0x0801f844
 8011128:	0801f97c 	.word	0x0801f97c
 801112c:	0801f89c 	.word	0x0801f89c
 8011130:	08022f0c 	.word	0x08022f0c
 8011134:	080128c5 	.word	0x080128c5

08011138 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b08c      	sub	sp, #48	@ 0x30
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	460b      	mov	r3, r1
 8011142:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d109      	bne.n	801115e <netconn_listen_with_backlog+0x26>
 801114a:	4b0d      	ldr	r3, [pc, #52]	@ (8011180 <netconn_listen_with_backlog+0x48>)
 801114c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8011150:	490c      	ldr	r1, [pc, #48]	@ (8011184 <netconn_listen_with_backlog+0x4c>)
 8011152:	480d      	ldr	r0, [pc, #52]	@ (8011188 <netconn_listen_with_backlog+0x50>)
 8011154:	f00d fba4 	bl	801e8a0 <iprintf>
 8011158:	f06f 030f 	mvn.w	r3, #15
 801115c:	e00c      	b.n	8011178 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8011162:	f107 030c 	add.w	r3, r7, #12
 8011166:	4619      	mov	r1, r3
 8011168:	4808      	ldr	r0, [pc, #32]	@ (801118c <netconn_listen_with_backlog+0x54>)
 801116a:	f7ff fed5 	bl	8010f18 <netconn_apimsg>
 801116e:	4603      	mov	r3, r0
 8011170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011174:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011178:	4618      	mov	r0, r3
 801117a:	3730      	adds	r7, #48	@ 0x30
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	0801f844 	.word	0x0801f844
 8011184:	0801f9fc 	.word	0x0801f9fc
 8011188:	0801f89c 	.word	0x0801f89c
 801118c:	08012939 	.word	0x08012939

08011190 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d109      	bne.n	80111b4 <netconn_accept+0x24>
 80111a0:	4b3d      	ldr	r3, [pc, #244]	@ (8011298 <netconn_accept+0x108>)
 80111a2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80111a6:	493d      	ldr	r1, [pc, #244]	@ (801129c <netconn_accept+0x10c>)
 80111a8:	483d      	ldr	r0, [pc, #244]	@ (80112a0 <netconn_accept+0x110>)
 80111aa:	f00d fb79 	bl	801e8a0 <iprintf>
 80111ae:	f06f 030f 	mvn.w	r3, #15
 80111b2:	e06c      	b.n	801128e <netconn_accept+0xfe>
  *new_conn = NULL;
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2200      	movs	r2, #0
 80111b8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d109      	bne.n	80111d4 <netconn_accept+0x44>
 80111c0:	4b35      	ldr	r3, [pc, #212]	@ (8011298 <netconn_accept+0x108>)
 80111c2:	f240 12e3 	movw	r2, #483	@ 0x1e3
 80111c6:	4937      	ldr	r1, [pc, #220]	@ (80112a4 <netconn_accept+0x114>)
 80111c8:	4835      	ldr	r0, [pc, #212]	@ (80112a0 <netconn_accept+0x110>)
 80111ca:	f00d fb69 	bl	801e8a0 <iprintf>
 80111ce:	f06f 030f 	mvn.w	r3, #15
 80111d2:	e05c      	b.n	801128e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fb6c 	bl	80118b2 <netconn_err>
 80111da:	4603      	mov	r3, r0
 80111dc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80111de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80111e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111ea:	e050      	b.n	801128e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3314      	adds	r3, #20
 80111f0:	4618      	mov	r0, r3
 80111f2:	f00d f92d 	bl	801e450 <sys_mbox_valid>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d005      	beq.n	8011208 <netconn_accept+0x78>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	7f1b      	ldrb	r3, [r3, #28]
 8011200:	f003 0301 	and.w	r3, r3, #1
 8011204:	2b00      	cmp	r3, #0
 8011206:	d002      	beq.n	801120e <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011208:	f06f 030e 	mvn.w	r3, #14
 801120c:	e03f      	b.n	801128e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	7f1b      	ldrb	r3, [r3, #28]
 8011212:	f003 0302 	and.w	r3, r3, #2
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00e      	beq.n	8011238 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3314      	adds	r3, #20
 801121e:	f107 020c 	add.w	r2, r7, #12
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f00d f8fc 	bl	801e422 <sys_arch_mbox_tryfetch>
 801122a:	4603      	mov	r3, r0
 801122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011230:	d10a      	bne.n	8011248 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8011232:	f06f 0306 	mvn.w	r3, #6
 8011236:	e02a      	b.n	801128e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	3314      	adds	r3, #20
 801123c:	f107 010c 	add.w	r1, r7, #12
 8011240:	2200      	movs	r2, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f00d f8bc 	bl	801e3c0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801124c:	2b00      	cmp	r3, #0
 801124e:	d005      	beq.n	801125c <netconn_accept+0xcc>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011254:	2200      	movs	r2, #0
 8011256:	2101      	movs	r1, #1
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f107 0213 	add.w	r2, r7, #19
 8011262:	4611      	mov	r1, r2
 8011264:	4618      	mov	r0, r3
 8011266:	f000 fb75 	bl	8011954 <lwip_netconn_is_err_msg>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d002      	beq.n	8011276 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8011270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011274:	e00b      	b.n	801128e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 801127c:	f06f 030e 	mvn.w	r3, #14
 8011280:	e005      	b.n	801128e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	697a      	ldr	r2, [r7, #20]
 801128a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801128c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 801128e:	4618      	mov	r0, r3
 8011290:	3718      	adds	r7, #24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	0801f844 	.word	0x0801f844
 801129c:	0801fa1c 	.word	0x0801fa1c
 80112a0:	0801f89c 	.word	0x0801f89c
 80112a4:	0801fa3c 	.word	0x0801fa3c

080112a8 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b088      	sub	sp, #32
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	4613      	mov	r3, r2
 80112b4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d109      	bne.n	80112d4 <netconn_recv_data+0x2c>
 80112c0:	4b58      	ldr	r3, [pc, #352]	@ (8011424 <netconn_recv_data+0x17c>)
 80112c2:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80112c6:	4958      	ldr	r1, [pc, #352]	@ (8011428 <netconn_recv_data+0x180>)
 80112c8:	4858      	ldr	r0, [pc, #352]	@ (801142c <netconn_recv_data+0x184>)
 80112ca:	f00d fae9 	bl	801e8a0 <iprintf>
 80112ce:	f06f 030f 	mvn.w	r3, #15
 80112d2:	e0a2      	b.n	801141a <netconn_recv_data+0x172>
  *new_buf = NULL;
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2200      	movs	r2, #0
 80112d8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d109      	bne.n	80112f4 <netconn_recv_data+0x4c>
 80112e0:	4b50      	ldr	r3, [pc, #320]	@ (8011424 <netconn_recv_data+0x17c>)
 80112e2:	f240 224a 	movw	r2, #586	@ 0x24a
 80112e6:	4952      	ldr	r1, [pc, #328]	@ (8011430 <netconn_recv_data+0x188>)
 80112e8:	4850      	ldr	r0, [pc, #320]	@ (801142c <netconn_recv_data+0x184>)
 80112ea:	f00d fad9 	bl	801e8a0 <iprintf>
 80112ee:	f06f 030f 	mvn.w	r3, #15
 80112f2:	e092      	b.n	801141a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	3310      	adds	r3, #16
 80112f8:	4618      	mov	r0, r3
 80112fa:	f00d f8a9 	bl	801e450 <sys_mbox_valid>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d10e      	bne.n	8011322 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f000 fad4 	bl	80118b2 <netconn_err>
 801130a:	4603      	mov	r3, r0
 801130c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801130e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011316:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801131a:	e07e      	b.n	801141a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 801131c:	f06f 030a 	mvn.w	r3, #10
 8011320:	e07b      	b.n	801141a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	7f1b      	ldrb	r3, [r3, #28]
 8011326:	f003 0302 	and.w	r3, r3, #2
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10f      	bne.n	801134e <netconn_recv_data+0xa6>
 801132e:	79fb      	ldrb	r3, [r7, #7]
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	2b00      	cmp	r3, #0
 8011336:	d10a      	bne.n	801134e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	7f1b      	ldrb	r3, [r3, #28]
 801133c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011340:	2b00      	cmp	r3, #0
 8011342:	d104      	bne.n	801134e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d023      	beq.n	8011396 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3310      	adds	r3, #16
 8011352:	f107 0218 	add.w	r2, r7, #24
 8011356:	4611      	mov	r1, r2
 8011358:	4618      	mov	r0, r3
 801135a:	f00d f862 	bl	801e422 <sys_arch_mbox_tryfetch>
 801135e:	4603      	mov	r3, r0
 8011360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011364:	d11f      	bne.n	80113a6 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f000 faa3 	bl	80118b2 <netconn_err>
 801136c:	4603      	mov	r3, r0
 801136e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011370:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011378:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801137c:	e04d      	b.n	801141a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	7f1b      	ldrb	r3, [r3, #28]
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d002      	beq.n	8011390 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801138a:	f06f 030a 	mvn.w	r3, #10
 801138e:	e044      	b.n	801141a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011390:	f06f 0306 	mvn.w	r3, #6
 8011394:	e041      	b.n	801141a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3310      	adds	r3, #16
 801139a:	f107 0118 	add.w	r1, r7, #24
 801139e:	2200      	movs	r2, #0
 80113a0:	4618      	mov	r0, r3
 80113a2:	f00d f80d 	bl	801e3c0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80113ae:	2b10      	cmp	r3, #16
 80113b0:	d117      	bne.n	80113e2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f107 0217 	add.w	r2, r7, #23
 80113b8:	4611      	mov	r1, r2
 80113ba:	4618      	mov	r0, r3
 80113bc:	f000 faca 	bl	8011954 <lwip_netconn_is_err_msg>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d009      	beq.n	80113da <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80113c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113ca:	f113 0f0f 	cmn.w	r3, #15
 80113ce:	d101      	bne.n	80113d4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e022      	b.n	801141a <netconn_recv_data+0x172>
      }
      return err;
 80113d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113d8:	e01f      	b.n	801141a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	891b      	ldrh	r3, [r3, #8]
 80113de:	83fb      	strh	r3, [r7, #30]
 80113e0:	e00d      	b.n	80113fe <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d106      	bne.n	80113f6 <netconn_recv_data+0x14e>
 80113e8:	4b0e      	ldr	r3, [pc, #56]	@ (8011424 <netconn_recv_data+0x17c>)
 80113ea:	f240 2291 	movw	r2, #657	@ 0x291
 80113ee:	4911      	ldr	r1, [pc, #68]	@ (8011434 <netconn_recv_data+0x18c>)
 80113f0:	480e      	ldr	r0, [pc, #56]	@ (801142c <netconn_recv_data+0x184>)
 80113f2:	f00d fa55 	bl	801e8a0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	891b      	ldrh	r3, [r3, #8]
 80113fc:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011402:	2b00      	cmp	r3, #0
 8011404:	d005      	beq.n	8011412 <netconn_recv_data+0x16a>
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140a:	8bfa      	ldrh	r2, [r7, #30]
 801140c:	2101      	movs	r1, #1
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011412:	69ba      	ldr	r2, [r7, #24]
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011418:	2300      	movs	r3, #0
}
 801141a:	4618      	mov	r0, r3
 801141c:	3720      	adds	r7, #32
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	0801f844 	.word	0x0801f844
 8011428:	0801fa5c 	.word	0x0801fa5c
 801142c:	0801f89c 	.word	0x0801f89c
 8011430:	0801fa7c 	.word	0x0801fa7c
 8011434:	0801fa98 	.word	0x0801fa98

08011438 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d005      	beq.n	8011456 <netconn_tcp_recvd_msg+0x1e>
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011452:	2b10      	cmp	r3, #16
 8011454:	d009      	beq.n	801146a <netconn_tcp_recvd_msg+0x32>
 8011456:	4b0c      	ldr	r3, [pc, #48]	@ (8011488 <netconn_tcp_recvd_msg+0x50>)
 8011458:	f240 22a7 	movw	r2, #679	@ 0x2a7
 801145c:	490b      	ldr	r1, [pc, #44]	@ (801148c <netconn_tcp_recvd_msg+0x54>)
 801145e:	480c      	ldr	r0, [pc, #48]	@ (8011490 <netconn_tcp_recvd_msg+0x58>)
 8011460:	f00d fa1e 	bl	801e8a0 <iprintf>
 8011464:	f06f 030f 	mvn.w	r3, #15
 8011468:	e00a      	b.n	8011480 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011476:	6879      	ldr	r1, [r7, #4]
 8011478:	4806      	ldr	r0, [pc, #24]	@ (8011494 <netconn_tcp_recvd_msg+0x5c>)
 801147a:	f7ff fd4d 	bl	8010f18 <netconn_apimsg>
 801147e:	4603      	mov	r3, r0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	0801f844 	.word	0x0801f844
 801148c:	0801faa4 	.word	0x0801faa4
 8011490:	0801f89c 	.word	0x0801f89c
 8011494:	08012a69 	.word	0x08012a69

08011498 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b090      	sub	sp, #64	@ 0x40
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	4613      	mov	r3, r2
 80114a4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	3310      	adds	r3, #16
 80114aa:	4618      	mov	r0, r3
 80114ac:	f00c ffd0 	bl	801e450 <sys_mbox_valid>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d102      	bne.n	80114bc <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80114b6:	f06f 030a 	mvn.w	r3, #10
 80114ba:	e06d      	b.n	8011598 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	7f1b      	ldrb	r3, [r3, #28]
 80114c0:	b25b      	sxtb	r3, r3
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	da07      	bge.n	80114d6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	7f1b      	ldrb	r3, [r3, #28]
 80114ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80114d4:	e039      	b.n	801154a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80114d6:	79fb      	ldrb	r3, [r7, #7]
 80114d8:	461a      	mov	r2, r3
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f7ff fee3 	bl	80112a8 <netconn_recv_data>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80114e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d002      	beq.n	80114f6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80114f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80114f4:	e050      	b.n	8011598 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80114fc:	79fb      	ldrb	r3, [r7, #7]
 80114fe:	f003 0308 	and.w	r3, r3, #8
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10e      	bne.n	8011524 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <netconn_recv_data_tcp+0x7a>
 801150c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150e:	891b      	ldrh	r3, [r3, #8]
 8011510:	e000      	b.n	8011514 <netconn_recv_data_tcp+0x7c>
 8011512:	2301      	movs	r3, #1
 8011514:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011516:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011518:	f107 0214 	add.w	r2, r7, #20
 801151c:	4619      	mov	r1, r3
 801151e:	68f8      	ldr	r0, [r7, #12]
 8011520:	f7ff ff8a 	bl	8011438 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011526:	2b00      	cmp	r3, #0
 8011528:	d134      	bne.n	8011594 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	f003 0310 	and.w	r3, r3, #16
 8011530:	2b00      	cmp	r3, #0
 8011532:	d009      	beq.n	8011548 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	7f1b      	ldrb	r3, [r3, #28]
 8011538:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801153c:	b2da      	uxtb	r2, r3
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011542:	f06f 0306 	mvn.w	r3, #6
 8011546:	e027      	b.n	8011598 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011548:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801154e:	2b00      	cmp	r3, #0
 8011550:	d005      	beq.n	801155e <netconn_recv_data_tcp+0xc6>
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011556:	2200      	movs	r2, #0
 8011558:	2101      	movs	r1, #1
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10f      	bne.n	8011586 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f000 f9a3 	bl	80118b2 <netconn_err>
 801156c:	4603      	mov	r3, r0
 801156e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8011572:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <netconn_recv_data_tcp+0xe8>
          return err;
 801157a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801157e:	e00b      	b.n	8011598 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011580:	f06f 030d 	mvn.w	r3, #13
 8011584:	e008      	b.n	8011598 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011586:	2101      	movs	r1, #1
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f000 f955 	bl	8011838 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801158e:	f06f 030e 	mvn.w	r3, #14
 8011592:	e001      	b.n	8011598 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011594:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011598:	4618      	mov	r0, r3
 801159a:	3740      	adds	r7, #64	@ 0x40
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d109      	bne.n	80115c8 <netconn_recv+0x28>
 80115b4:	4b32      	ldr	r3, [pc, #200]	@ (8011680 <netconn_recv+0xe0>)
 80115b6:	f240 3263 	movw	r2, #867	@ 0x363
 80115ba:	4932      	ldr	r1, [pc, #200]	@ (8011684 <netconn_recv+0xe4>)
 80115bc:	4832      	ldr	r0, [pc, #200]	@ (8011688 <netconn_recv+0xe8>)
 80115be:	f00d f96f 	bl	801e8a0 <iprintf>
 80115c2:	f06f 030f 	mvn.w	r3, #15
 80115c6:	e056      	b.n	8011676 <netconn_recv+0xd6>
  *new_buf = NULL;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	2200      	movs	r2, #0
 80115cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d109      	bne.n	80115e8 <netconn_recv+0x48>
 80115d4:	4b2a      	ldr	r3, [pc, #168]	@ (8011680 <netconn_recv+0xe0>)
 80115d6:	f240 3265 	movw	r2, #869	@ 0x365
 80115da:	492c      	ldr	r1, [pc, #176]	@ (801168c <netconn_recv+0xec>)
 80115dc:	482a      	ldr	r0, [pc, #168]	@ (8011688 <netconn_recv+0xe8>)
 80115de:	f00d f95f 	bl	801e8a0 <iprintf>
 80115e2:	f06f 030f 	mvn.w	r3, #15
 80115e6:	e046      	b.n	8011676 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115f0:	2b10      	cmp	r3, #16
 80115f2:	d13a      	bne.n	801166a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80115f4:	2300      	movs	r3, #0
 80115f6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80115f8:	2006      	movs	r0, #6
 80115fa:	f002 fcf9 	bl	8013ff0 <memp_malloc>
 80115fe:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d102      	bne.n	801160c <netconn_recv+0x6c>
      return ERR_MEM;
 8011606:	f04f 33ff 	mov.w	r3, #4294967295
 801160a:	e034      	b.n	8011676 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 801160c:	f107 030c 	add.w	r3, r7, #12
 8011610:	2200      	movs	r2, #0
 8011612:	4619      	mov	r1, r3
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7ff ff3f 	bl	8011498 <netconn_recv_data_tcp>
 801161a:	4603      	mov	r3, r0
 801161c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801161e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d006      	beq.n	8011634 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011626:	6979      	ldr	r1, [r7, #20]
 8011628:	2006      	movs	r0, #6
 801162a:	f002 fd57 	bl	80140dc <memp_free>
      return err;
 801162e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011632:	e020      	b.n	8011676 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d106      	bne.n	8011648 <netconn_recv+0xa8>
 801163a:	4b11      	ldr	r3, [pc, #68]	@ (8011680 <netconn_recv+0xe0>)
 801163c:	f240 3279 	movw	r2, #889	@ 0x379
 8011640:	4913      	ldr	r1, [pc, #76]	@ (8011690 <netconn_recv+0xf0>)
 8011642:	4811      	ldr	r0, [pc, #68]	@ (8011688 <netconn_recv+0xe8>)
 8011644:	f00d f92c 	bl	801e8a0 <iprintf>

    buf->p = p;
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	2200      	movs	r2, #0
 8011658:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2200      	movs	r2, #0
 801165e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	697a      	ldr	r2, [r7, #20]
 8011664:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	e005      	b.n	8011676 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801166a:	2200      	movs	r2, #0
 801166c:	6839      	ldr	r1, [r7, #0]
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f7ff fe1a 	bl	80112a8 <netconn_recv_data>
 8011674:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011676:	4618      	mov	r0, r3
 8011678:	3718      	adds	r7, #24
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	0801f844 	.word	0x0801f844
 8011684:	0801fa5c 	.word	0x0801fa5c
 8011688:	0801f89c 	.word	0x0801f89c
 801168c:	0801fa7c 	.word	0x0801fa7c
 8011690:	0801faf4 	.word	0x0801faf4

08011694 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af02      	add	r7, sp, #8
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80116aa:	78fa      	ldrb	r2, [r7, #3]
 80116ac:	f107 0110 	add.w	r1, r7, #16
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	4613      	mov	r3, r2
 80116b6:	2201      	movs	r2, #1
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f000 f805 	bl	80116c8 <netconn_write_vectors_partly>
 80116be:	4603      	mov	r3, r0
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3718      	adds	r7, #24
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b092      	sub	sp, #72	@ 0x48
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	4611      	mov	r1, r2
 80116d4:	461a      	mov	r2, r3
 80116d6:	460b      	mov	r3, r1
 80116d8:	80fb      	strh	r3, [r7, #6]
 80116da:	4613      	mov	r3, r2
 80116dc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <netconn_write_vectors_partly+0x30>
 80116e4:	4b4e      	ldr	r3, [pc, #312]	@ (8011820 <netconn_write_vectors_partly+0x158>)
 80116e6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80116ea:	494e      	ldr	r1, [pc, #312]	@ (8011824 <netconn_write_vectors_partly+0x15c>)
 80116ec:	484e      	ldr	r0, [pc, #312]	@ (8011828 <netconn_write_vectors_partly+0x160>)
 80116ee:	f00d f8d7 	bl	801e8a0 <iprintf>
 80116f2:	f06f 030f 	mvn.w	r3, #15
 80116f6:	e08e      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011700:	2b10      	cmp	r3, #16
 8011702:	d009      	beq.n	8011718 <netconn_write_vectors_partly+0x50>
 8011704:	4b46      	ldr	r3, [pc, #280]	@ (8011820 <netconn_write_vectors_partly+0x158>)
 8011706:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 801170a:	4948      	ldr	r1, [pc, #288]	@ (801182c <netconn_write_vectors_partly+0x164>)
 801170c:	4846      	ldr	r0, [pc, #280]	@ (8011828 <netconn_write_vectors_partly+0x160>)
 801170e:	f00d f8c7 	bl	801e8a0 <iprintf>
 8011712:	f06f 0305 	mvn.w	r3, #5
 8011716:	e07e      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	7f1b      	ldrb	r3, [r3, #28]
 801171c:	f003 0302 	and.w	r3, r3, #2
 8011720:	2b00      	cmp	r3, #0
 8011722:	d104      	bne.n	801172e <netconn_write_vectors_partly+0x66>
 8011724:	797b      	ldrb	r3, [r7, #5]
 8011726:	f003 0304 	and.w	r3, r3, #4
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <netconn_write_vectors_partly+0x6a>
 801172e:	2301      	movs	r3, #1
 8011730:	e000      	b.n	8011734 <netconn_write_vectors_partly+0x6c>
 8011732:	2300      	movs	r3, #0
 8011734:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8011738:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801173c:	2b00      	cmp	r3, #0
 801173e:	d005      	beq.n	801174c <netconn_write_vectors_partly+0x84>
 8011740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8011746:	f06f 0305 	mvn.w	r3, #5
 801174a:	e064      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8011750:	2300      	movs	r3, #0
 8011752:	643b      	str	r3, [r7, #64]	@ 0x40
 8011754:	e015      	b.n	8011782 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8011756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	4413      	add	r3, r2
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011762:	4413      	add	r3, r2
 8011764:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8011766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	68ba      	ldr	r2, [r7, #8]
 801176c:	4413      	add	r3, r2
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011772:	429a      	cmp	r2, r3
 8011774:	d202      	bcs.n	801177c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8011776:	f06f 0305 	mvn.w	r3, #5
 801177a:	e04c      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 801177c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801177e:	3301      	adds	r3, #1
 8011780:	643b      	str	r3, [r7, #64]	@ 0x40
 8011782:	88fb      	ldrh	r3, [r7, #6]
 8011784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011786:	429a      	cmp	r2, r3
 8011788:	dbe5      	blt.n	8011756 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 801178a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	e040      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8011794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011796:	2b00      	cmp	r3, #0
 8011798:	da0a      	bge.n	80117b0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801179a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801179c:	2b00      	cmp	r3, #0
 801179e:	d102      	bne.n	80117a6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80117a0:	f06f 0305 	mvn.w	r3, #5
 80117a4:	e037      	b.n	8011816 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80117a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80117aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 80117ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80117b8:	88fb      	ldrh	r3, [r7, #6]
 80117ba:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80117bc:	2300      	movs	r3, #0
 80117be:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80117c0:	797b      	ldrb	r3, [r7, #5]
 80117c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80117c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80117ce:	f107 0314 	add.w	r3, r7, #20
 80117d2:	4619      	mov	r1, r3
 80117d4:	4816      	ldr	r0, [pc, #88]	@ (8011830 <netconn_write_vectors_partly+0x168>)
 80117d6:	f7ff fb9f 	bl	8010f18 <netconn_apimsg>
 80117da:	4603      	mov	r3, r0
 80117dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80117e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d114      	bne.n	8011812 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80117e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d002      	beq.n	80117f4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80117ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117f2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80117f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d10a      	bne.n	8011812 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011800:	429a      	cmp	r2, r3
 8011802:	d006      	beq.n	8011812 <netconn_write_vectors_partly+0x14a>
 8011804:	4b06      	ldr	r3, [pc, #24]	@ (8011820 <netconn_write_vectors_partly+0x158>)
 8011806:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801180a:	490a      	ldr	r1, [pc, #40]	@ (8011834 <netconn_write_vectors_partly+0x16c>)
 801180c:	4806      	ldr	r0, [pc, #24]	@ (8011828 <netconn_write_vectors_partly+0x160>)
 801180e:	f00d f847 	bl	801e8a0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8011812:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8011816:	4618      	mov	r0, r3
 8011818:	3748      	adds	r7, #72	@ 0x48
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	0801f844 	.word	0x0801f844
 8011824:	0801fb1c 	.word	0x0801fb1c
 8011828:	0801f89c 	.word	0x0801f89c
 801182c:	0801fb38 	.word	0x0801fb38
 8011830:	08012e71 	.word	0x08012e71
 8011834:	0801fb5c 	.word	0x0801fb5c

08011838 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b08c      	sub	sp, #48	@ 0x30
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	460b      	mov	r3, r1
 8011842:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d109      	bne.n	801185e <netconn_close_shutdown+0x26>
 801184a:	4b0f      	ldr	r3, [pc, #60]	@ (8011888 <netconn_close_shutdown+0x50>)
 801184c:	f240 4247 	movw	r2, #1095	@ 0x447
 8011850:	490e      	ldr	r1, [pc, #56]	@ (801188c <netconn_close_shutdown+0x54>)
 8011852:	480f      	ldr	r0, [pc, #60]	@ (8011890 <netconn_close_shutdown+0x58>)
 8011854:	f00d f824 	bl	801e8a0 <iprintf>
 8011858:	f06f 030f 	mvn.w	r3, #15
 801185c:	e010      	b.n	8011880 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8011862:	78fb      	ldrb	r3, [r7, #3]
 8011864:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011866:	2329      	movs	r3, #41	@ 0x29
 8011868:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801186a:	f107 030c 	add.w	r3, r7, #12
 801186e:	4619      	mov	r1, r3
 8011870:	4808      	ldr	r0, [pc, #32]	@ (8011894 <netconn_close_shutdown+0x5c>)
 8011872:	f7ff fb51 	bl	8010f18 <netconn_apimsg>
 8011876:	4603      	mov	r3, r0
 8011878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801187c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011880:	4618      	mov	r0, r3
 8011882:	3730      	adds	r7, #48	@ 0x30
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	0801f844 	.word	0x0801f844
 801188c:	0801fb80 	.word	0x0801fb80
 8011890:	0801f89c 	.word	0x0801f89c
 8011894:	08012f89 	.word	0x08012f89

08011898 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80118a0:	2103      	movs	r1, #3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff ffc8 	bl	8011838 <netconn_close_shutdown>
 80118a8:	4603      	mov	r3, r0
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3708      	adds	r7, #8
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b084      	sub	sp, #16
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <netconn_err+0x12>
    return ERR_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	e00d      	b.n	80118e0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80118c4:	f00c fece 	bl	801e664 <sys_arch_protect>
 80118c8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	7a1b      	ldrb	r3, [r3, #8]
 80118ce:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f00c fed2 	bl	801e680 <sys_arch_unprotect>
  return err;
 80118dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	4603      	mov	r3, r0
 80118f0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80118f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118f6:	f113 0f0d 	cmn.w	r3, #13
 80118fa:	d009      	beq.n	8011910 <lwip_netconn_err_to_msg+0x28>
 80118fc:	f113 0f0d 	cmn.w	r3, #13
 8011900:	dc0c      	bgt.n	801191c <lwip_netconn_err_to_msg+0x34>
 8011902:	f113 0f0f 	cmn.w	r3, #15
 8011906:	d007      	beq.n	8011918 <lwip_netconn_err_to_msg+0x30>
 8011908:	f113 0f0e 	cmn.w	r3, #14
 801190c:	d002      	beq.n	8011914 <lwip_netconn_err_to_msg+0x2c>
 801190e:	e005      	b.n	801191c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011910:	4b0a      	ldr	r3, [pc, #40]	@ (801193c <lwip_netconn_err_to_msg+0x54>)
 8011912:	e00e      	b.n	8011932 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011914:	4b0a      	ldr	r3, [pc, #40]	@ (8011940 <lwip_netconn_err_to_msg+0x58>)
 8011916:	e00c      	b.n	8011932 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011918:	4b0a      	ldr	r3, [pc, #40]	@ (8011944 <lwip_netconn_err_to_msg+0x5c>)
 801191a:	e00a      	b.n	8011932 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d005      	beq.n	8011930 <lwip_netconn_err_to_msg+0x48>
 8011924:	4b08      	ldr	r3, [pc, #32]	@ (8011948 <lwip_netconn_err_to_msg+0x60>)
 8011926:	227d      	movs	r2, #125	@ 0x7d
 8011928:	4908      	ldr	r1, [pc, #32]	@ (801194c <lwip_netconn_err_to_msg+0x64>)
 801192a:	4809      	ldr	r0, [pc, #36]	@ (8011950 <lwip_netconn_err_to_msg+0x68>)
 801192c:	f00c ffb8 	bl	801e8a0 <iprintf>
      return NULL;
 8011930:	2300      	movs	r3, #0
  }
}
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	08022df8 	.word	0x08022df8
 8011940:	08022df9 	.word	0x08022df9
 8011944:	08022dfa 	.word	0x08022dfa
 8011948:	0801fb9c 	.word	0x0801fb9c
 801194c:	0801fbd0 	.word	0x0801fbd0
 8011950:	0801fbe0 	.word	0x0801fbe0

08011954 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d105      	bne.n	8011970 <lwip_netconn_is_err_msg+0x1c>
 8011964:	4b12      	ldr	r3, [pc, #72]	@ (80119b0 <lwip_netconn_is_err_msg+0x5c>)
 8011966:	2285      	movs	r2, #133	@ 0x85
 8011968:	4912      	ldr	r1, [pc, #72]	@ (80119b4 <lwip_netconn_is_err_msg+0x60>)
 801196a:	4813      	ldr	r0, [pc, #76]	@ (80119b8 <lwip_netconn_is_err_msg+0x64>)
 801196c:	f00c ff98 	bl	801e8a0 <iprintf>

  if (msg == &netconn_aborted) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	4a12      	ldr	r2, [pc, #72]	@ (80119bc <lwip_netconn_is_err_msg+0x68>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d104      	bne.n	8011982 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	22f3      	movs	r2, #243	@ 0xf3
 801197c:	701a      	strb	r2, [r3, #0]
    return 1;
 801197e:	2301      	movs	r3, #1
 8011980:	e012      	b.n	80119a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4a0e      	ldr	r2, [pc, #56]	@ (80119c0 <lwip_netconn_is_err_msg+0x6c>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d104      	bne.n	8011994 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	22f2      	movs	r2, #242	@ 0xf2
 801198e:	701a      	strb	r2, [r3, #0]
    return 1;
 8011990:	2301      	movs	r3, #1
 8011992:	e009      	b.n	80119a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4a0b      	ldr	r2, [pc, #44]	@ (80119c4 <lwip_netconn_is_err_msg+0x70>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d104      	bne.n	80119a6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	22f1      	movs	r2, #241	@ 0xf1
 80119a0:	701a      	strb	r2, [r3, #0]
    return 1;
 80119a2:	2301      	movs	r3, #1
 80119a4:	e000      	b.n	80119a8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80119a6:	2300      	movs	r3, #0
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	0801fb9c 	.word	0x0801fb9c
 80119b4:	0801fc08 	.word	0x0801fc08
 80119b8:	0801fbe0 	.word	0x0801fbe0
 80119bc:	08022df8 	.word	0x08022df8
 80119c0:	08022df9 	.word	0x08022df9
 80119c4:	08022dfa 	.word	0x08022dfa

080119c8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b088      	sub	sp, #32
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d105      	bne.n	80119e8 <recv_udp+0x20>
 80119dc:	4b34      	ldr	r3, [pc, #208]	@ (8011ab0 <recv_udp+0xe8>)
 80119de:	22e5      	movs	r2, #229	@ 0xe5
 80119e0:	4934      	ldr	r1, [pc, #208]	@ (8011ab4 <recv_udp+0xec>)
 80119e2:	4835      	ldr	r0, [pc, #212]	@ (8011ab8 <recv_udp+0xf0>)
 80119e4:	f00c ff5c 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d105      	bne.n	80119fa <recv_udp+0x32>
 80119ee:	4b30      	ldr	r3, [pc, #192]	@ (8011ab0 <recv_udp+0xe8>)
 80119f0:	22e6      	movs	r2, #230	@ 0xe6
 80119f2:	4932      	ldr	r1, [pc, #200]	@ (8011abc <recv_udp+0xf4>)
 80119f4:	4830      	ldr	r0, [pc, #192]	@ (8011ab8 <recv_udp+0xf0>)
 80119f6:	f00c ff53 	bl	801e8a0 <iprintf>
  conn = (struct netconn *)arg;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d103      	bne.n	8011a0c <recv_udp+0x44>
    pbuf_free(p);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f003 fa0d 	bl	8014e24 <pbuf_free>
    return;
 8011a0a:	e04d      	b.n	8011aa8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	68ba      	ldr	r2, [r7, #8]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d005      	beq.n	8011a22 <recv_udp+0x5a>
 8011a16:	4b26      	ldr	r3, [pc, #152]	@ (8011ab0 <recv_udp+0xe8>)
 8011a18:	22ee      	movs	r2, #238	@ 0xee
 8011a1a:	4929      	ldr	r1, [pc, #164]	@ (8011ac0 <recv_udp+0xf8>)
 8011a1c:	4826      	ldr	r0, [pc, #152]	@ (8011ab8 <recv_udp+0xf0>)
 8011a1e:	f00c ff3f 	bl	801e8a0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	3310      	adds	r3, #16
 8011a26:	4618      	mov	r0, r3
 8011a28:	f00c fd12 	bl	801e450 <sys_mbox_valid>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d103      	bne.n	8011a3a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f003 f9f6 	bl	8014e24 <pbuf_free>
    return;
 8011a38:	e036      	b.n	8011aa8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011a3a:	2006      	movs	r0, #6
 8011a3c:	f002 fad8 	bl	8013ff0 <memp_malloc>
 8011a40:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011a42:	69bb      	ldr	r3, [r7, #24]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d103      	bne.n	8011a50 <recv_udp+0x88>
    pbuf_free(p);
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f003 f9eb 	bl	8014e24 <pbuf_free>
    return;
 8011a4e:	e02b      	b.n	8011aa8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <recv_udp+0xa0>
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	e000      	b.n	8011a6a <recv_udp+0xa2>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	69ba      	ldr	r2, [r7, #24]
 8011a6c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011a72:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	891b      	ldrh	r3, [r3, #8]
 8011a78:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	3310      	adds	r3, #16
 8011a7e:	69b9      	ldr	r1, [r7, #24]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f00c fc83 	bl	801e38c <sys_mbox_trypost>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d003      	beq.n	8011a94 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011a8c:	69b8      	ldr	r0, [r7, #24]
 8011a8e:	f001 fb07 	bl	80130a0 <netbuf_delete>
    return;
 8011a92:	e009      	b.n	8011aa8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d005      	beq.n	8011aa8 <recv_udp+0xe0>
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aa0:	8afa      	ldrh	r2, [r7, #22]
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	69f8      	ldr	r0, [r7, #28]
 8011aa6:	4798      	blx	r3
  }
}
 8011aa8:	3720      	adds	r7, #32
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	0801fb9c 	.word	0x0801fb9c
 8011ab4:	0801fc14 	.word	0x0801fc14
 8011ab8:	0801fbe0 	.word	0x0801fbe0
 8011abc:	0801fc38 	.word	0x0801fc38
 8011ac0:	0801fc58 	.word	0x0801fc58

08011ac4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b088      	sub	sp, #32
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d106      	bne.n	8011ae6 <recv_tcp+0x22>
 8011ad8:	4b36      	ldr	r3, [pc, #216]	@ (8011bb4 <recv_tcp+0xf0>)
 8011ada:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011ade:	4936      	ldr	r1, [pc, #216]	@ (8011bb8 <recv_tcp+0xf4>)
 8011ae0:	4836      	ldr	r0, [pc, #216]	@ (8011bbc <recv_tcp+0xf8>)
 8011ae2:	f00c fedd 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d106      	bne.n	8011afa <recv_tcp+0x36>
 8011aec:	4b31      	ldr	r3, [pc, #196]	@ (8011bb4 <recv_tcp+0xf0>)
 8011aee:	f240 122d 	movw	r2, #301	@ 0x12d
 8011af2:	4933      	ldr	r1, [pc, #204]	@ (8011bc0 <recv_tcp+0xfc>)
 8011af4:	4831      	ldr	r0, [pc, #196]	@ (8011bbc <recv_tcp+0xf8>)
 8011af6:	f00c fed3 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d006      	beq.n	8011b10 <recv_tcp+0x4c>
 8011b02:	4b2c      	ldr	r3, [pc, #176]	@ (8011bb4 <recv_tcp+0xf0>)
 8011b04:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011b08:	492e      	ldr	r1, [pc, #184]	@ (8011bc4 <recv_tcp+0x100>)
 8011b0a:	482c      	ldr	r0, [pc, #176]	@ (8011bbc <recv_tcp+0xf8>)
 8011b0c:	f00c fec8 	bl	801e8a0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d102      	bne.n	8011b20 <recv_tcp+0x5c>
    return ERR_VAL;
 8011b1a:	f06f 0305 	mvn.w	r3, #5
 8011b1e:	e045      	b.n	8011bac <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	68ba      	ldr	r2, [r7, #8]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d006      	beq.n	8011b38 <recv_tcp+0x74>
 8011b2a:	4b22      	ldr	r3, [pc, #136]	@ (8011bb4 <recv_tcp+0xf0>)
 8011b2c:	f240 1235 	movw	r2, #309	@ 0x135
 8011b30:	4925      	ldr	r1, [pc, #148]	@ (8011bc8 <recv_tcp+0x104>)
 8011b32:	4822      	ldr	r0, [pc, #136]	@ (8011bbc <recv_tcp+0xf8>)
 8011b34:	f00c feb4 	bl	801e8a0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	3310      	adds	r3, #16
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f00c fc87 	bl	801e450 <sys_mbox_valid>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10d      	bne.n	8011b64 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d008      	beq.n	8011b60 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	891b      	ldrh	r3, [r3, #8]
 8011b52:	4619      	mov	r1, r3
 8011b54:	68b8      	ldr	r0, [r7, #8]
 8011b56:	f004 f91d 	bl	8015d94 <tcp_recved>
      pbuf_free(p);
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f003 f962 	bl	8014e24 <pbuf_free>
    }
    return ERR_OK;
 8011b60:	2300      	movs	r3, #0
 8011b62:	e023      	b.n	8011bac <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d005      	beq.n	8011b76 <recv_tcp+0xb2>
    msg = p;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	891b      	ldrh	r3, [r3, #8]
 8011b72:	83fb      	strh	r3, [r7, #30]
 8011b74:	e003      	b.n	8011b7e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011b76:	4b15      	ldr	r3, [pc, #84]	@ (8011bcc <recv_tcp+0x108>)
 8011b78:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	3310      	adds	r3, #16
 8011b82:	69b9      	ldr	r1, [r7, #24]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f00c fc01 	bl	801e38c <sys_mbox_trypost>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d002      	beq.n	8011b96 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011b90:	f04f 33ff 	mov.w	r3, #4294967295
 8011b94:	e00a      	b.n	8011bac <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d005      	beq.n	8011baa <recv_tcp+0xe6>
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ba2:	8bfa      	ldrh	r2, [r7, #30]
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	6978      	ldr	r0, [r7, #20]
 8011ba8:	4798      	blx	r3
  }

  return ERR_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3720      	adds	r7, #32
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	0801fb9c 	.word	0x0801fb9c
 8011bb8:	0801fc78 	.word	0x0801fc78
 8011bbc:	0801fbe0 	.word	0x0801fbe0
 8011bc0:	0801fc9c 	.word	0x0801fc9c
 8011bc4:	0801fcbc 	.word	0x0801fcbc
 8011bc8:	0801fcd4 	.word	0x0801fcd4
 8011bcc:	08022dfa 	.word	0x08022dfa

08011bd0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d106      	bne.n	8011bf2 <poll_tcp+0x22>
 8011be4:	4b2a      	ldr	r3, [pc, #168]	@ (8011c90 <poll_tcp+0xc0>)
 8011be6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011bea:	492a      	ldr	r1, [pc, #168]	@ (8011c94 <poll_tcp+0xc4>)
 8011bec:	482a      	ldr	r0, [pc, #168]	@ (8011c98 <poll_tcp+0xc8>)
 8011bee:	f00c fe57 	bl	801e8a0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	785b      	ldrb	r3, [r3, #1]
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d104      	bne.n	8011c04 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f000 ff69 	bl	8012ad4 <lwip_netconn_do_writemore>
 8011c02:	e016      	b.n	8011c32 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	785b      	ldrb	r3, [r3, #1]
 8011c08:	2b04      	cmp	r3, #4
 8011c0a:	d112      	bne.n	8011c32 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6a1b      	ldr	r3, [r3, #32]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00a      	beq.n	8011c2a <poll_tcp+0x5a>
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6a1b      	ldr	r3, [r3, #32]
 8011c18:	7a5b      	ldrb	r3, [r3, #9]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d005      	beq.n	8011c2a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	6a1b      	ldr	r3, [r3, #32]
 8011c22:	7a5a      	ldrb	r2, [r3, #9]
 8011c24:	3a01      	subs	r2, #1
 8011c26:	b2d2      	uxtb	r2, r2
 8011c28:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f000 fbfb 	bl	8012428 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	7f1b      	ldrb	r3, [r3, #28]
 8011c36:	f003 0310 	and.w	r3, r3, #16
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d022      	beq.n	8011c84 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d01e      	beq.n	8011c84 <poll_tcp+0xb4>
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c4e:	f640 3269 	movw	r2, #2921	@ 0xb69
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d916      	bls.n	8011c84 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011c5e:	2b07      	cmp	r3, #7
 8011c60:	d810      	bhi.n	8011c84 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	7f1b      	ldrb	r3, [r3, #28]
 8011c66:	f023 0310 	bic.w	r3, r3, #16
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d005      	beq.n	8011c84 <poll_tcp+0xb4>
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2102      	movs	r1, #2
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011c84:	2300      	movs	r3, #0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	0801fb9c 	.word	0x0801fb9c
 8011c94:	0801fcf4 	.word	0x0801fcf4
 8011c98:	0801fbe0 	.word	0x0801fbe0

08011c9c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d106      	bne.n	8011cc2 <sent_tcp+0x26>
 8011cb4:	4b21      	ldr	r3, [pc, #132]	@ (8011d3c <sent_tcp+0xa0>)
 8011cb6:	f240 1293 	movw	r2, #403	@ 0x193
 8011cba:	4921      	ldr	r1, [pc, #132]	@ (8011d40 <sent_tcp+0xa4>)
 8011cbc:	4821      	ldr	r0, [pc, #132]	@ (8011d44 <sent_tcp+0xa8>)
 8011cbe:	f00c fdef 	bl	801e8a0 <iprintf>

  if (conn) {
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d033      	beq.n	8011d30 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	785b      	ldrb	r3, [r3, #1]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d104      	bne.n	8011cda <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	6978      	ldr	r0, [r7, #20]
 8011cd4:	f000 fefe 	bl	8012ad4 <lwip_netconn_do_writemore>
 8011cd8:	e007      	b.n	8011cea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	785b      	ldrb	r3, [r3, #1]
 8011cde:	2b04      	cmp	r3, #4
 8011ce0:	d103      	bne.n	8011cea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	6978      	ldr	r0, [r7, #20]
 8011ce6:	f000 fb9f 	bl	8012428 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d01e      	beq.n	8011d30 <sent_tcp+0x94>
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011cfa:	f640 3269 	movw	r2, #2921	@ 0xb69
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d916      	bls.n	8011d30 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011d0a:	2b07      	cmp	r3, #7
 8011d0c:	d810      	bhi.n	8011d30 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	7f1b      	ldrb	r3, [r3, #28]
 8011d12:	f023 0310 	bic.w	r3, r3, #16
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d005      	beq.n	8011d30 <sent_tcp+0x94>
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d28:	88fa      	ldrh	r2, [r7, #6]
 8011d2a:	2102      	movs	r1, #2
 8011d2c:	6978      	ldr	r0, [r7, #20]
 8011d2e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3718      	adds	r7, #24
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	0801fb9c 	.word	0x0801fb9c
 8011d40:	0801fcf4 	.word	0x0801fcf4
 8011d44:	0801fbe0 	.word	0x0801fbe0

08011d48 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	460b      	mov	r3, r1
 8011d52:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d106      	bne.n	8011d6c <err_tcp+0x24>
 8011d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8011edc <err_tcp+0x194>)
 8011d60:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011d64:	495e      	ldr	r1, [pc, #376]	@ (8011ee0 <err_tcp+0x198>)
 8011d66:	485f      	ldr	r0, [pc, #380]	@ (8011ee4 <err_tcp+0x19c>)
 8011d68:	f00c fd9a 	bl	801e8a0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011d6c:	f00c fc7a 	bl	801e664 <sys_arch_protect>
 8011d70:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	2200      	movs	r2, #0
 8011d76:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	78fa      	ldrb	r2, [r7, #3]
 8011d7c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	7f1b      	ldrb	r3, [r3, #28]
 8011d82:	f043 0301 	orr.w	r3, r3, #1
 8011d86:	b2da      	uxtb	r2, r3
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	785b      	ldrb	r3, [r3, #1]
 8011d90:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	2200      	movs	r2, #0
 8011d96:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011d98:	69b8      	ldr	r0, [r7, #24]
 8011d9a:	f00c fc71 	bl	801e680 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <err_tcp+0x6a>
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011daa:	2200      	movs	r2, #0
 8011dac:	2104      	movs	r1, #4
 8011dae:	69f8      	ldr	r0, [r7, #28]
 8011db0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d005      	beq.n	8011dc6 <err_tcp+0x7e>
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	69f8      	ldr	r0, [r7, #28]
 8011dc4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d005      	beq.n	8011dda <err_tcp+0x92>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	2102      	movs	r1, #2
 8011dd6:	69f8      	ldr	r0, [r7, #28]
 8011dd8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff fd82 	bl	80118e8 <lwip_netconn_err_to_msg>
 8011de4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	3310      	adds	r3, #16
 8011dea:	4618      	mov	r0, r3
 8011dec:	f00c fb30 	bl	801e450 <sys_mbox_valid>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d005      	beq.n	8011e02 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011df6:	69fb      	ldr	r3, [r7, #28]
 8011df8:	3310      	adds	r3, #16
 8011dfa:	6939      	ldr	r1, [r7, #16]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f00c fac5 	bl	801e38c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	3314      	adds	r3, #20
 8011e06:	4618      	mov	r0, r3
 8011e08:	f00c fb22 	bl	801e450 <sys_mbox_valid>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d005      	beq.n	8011e1e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	3314      	adds	r3, #20
 8011e16:	6939      	ldr	r1, [r7, #16]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f00c fab7 	bl	801e38c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011e1e:	7dfb      	ldrb	r3, [r7, #23]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d005      	beq.n	8011e30 <err_tcp+0xe8>
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	d002      	beq.n	8011e30 <err_tcp+0xe8>
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	d143      	bne.n	8011eb8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	7f1b      	ldrb	r3, [r3, #28]
 8011e34:	f003 0304 	and.w	r3, r3, #4
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bf14      	ite	ne
 8011e3c:	2301      	movne	r3, #1
 8011e3e:	2300      	moveq	r3, #0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	7f1b      	ldrb	r3, [r3, #28]
 8011e48:	f023 0304 	bic.w	r3, r3, #4
 8011e4c:	b2da      	uxtb	r2, r3
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d13b      	bne.n	8011ed0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	6a1b      	ldr	r3, [r3, #32]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d106      	bne.n	8011e6e <err_tcp+0x126>
 8011e60:	4b1e      	ldr	r3, [pc, #120]	@ (8011edc <err_tcp+0x194>)
 8011e62:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e66:	4920      	ldr	r1, [pc, #128]	@ (8011ee8 <err_tcp+0x1a0>)
 8011e68:	481e      	ldr	r0, [pc, #120]	@ (8011ee4 <err_tcp+0x19c>)
 8011e6a:	f00c fd19 	bl	801e8a0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	2b04      	cmp	r3, #4
 8011e72:	d104      	bne.n	8011e7e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	6a1b      	ldr	r3, [r3, #32]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	711a      	strb	r2, [r3, #4]
 8011e7c:	e003      	b.n	8011e86 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	78fa      	ldrb	r2, [r7, #3]
 8011e84:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	6a1b      	ldr	r3, [r3, #32]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	330c      	adds	r3, #12
 8011e8e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f00c fb6b 	bl	801e56c <sys_sem_valid>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d106      	bne.n	8011eaa <err_tcp+0x162>
 8011e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8011edc <err_tcp+0x194>)
 8011e9e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011ea2:	4912      	ldr	r1, [pc, #72]	@ (8011eec <err_tcp+0x1a4>)
 8011ea4:	480f      	ldr	r0, [pc, #60]	@ (8011ee4 <err_tcp+0x19c>)
 8011ea6:	f00c fcfb 	bl	801e8a0 <iprintf>
      conn->current_msg = NULL;
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	2200      	movs	r2, #0
 8011eae:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011eb0:	68b8      	ldr	r0, [r7, #8]
 8011eb2:	f00c fb41 	bl	801e538 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011eb6:	e00b      	b.n	8011ed0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	6a1b      	ldr	r3, [r3, #32]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d008      	beq.n	8011ed2 <err_tcp+0x18a>
 8011ec0:	4b06      	ldr	r3, [pc, #24]	@ (8011edc <err_tcp+0x194>)
 8011ec2:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011ec6:	490a      	ldr	r1, [pc, #40]	@ (8011ef0 <err_tcp+0x1a8>)
 8011ec8:	4806      	ldr	r0, [pc, #24]	@ (8011ee4 <err_tcp+0x19c>)
 8011eca:	f00c fce9 	bl	801e8a0 <iprintf>
  }
}
 8011ece:	e000      	b.n	8011ed2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011ed0:	bf00      	nop
}
 8011ed2:	bf00      	nop
 8011ed4:	3720      	adds	r7, #32
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	0801fb9c 	.word	0x0801fb9c
 8011ee0:	0801fcf4 	.word	0x0801fcf4
 8011ee4:	0801fbe0 	.word	0x0801fbe0
 8011ee8:	0801fd04 	.word	0x0801fd04
 8011eec:	0801fd20 	.word	0x0801fd20
 8011ef0:	0801fd3c 	.word	0x0801fd3c

08011ef4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011f02:	6879      	ldr	r1, [r7, #4]
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f004 fe11 	bl	8016b2c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011f0a:	490a      	ldr	r1, [pc, #40]	@ (8011f34 <setup_tcp+0x40>)
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f004 fe1f 	bl	8016b50 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011f12:	4909      	ldr	r1, [pc, #36]	@ (8011f38 <setup_tcp+0x44>)
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f004 fe3d 	bl	8016b94 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011f1a:	2202      	movs	r2, #2
 8011f1c:	4907      	ldr	r1, [pc, #28]	@ (8011f3c <setup_tcp+0x48>)
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f004 fe94 	bl	8016c4c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011f24:	4906      	ldr	r1, [pc, #24]	@ (8011f40 <setup_tcp+0x4c>)
 8011f26:	68f8      	ldr	r0, [r7, #12]
 8011f28:	f004 fe56 	bl	8016bd8 <tcp_err>
}
 8011f2c:	bf00      	nop
 8011f2e:	3710      	adds	r7, #16
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	08011ac5 	.word	0x08011ac5
 8011f38:	08011c9d 	.word	0x08011c9d
 8011f3c:	08011bd1 	.word	0x08011bd1
 8011f40:	08011d49 	.word	0x08011d49

08011f44 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011f44:	b590      	push	{r4, r7, lr}
 8011f46:	b089      	sub	sp, #36	@ 0x24
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <accept_function+0x1e>
    return ERR_VAL;
 8011f5c:	f06f 0305 	mvn.w	r3, #5
 8011f60:	e0a1      	b.n	80120a6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	3314      	adds	r3, #20
 8011f66:	4618      	mov	r0, r3
 8011f68:	f00c fa72 	bl	801e450 <sys_mbox_valid>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d102      	bne.n	8011f78 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8011f72:	f06f 0305 	mvn.w	r3, #5
 8011f76:	e096      	b.n	80120a6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d11b      	bne.n	8011fb6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	f103 0414 	add.w	r4, r3, #20
 8011f84:	f06f 000c 	mvn.w	r0, #12
 8011f88:	f7ff fcae 	bl	80118e8 <lwip_netconn_err_to_msg>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4620      	mov	r0, r4
 8011f92:	f00c f9fb 	bl	801e38c <sys_mbox_trypost>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d109      	bne.n	8011fb0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d005      	beq.n	8011fb0 <accept_function+0x6c>
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2100      	movs	r1, #0
 8011fac:	69f8      	ldr	r0, [r7, #28]
 8011fae:	4798      	blx	r3
    }
    return ERR_VAL;
 8011fb0:	f06f 0305 	mvn.w	r3, #5
 8011fb4:	e077      	b.n	80120a6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8011fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d006      	beq.n	8011fcc <accept_function+0x88>
 8011fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80120b0 <accept_function+0x16c>)
 8011fc0:	f240 222a 	movw	r2, #554	@ 0x22a
 8011fc4:	493b      	ldr	r1, [pc, #236]	@ (80120b4 <accept_function+0x170>)
 8011fc6:	483c      	ldr	r0, [pc, #240]	@ (80120b8 <accept_function+0x174>)
 8011fc8:	f00c fc6a 	bl	801e8a0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	781a      	ldrb	r2, [r3, #0]
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	f000 f8f0 	bl	80121bc <netconn_alloc>
 8011fdc:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8011fde:	69bb      	ldr	r3, [r7, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d11b      	bne.n	801201c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	f103 0414 	add.w	r4, r3, #20
 8011fea:	f06f 000c 	mvn.w	r0, #12
 8011fee:	f7ff fc7b 	bl	80118e8 <lwip_netconn_err_to_msg>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f00c f9c8 	bl	801e38c <sys_mbox_trypost>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d109      	bne.n	8012016 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012006:	2b00      	cmp	r3, #0
 8012008:	d005      	beq.n	8012016 <accept_function+0xd2>
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200e:	2200      	movs	r2, #0
 8012010:	2100      	movs	r1, #0
 8012012:	69f8      	ldr	r0, [r7, #28]
 8012014:	4798      	blx	r3
    }
    return ERR_MEM;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
 801201a:	e044      	b.n	80120a6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	68ba      	ldr	r2, [r7, #8]
 8012020:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8012022:	69b8      	ldr	r0, [r7, #24]
 8012024:	f7ff ff66 	bl	8011ef4 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	3314      	adds	r3, #20
 801202c:	69b9      	ldr	r1, [r7, #24]
 801202e:	4618      	mov	r0, r3
 8012030:	f00c f9ac 	bl	801e38c <sys_mbox_trypost>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d02a      	beq.n	8012090 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8012040:	2100      	movs	r1, #0
 8012042:	6978      	ldr	r0, [r7, #20]
 8012044:	f004 fd72 	bl	8016b2c <tcp_arg>
    tcp_recv(pcb, NULL);
 8012048:	2100      	movs	r1, #0
 801204a:	6978      	ldr	r0, [r7, #20]
 801204c:	f004 fd80 	bl	8016b50 <tcp_recv>
    tcp_sent(pcb, NULL);
 8012050:	2100      	movs	r1, #0
 8012052:	6978      	ldr	r0, [r7, #20]
 8012054:	f004 fd9e 	bl	8016b94 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8012058:	2200      	movs	r2, #0
 801205a:	2100      	movs	r1, #0
 801205c:	6978      	ldr	r0, [r7, #20]
 801205e:	f004 fdf5 	bl	8016c4c <tcp_poll>
    tcp_err(pcb, NULL);
 8012062:	2100      	movs	r1, #0
 8012064:	6978      	ldr	r0, [r7, #20]
 8012066:	f004 fdb7 	bl	8016bd8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	2200      	movs	r2, #0
 801206e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	3310      	adds	r3, #16
 8012074:	4618      	mov	r0, r3
 8012076:	f00c f977 	bl	801e368 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	3310      	adds	r3, #16
 801207e:	4618      	mov	r0, r3
 8012080:	f00c f9f7 	bl	801e472 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8012084:	69b8      	ldr	r0, [r7, #24]
 8012086:	f000 f907 	bl	8012298 <netconn_free>
    return ERR_MEM;
 801208a:	f04f 33ff 	mov.w	r3, #4294967295
 801208e:	e00a      	b.n	80120a6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012094:	2b00      	cmp	r3, #0
 8012096:	d005      	beq.n	80120a4 <accept_function+0x160>
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801209c:	2200      	movs	r2, #0
 801209e:	2100      	movs	r1, #0
 80120a0:	69f8      	ldr	r0, [r7, #28]
 80120a2:	4798      	blx	r3
  }

  return ERR_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3724      	adds	r7, #36	@ 0x24
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd90      	pop	{r4, r7, pc}
 80120ae:	bf00      	nop
 80120b0:	0801fb9c 	.word	0x0801fb9c
 80120b4:	0801fd58 	.word	0x0801fd58
 80120b8:	0801fbe0 	.word	0x0801fbe0

080120bc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80120bc:	b590      	push	{r4, r7, lr}
 80120be:	b085      	sub	sp, #20
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80120c4:	2300      	movs	r3, #0
 80120c6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d006      	beq.n	80120e0 <pcb_new+0x24>
 80120d2:	4b2b      	ldr	r3, [pc, #172]	@ (8012180 <pcb_new+0xc4>)
 80120d4:	f240 2265 	movw	r2, #613	@ 0x265
 80120d8:	492a      	ldr	r1, [pc, #168]	@ (8012184 <pcb_new+0xc8>)
 80120da:	482b      	ldr	r0, [pc, #172]	@ (8012188 <pcb_new+0xcc>)
 80120dc:	f00c fbe0 	bl	801e8a0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120ea:	2b10      	cmp	r3, #16
 80120ec:	d022      	beq.n	8012134 <pcb_new+0x78>
 80120ee:	2b20      	cmp	r3, #32
 80120f0:	d133      	bne.n	801215a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681c      	ldr	r4, [r3, #0]
 80120f6:	7bfb      	ldrb	r3, [r7, #15]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f009 fdf2 	bl	801bce2 <udp_new_ip_type>
 80120fe:	4603      	mov	r3, r0
 8012100:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d02a      	beq.n	8012162 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b22      	cmp	r3, #34	@ 0x22
 8012114:	d104      	bne.n	8012120 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	2201      	movs	r2, #1
 801211e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	6858      	ldr	r0, [r3, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	461a      	mov	r2, r3
 801212c:	4917      	ldr	r1, [pc, #92]	@ (801218c <pcb_new+0xd0>)
 801212e:	f009 fd5f 	bl	801bbf0 <udp_recv>
      }
      break;
 8012132:	e016      	b.n	8012162 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681c      	ldr	r4, [r3, #0]
 8012138:	7bfb      	ldrb	r3, [r7, #15]
 801213a:	4618      	mov	r0, r3
 801213c:	f004 fce8 	bl	8016b10 <tcp_new_ip_type>
 8012140:	4603      	mov	r3, r0
 8012142:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d00b      	beq.n	8012166 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fece 	bl	8011ef4 <setup_tcp>
      }
      break;
 8012158:	e005      	b.n	8012166 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	22fa      	movs	r2, #250	@ 0xfa
 801215e:	711a      	strb	r2, [r3, #4]
      return;
 8012160:	e00a      	b.n	8012178 <pcb_new+0xbc>
      break;
 8012162:	bf00      	nop
 8012164:	e000      	b.n	8012168 <pcb_new+0xac>
      break;
 8012166:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d102      	bne.n	8012178 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	22ff      	movs	r2, #255	@ 0xff
 8012176:	711a      	strb	r2, [r3, #4]
  }
}
 8012178:	3714      	adds	r7, #20
 801217a:	46bd      	mov	sp, r7
 801217c:	bd90      	pop	{r4, r7, pc}
 801217e:	bf00      	nop
 8012180:	0801fb9c 	.word	0x0801fb9c
 8012184:	0801fd80 	.word	0x0801fd80
 8012188:	0801fbe0 	.word	0x0801fbe0
 801218c:	080119c9 	.word	0x080119c9

08012190 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2200      	movs	r2, #0
 80121a0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d102      	bne.n	80121b2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff ff85 	bl	80120bc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80121b2:	bf00      	nop
 80121b4:	3710      	adds	r7, #16
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
	...

080121bc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b086      	sub	sp, #24
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	6039      	str	r1, [r7, #0]
 80121c6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80121c8:	2300      	movs	r3, #0
 80121ca:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80121cc:	2007      	movs	r0, #7
 80121ce:	f001 ff0f 	bl	8013ff0 <memp_malloc>
 80121d2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d101      	bne.n	80121de <netconn_alloc+0x22>
    return NULL;
 80121da:	2300      	movs	r3, #0
 80121dc:	e052      	b.n	8012284 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	79fa      	ldrb	r2, [r7, #7]
 80121e8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2200      	movs	r2, #0
 80121ee:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80121f0:	79fb      	ldrb	r3, [r7, #7]
 80121f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121f6:	2b10      	cmp	r3, #16
 80121f8:	d004      	beq.n	8012204 <netconn_alloc+0x48>
 80121fa:	2b20      	cmp	r3, #32
 80121fc:	d105      	bne.n	801220a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80121fe:	2306      	movs	r3, #6
 8012200:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012202:	e00a      	b.n	801221a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012204:	2306      	movs	r3, #6
 8012206:	617b      	str	r3, [r7, #20]
      break;
 8012208:	e007      	b.n	801221a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801220a:	4b20      	ldr	r3, [pc, #128]	@ (801228c <netconn_alloc+0xd0>)
 801220c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8012210:	491f      	ldr	r1, [pc, #124]	@ (8012290 <netconn_alloc+0xd4>)
 8012212:	4820      	ldr	r0, [pc, #128]	@ (8012294 <netconn_alloc+0xd8>)
 8012214:	f00c fb44 	bl	801e8a0 <iprintf>
      goto free_and_return;
 8012218:	e02f      	b.n	801227a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	3310      	adds	r3, #16
 801221e:	6979      	ldr	r1, [r7, #20]
 8012220:	4618      	mov	r0, r3
 8012222:	f00c f887 	bl	801e334 <sys_mbox_new>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d125      	bne.n	8012278 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	330c      	adds	r3, #12
 8012230:	2100      	movs	r1, #0
 8012232:	4618      	mov	r0, r3
 8012234:	f00c f92a 	bl	801e48c <sys_sem_new>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d005      	beq.n	801224a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3310      	adds	r3, #16
 8012242:	4618      	mov	r0, r3
 8012244:	f00c f890 	bl	801e368 <sys_mbox_free>
    goto free_and_return;
 8012248:	e017      	b.n	801227a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	3314      	adds	r3, #20
 801224e:	4618      	mov	r0, r3
 8012250:	f00c f90f 	bl	801e472 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f04f 32ff 	mov.w	r2, #4294967295
 8012260:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	683a      	ldr	r2, [r7, #0]
 8012266:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2200      	movs	r2, #0
 801226c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	7cfa      	ldrb	r2, [r7, #19]
 8012272:	771a      	strb	r2, [r3, #28]
  return conn;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	e005      	b.n	8012284 <netconn_alloc+0xc8>
    goto free_and_return;
 8012278:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801227a:	68f9      	ldr	r1, [r7, #12]
 801227c:	2007      	movs	r0, #7
 801227e:	f001 ff2d 	bl	80140dc <memp_free>
  return NULL;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	0801fb9c 	.word	0x0801fb9c
 8012290:	0801fda0 	.word	0x0801fda0
 8012294:	0801fbe0 	.word	0x0801fbe0

08012298 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d006      	beq.n	80122b6 <netconn_free+0x1e>
 80122a8:	4b1b      	ldr	r3, [pc, #108]	@ (8012318 <netconn_free+0x80>)
 80122aa:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80122ae:	491b      	ldr	r1, [pc, #108]	@ (801231c <netconn_free+0x84>)
 80122b0:	481b      	ldr	r0, [pc, #108]	@ (8012320 <netconn_free+0x88>)
 80122b2:	f00c faf5 	bl	801e8a0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	3310      	adds	r3, #16
 80122ba:	4618      	mov	r0, r3
 80122bc:	f00c f8c8 	bl	801e450 <sys_mbox_valid>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d006      	beq.n	80122d4 <netconn_free+0x3c>
 80122c6:	4b14      	ldr	r3, [pc, #80]	@ (8012318 <netconn_free+0x80>)
 80122c8:	f240 3223 	movw	r2, #803	@ 0x323
 80122cc:	4915      	ldr	r1, [pc, #84]	@ (8012324 <netconn_free+0x8c>)
 80122ce:	4814      	ldr	r0, [pc, #80]	@ (8012320 <netconn_free+0x88>)
 80122d0:	f00c fae6 	bl	801e8a0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	3314      	adds	r3, #20
 80122d8:	4618      	mov	r0, r3
 80122da:	f00c f8b9 	bl	801e450 <sys_mbox_valid>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <netconn_free+0x5a>
 80122e4:	4b0c      	ldr	r3, [pc, #48]	@ (8012318 <netconn_free+0x80>)
 80122e6:	f240 3226 	movw	r2, #806	@ 0x326
 80122ea:	490f      	ldr	r1, [pc, #60]	@ (8012328 <netconn_free+0x90>)
 80122ec:	480c      	ldr	r0, [pc, #48]	@ (8012320 <netconn_free+0x88>)
 80122ee:	f00c fad7 	bl	801e8a0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	330c      	adds	r3, #12
 80122f6:	4618      	mov	r0, r3
 80122f8:	f00c f92b 	bl	801e552 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	330c      	adds	r3, #12
 8012300:	4618      	mov	r0, r3
 8012302:	f00c f944 	bl	801e58e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012306:	6879      	ldr	r1, [r7, #4]
 8012308:	2007      	movs	r0, #7
 801230a:	f001 fee7 	bl	80140dc <memp_free>
}
 801230e:	bf00      	nop
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	0801fb9c 	.word	0x0801fb9c
 801231c:	0801fdc8 	.word	0x0801fdc8
 8012320:	0801fbe0 	.word	0x0801fbe0
 8012324:	0801fdf8 	.word	0x0801fdf8
 8012328:	0801fe34 	.word	0x0801fe34

0801232c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	3310      	adds	r3, #16
 8012338:	4618      	mov	r0, r3
 801233a:	f00c f889 	bl	801e450 <sys_mbox_valid>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d02f      	beq.n	80123a4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012344:	e018      	b.n	8012378 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801234e:	2b10      	cmp	r3, #16
 8012350:	d10e      	bne.n	8012370 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	f107 020f 	add.w	r2, r7, #15
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff fafa 	bl	8011954 <lwip_netconn_is_err_msg>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d108      	bne.n	8012378 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	4618      	mov	r0, r3
 801236a:	f002 fd5b 	bl	8014e24 <pbuf_free>
 801236e:	e003      	b.n	8012378 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fe94 	bl	80130a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	3310      	adds	r3, #16
 801237c:	f107 0210 	add.w	r2, r7, #16
 8012380:	4611      	mov	r1, r2
 8012382:	4618      	mov	r0, r3
 8012384:	f00c f84d 	bl	801e422 <sys_arch_mbox_tryfetch>
 8012388:	4603      	mov	r3, r0
 801238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238e:	d1da      	bne.n	8012346 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	3310      	adds	r3, #16
 8012394:	4618      	mov	r0, r3
 8012396:	f00b ffe7 	bl	801e368 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	3310      	adds	r3, #16
 801239e:	4618      	mov	r0, r3
 80123a0:	f00c f867 	bl	801e472 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	3314      	adds	r3, #20
 80123a8:	4618      	mov	r0, r3
 80123aa:	f00c f851 	bl	801e450 <sys_mbox_valid>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d034      	beq.n	801241e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123b4:	e01d      	b.n	80123f2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	f107 020e 	add.w	r2, r7, #14
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ff fac8 	bl	8011954 <lwip_netconn_is_err_msg>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d113      	bne.n	80123f2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80123ce:	6978      	ldr	r0, [r7, #20]
 80123d0:	f7ff ffac 	bl	801232c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d007      	beq.n	80123ec <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f003 fb0f 	bl	8015a04 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	2200      	movs	r2, #0
 80123ea:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80123ec:	6978      	ldr	r0, [r7, #20]
 80123ee:	f7ff ff53 	bl	8012298 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3314      	adds	r3, #20
 80123f6:	f107 0210 	add.w	r2, r7, #16
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f00c f810 	bl	801e422 <sys_arch_mbox_tryfetch>
 8012402:	4603      	mov	r3, r0
 8012404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012408:	d1d5      	bne.n	80123b6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	3314      	adds	r3, #20
 801240e:	4618      	mov	r0, r3
 8012410:	f00b ffaa 	bl	801e368 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3314      	adds	r3, #20
 8012418:	4618      	mov	r0, r3
 801241a:	f00c f82a 	bl	801e472 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801241e:	bf00      	nop
 8012420:	3718      	adds	r7, #24
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	460b      	mov	r3, r1
 8012432:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012434:	2300      	movs	r3, #0
 8012436:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d106      	bne.n	801244c <lwip_netconn_do_close_internal+0x24>
 801243e:	4b87      	ldr	r3, [pc, #540]	@ (801265c <lwip_netconn_do_close_internal+0x234>)
 8012440:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8012444:	4986      	ldr	r1, [pc, #536]	@ (8012660 <lwip_netconn_do_close_internal+0x238>)
 8012446:	4887      	ldr	r0, [pc, #540]	@ (8012664 <lwip_netconn_do_close_internal+0x23c>)
 8012448:	f00c fa2a 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012454:	2b10      	cmp	r3, #16
 8012456:	d006      	beq.n	8012466 <lwip_netconn_do_close_internal+0x3e>
 8012458:	4b80      	ldr	r3, [pc, #512]	@ (801265c <lwip_netconn_do_close_internal+0x234>)
 801245a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801245e:	4982      	ldr	r1, [pc, #520]	@ (8012668 <lwip_netconn_do_close_internal+0x240>)
 8012460:	4880      	ldr	r0, [pc, #512]	@ (8012664 <lwip_netconn_do_close_internal+0x23c>)
 8012462:	f00c fa1d 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	785b      	ldrb	r3, [r3, #1]
 801246a:	2b04      	cmp	r3, #4
 801246c:	d006      	beq.n	801247c <lwip_netconn_do_close_internal+0x54>
 801246e:	4b7b      	ldr	r3, [pc, #492]	@ (801265c <lwip_netconn_do_close_internal+0x234>)
 8012470:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012474:	497d      	ldr	r1, [pc, #500]	@ (801266c <lwip_netconn_do_close_internal+0x244>)
 8012476:	487b      	ldr	r0, [pc, #492]	@ (8012664 <lwip_netconn_do_close_internal+0x23c>)
 8012478:	f00c fa12 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d106      	bne.n	8012492 <lwip_netconn_do_close_internal+0x6a>
 8012484:	4b75      	ldr	r3, [pc, #468]	@ (801265c <lwip_netconn_do_close_internal+0x234>)
 8012486:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801248a:	4979      	ldr	r1, [pc, #484]	@ (8012670 <lwip_netconn_do_close_internal+0x248>)
 801248c:	4875      	ldr	r0, [pc, #468]	@ (8012664 <lwip_netconn_do_close_internal+0x23c>)
 801248e:	f00c fa07 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6a1b      	ldr	r3, [r3, #32]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <lwip_netconn_do_close_internal+0x80>
 801249a:	4b70      	ldr	r3, [pc, #448]	@ (801265c <lwip_netconn_do_close_internal+0x234>)
 801249c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80124a0:	4974      	ldr	r1, [pc, #464]	@ (8012674 <lwip_netconn_do_close_internal+0x24c>)
 80124a2:	4870      	ldr	r0, [pc, #448]	@ (8012664 <lwip_netconn_do_close_internal+0x23c>)
 80124a4:	f00c f9fc 	bl	801e8a0 <iprintf>

  tpcb = conn->pcb.tcp;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6a1b      	ldr	r3, [r3, #32]
 80124b2:	7a1b      	ldrb	r3, [r3, #8]
 80124b4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	f003 0301 	and.w	r3, r3, #1
 80124bc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80124be:	7bfb      	ldrb	r3, [r7, #15]
 80124c0:	f003 0302 	and.w	r3, r3, #2
 80124c4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	2b03      	cmp	r3, #3
 80124ca:	d102      	bne.n	80124d2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80124cc:	2301      	movs	r3, #1
 80124ce:	75bb      	strb	r3, [r7, #22]
 80124d0:	e01f      	b.n	8012512 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80124d2:	7bbb      	ldrb	r3, [r7, #14]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00e      	beq.n	80124f6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80124dc:	2b05      	cmp	r3, #5
 80124de:	d007      	beq.n	80124f0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80124e4:	2b06      	cmp	r3, #6
 80124e6:	d003      	beq.n	80124f0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80124ec:	2b08      	cmp	r3, #8
 80124ee:	d102      	bne.n	80124f6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80124f0:	2301      	movs	r3, #1
 80124f2:	75bb      	strb	r3, [r7, #22]
 80124f4:	e00d      	b.n	8012512 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80124f6:	7b7b      	ldrb	r3, [r7, #13]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d008      	beq.n	801250e <lwip_netconn_do_close_internal+0xe6>
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	8b5b      	ldrh	r3, [r3, #26]
 8012500:	f003 0310 	and.w	r3, r3, #16
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012508:	2301      	movs	r3, #1
 801250a:	75bb      	strb	r3, [r7, #22]
 801250c:	e001      	b.n	8012512 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012512:	7dbb      	ldrb	r3, [r7, #22]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d003      	beq.n	8012520 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012518:	2100      	movs	r1, #0
 801251a:	6938      	ldr	r0, [r7, #16]
 801251c:	f004 fb06 	bl	8016b2c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	7d1b      	ldrb	r3, [r3, #20]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d104      	bne.n	8012532 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012528:	2100      	movs	r1, #0
 801252a:	6938      	ldr	r0, [r7, #16]
 801252c:	f004 fb76 	bl	8016c1c <tcp_accept>
 8012530:	e01d      	b.n	801256e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012532:	7bbb      	ldrb	r3, [r7, #14]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d007      	beq.n	8012548 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012538:	2100      	movs	r1, #0
 801253a:	6938      	ldr	r0, [r7, #16]
 801253c:	f004 fb08 	bl	8016b50 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012540:	2100      	movs	r1, #0
 8012542:	6938      	ldr	r0, [r7, #16]
 8012544:	f004 fb6a 	bl	8016c1c <tcp_accept>
    }
    if (shut_tx) {
 8012548:	7b7b      	ldrb	r3, [r7, #13]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d003      	beq.n	8012556 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801254e:	2100      	movs	r1, #0
 8012550:	6938      	ldr	r0, [r7, #16]
 8012552:	f004 fb1f 	bl	8016b94 <tcp_sent>
    }
    if (shut_close) {
 8012556:	7dbb      	ldrb	r3, [r7, #22]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801255c:	2200      	movs	r2, #0
 801255e:	2100      	movs	r1, #0
 8012560:	6938      	ldr	r0, [r7, #16]
 8012562:	f004 fb73 	bl	8016c4c <tcp_poll>
      tcp_err(tpcb, NULL);
 8012566:	2100      	movs	r1, #0
 8012568:	6938      	ldr	r0, [r7, #16]
 801256a:	f004 fb35 	bl	8016bd8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801256e:	7dbb      	ldrb	r3, [r7, #22]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d005      	beq.n	8012580 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012574:	6938      	ldr	r0, [r7, #16]
 8012576:	f003 f8ff 	bl	8015778 <tcp_close>
 801257a:	4603      	mov	r3, r0
 801257c:	75fb      	strb	r3, [r7, #23]
 801257e:	e007      	b.n	8012590 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012580:	7bbb      	ldrb	r3, [r7, #14]
 8012582:	7b7a      	ldrb	r2, [r7, #13]
 8012584:	4619      	mov	r1, r3
 8012586:	6938      	ldr	r0, [r7, #16]
 8012588:	f003 f922 	bl	80157d0 <tcp_shutdown>
 801258c:	4603      	mov	r3, r0
 801258e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d102      	bne.n	801259e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012598:	2301      	movs	r3, #1
 801259a:	757b      	strb	r3, [r7, #21]
 801259c:	e016      	b.n	80125cc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801259e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a6:	d10f      	bne.n	80125c8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a1b      	ldr	r3, [r3, #32]
 80125ac:	7a5b      	ldrb	r3, [r3, #9]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d10c      	bne.n	80125cc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80125b2:	2301      	movs	r3, #1
 80125b4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80125b6:	7dbb      	ldrb	r3, [r7, #22]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d007      	beq.n	80125cc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80125bc:	6938      	ldr	r0, [r7, #16]
 80125be:	f003 fa21 	bl	8015a04 <tcp_abort>
          err = ERR_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	75fb      	strb	r3, [r7, #23]
 80125c6:	e001      	b.n	80125cc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80125c8:	2301      	movs	r3, #1
 80125ca:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80125cc:	7d7b      	ldrb	r3, [r7, #21]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d052      	beq.n	8012678 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6a1b      	ldr	r3, [r3, #32]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	330c      	adds	r3, #12
 80125da:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a1b      	ldr	r3, [r3, #32]
 80125e0:	7dfa      	ldrb	r2, [r7, #23]
 80125e2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80125f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d129      	bne.n	801264c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80125f8:	7dbb      	ldrb	r3, [r7, #22]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00c      	beq.n	8012618 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	d005      	beq.n	8012618 <lwip_netconn_do_close_internal+0x1f0>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012610:	2200      	movs	r2, #0
 8012612:	2104      	movs	r1, #4
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	4798      	blx	r3
      }
      if (shut_rx) {
 8012618:	7bbb      	ldrb	r3, [r7, #14]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d009      	beq.n	8012632 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012622:	2b00      	cmp	r3, #0
 8012624:	d005      	beq.n	8012632 <lwip_netconn_do_close_internal+0x20a>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801262a:	2200      	movs	r2, #0
 801262c:	2100      	movs	r1, #0
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	4798      	blx	r3
      }
      if (shut_tx) {
 8012632:	7b7b      	ldrb	r3, [r7, #13]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d009      	beq.n	801264c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801263c:	2b00      	cmp	r3, #0
 801263e:	d005      	beq.n	801264c <lwip_netconn_do_close_internal+0x224>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012644:	2200      	movs	r2, #0
 8012646:	2102      	movs	r1, #2
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801264c:	78fb      	ldrb	r3, [r7, #3]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d002      	beq.n	8012658 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	f00b ff70 	bl	801e538 <sys_sem_signal>
    }
    return ERR_OK;
 8012658:	2300      	movs	r3, #0
 801265a:	e03c      	b.n	80126d6 <lwip_netconn_do_close_internal+0x2ae>
 801265c:	0801fb9c 	.word	0x0801fb9c
 8012660:	0801fe70 	.word	0x0801fe70
 8012664:	0801fbe0 	.word	0x0801fbe0
 8012668:	0801fe80 	.word	0x0801fe80
 801266c:	0801fea0 	.word	0x0801fea0
 8012670:	0801fec4 	.word	0x0801fec4
 8012674:	0801fd04 	.word	0x0801fd04
  }
  if (!close_finished) {
 8012678:	7d7b      	ldrb	r3, [r7, #21]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d11e      	bne.n	80126bc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	7d1b      	ldrb	r3, [r3, #20]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d106      	bne.n	8012694 <lwip_netconn_do_close_internal+0x26c>
 8012686:	4b16      	ldr	r3, [pc, #88]	@ (80126e0 <lwip_netconn_do_close_internal+0x2b8>)
 8012688:	f240 4241 	movw	r2, #1089	@ 0x441
 801268c:	4915      	ldr	r1, [pc, #84]	@ (80126e4 <lwip_netconn_do_close_internal+0x2bc>)
 801268e:	4816      	ldr	r0, [pc, #88]	@ (80126e8 <lwip_netconn_do_close_internal+0x2c0>)
 8012690:	f00c f906 	bl	801e8a0 <iprintf>
    if (shut_tx) {
 8012694:	7b7b      	ldrb	r3, [r7, #13]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d003      	beq.n	80126a2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801269a:	4914      	ldr	r1, [pc, #80]	@ (80126ec <lwip_netconn_do_close_internal+0x2c4>)
 801269c:	6938      	ldr	r0, [r7, #16]
 801269e:	f004 fa79 	bl	8016b94 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80126a2:	2201      	movs	r2, #1
 80126a4:	4912      	ldr	r1, [pc, #72]	@ (80126f0 <lwip_netconn_do_close_internal+0x2c8>)
 80126a6:	6938      	ldr	r0, [r7, #16]
 80126a8:	f004 fad0 	bl	8016c4c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80126ac:	4911      	ldr	r1, [pc, #68]	@ (80126f4 <lwip_netconn_do_close_internal+0x2cc>)
 80126ae:	6938      	ldr	r0, [r7, #16]
 80126b0:	f004 fa92 	bl	8016bd8 <tcp_err>
    tcp_arg(tpcb, conn);
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	6938      	ldr	r0, [r7, #16]
 80126b8:	f004 fa38 	bl	8016b2c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80126bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d106      	bne.n	80126d2 <lwip_netconn_do_close_internal+0x2aa>
 80126c4:	4b06      	ldr	r3, [pc, #24]	@ (80126e0 <lwip_netconn_do_close_internal+0x2b8>)
 80126c6:	f240 424d 	movw	r2, #1101	@ 0x44d
 80126ca:	490b      	ldr	r1, [pc, #44]	@ (80126f8 <lwip_netconn_do_close_internal+0x2d0>)
 80126cc:	4806      	ldr	r0, [pc, #24]	@ (80126e8 <lwip_netconn_do_close_internal+0x2c0>)
 80126ce:	f00c f8e7 	bl	801e8a0 <iprintf>
  return err;
 80126d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3718      	adds	r7, #24
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	0801fb9c 	.word	0x0801fb9c
 80126e4:	0801fed8 	.word	0x0801fed8
 80126e8:	0801fbe0 	.word	0x0801fbe0
 80126ec:	08011c9d 	.word	0x08011c9d
 80126f0:	08011bd1 	.word	0x08011bd1
 80126f4:	08011d49 	.word	0x08011d49
 80126f8:	0801fefc 	.word	0x0801fefc

080126fc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	785b      	ldrb	r3, [r3, #1]
 801270e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00d      	beq.n	8012732 <lwip_netconn_do_delconn+0x36>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012720:	2b10      	cmp	r3, #16
 8012722:	d006      	beq.n	8012732 <lwip_netconn_do_delconn+0x36>
 8012724:	4b60      	ldr	r3, [pc, #384]	@ (80128a8 <lwip_netconn_do_delconn+0x1ac>)
 8012726:	f240 425e 	movw	r2, #1118	@ 0x45e
 801272a:	4960      	ldr	r1, [pc, #384]	@ (80128ac <lwip_netconn_do_delconn+0x1b0>)
 801272c:	4860      	ldr	r0, [pc, #384]	@ (80128b0 <lwip_netconn_do_delconn+0x1b4>)
 801272e:	f00c f8b7 	bl	801e8a0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012732:	7afb      	ldrb	r3, [r7, #11]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d005      	beq.n	8012744 <lwip_netconn_do_delconn+0x48>
 8012738:	7afb      	ldrb	r3, [r7, #11]
 801273a:	2b02      	cmp	r3, #2
 801273c:	d002      	beq.n	8012744 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801273e:	7afb      	ldrb	r3, [r7, #11]
 8012740:	2b03      	cmp	r3, #3
 8012742:	d109      	bne.n	8012758 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012744:	7afb      	ldrb	r3, [r7, #11]
 8012746:	2b03      	cmp	r3, #3
 8012748:	d10a      	bne.n	8012760 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	7f1b      	ldrb	r3, [r3, #28]
 8012750:	f003 0304 	and.w	r3, r3, #4
 8012754:	2b00      	cmp	r3, #0
 8012756:	d103      	bne.n	8012760 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	22fb      	movs	r2, #251	@ 0xfb
 801275c:	711a      	strb	r2, [r3, #4]
 801275e:	e097      	b.n	8012890 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012760:	7afb      	ldrb	r3, [r7, #11]
 8012762:	2b03      	cmp	r3, #3
 8012764:	d10d      	bne.n	8012782 <lwip_netconn_do_delconn+0x86>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	7f1b      	ldrb	r3, [r3, #28]
 801276c:	f003 0304 	and.w	r3, r3, #4
 8012770:	2b00      	cmp	r3, #0
 8012772:	d106      	bne.n	8012782 <lwip_netconn_do_delconn+0x86>
 8012774:	4b4c      	ldr	r3, [pc, #304]	@ (80128a8 <lwip_netconn_do_delconn+0x1ac>)
 8012776:	f240 427a 	movw	r2, #1146	@ 0x47a
 801277a:	494e      	ldr	r1, [pc, #312]	@ (80128b4 <lwip_netconn_do_delconn+0x1b8>)
 801277c:	484c      	ldr	r0, [pc, #304]	@ (80128b0 <lwip_netconn_do_delconn+0x1b4>)
 801277e:	f00c f88f 	bl	801e8a0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2200      	movs	r2, #0
 8012786:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4618      	mov	r0, r3
 801278e:	f7ff fdcd 	bl	801232c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d05f      	beq.n	801285c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127a6:	2b10      	cmp	r3, #16
 80127a8:	d00d      	beq.n	80127c6 <lwip_netconn_do_delconn+0xca>
 80127aa:	2b20      	cmp	r3, #32
 80127ac:	d151      	bne.n	8012852 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	4618      	mov	r0, r3
 80127c0:	f009 fa36 	bl	801bc30 <udp_remove>
          break;
 80127c4:	e046      	b.n	8012854 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d006      	beq.n	80127de <lwip_netconn_do_delconn+0xe2>
 80127d0:	4b35      	ldr	r3, [pc, #212]	@ (80128a8 <lwip_netconn_do_delconn+0x1ac>)
 80127d2:	f240 4294 	movw	r2, #1172	@ 0x494
 80127d6:	4938      	ldr	r1, [pc, #224]	@ (80128b8 <lwip_netconn_do_delconn+0x1bc>)
 80127d8:	4835      	ldr	r0, [pc, #212]	@ (80128b0 <lwip_netconn_do_delconn+0x1b4>)
 80127da:	f00c f861 	bl	801e8a0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2204      	movs	r2, #4
 80127e4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2203      	movs	r2, #3
 80127ea:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2100      	movs	r1, #0
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ff fe14 	bl	8012428 <lwip_netconn_do_close_internal>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d04b      	beq.n	801289e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	785b      	ldrb	r3, [r3, #1]
 801280c:	2b04      	cmp	r3, #4
 801280e:	d006      	beq.n	801281e <lwip_netconn_do_delconn+0x122>
 8012810:	4b25      	ldr	r3, [pc, #148]	@ (80128a8 <lwip_netconn_do_delconn+0x1ac>)
 8012812:	f240 429a 	movw	r2, #1178	@ 0x49a
 8012816:	4929      	ldr	r1, [pc, #164]	@ (80128bc <lwip_netconn_do_delconn+0x1c0>)
 8012818:	4825      	ldr	r0, [pc, #148]	@ (80128b0 <lwip_netconn_do_delconn+0x1b4>)
 801281a:	f00c f841 	bl	801e8a0 <iprintf>
            UNLOCK_TCPIP_CORE();
 801281e:	4828      	ldr	r0, [pc, #160]	@ (80128c0 <lwip_netconn_do_delconn+0x1c4>)
 8012820:	f00b fef3 	bl	801e60a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	330c      	adds	r3, #12
 801282a:	2100      	movs	r1, #0
 801282c:	4618      	mov	r0, r3
 801282e:	f00b fe52 	bl	801e4d6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012832:	4823      	ldr	r0, [pc, #140]	@ (80128c0 <lwip_netconn_do_delconn+0x1c4>)
 8012834:	f00b feda 	bl	801e5ec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	785b      	ldrb	r3, [r3, #1]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d02d      	beq.n	801289e <lwip_netconn_do_delconn+0x1a2>
 8012842:	4b19      	ldr	r3, [pc, #100]	@ (80128a8 <lwip_netconn_do_delconn+0x1ac>)
 8012844:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012848:	491c      	ldr	r1, [pc, #112]	@ (80128bc <lwip_netconn_do_delconn+0x1c0>)
 801284a:	4819      	ldr	r0, [pc, #100]	@ (80128b0 <lwip_netconn_do_delconn+0x1b4>)
 801284c:	f00c f828 	bl	801e8a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012850:	e025      	b.n	801289e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012852:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2200      	movs	r2, #0
 801285a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012862:	2b00      	cmp	r3, #0
 8012864:	d007      	beq.n	8012876 <lwip_netconn_do_delconn+0x17a>
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	6810      	ldr	r0, [r2, #0]
 8012870:	2200      	movs	r2, #0
 8012872:	2100      	movs	r1, #0
 8012874:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801287c:	2b00      	cmp	r3, #0
 801287e:	d007      	beq.n	8012890 <lwip_netconn_do_delconn+0x194>
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012886:	68fa      	ldr	r2, [r7, #12]
 8012888:	6810      	ldr	r0, [r2, #0]
 801288a:	2200      	movs	r2, #0
 801288c:	2102      	movs	r1, #2
 801288e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	330c      	adds	r3, #12
 8012896:	4618      	mov	r0, r3
 8012898:	f00b fe68 	bl	801e56c <sys_sem_valid>
 801289c:	e000      	b.n	80128a0 <lwip_netconn_do_delconn+0x1a4>
          return;
 801289e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	0801fb9c 	.word	0x0801fb9c
 80128ac:	0801ff0c 	.word	0x0801ff0c
 80128b0:	0801fbe0 	.word	0x0801fbe0
 80128b4:	0801ff20 	.word	0x0801ff20
 80128b8:	0801ff40 	.word	0x0801ff40
 80128bc:	0801ff5c 	.word	0x0801ff5c
 80128c0:	24005390 	.word	0x24005390

080128c4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d025      	beq.n	8012926 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128e4:	2b10      	cmp	r3, #16
 80128e6:	d00e      	beq.n	8012906 <lwip_netconn_do_bind+0x42>
 80128e8:	2b20      	cmp	r3, #32
 80128ea:	d119      	bne.n	8012920 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	6858      	ldr	r0, [r3, #4]
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	6899      	ldr	r1, [r3, #8]
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	899b      	ldrh	r3, [r3, #12]
 80128fa:	461a      	mov	r2, r3
 80128fc:	f009 f8f0 	bl	801bae0 <udp_bind>
 8012900:	4603      	mov	r3, r0
 8012902:	73fb      	strb	r3, [r7, #15]
        break;
 8012904:	e011      	b.n	801292a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	6858      	ldr	r0, [r3, #4]
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	6899      	ldr	r1, [r3, #8]
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	899b      	ldrh	r3, [r3, #12]
 8012914:	461a      	mov	r2, r3
 8012916:	f003 f881 	bl	8015a1c <tcp_bind>
 801291a:	4603      	mov	r3, r0
 801291c:	73fb      	strb	r3, [r7, #15]
        break;
 801291e:	e004      	b.n	801292a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012920:	23fa      	movs	r3, #250	@ 0xfa
 8012922:	73fb      	strb	r3, [r7, #15]
        break;
 8012924:	e001      	b.n	801292a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012926:	23fa      	movs	r3, #250	@ 0xfa
 8012928:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	7bfa      	ldrb	r2, [r7, #15]
 801292e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012930:	bf00      	nop
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b086      	sub	sp, #24
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d07f      	beq.n	8012a4e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012958:	2b10      	cmp	r3, #16
 801295a:	d175      	bne.n	8012a48 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	785b      	ldrb	r3, [r3, #1]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d165      	bne.n	8012a32 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	7d1b      	ldrb	r3, [r3, #20]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8012972:	23fa      	movs	r3, #250	@ 0xfa
 8012974:	72fb      	strb	r3, [r7, #11]
 8012976:	e06c      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8012978:	23ff      	movs	r3, #255	@ 0xff
 801297a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	f107 020b 	add.w	r2, r7, #11
 8012986:	7cf9      	ldrb	r1, [r7, #19]
 8012988:	4618      	mov	r0, r3
 801298a:	f003 f8ff 	bl	8015b8c <tcp_listen_with_backlog_and_err>
 801298e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d05d      	beq.n	8012a52 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	3310      	adds	r3, #16
 801299c:	4618      	mov	r0, r3
 801299e:	f00b fd57 	bl	801e450 <sys_mbox_valid>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00b      	beq.n	80129c0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	3310      	adds	r3, #16
 80129ae:	4618      	mov	r0, r3
 80129b0:	f00b fcda 	bl	801e368 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	3310      	adds	r3, #16
 80129ba:	4618      	mov	r0, r3
 80129bc:	f00b fd59 	bl	801e472 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80129c0:	2300      	movs	r3, #0
 80129c2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	3314      	adds	r3, #20
 80129ca:	4618      	mov	r0, r3
 80129cc:	f00b fd40 	bl	801e450 <sys_mbox_valid>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d108      	bne.n	80129e8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	3314      	adds	r3, #20
 80129dc:	2106      	movs	r1, #6
 80129de:	4618      	mov	r0, r3
 80129e0:	f00b fca8 	bl	801e334 <sys_mbox_new>
 80129e4:	4603      	mov	r3, r0
 80129e6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80129e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d118      	bne.n	8012a22 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2202      	movs	r2, #2
 80129f6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	685a      	ldr	r2, [r3, #4]
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	f004 f88d 	bl	8016b2c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	4912      	ldr	r1, [pc, #72]	@ (8012a64 <lwip_netconn_do_listen+0x12c>)
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f004 f8fe 	bl	8016c1c <tcp_accept>
 8012a20:	e017      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8012a22:	68f8      	ldr	r0, [r7, #12]
 8012a24:	f002 fea8 	bl	8015778 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	605a      	str	r2, [r3, #4]
 8012a30:	e00f      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	785b      	ldrb	r3, [r3, #1]
 8012a38:	2b02      	cmp	r3, #2
 8012a3a:	d102      	bne.n	8012a42 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	72fb      	strb	r3, [r7, #11]
 8012a40:	e007      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8012a42:	23f5      	movs	r3, #245	@ 0xf5
 8012a44:	72fb      	strb	r3, [r7, #11]
 8012a46:	e004      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8012a48:	23f0      	movs	r3, #240	@ 0xf0
 8012a4a:	72fb      	strb	r3, [r7, #11]
 8012a4c:	e001      	b.n	8012a52 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8012a4e:	23f5      	movs	r3, #245	@ 0xf5
 8012a50:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8012a52:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012a5a:	bf00      	nop
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	08011f45 	.word	0x08011f45

08012a68 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2200      	movs	r2, #0
 8012a78:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d022      	beq.n	8012aca <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012a8e:	2b10      	cmp	r3, #16
 8012a90:	d11b      	bne.n	8012aca <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a9e:	d202      	bcs.n	8012aa6 <lwip_netconn_do_recv+0x3e>
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	e001      	b.n	8012aaa <lwip_netconn_do_recv+0x42>
 8012aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012aaa:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	89fa      	ldrh	r2, [r7, #14]
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f003 f96c 	bl	8015d94 <tcp_recved>
        remaining -= recved;
 8012abc:	89fb      	ldrh	r3, [r7, #14]
 8012abe:	697a      	ldr	r2, [r7, #20]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d1e6      	bne.n	8012a98 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012aca:	bf00      	nop
 8012acc:	3718      	adds	r7, #24
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
	...

08012ad4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	460b      	mov	r3, r1
 8012ade:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d106      	bne.n	8012af8 <lwip_netconn_do_writemore+0x24>
 8012aea:	4b96      	ldr	r3, [pc, #600]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012aec:	f240 6273 	movw	r2, #1651	@ 0x673
 8012af0:	4995      	ldr	r1, [pc, #596]	@ (8012d48 <lwip_netconn_do_writemore+0x274>)
 8012af2:	4896      	ldr	r0, [pc, #600]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012af4:	f00b fed4 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	785b      	ldrb	r3, [r3, #1]
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d006      	beq.n	8012b0e <lwip_netconn_do_writemore+0x3a>
 8012b00:	4b90      	ldr	r3, [pc, #576]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012b02:	f240 6274 	movw	r2, #1652	@ 0x674
 8012b06:	4992      	ldr	r1, [pc, #584]	@ (8012d50 <lwip_netconn_do_writemore+0x27c>)
 8012b08:	4890      	ldr	r0, [pc, #576]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012b0a:	f00b fec9 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6a1b      	ldr	r3, [r3, #32]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d106      	bne.n	8012b24 <lwip_netconn_do_writemore+0x50>
 8012b16:	4b8b      	ldr	r3, [pc, #556]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012b18:	f240 6275 	movw	r2, #1653	@ 0x675
 8012b1c:	498d      	ldr	r1, [pc, #564]	@ (8012d54 <lwip_netconn_do_writemore+0x280>)
 8012b1e:	488b      	ldr	r0, [pc, #556]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012b20:	f00b febe 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d106      	bne.n	8012b3a <lwip_netconn_do_writemore+0x66>
 8012b2c:	4b85      	ldr	r3, [pc, #532]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012b2e:	f240 6276 	movw	r2, #1654	@ 0x676
 8012b32:	4989      	ldr	r1, [pc, #548]	@ (8012d58 <lwip_netconn_do_writemore+0x284>)
 8012b34:	4885      	ldr	r0, [pc, #532]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012b36:	f00b feb3 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6a1b      	ldr	r3, [r3, #32]
 8012b3e:	699a      	ldr	r2, [r3, #24]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a1b      	ldr	r3, [r3, #32]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d306      	bcc.n	8012b58 <lwip_netconn_do_writemore+0x84>
 8012b4a:	4b7e      	ldr	r3, [pc, #504]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012b4c:	f240 6277 	movw	r2, #1655	@ 0x677
 8012b50:	4982      	ldr	r1, [pc, #520]	@ (8012d5c <lwip_netconn_do_writemore+0x288>)
 8012b52:	487e      	ldr	r0, [pc, #504]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012b54:	f00b fea4 	bl	801e8a0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a1b      	ldr	r3, [r3, #32]
 8012b5c:	899b      	ldrh	r3, [r3, #12]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d106      	bne.n	8012b70 <lwip_netconn_do_writemore+0x9c>
 8012b62:	4b78      	ldr	r3, [pc, #480]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012b64:	f240 6279 	movw	r2, #1657	@ 0x679
 8012b68:	497d      	ldr	r1, [pc, #500]	@ (8012d60 <lwip_netconn_do_writemore+0x28c>)
 8012b6a:	4878      	ldr	r0, [pc, #480]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012b6c:	f00b fe98 	bl	801e8a0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6a1b      	ldr	r3, [r3, #32]
 8012b74:	7f1b      	ldrb	r3, [r3, #28]
 8012b76:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	7f1b      	ldrb	r3, [r3, #28]
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d104      	bne.n	8012b8e <lwip_netconn_do_writemore+0xba>
 8012b84:	7ebb      	ldrb	r3, [r7, #26]
 8012b86:	f003 0304 	and.w	r3, r3, #4
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d001      	beq.n	8012b92 <lwip_netconn_do_writemore+0xbe>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e000      	b.n	8012b94 <lwip_netconn_do_writemore+0xc0>
 8012b92:	2300      	movs	r3, #0
 8012b94:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6a1b      	ldr	r3, [r3, #32]
 8012b9a:	689b      	ldr	r3, [r3, #8]
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6a1b      	ldr	r3, [r3, #32]
 8012ba2:	691b      	ldr	r3, [r3, #16]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6a1b      	ldr	r3, [r3, #32]
 8012bac:	689b      	ldr	r3, [r3, #8]
 8012bae:	685a      	ldr	r2, [r3, #4]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6a1b      	ldr	r3, [r3, #32]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bc0:	d307      	bcc.n	8012bd2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012bc6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012bc8:	7ebb      	ldrb	r3, [r7, #26]
 8012bca:	f043 0302 	orr.w	r3, r3, #2
 8012bce:	76bb      	strb	r3, [r7, #26]
 8012bd0:	e001      	b.n	8012bd6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012bde:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012be0:	89fa      	ldrh	r2, [r7, #14]
 8012be2:	8bbb      	ldrh	r3, [r7, #28]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d216      	bcs.n	8012c16 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012be8:	89fb      	ldrh	r3, [r7, #14]
 8012bea:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012bec:	7e3b      	ldrb	r3, [r7, #24]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00d      	beq.n	8012c0e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012bf2:	8bbb      	ldrh	r3, [r7, #28]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d10e      	bne.n	8012c16 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6a1b      	ldr	r3, [r3, #32]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <lwip_netconn_do_writemore+0x134>
 8012c02:	f06f 0306 	mvn.w	r3, #6
 8012c06:	e000      	b.n	8012c0a <lwip_netconn_do_writemore+0x136>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012c0c:	e07d      	b.n	8012d0a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012c0e:	7ebb      	ldrb	r3, [r7, #26]
 8012c10:	f043 0302 	orr.w	r3, r3, #2
 8012c14:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a1b      	ldr	r3, [r3, #32]
 8012c1a:	691a      	ldr	r2, [r3, #16]
 8012c1c:	8bbb      	ldrh	r3, [r7, #28]
 8012c1e:	441a      	add	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a1b      	ldr	r3, [r3, #32]
 8012c24:	689b      	ldr	r3, [r3, #8]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d906      	bls.n	8012c3a <lwip_netconn_do_writemore+0x166>
 8012c2c:	4b45      	ldr	r3, [pc, #276]	@ (8012d44 <lwip_netconn_do_writemore+0x270>)
 8012c2e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012c32:	494c      	ldr	r1, [pc, #304]	@ (8012d64 <lwip_netconn_do_writemore+0x290>)
 8012c34:	4845      	ldr	r0, [pc, #276]	@ (8012d4c <lwip_netconn_do_writemore+0x278>)
 8012c36:	f00b fe33 	bl	801e8a0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012c3a:	8bbb      	ldrh	r3, [r7, #28]
 8012c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d103      	bne.n	8012c4c <lwip_netconn_do_writemore+0x178>
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c4a:	d209      	bcs.n	8012c60 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012c50:	8bba      	ldrh	r2, [r7, #28]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d10b      	bne.n	8012c6e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6a1b      	ldr	r3, [r3, #32]
 8012c5a:	899b      	ldrh	r3, [r3, #12]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d906      	bls.n	8012c6e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012c60:	2301      	movs	r3, #1
 8012c62:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012c64:	7ebb      	ldrb	r3, [r7, #26]
 8012c66:	f043 0302 	orr.w	r3, r3, #2
 8012c6a:	76bb      	strb	r3, [r7, #26]
 8012c6c:	e001      	b.n	8012c72 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6858      	ldr	r0, [r3, #4]
 8012c76:	7ebb      	ldrb	r3, [r7, #26]
 8012c78:	8bba      	ldrh	r2, [r7, #28]
 8012c7a:	6979      	ldr	r1, [r7, #20]
 8012c7c:	f006 fe94 	bl	80199a8 <tcp_write>
 8012c80:	4603      	mov	r3, r0
 8012c82:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d12c      	bne.n	8012ce6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6a1b      	ldr	r3, [r3, #32]
 8012c90:	6999      	ldr	r1, [r3, #24]
 8012c92:	8bba      	ldrh	r2, [r7, #28]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6a1b      	ldr	r3, [r3, #32]
 8012c98:	440a      	add	r2, r1
 8012c9a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6a1b      	ldr	r3, [r3, #32]
 8012ca0:	6919      	ldr	r1, [r3, #16]
 8012ca2:	8bba      	ldrh	r2, [r7, #28]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6a1b      	ldr	r3, [r3, #32]
 8012ca8:	440a      	add	r2, r1
 8012caa:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6a1b      	ldr	r3, [r3, #32]
 8012cb0:	691a      	ldr	r2, [r3, #16]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6a1b      	ldr	r3, [r3, #32]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d113      	bne.n	8012ce6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6a1b      	ldr	r3, [r3, #32]
 8012cc2:	899a      	ldrh	r2, [r3, #12]
 8012cc4:	3a01      	subs	r2, #1
 8012cc6:	b292      	uxth	r2, r2
 8012cc8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6a1b      	ldr	r3, [r3, #32]
 8012cce:	899b      	ldrh	r3, [r3, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d008      	beq.n	8012ce6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6a1b      	ldr	r3, [r3, #32]
 8012cd8:	689a      	ldr	r2, [r3, #8]
 8012cda:	3208      	adds	r2, #8
 8012cdc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6a1b      	ldr	r3, [r3, #32]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012ce6:	7e7b      	ldrb	r3, [r7, #25]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d004      	beq.n	8012cf6 <lwip_netconn_do_writemore+0x222>
 8012cec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	f43f af50 	beq.w	8012b96 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012cf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d004      	beq.n	8012d08 <lwip_netconn_do_writemore+0x234>
 8012cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d06:	d147      	bne.n	8012d98 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8012d08:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012d0a:	7e3b      	ldrb	r3, [r7, #24]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d02b      	beq.n	8012d68 <lwip_netconn_do_writemore+0x294>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6a1b      	ldr	r3, [r3, #32]
 8012d14:	699a      	ldr	r2, [r3, #24]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6a1b      	ldr	r3, [r3, #32]
 8012d1a:	695b      	ldr	r3, [r3, #20]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d223      	bcs.n	8012d68 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d005      	beq.n	8012d34 <lwip_netconn_do_writemore+0x260>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	2103      	movs	r1, #3
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	7f1b      	ldrb	r3, [r3, #28]
 8012d38:	f043 0310 	orr.w	r3, r3, #16
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	771a      	strb	r2, [r3, #28]
 8012d42:	e029      	b.n	8012d98 <lwip_netconn_do_writemore+0x2c4>
 8012d44:	0801fb9c 	.word	0x0801fb9c
 8012d48:	0801fcf4 	.word	0x0801fcf4
 8012d4c:	0801fbe0 	.word	0x0801fbe0
 8012d50:	0801fffc 	.word	0x0801fffc
 8012d54:	0801fd04 	.word	0x0801fd04
 8012d58:	0802001c 	.word	0x0802001c
 8012d5c:	08020034 	.word	0x08020034
 8012d60:	08020074 	.word	0x08020074
 8012d64:	0802009c 	.word	0x0802009c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012d70:	f640 3269 	movw	r2, #2921	@ 0xb69
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d905      	bls.n	8012d84 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012d80:	2b07      	cmp	r3, #7
 8012d82:	d909      	bls.n	8012d98 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d005      	beq.n	8012d98 <lwip_netconn_do_writemore+0x2c4>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d90:	2200      	movs	r2, #0
 8012d92:	2103      	movs	r1, #3
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012d98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d11d      	bne.n	8012ddc <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6a1b      	ldr	r3, [r3, #32]
 8012da4:	699a      	ldr	r2, [r3, #24]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6a1b      	ldr	r3, [r3, #32]
 8012daa:	695b      	ldr	r3, [r3, #20]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d002      	beq.n	8012db6 <lwip_netconn_do_writemore+0x2e2>
 8012db0:	7e3b      	ldrb	r3, [r7, #24]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012db6:	2301      	movs	r3, #1
 8012db8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f007 fbdc 	bl	801a57c <tcp_output>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012dc8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012dcc:	f113 0f04 	cmn.w	r3, #4
 8012dd0:	d12c      	bne.n	8012e2c <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012dd2:	7b3b      	ldrb	r3, [r7, #12]
 8012dd4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	76fb      	strb	r3, [r7, #27]
 8012dda:	e027      	b.n	8012e2c <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8012ddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012de4:	d120      	bne.n	8012e28 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f007 fbc6 	bl	801a57c <tcp_output>
 8012df0:	4603      	mov	r3, r0
 8012df2:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012df4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012df8:	f113 0f04 	cmn.w	r3, #4
 8012dfc:	d104      	bne.n	8012e08 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012dfe:	7b7b      	ldrb	r3, [r7, #13]
 8012e00:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012e02:	2301      	movs	r3, #1
 8012e04:	76fb      	strb	r3, [r7, #27]
 8012e06:	e011      	b.n	8012e2c <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8012e08:	7e3b      	ldrb	r3, [r7, #24]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00e      	beq.n	8012e2c <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6a1b      	ldr	r3, [r3, #32]
 8012e12:	699b      	ldr	r3, [r3, #24]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d102      	bne.n	8012e1e <lwip_netconn_do_writemore+0x34a>
 8012e18:	f06f 0306 	mvn.w	r3, #6
 8012e1c:	e000      	b.n	8012e20 <lwip_netconn_do_writemore+0x34c>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012e22:	2301      	movs	r3, #1
 8012e24:	76fb      	strb	r3, [r7, #27]
 8012e26:	e001      	b.n	8012e2c <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012e2c:	7efb      	ldrb	r3, [r7, #27]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d015      	beq.n	8012e5e <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	330c      	adds	r3, #12
 8012e3a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a1b      	ldr	r3, [r3, #32]
 8012e40:	7ffa      	ldrb	r2, [r7, #31]
 8012e42:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012e50:	78fb      	ldrb	r3, [r7, #3]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d006      	beq.n	8012e64 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012e56:	68b8      	ldr	r0, [r7, #8]
 8012e58:	f00b fb6e 	bl	801e538 <sys_sem_signal>
 8012e5c:	e002      	b.n	8012e64 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e62:	e000      	b.n	8012e66 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3720      	adds	r7, #32
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop

08012e70 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fe fd16 	bl	80118b2 <netconn_err>
 8012e86:	4603      	mov	r3, r0
 8012e88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d166      	bne.n	8012f60 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e9c:	2b10      	cmp	r3, #16
 8012e9e:	d15d      	bne.n	8012f5c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	785b      	ldrb	r3, [r3, #1]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d002      	beq.n	8012eb0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8012eaa:	23fb      	movs	r3, #251	@ 0xfb
 8012eac:	73fb      	strb	r3, [r7, #15]
 8012eae:	e057      	b.n	8012f60 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d04d      	beq.n	8012f56 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	6a1b      	ldr	r3, [r3, #32]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d006      	beq.n	8012eda <lwip_netconn_do_write+0x6a>
 8012ecc:	4b28      	ldr	r3, [pc, #160]	@ (8012f70 <lwip_netconn_do_write+0x100>)
 8012ece:	f240 7223 	movw	r2, #1827	@ 0x723
 8012ed2:	4928      	ldr	r1, [pc, #160]	@ (8012f74 <lwip_netconn_do_write+0x104>)
 8012ed4:	4828      	ldr	r0, [pc, #160]	@ (8012f78 <lwip_netconn_do_write+0x108>)
 8012ed6:	f00b fce3 	bl	801e8a0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	695b      	ldr	r3, [r3, #20]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <lwip_netconn_do_write+0x80>
 8012ee2:	4b23      	ldr	r3, [pc, #140]	@ (8012f70 <lwip_netconn_do_write+0x100>)
 8012ee4:	f240 7224 	movw	r2, #1828	@ 0x724
 8012ee8:	4924      	ldr	r1, [pc, #144]	@ (8012f7c <lwip_netconn_do_write+0x10c>)
 8012eea:	4823      	ldr	r0, [pc, #140]	@ (8012f78 <lwip_netconn_do_write+0x108>)
 8012eec:	f00b fcd8 	bl	801e8a0 <iprintf>
        msg->conn->current_msg = msg;
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	68ba      	ldr	r2, [r7, #8]
 8012ef6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	2100      	movs	r1, #0
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff fde8 	bl	8012ad4 <lwip_netconn_do_writemore>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d02e      	beq.n	8012f68 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	785b      	ldrb	r3, [r3, #1]
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d006      	beq.n	8012f22 <lwip_netconn_do_write+0xb2>
 8012f14:	4b16      	ldr	r3, [pc, #88]	@ (8012f70 <lwip_netconn_do_write+0x100>)
 8012f16:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8012f1a:	4919      	ldr	r1, [pc, #100]	@ (8012f80 <lwip_netconn_do_write+0x110>)
 8012f1c:	4816      	ldr	r0, [pc, #88]	@ (8012f78 <lwip_netconn_do_write+0x108>)
 8012f1e:	f00b fcbf 	bl	801e8a0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8012f22:	4818      	ldr	r0, [pc, #96]	@ (8012f84 <lwip_netconn_do_write+0x114>)
 8012f24:	f00b fb71 	bl	801e60a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	330c      	adds	r3, #12
 8012f2e:	2100      	movs	r1, #0
 8012f30:	4618      	mov	r0, r3
 8012f32:	f00b fad0 	bl	801e4d6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8012f36:	4813      	ldr	r0, [pc, #76]	@ (8012f84 <lwip_netconn_do_write+0x114>)
 8012f38:	f00b fb58 	bl	801e5ec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	785b      	ldrb	r3, [r3, #1]
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d110      	bne.n	8012f68 <lwip_netconn_do_write+0xf8>
 8012f46:	4b0a      	ldr	r3, [pc, #40]	@ (8012f70 <lwip_netconn_do_write+0x100>)
 8012f48:	f240 722c 	movw	r2, #1836	@ 0x72c
 8012f4c:	490c      	ldr	r1, [pc, #48]	@ (8012f80 <lwip_netconn_do_write+0x110>)
 8012f4e:	480a      	ldr	r0, [pc, #40]	@ (8012f78 <lwip_netconn_do_write+0x108>)
 8012f50:	f00b fca6 	bl	801e8a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8012f54:	e008      	b.n	8012f68 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8012f56:	23f5      	movs	r3, #245	@ 0xf5
 8012f58:	73fb      	strb	r3, [r7, #15]
 8012f5a:	e001      	b.n	8012f60 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8012f5c:	23fa      	movs	r3, #250	@ 0xfa
 8012f5e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	7bfa      	ldrb	r2, [r7, #15]
 8012f64:	711a      	strb	r2, [r3, #4]
 8012f66:	e000      	b.n	8012f6a <lwip_netconn_do_write+0xfa>
        return;
 8012f68:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8012f6a:	3710      	adds	r7, #16
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	0801fb9c 	.word	0x0801fb9c
 8012f74:	0801ff40 	.word	0x0801ff40
 8012f78:	0801fbe0 	.word	0x0801fbe0
 8012f7c:	080200c8 	.word	0x080200c8
 8012f80:	0801ff5c 	.word	0x0801ff5c
 8012f84:	24005390 	.word	0x24005390

08012f88 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	785b      	ldrb	r3, [r3, #1]
 8012f9a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d069      	beq.n	801307a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012fb0:	2b10      	cmp	r3, #16
 8012fb2:	d162      	bne.n	801307a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012fb8:	2b03      	cmp	r3, #3
 8012fba:	d002      	beq.n	8012fc2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012fbc:	7afb      	ldrb	r3, [r7, #11]
 8012fbe:	2b02      	cmp	r3, #2
 8012fc0:	d05b      	beq.n	801307a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012fc2:	7afb      	ldrb	r3, [r7, #11]
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	d103      	bne.n	8012fd0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	22f5      	movs	r2, #245	@ 0xf5
 8012fcc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012fce:	e059      	b.n	8013084 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012fd0:	7afb      	ldrb	r3, [r7, #11]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d103      	bne.n	8012fde <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	22fb      	movs	r2, #251	@ 0xfb
 8012fda:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012fdc:	e052      	b.n	8013084 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	7a1b      	ldrb	r3, [r3, #8]
 8012fe2:	f003 0301 	and.w	r3, r3, #1
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d004      	beq.n	8012ff4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ff f99c 	bl	801232c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	6a1b      	ldr	r3, [r3, #32]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d006      	beq.n	801300c <lwip_netconn_do_close+0x84>
 8012ffe:	4b23      	ldr	r3, [pc, #140]	@ (801308c <lwip_netconn_do_close+0x104>)
 8013000:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8013004:	4922      	ldr	r1, [pc, #136]	@ (8013090 <lwip_netconn_do_close+0x108>)
 8013006:	4823      	ldr	r0, [pc, #140]	@ (8013094 <lwip_netconn_do_close+0x10c>)
 8013008:	f00b fc4a 	bl	801e8a0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2204      	movs	r2, #4
 8013012:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2100      	movs	r1, #0
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff fa00 	bl	8012428 <lwip_netconn_do_close_internal>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d029      	beq.n	8013082 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	785b      	ldrb	r3, [r3, #1]
 8013034:	2b04      	cmp	r3, #4
 8013036:	d006      	beq.n	8013046 <lwip_netconn_do_close+0xbe>
 8013038:	4b14      	ldr	r3, [pc, #80]	@ (801308c <lwip_netconn_do_close+0x104>)
 801303a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 801303e:	4916      	ldr	r1, [pc, #88]	@ (8013098 <lwip_netconn_do_close+0x110>)
 8013040:	4814      	ldr	r0, [pc, #80]	@ (8013094 <lwip_netconn_do_close+0x10c>)
 8013042:	f00b fc2d 	bl	801e8a0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8013046:	4815      	ldr	r0, [pc, #84]	@ (801309c <lwip_netconn_do_close+0x114>)
 8013048:	f00b fadf 	bl	801e60a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	330c      	adds	r3, #12
 8013052:	2100      	movs	r1, #0
 8013054:	4618      	mov	r0, r3
 8013056:	f00b fa3e 	bl	801e4d6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801305a:	4810      	ldr	r0, [pc, #64]	@ (801309c <lwip_netconn_do_close+0x114>)
 801305c:	f00b fac6 	bl	801e5ec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	785b      	ldrb	r3, [r3, #1]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00b      	beq.n	8013082 <lwip_netconn_do_close+0xfa>
 801306a:	4b08      	ldr	r3, [pc, #32]	@ (801308c <lwip_netconn_do_close+0x104>)
 801306c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8013070:	4909      	ldr	r1, [pc, #36]	@ (8013098 <lwip_netconn_do_close+0x110>)
 8013072:	4808      	ldr	r0, [pc, #32]	@ (8013094 <lwip_netconn_do_close+0x10c>)
 8013074:	f00b fc14 	bl	801e8a0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013078:	e003      	b.n	8013082 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	22f5      	movs	r2, #245	@ 0xf5
 801307e:	711a      	strb	r2, [r3, #4]
 8013080:	e000      	b.n	8013084 <lwip_netconn_do_close+0xfc>
      return;
 8013082:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	0801fb9c 	.word	0x0801fb9c
 8013090:	0801ff40 	.word	0x0801ff40
 8013094:	0801fbe0 	.word	0x0801fbe0
 8013098:	0801ff5c 	.word	0x0801ff5c
 801309c:	24005390 	.word	0x24005390

080130a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d013      	beq.n	80130d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00b      	beq.n	80130ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4618      	mov	r0, r3
 80130bc:	f001 feb2 	bl	8014e24 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	605a      	str	r2, [r3, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	685a      	ldr	r2, [r3, #4]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	2006      	movs	r0, #6
 80130d2:	f001 f803 	bl	80140dc <memp_free>
  }
}
 80130d6:	bf00      	nop
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
	...

080130e0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d108      	bne.n	8013100 <netbuf_next+0x20>
 80130ee:	4b11      	ldr	r3, [pc, #68]	@ (8013134 <netbuf_next+0x54>)
 80130f0:	22e0      	movs	r2, #224	@ 0xe0
 80130f2:	4911      	ldr	r1, [pc, #68]	@ (8013138 <netbuf_next+0x58>)
 80130f4:	4811      	ldr	r0, [pc, #68]	@ (801313c <netbuf_next+0x5c>)
 80130f6:	f00b fbd3 	bl	801e8a0 <iprintf>
 80130fa:	f04f 33ff 	mov.w	r3, #4294967295
 80130fe:	e014      	b.n	801312a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d102      	bne.n	8013110 <netbuf_next+0x30>
    return -1;
 801310a:	f04f 33ff 	mov.w	r3, #4294967295
 801310e:	e00c      	b.n	801312a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d101      	bne.n	8013128 <netbuf_next+0x48>
    return 1;
 8013124:	2301      	movs	r3, #1
 8013126:	e000      	b.n	801312a <netbuf_next+0x4a>
  }
  return 0;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3708      	adds	r7, #8
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	080200f4 	.word	0x080200f4
 8013138:	08020254 	.word	0x08020254
 801313c:	08020144 	.word	0x08020144

08013140 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801314a:	f008 facf 	bl	801b6ec <sys_timeouts_sleeptime>
 801314e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013156:	d10b      	bne.n	8013170 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013158:	4813      	ldr	r0, [pc, #76]	@ (80131a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801315a:	f00b fa56 	bl	801e60a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801315e:	2200      	movs	r2, #0
 8013160:	6839      	ldr	r1, [r7, #0]
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f00b f92c 	bl	801e3c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013168:	480f      	ldr	r0, [pc, #60]	@ (80131a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801316a:	f00b fa3f 	bl	801e5ec <sys_mutex_lock>
    return;
 801316e:	e018      	b.n	80131a2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d102      	bne.n	801317c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013176:	f008 fa7f 	bl	801b678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801317a:	e7e6      	b.n	801314a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801317c:	480a      	ldr	r0, [pc, #40]	@ (80131a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801317e:	f00b fa44 	bl	801e60a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	6839      	ldr	r1, [r7, #0]
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f00b f91a 	bl	801e3c0 <sys_arch_mbox_fetch>
 801318c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801318e:	4806      	ldr	r0, [pc, #24]	@ (80131a8 <tcpip_timeouts_mbox_fetch+0x68>)
 8013190:	f00b fa2c 	bl	801e5ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801319a:	d102      	bne.n	80131a2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801319c:	f008 fa6c 	bl	801b678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80131a0:	e7d3      	b.n	801314a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	24005390 	.word	0x24005390

080131ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b084      	sub	sp, #16
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80131b4:	4810      	ldr	r0, [pc, #64]	@ (80131f8 <tcpip_thread+0x4c>)
 80131b6:	f00b fa19 	bl	801e5ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80131ba:	4b10      	ldr	r3, [pc, #64]	@ (80131fc <tcpip_thread+0x50>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d005      	beq.n	80131ce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80131c2:	4b0e      	ldr	r3, [pc, #56]	@ (80131fc <tcpip_thread+0x50>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a0e      	ldr	r2, [pc, #56]	@ (8013200 <tcpip_thread+0x54>)
 80131c8:	6812      	ldr	r2, [r2, #0]
 80131ca:	4610      	mov	r0, r2
 80131cc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80131ce:	f107 030c 	add.w	r3, r7, #12
 80131d2:	4619      	mov	r1, r3
 80131d4:	480b      	ldr	r0, [pc, #44]	@ (8013204 <tcpip_thread+0x58>)
 80131d6:	f7ff ffb3 	bl	8013140 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d106      	bne.n	80131ee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80131e0:	4b09      	ldr	r3, [pc, #36]	@ (8013208 <tcpip_thread+0x5c>)
 80131e2:	2291      	movs	r2, #145	@ 0x91
 80131e4:	4909      	ldr	r1, [pc, #36]	@ (801320c <tcpip_thread+0x60>)
 80131e6:	480a      	ldr	r0, [pc, #40]	@ (8013210 <tcpip_thread+0x64>)
 80131e8:	f00b fb5a 	bl	801e8a0 <iprintf>
      continue;
 80131ec:	e003      	b.n	80131f6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	4618      	mov	r0, r3
 80131f2:	f000 f80f 	bl	8013214 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80131f6:	e7ea      	b.n	80131ce <tcpip_thread+0x22>
 80131f8:	24005390 	.word	0x24005390
 80131fc:	24005384 	.word	0x24005384
 8013200:	24005388 	.word	0x24005388
 8013204:	2400538c 	.word	0x2400538c
 8013208:	0802028c 	.word	0x0802028c
 801320c:	080202bc 	.word	0x080202bc
 8013210:	080202dc 	.word	0x080202dc

08013214 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	2b02      	cmp	r3, #2
 8013222:	d026      	beq.n	8013272 <tcpip_thread_handle_msg+0x5e>
 8013224:	2b02      	cmp	r3, #2
 8013226:	dc2b      	bgt.n	8013280 <tcpip_thread_handle_msg+0x6c>
 8013228:	2b00      	cmp	r3, #0
 801322a:	d002      	beq.n	8013232 <tcpip_thread_handle_msg+0x1e>
 801322c:	2b01      	cmp	r3, #1
 801322e:	d015      	beq.n	801325c <tcpip_thread_handle_msg+0x48>
 8013230:	e026      	b.n	8013280 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	6850      	ldr	r0, [r2, #4]
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	6892      	ldr	r2, [r2, #8]
 801323e:	4611      	mov	r1, r2
 8013240:	4798      	blx	r3
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d004      	beq.n	8013252 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	4618      	mov	r0, r3
 801324e:	f001 fde9 	bl	8014e24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013252:	6879      	ldr	r1, [r7, #4]
 8013254:	2009      	movs	r0, #9
 8013256:	f000 ff41 	bl	80140dc <memp_free>
      break;
 801325a:	e018      	b.n	801328e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	6892      	ldr	r2, [r2, #8]
 8013264:	4610      	mov	r0, r2
 8013266:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013268:	6879      	ldr	r1, [r7, #4]
 801326a:	2008      	movs	r0, #8
 801326c:	f000 ff36 	bl	80140dc <memp_free>
      break;
 8013270:	e00d      	b.n	801328e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	6892      	ldr	r2, [r2, #8]
 801327a:	4610      	mov	r0, r2
 801327c:	4798      	blx	r3
      break;
 801327e:	e006      	b.n	801328e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013280:	4b05      	ldr	r3, [pc, #20]	@ (8013298 <tcpip_thread_handle_msg+0x84>)
 8013282:	22cf      	movs	r2, #207	@ 0xcf
 8013284:	4905      	ldr	r1, [pc, #20]	@ (801329c <tcpip_thread_handle_msg+0x88>)
 8013286:	4806      	ldr	r0, [pc, #24]	@ (80132a0 <tcpip_thread_handle_msg+0x8c>)
 8013288:	f00b fb0a 	bl	801e8a0 <iprintf>
      break;
 801328c:	bf00      	nop
  }
}
 801328e:	bf00      	nop
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	0802028c 	.word	0x0802028c
 801329c:	080202bc 	.word	0x080202bc
 80132a0:	080202dc 	.word	0x080202dc

080132a4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80132b0:	481a      	ldr	r0, [pc, #104]	@ (801331c <tcpip_inpkt+0x78>)
 80132b2:	f00b f8cd 	bl	801e450 <sys_mbox_valid>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d105      	bne.n	80132c8 <tcpip_inpkt+0x24>
 80132bc:	4b18      	ldr	r3, [pc, #96]	@ (8013320 <tcpip_inpkt+0x7c>)
 80132be:	22fc      	movs	r2, #252	@ 0xfc
 80132c0:	4918      	ldr	r1, [pc, #96]	@ (8013324 <tcpip_inpkt+0x80>)
 80132c2:	4819      	ldr	r0, [pc, #100]	@ (8013328 <tcpip_inpkt+0x84>)
 80132c4:	f00b faec 	bl	801e8a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80132c8:	2009      	movs	r0, #9
 80132ca:	f000 fe91 	bl	8013ff0 <memp_malloc>
 80132ce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d102      	bne.n	80132dc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80132d6:	f04f 33ff 	mov.w	r3, #4294967295
 80132da:	e01a      	b.n	8013312 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2200      	movs	r2, #0
 80132e0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	68fa      	ldr	r2, [r7, #12]
 80132e6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80132e8:	697b      	ldr	r3, [r7, #20]
 80132ea:	68ba      	ldr	r2, [r7, #8]
 80132ec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80132f4:	6979      	ldr	r1, [r7, #20]
 80132f6:	4809      	ldr	r0, [pc, #36]	@ (801331c <tcpip_inpkt+0x78>)
 80132f8:	f00b f848 	bl	801e38c <sys_mbox_trypost>
 80132fc:	4603      	mov	r3, r0
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d006      	beq.n	8013310 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013302:	6979      	ldr	r1, [r7, #20]
 8013304:	2009      	movs	r0, #9
 8013306:	f000 fee9 	bl	80140dc <memp_free>
    return ERR_MEM;
 801330a:	f04f 33ff 	mov.w	r3, #4294967295
 801330e:	e000      	b.n	8013312 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013310:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013312:	4618      	mov	r0, r3
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	2400538c 	.word	0x2400538c
 8013320:	0802028c 	.word	0x0802028c
 8013324:	08020304 	.word	0x08020304
 8013328:	080202dc 	.word	0x080202dc

0801332c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801333c:	f003 0318 	and.w	r3, r3, #24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013344:	4a08      	ldr	r2, [pc, #32]	@ (8013368 <tcpip_input+0x3c>)
 8013346:	6839      	ldr	r1, [r7, #0]
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7ff ffab 	bl	80132a4 <tcpip_inpkt>
 801334e:	4603      	mov	r3, r0
 8013350:	e005      	b.n	801335e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013352:	4a06      	ldr	r2, [pc, #24]	@ (801336c <tcpip_input+0x40>)
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff ffa4 	bl	80132a4 <tcpip_inpkt>
 801335c:	4603      	mov	r3, r0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	0801e189 	.word	0x0801e189
 801336c:	0801d091 	.word	0x0801d091

08013370 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801337a:	4819      	ldr	r0, [pc, #100]	@ (80133e0 <tcpip_try_callback+0x70>)
 801337c:	f00b f868 	bl	801e450 <sys_mbox_valid>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d106      	bne.n	8013394 <tcpip_try_callback+0x24>
 8013386:	4b17      	ldr	r3, [pc, #92]	@ (80133e4 <tcpip_try_callback+0x74>)
 8013388:	f240 125d 	movw	r2, #349	@ 0x15d
 801338c:	4916      	ldr	r1, [pc, #88]	@ (80133e8 <tcpip_try_callback+0x78>)
 801338e:	4817      	ldr	r0, [pc, #92]	@ (80133ec <tcpip_try_callback+0x7c>)
 8013390:	f00b fa86 	bl	801e8a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013394:	2008      	movs	r0, #8
 8013396:	f000 fe2b 	bl	8013ff0 <memp_malloc>
 801339a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d102      	bne.n	80133a8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80133a2:	f04f 33ff 	mov.w	r3, #4294967295
 80133a6:	e017      	b.n	80133d8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2201      	movs	r2, #1
 80133ac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	683a      	ldr	r2, [r7, #0]
 80133b8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80133ba:	68f9      	ldr	r1, [r7, #12]
 80133bc:	4808      	ldr	r0, [pc, #32]	@ (80133e0 <tcpip_try_callback+0x70>)
 80133be:	f00a ffe5 	bl	801e38c <sys_mbox_trypost>
 80133c2:	4603      	mov	r3, r0
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d006      	beq.n	80133d6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80133c8:	68f9      	ldr	r1, [r7, #12]
 80133ca:	2008      	movs	r0, #8
 80133cc:	f000 fe86 	bl	80140dc <memp_free>
    return ERR_MEM;
 80133d0:	f04f 33ff 	mov.w	r3, #4294967295
 80133d4:	e000      	b.n	80133d8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	2400538c 	.word	0x2400538c
 80133e4:	0802028c 	.word	0x0802028c
 80133e8:	08020304 	.word	0x08020304
 80133ec:	080202dc 	.word	0x080202dc

080133f0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80133fc:	4806      	ldr	r0, [pc, #24]	@ (8013418 <tcpip_send_msg_wait_sem+0x28>)
 80133fe:	f00b f8f5 	bl	801e5ec <sys_mutex_lock>
  fn(apimsg);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	68b8      	ldr	r0, [r7, #8]
 8013406:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013408:	4803      	ldr	r0, [pc, #12]	@ (8013418 <tcpip_send_msg_wait_sem+0x28>)
 801340a:	f00b f8fe 	bl	801e60a <sys_mutex_unlock>
  return ERR_OK;
 801340e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013410:	4618      	mov	r0, r3
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	24005390 	.word	0x24005390

0801341c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af02      	add	r7, sp, #8
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013426:	f000 f92d 	bl	8013684 <lwip_init>

  tcpip_init_done = initfunc;
 801342a:	4a17      	ldr	r2, [pc, #92]	@ (8013488 <tcpip_init+0x6c>)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013430:	4a16      	ldr	r2, [pc, #88]	@ (801348c <tcpip_init+0x70>)
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013436:	2106      	movs	r1, #6
 8013438:	4815      	ldr	r0, [pc, #84]	@ (8013490 <tcpip_init+0x74>)
 801343a:	f00a ff7b 	bl	801e334 <sys_mbox_new>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d006      	beq.n	8013452 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013444:	4b13      	ldr	r3, [pc, #76]	@ (8013494 <tcpip_init+0x78>)
 8013446:	f240 2261 	movw	r2, #609	@ 0x261
 801344a:	4913      	ldr	r1, [pc, #76]	@ (8013498 <tcpip_init+0x7c>)
 801344c:	4813      	ldr	r0, [pc, #76]	@ (801349c <tcpip_init+0x80>)
 801344e:	f00b fa27 	bl	801e8a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013452:	4813      	ldr	r0, [pc, #76]	@ (80134a0 <tcpip_init+0x84>)
 8013454:	f00b f8b4 	bl	801e5c0 <sys_mutex_new>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801345e:	4b0d      	ldr	r3, [pc, #52]	@ (8013494 <tcpip_init+0x78>)
 8013460:	f240 2265 	movw	r2, #613	@ 0x265
 8013464:	490f      	ldr	r1, [pc, #60]	@ (80134a4 <tcpip_init+0x88>)
 8013466:	480d      	ldr	r0, [pc, #52]	@ (801349c <tcpip_init+0x80>)
 8013468:	f00b fa1a 	bl	801e8a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801346c:	2318      	movs	r3, #24
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013474:	2200      	movs	r2, #0
 8013476:	490c      	ldr	r1, [pc, #48]	@ (80134a8 <tcpip_init+0x8c>)
 8013478:	480c      	ldr	r0, [pc, #48]	@ (80134ac <tcpip_init+0x90>)
 801347a:	f00b f8d3 	bl	801e624 <sys_thread_new>
}
 801347e:	bf00      	nop
 8013480:	3708      	adds	r7, #8
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
 8013486:	bf00      	nop
 8013488:	24005384 	.word	0x24005384
 801348c:	24005388 	.word	0x24005388
 8013490:	2400538c 	.word	0x2400538c
 8013494:	0802028c 	.word	0x0802028c
 8013498:	08020314 	.word	0x08020314
 801349c:	080202dc 	.word	0x080202dc
 80134a0:	24005390 	.word	0x24005390
 80134a4:	08020338 	.word	0x08020338
 80134a8:	080131ad 	.word	0x080131ad
 80134ac:	0802035c 	.word	0x0802035c

080134b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	4603      	mov	r3, r0
 80134b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80134ba:	88fb      	ldrh	r3, [r7, #6]
 80134bc:	021b      	lsls	r3, r3, #8
 80134be:	b21a      	sxth	r2, r3
 80134c0:	88fb      	ldrh	r3, [r7, #6]
 80134c2:	0a1b      	lsrs	r3, r3, #8
 80134c4:	b29b      	uxth	r3, r3
 80134c6:	b21b      	sxth	r3, r3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	b21b      	sxth	r3, r3
 80134cc:	b29b      	uxth	r3, r3
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80134da:	b480      	push	{r7}
 80134dc:	b083      	sub	sp, #12
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	061a      	lsls	r2, r3, #24
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	021b      	lsls	r3, r3, #8
 80134ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80134ee:	431a      	orrs	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	0a1b      	lsrs	r3, r3, #8
 80134f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80134f8:	431a      	orrs	r2, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	0e1b      	lsrs	r3, r3, #24
 80134fe:	4313      	orrs	r3, r2
}
 8013500:	4618      	mov	r0, r3
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801350c:	b480      	push	{r7}
 801350e:	b089      	sub	sp, #36	@ 0x24
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801351a:	2300      	movs	r3, #0
 801351c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801351e:	2300      	movs	r3, #0
 8013520:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00d      	beq.n	801354c <lwip_standard_chksum+0x40>
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	dd0a      	ble.n	801354c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013536:	69fa      	ldr	r2, [r7, #28]
 8013538:	1c53      	adds	r3, r2, #1
 801353a:	61fb      	str	r3, [r7, #28]
 801353c:	f107 030e 	add.w	r3, r7, #14
 8013540:	3301      	adds	r3, #1
 8013542:	7812      	ldrb	r2, [r2, #0]
 8013544:	701a      	strb	r2, [r3, #0]
    len--;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	3b01      	subs	r3, #1
 801354a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013550:	e00a      	b.n	8013568 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	1c9a      	adds	r2, r3, #2
 8013556:	61ba      	str	r2, [r7, #24]
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	461a      	mov	r2, r3
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	4413      	add	r3, r2
 8013560:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	3b02      	subs	r3, #2
 8013566:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2b01      	cmp	r3, #1
 801356c:	dcf1      	bgt.n	8013552 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	dd04      	ble.n	801357e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013574:	f107 030e 	add.w	r3, r7, #14
 8013578:	69ba      	ldr	r2, [r7, #24]
 801357a:	7812      	ldrb	r2, [r2, #0]
 801357c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801357e:	89fb      	ldrh	r3, [r7, #14]
 8013580:	461a      	mov	r2, r3
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	4413      	add	r3, r2
 8013586:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	0c1a      	lsrs	r2, r3, #16
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	b29b      	uxth	r3, r3
 8013590:	4413      	add	r3, r2
 8013592:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	0c1a      	lsrs	r2, r3, #16
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	b29b      	uxth	r3, r3
 801359c:	4413      	add	r3, r2
 801359e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d007      	beq.n	80135b6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	021b      	lsls	r3, r3, #8
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	0a1b      	lsrs	r3, r3, #8
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	4313      	orrs	r3, r2
 80135b4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	b29b      	uxth	r3, r3
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3724      	adds	r7, #36	@ 0x24
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80135c6:	b580      	push	{r7, lr}
 80135c8:	b082      	sub	sp, #8
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
 80135ce:	460b      	mov	r3, r1
 80135d0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80135d2:	887b      	ldrh	r3, [r7, #2]
 80135d4:	4619      	mov	r1, r3
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff ff98 	bl	801350c <lwip_standard_chksum>
 80135dc:	4603      	mov	r3, r0
 80135de:	43db      	mvns	r3, r3
 80135e0:	b29b      	uxth	r3, r3
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b086      	sub	sp, #24
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80135f6:	2300      	movs	r3, #0
 80135f8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	613b      	str	r3, [r7, #16]
 80135fe:	e02b      	b.n	8013658 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	685a      	ldr	r2, [r3, #4]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	895b      	ldrh	r3, [r3, #10]
 8013608:	4619      	mov	r1, r3
 801360a:	4610      	mov	r0, r2
 801360c:	f7ff ff7e 	bl	801350c <lwip_standard_chksum>
 8013610:	4603      	mov	r3, r0
 8013612:	461a      	mov	r2, r3
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	4413      	add	r3, r2
 8013618:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	0c1a      	lsrs	r2, r3, #16
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	b29b      	uxth	r3, r3
 8013622:	4413      	add	r3, r2
 8013624:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	895b      	ldrh	r3, [r3, #10]
 801362a:	f003 0301 	and.w	r3, r3, #1
 801362e:	b29b      	uxth	r3, r3
 8013630:	2b00      	cmp	r3, #0
 8013632:	d00e      	beq.n	8013652 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	bf0c      	ite	eq
 801363a:	2301      	moveq	r3, #1
 801363c:	2300      	movne	r3, #0
 801363e:	b2db      	uxtb	r3, r3
 8013640:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	021b      	lsls	r3, r3, #8
 8013646:	b29a      	uxth	r2, r3
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	0a1b      	lsrs	r3, r3, #8
 801364c:	b2db      	uxtb	r3, r3
 801364e:	4313      	orrs	r3, r2
 8013650:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	613b      	str	r3, [r7, #16]
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1d0      	bne.n	8013600 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d007      	beq.n	8013674 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	021b      	lsls	r3, r3, #8
 8013668:	b29a      	uxth	r2, r3
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	0a1b      	lsrs	r3, r3, #8
 801366e:	b2db      	uxtb	r3, r3
 8013670:	4313      	orrs	r3, r2
 8013672:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	b29b      	uxth	r3, r3
 8013678:	43db      	mvns	r3, r3
 801367a:	b29b      	uxth	r3, r3
}
 801367c:	4618      	mov	r0, r3
 801367e:	3718      	adds	r7, #24
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801368a:	2300      	movs	r3, #0
 801368c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801368e:	f00a ff8b 	bl	801e5a8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013692:	f000 f8d9 	bl	8013848 <mem_init>
  memp_init();
 8013696:	f000 fc3d 	bl	8013f14 <memp_init>
  pbuf_init();
  netif_init();
 801369a:	f000 fd49 	bl	8014130 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801369e:	f008 f85d 	bl	801b75c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80136a2:	f001 fe59 	bl	8015358 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80136a6:	f007 ff9f 	bl	801b5e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80136aa:	bf00      	nop
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
	...

080136b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	4603      	mov	r3, r0
 80136bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80136be:	4b05      	ldr	r3, [pc, #20]	@ (80136d4 <ptr_to_mem+0x20>)
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	88fb      	ldrh	r3, [r7, #6]
 80136c4:	4413      	add	r3, r2
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	240053ac 	.word	0x240053ac

080136d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80136e0:	4b05      	ldr	r3, [pc, #20]	@ (80136f8 <mem_to_ptr+0x20>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	b29b      	uxth	r3, r3
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	370c      	adds	r7, #12
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	240053ac 	.word	0x240053ac

080136fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80136fc:	b590      	push	{r4, r7, lr}
 80136fe:	b085      	sub	sp, #20
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013704:	4b47      	ldr	r3, [pc, #284]	@ (8013824 <plug_holes+0x128>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	429a      	cmp	r2, r3
 801370c:	d206      	bcs.n	801371c <plug_holes+0x20>
 801370e:	4b46      	ldr	r3, [pc, #280]	@ (8013828 <plug_holes+0x12c>)
 8013710:	f240 12df 	movw	r2, #479	@ 0x1df
 8013714:	4945      	ldr	r1, [pc, #276]	@ (801382c <plug_holes+0x130>)
 8013716:	4846      	ldr	r0, [pc, #280]	@ (8013830 <plug_holes+0x134>)
 8013718:	f00b f8c2 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801371c:	4b45      	ldr	r3, [pc, #276]	@ (8013834 <plug_holes+0x138>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	429a      	cmp	r2, r3
 8013724:	d306      	bcc.n	8013734 <plug_holes+0x38>
 8013726:	4b40      	ldr	r3, [pc, #256]	@ (8013828 <plug_holes+0x12c>)
 8013728:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801372c:	4942      	ldr	r1, [pc, #264]	@ (8013838 <plug_holes+0x13c>)
 801372e:	4840      	ldr	r0, [pc, #256]	@ (8013830 <plug_holes+0x134>)
 8013730:	f00b f8b6 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	791b      	ldrb	r3, [r3, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d006      	beq.n	801374a <plug_holes+0x4e>
 801373c:	4b3a      	ldr	r3, [pc, #232]	@ (8013828 <plug_holes+0x12c>)
 801373e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8013742:	493e      	ldr	r1, [pc, #248]	@ (801383c <plug_holes+0x140>)
 8013744:	483a      	ldr	r0, [pc, #232]	@ (8013830 <plug_holes+0x134>)
 8013746:	f00b f8ab 	bl	801e8a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013752:	4293      	cmp	r3, r2
 8013754:	d906      	bls.n	8013764 <plug_holes+0x68>
 8013756:	4b34      	ldr	r3, [pc, #208]	@ (8013828 <plug_holes+0x12c>)
 8013758:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801375c:	4938      	ldr	r1, [pc, #224]	@ (8013840 <plug_holes+0x144>)
 801375e:	4834      	ldr	r0, [pc, #208]	@ (8013830 <plug_holes+0x134>)
 8013760:	f00b f89e 	bl	801e8a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	4618      	mov	r0, r3
 801376a:	f7ff ffa3 	bl	80136b4 <ptr_to_mem>
 801376e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	429a      	cmp	r2, r3
 8013776:	d025      	beq.n	80137c4 <plug_holes+0xc8>
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	791b      	ldrb	r3, [r3, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d121      	bne.n	80137c4 <plug_holes+0xc8>
 8013780:	4b2c      	ldr	r3, [pc, #176]	@ (8013834 <plug_holes+0x138>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	429a      	cmp	r2, r3
 8013788:	d01c      	beq.n	80137c4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801378a:	4b2e      	ldr	r3, [pc, #184]	@ (8013844 <plug_holes+0x148>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	429a      	cmp	r2, r3
 8013792:	d102      	bne.n	801379a <plug_holes+0x9e>
      lfree = mem;
 8013794:	4a2b      	ldr	r2, [pc, #172]	@ (8013844 <plug_holes+0x148>)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	881a      	ldrh	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d00a      	beq.n	80137c4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	881b      	ldrh	r3, [r3, #0]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff ff7e 	bl	80136b4 <ptr_to_mem>
 80137b8:	4604      	mov	r4, r0
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7ff ff8c 	bl	80136d8 <mem_to_ptr>
 80137c0:	4603      	mov	r3, r0
 80137c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	885b      	ldrh	r3, [r3, #2]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7ff ff73 	bl	80136b4 <ptr_to_mem>
 80137ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d020      	beq.n	801381a <plug_holes+0x11e>
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	791b      	ldrb	r3, [r3, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d11c      	bne.n	801381a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80137e0:	4b18      	ldr	r3, [pc, #96]	@ (8013844 <plug_holes+0x148>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	687a      	ldr	r2, [r7, #4]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d102      	bne.n	80137f0 <plug_holes+0xf4>
      lfree = pmem;
 80137ea:	4a16      	ldr	r2, [pc, #88]	@ (8013844 <plug_holes+0x148>)
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	881a      	ldrh	r2, [r3, #0]
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	881b      	ldrh	r3, [r3, #0]
 80137fc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013800:	4293      	cmp	r3, r2
 8013802:	d00a      	beq.n	801381a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	4618      	mov	r0, r3
 801380a:	f7ff ff53 	bl	80136b4 <ptr_to_mem>
 801380e:	4604      	mov	r4, r0
 8013810:	68b8      	ldr	r0, [r7, #8]
 8013812:	f7ff ff61 	bl	80136d8 <mem_to_ptr>
 8013816:	4603      	mov	r3, r0
 8013818:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801381a:	bf00      	nop
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	bd90      	pop	{r4, r7, pc}
 8013822:	bf00      	nop
 8013824:	240053ac 	.word	0x240053ac
 8013828:	0802036c 	.word	0x0802036c
 801382c:	0802039c 	.word	0x0802039c
 8013830:	080203b4 	.word	0x080203b4
 8013834:	240053b0 	.word	0x240053b0
 8013838:	080203dc 	.word	0x080203dc
 801383c:	080203f8 	.word	0x080203f8
 8013840:	08020414 	.word	0x08020414
 8013844:	240053b8 	.word	0x240053b8

08013848 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801384e:	4b1d      	ldr	r3, [pc, #116]	@ (80138c4 <mem_init+0x7c>)
 8013850:	4a1d      	ldr	r2, [pc, #116]	@ (80138c8 <mem_init+0x80>)
 8013852:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013854:	4b1b      	ldr	r3, [pc, #108]	@ (80138c4 <mem_init+0x7c>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013860:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801386e:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 8013872:	f7ff ff1f 	bl	80136b4 <ptr_to_mem>
 8013876:	4603      	mov	r3, r0
 8013878:	4a14      	ldr	r2, [pc, #80]	@ (80138cc <mem_init+0x84>)
 801387a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801387c:	4b13      	ldr	r3, [pc, #76]	@ (80138cc <mem_init+0x84>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2201      	movs	r2, #1
 8013882:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013884:	4b11      	ldr	r3, [pc, #68]	@ (80138cc <mem_init+0x84>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 801388c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801388e:	4b0f      	ldr	r3, [pc, #60]	@ (80138cc <mem_init+0x84>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013896:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013898:	4b0a      	ldr	r3, [pc, #40]	@ (80138c4 <mem_init+0x7c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a0c      	ldr	r2, [pc, #48]	@ (80138d0 <mem_init+0x88>)
 801389e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80138a0:	480c      	ldr	r0, [pc, #48]	@ (80138d4 <mem_init+0x8c>)
 80138a2:	f00a fe8d 	bl	801e5c0 <sys_mutex_new>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d006      	beq.n	80138ba <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80138ac:	4b0a      	ldr	r3, [pc, #40]	@ (80138d8 <mem_init+0x90>)
 80138ae:	f240 221f 	movw	r2, #543	@ 0x21f
 80138b2:	490a      	ldr	r1, [pc, #40]	@ (80138dc <mem_init+0x94>)
 80138b4:	480a      	ldr	r0, [pc, #40]	@ (80138e0 <mem_init+0x98>)
 80138b6:	f00a fff3 	bl	801e8a0 <iprintf>
  }
}
 80138ba:	bf00      	nop
 80138bc:	3708      	adds	r7, #8
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	240053ac 	.word	0x240053ac
 80138c8:	30005000 	.word	0x30005000
 80138cc:	240053b0 	.word	0x240053b0
 80138d0:	240053b8 	.word	0x240053b8
 80138d4:	240053b4 	.word	0x240053b4
 80138d8:	0802036c 	.word	0x0802036c
 80138dc:	08020440 	.word	0x08020440
 80138e0:	080203b4 	.word	0x080203b4

080138e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b086      	sub	sp, #24
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7ff fef3 	bl	80136d8 <mem_to_ptr>
 80138f2:	4603      	mov	r3, r0
 80138f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	881b      	ldrh	r3, [r3, #0]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7ff feda 	bl	80136b4 <ptr_to_mem>
 8013900:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	885b      	ldrh	r3, [r3, #2]
 8013906:	4618      	mov	r0, r3
 8013908:	f7ff fed4 	bl	80136b4 <ptr_to_mem>
 801390c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	881b      	ldrh	r3, [r3, #0]
 8013912:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013916:	4293      	cmp	r3, r2
 8013918:	d819      	bhi.n	801394e <mem_link_valid+0x6a>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	885b      	ldrh	r3, [r3, #2]
 801391e:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013922:	4293      	cmp	r3, r2
 8013924:	d813      	bhi.n	801394e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801392a:	8afa      	ldrh	r2, [r7, #22]
 801392c:	429a      	cmp	r2, r3
 801392e:	d004      	beq.n	801393a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	8afa      	ldrh	r2, [r7, #22]
 8013936:	429a      	cmp	r2, r3
 8013938:	d109      	bne.n	801394e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801393a:	4b08      	ldr	r3, [pc, #32]	@ (801395c <mem_link_valid+0x78>)
 801393c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801393e:	693a      	ldr	r2, [r7, #16]
 8013940:	429a      	cmp	r2, r3
 8013942:	d006      	beq.n	8013952 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	885b      	ldrh	r3, [r3, #2]
 8013948:	8afa      	ldrh	r2, [r7, #22]
 801394a:	429a      	cmp	r2, r3
 801394c:	d001      	beq.n	8013952 <mem_link_valid+0x6e>
    return 0;
 801394e:	2300      	movs	r3, #0
 8013950:	e000      	b.n	8013954 <mem_link_valid+0x70>
  }
  return 1;
 8013952:	2301      	movs	r3, #1
}
 8013954:	4618      	mov	r0, r3
 8013956:	3718      	adds	r7, #24
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	240053b0 	.word	0x240053b0

08013960 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b088      	sub	sp, #32
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d070      	beq.n	8013a50 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f003 0303 	and.w	r3, r3, #3
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00d      	beq.n	8013994 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013978:	4b37      	ldr	r3, [pc, #220]	@ (8013a58 <mem_free+0xf8>)
 801397a:	f240 2273 	movw	r2, #627	@ 0x273
 801397e:	4937      	ldr	r1, [pc, #220]	@ (8013a5c <mem_free+0xfc>)
 8013980:	4837      	ldr	r0, [pc, #220]	@ (8013a60 <mem_free+0x100>)
 8013982:	f00a ff8d 	bl	801e8a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013986:	f00a fe6d 	bl	801e664 <sys_arch_protect>
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f00a fe77 	bl	801e680 <sys_arch_unprotect>
    return;
 8013992:	e05e      	b.n	8013a52 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	3b08      	subs	r3, #8
 8013998:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801399a:	4b32      	ldr	r3, [pc, #200]	@ (8013a64 <mem_free+0x104>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	69fa      	ldr	r2, [r7, #28]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d306      	bcc.n	80139b2 <mem_free+0x52>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f103 020c 	add.w	r2, r3, #12
 80139aa:	4b2f      	ldr	r3, [pc, #188]	@ (8013a68 <mem_free+0x108>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d90d      	bls.n	80139ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80139b2:	4b29      	ldr	r3, [pc, #164]	@ (8013a58 <mem_free+0xf8>)
 80139b4:	f240 227f 	movw	r2, #639	@ 0x27f
 80139b8:	492c      	ldr	r1, [pc, #176]	@ (8013a6c <mem_free+0x10c>)
 80139ba:	4829      	ldr	r0, [pc, #164]	@ (8013a60 <mem_free+0x100>)
 80139bc:	f00a ff70 	bl	801e8a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80139c0:	f00a fe50 	bl	801e664 <sys_arch_protect>
 80139c4:	6138      	str	r0, [r7, #16]
 80139c6:	6938      	ldr	r0, [r7, #16]
 80139c8:	f00a fe5a 	bl	801e680 <sys_arch_unprotect>
    return;
 80139cc:	e041      	b.n	8013a52 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80139ce:	4828      	ldr	r0, [pc, #160]	@ (8013a70 <mem_free+0x110>)
 80139d0:	f00a fe0c 	bl	801e5ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	791b      	ldrb	r3, [r3, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d110      	bne.n	80139fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80139dc:	4b1e      	ldr	r3, [pc, #120]	@ (8013a58 <mem_free+0xf8>)
 80139de:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80139e2:	4924      	ldr	r1, [pc, #144]	@ (8013a74 <mem_free+0x114>)
 80139e4:	481e      	ldr	r0, [pc, #120]	@ (8013a60 <mem_free+0x100>)
 80139e6:	f00a ff5b 	bl	801e8a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80139ea:	4821      	ldr	r0, [pc, #132]	@ (8013a70 <mem_free+0x110>)
 80139ec:	f00a fe0d 	bl	801e60a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80139f0:	f00a fe38 	bl	801e664 <sys_arch_protect>
 80139f4:	6178      	str	r0, [r7, #20]
 80139f6:	6978      	ldr	r0, [r7, #20]
 80139f8:	f00a fe42 	bl	801e680 <sys_arch_unprotect>
    return;
 80139fc:	e029      	b.n	8013a52 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80139fe:	69f8      	ldr	r0, [r7, #28]
 8013a00:	f7ff ff70 	bl	80138e4 <mem_link_valid>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d110      	bne.n	8013a2c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013a0a:	4b13      	ldr	r3, [pc, #76]	@ (8013a58 <mem_free+0xf8>)
 8013a0c:	f240 2295 	movw	r2, #661	@ 0x295
 8013a10:	4919      	ldr	r1, [pc, #100]	@ (8013a78 <mem_free+0x118>)
 8013a12:	4813      	ldr	r0, [pc, #76]	@ (8013a60 <mem_free+0x100>)
 8013a14:	f00a ff44 	bl	801e8a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013a18:	4815      	ldr	r0, [pc, #84]	@ (8013a70 <mem_free+0x110>)
 8013a1a:	f00a fdf6 	bl	801e60a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013a1e:	f00a fe21 	bl	801e664 <sys_arch_protect>
 8013a22:	61b8      	str	r0, [r7, #24]
 8013a24:	69b8      	ldr	r0, [r7, #24]
 8013a26:	f00a fe2b 	bl	801e680 <sys_arch_unprotect>
    return;
 8013a2a:	e012      	b.n	8013a52 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013a32:	4b12      	ldr	r3, [pc, #72]	@ (8013a7c <mem_free+0x11c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	69fa      	ldr	r2, [r7, #28]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d202      	bcs.n	8013a42 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8013a7c <mem_free+0x11c>)
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013a42:	69f8      	ldr	r0, [r7, #28]
 8013a44:	f7ff fe5a 	bl	80136fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013a48:	4809      	ldr	r0, [pc, #36]	@ (8013a70 <mem_free+0x110>)
 8013a4a:	f00a fdde 	bl	801e60a <sys_mutex_unlock>
 8013a4e:	e000      	b.n	8013a52 <mem_free+0xf2>
    return;
 8013a50:	bf00      	nop
}
 8013a52:	3720      	adds	r7, #32
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	0802036c 	.word	0x0802036c
 8013a5c:	0802045c 	.word	0x0802045c
 8013a60:	080203b4 	.word	0x080203b4
 8013a64:	240053ac 	.word	0x240053ac
 8013a68:	240053b0 	.word	0x240053b0
 8013a6c:	08020480 	.word	0x08020480
 8013a70:	240053b4 	.word	0x240053b4
 8013a74:	0802049c 	.word	0x0802049c
 8013a78:	080204c4 	.word	0x080204c4
 8013a7c:	240053b8 	.word	0x240053b8

08013a80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b088      	sub	sp, #32
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013a8c:	887b      	ldrh	r3, [r7, #2]
 8013a8e:	3303      	adds	r3, #3
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	f023 0303 	bic.w	r3, r3, #3
 8013a96:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013a98:	8bfb      	ldrh	r3, [r7, #30]
 8013a9a:	2b0b      	cmp	r3, #11
 8013a9c:	d801      	bhi.n	8013aa2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013a9e:	230c      	movs	r3, #12
 8013aa0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013aa2:	8bfb      	ldrh	r3, [r7, #30]
 8013aa4:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d803      	bhi.n	8013ab4 <mem_trim+0x34>
 8013aac:	8bfa      	ldrh	r2, [r7, #30]
 8013aae:	887b      	ldrh	r3, [r7, #2]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d201      	bcs.n	8013ab8 <mem_trim+0x38>
    return NULL;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	e0dc      	b.n	8013c72 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013ab8:	4b70      	ldr	r3, [pc, #448]	@ (8013c7c <mem_trim+0x1fc>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d304      	bcc.n	8013acc <mem_trim+0x4c>
 8013ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8013c80 <mem_trim+0x200>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d306      	bcc.n	8013ada <mem_trim+0x5a>
 8013acc:	4b6d      	ldr	r3, [pc, #436]	@ (8013c84 <mem_trim+0x204>)
 8013ace:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013ad2:	496d      	ldr	r1, [pc, #436]	@ (8013c88 <mem_trim+0x208>)
 8013ad4:	486d      	ldr	r0, [pc, #436]	@ (8013c8c <mem_trim+0x20c>)
 8013ad6:	f00a fee3 	bl	801e8a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013ada:	4b68      	ldr	r3, [pc, #416]	@ (8013c7c <mem_trim+0x1fc>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d304      	bcc.n	8013aee <mem_trim+0x6e>
 8013ae4:	4b66      	ldr	r3, [pc, #408]	@ (8013c80 <mem_trim+0x200>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d307      	bcc.n	8013afe <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013aee:	f00a fdb9 	bl	801e664 <sys_arch_protect>
 8013af2:	60b8      	str	r0, [r7, #8]
 8013af4:	68b8      	ldr	r0, [r7, #8]
 8013af6:	f00a fdc3 	bl	801e680 <sys_arch_unprotect>
    return rmem;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	e0b9      	b.n	8013c72 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	3b08      	subs	r3, #8
 8013b02:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013b04:	69b8      	ldr	r0, [r7, #24]
 8013b06:	f7ff fde7 	bl	80136d8 <mem_to_ptr>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	881a      	ldrh	r2, [r3, #0]
 8013b12:	8afb      	ldrh	r3, [r7, #22]
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	3b08      	subs	r3, #8
 8013b1a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013b1c:	8bfa      	ldrh	r2, [r7, #30]
 8013b1e:	8abb      	ldrh	r3, [r7, #20]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d906      	bls.n	8013b32 <mem_trim+0xb2>
 8013b24:	4b57      	ldr	r3, [pc, #348]	@ (8013c84 <mem_trim+0x204>)
 8013b26:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013b2a:	4959      	ldr	r1, [pc, #356]	@ (8013c90 <mem_trim+0x210>)
 8013b2c:	4857      	ldr	r0, [pc, #348]	@ (8013c8c <mem_trim+0x20c>)
 8013b2e:	f00a feb7 	bl	801e8a0 <iprintf>
  if (newsize > size) {
 8013b32:	8bfa      	ldrh	r2, [r7, #30]
 8013b34:	8abb      	ldrh	r3, [r7, #20]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d901      	bls.n	8013b3e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	e099      	b.n	8013c72 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8013b3e:	8bfa      	ldrh	r2, [r7, #30]
 8013b40:	8abb      	ldrh	r3, [r7, #20]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d101      	bne.n	8013b4a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	e093      	b.n	8013c72 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013b4a:	4852      	ldr	r0, [pc, #328]	@ (8013c94 <mem_trim+0x214>)
 8013b4c:	f00a fd4e 	bl	801e5ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff fdad 	bl	80136b4 <ptr_to_mem>
 8013b5a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	791b      	ldrb	r3, [r3, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d141      	bne.n	8013be8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d106      	bne.n	8013b7e <mem_trim+0xfe>
 8013b70:	4b44      	ldr	r3, [pc, #272]	@ (8013c84 <mem_trim+0x204>)
 8013b72:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013b76:	4948      	ldr	r1, [pc, #288]	@ (8013c98 <mem_trim+0x218>)
 8013b78:	4844      	ldr	r0, [pc, #272]	@ (8013c8c <mem_trim+0x20c>)
 8013b7a:	f00a fe91 	bl	801e8a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	881b      	ldrh	r3, [r3, #0]
 8013b82:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013b84:	8afa      	ldrh	r2, [r7, #22]
 8013b86:	8bfb      	ldrh	r3, [r7, #30]
 8013b88:	4413      	add	r3, r2
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	3308      	adds	r3, #8
 8013b8e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013b90:	4b42      	ldr	r3, [pc, #264]	@ (8013c9c <mem_trim+0x21c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	693a      	ldr	r2, [r7, #16]
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d106      	bne.n	8013ba8 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8013b9a:	89fb      	ldrh	r3, [r7, #14]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7ff fd89 	bl	80136b4 <ptr_to_mem>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8013c9c <mem_trim+0x21c>)
 8013ba6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013ba8:	89fb      	ldrh	r3, [r7, #14]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7ff fd82 	bl	80136b4 <ptr_to_mem>
 8013bb0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	89ba      	ldrh	r2, [r7, #12]
 8013bbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	8afa      	ldrh	r2, [r7, #22]
 8013bc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013bc4:	69bb      	ldr	r3, [r7, #24]
 8013bc6:	89fa      	ldrh	r2, [r7, #14]
 8013bc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	881b      	ldrh	r3, [r3, #0]
 8013bce:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d049      	beq.n	8013c6a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	881b      	ldrh	r3, [r3, #0]
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7ff fd6a 	bl	80136b4 <ptr_to_mem>
 8013be0:	4602      	mov	r2, r0
 8013be2:	89fb      	ldrh	r3, [r7, #14]
 8013be4:	8053      	strh	r3, [r2, #2]
 8013be6:	e040      	b.n	8013c6a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013be8:	8bfb      	ldrh	r3, [r7, #30]
 8013bea:	f103 0214 	add.w	r2, r3, #20
 8013bee:	8abb      	ldrh	r3, [r7, #20]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d83a      	bhi.n	8013c6a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013bf4:	8afa      	ldrh	r2, [r7, #22]
 8013bf6:	8bfb      	ldrh	r3, [r7, #30]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d106      	bne.n	8013c1a <mem_trim+0x19a>
 8013c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8013c84 <mem_trim+0x204>)
 8013c0e:	f240 3216 	movw	r2, #790	@ 0x316
 8013c12:	4921      	ldr	r1, [pc, #132]	@ (8013c98 <mem_trim+0x218>)
 8013c14:	481d      	ldr	r0, [pc, #116]	@ (8013c8c <mem_trim+0x20c>)
 8013c16:	f00a fe43 	bl	801e8a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013c1a:	89fb      	ldrh	r3, [r7, #14]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ff fd49 	bl	80136b4 <ptr_to_mem>
 8013c22:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013c24:	4b1d      	ldr	r3, [pc, #116]	@ (8013c9c <mem_trim+0x21c>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	693a      	ldr	r2, [r7, #16]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d202      	bcs.n	8013c34 <mem_trim+0x1b4>
      lfree = mem2;
 8013c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8013c9c <mem_trim+0x21c>)
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	2200      	movs	r2, #0
 8013c38:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	881a      	ldrh	r2, [r3, #0]
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	8afa      	ldrh	r2, [r7, #22]
 8013c46:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013c48:	69bb      	ldr	r3, [r7, #24]
 8013c4a:	89fa      	ldrh	r2, [r7, #14]
 8013c4c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013c56:	4293      	cmp	r3, r2
 8013c58:	d007      	beq.n	8013c6a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	881b      	ldrh	r3, [r3, #0]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7ff fd28 	bl	80136b4 <ptr_to_mem>
 8013c64:	4602      	mov	r2, r0
 8013c66:	89fb      	ldrh	r3, [r7, #14]
 8013c68:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013c6a:	480a      	ldr	r0, [pc, #40]	@ (8013c94 <mem_trim+0x214>)
 8013c6c:	f00a fccd 	bl	801e60a <sys_mutex_unlock>
  return rmem;
 8013c70:	687b      	ldr	r3, [r7, #4]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3720      	adds	r7, #32
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	240053ac 	.word	0x240053ac
 8013c80:	240053b0 	.word	0x240053b0
 8013c84:	0802036c 	.word	0x0802036c
 8013c88:	080204f8 	.word	0x080204f8
 8013c8c:	080203b4 	.word	0x080203b4
 8013c90:	08020510 	.word	0x08020510
 8013c94:	240053b4 	.word	0x240053b4
 8013c98:	08020530 	.word	0x08020530
 8013c9c:	240053b8 	.word	0x240053b8

08013ca0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b088      	sub	sp, #32
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013caa:	88fb      	ldrh	r3, [r7, #6]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d101      	bne.n	8013cb4 <mem_malloc+0x14>
    return NULL;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	e0e6      	b.n	8013e82 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013cb4:	88fb      	ldrh	r3, [r7, #6]
 8013cb6:	3303      	adds	r3, #3
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	f023 0303 	bic.w	r3, r3, #3
 8013cbe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013cc0:	8bbb      	ldrh	r3, [r7, #28]
 8013cc2:	2b0b      	cmp	r3, #11
 8013cc4:	d801      	bhi.n	8013cca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013cc6:	230c      	movs	r3, #12
 8013cc8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013cca:	8bbb      	ldrh	r3, [r7, #28]
 8013ccc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d803      	bhi.n	8013cdc <mem_malloc+0x3c>
 8013cd4:	8bba      	ldrh	r2, [r7, #28]
 8013cd6:	88fb      	ldrh	r3, [r7, #6]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d201      	bcs.n	8013ce0 <mem_malloc+0x40>
    return NULL;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e0d0      	b.n	8013e82 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013ce0:	486a      	ldr	r0, [pc, #424]	@ (8013e8c <mem_malloc+0x1ec>)
 8013ce2:	f00a fc83 	bl	801e5ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8013e90 <mem_malloc+0x1f0>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7ff fcf4 	bl	80136d8 <mem_to_ptr>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	83fb      	strh	r3, [r7, #30]
 8013cf4:	e0b9      	b.n	8013e6a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013cf6:	8bfb      	ldrh	r3, [r7, #30]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff fcdb 	bl	80136b4 <ptr_to_mem>
 8013cfe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	791b      	ldrb	r3, [r3, #4]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f040 80a9 	bne.w	8013e5c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	881b      	ldrh	r3, [r3, #0]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	8bfb      	ldrh	r3, [r7, #30]
 8013d12:	1ad3      	subs	r3, r2, r3
 8013d14:	f1a3 0208 	sub.w	r2, r3, #8
 8013d18:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	f0c0 809e 	bcc.w	8013e5c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	881b      	ldrh	r3, [r3, #0]
 8013d24:	461a      	mov	r2, r3
 8013d26:	8bfb      	ldrh	r3, [r7, #30]
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	f1a3 0208 	sub.w	r2, r3, #8
 8013d2e:	8bbb      	ldrh	r3, [r7, #28]
 8013d30:	3314      	adds	r3, #20
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d335      	bcc.n	8013da2 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013d36:	8bfa      	ldrh	r2, [r7, #30]
 8013d38:	8bbb      	ldrh	r3, [r7, #28]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	3308      	adds	r3, #8
 8013d40:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013d42:	8a7b      	ldrh	r3, [r7, #18]
 8013d44:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d106      	bne.n	8013d5a <mem_malloc+0xba>
 8013d4c:	4b51      	ldr	r3, [pc, #324]	@ (8013e94 <mem_malloc+0x1f4>)
 8013d4e:	f240 3287 	movw	r2, #903	@ 0x387
 8013d52:	4951      	ldr	r1, [pc, #324]	@ (8013e98 <mem_malloc+0x1f8>)
 8013d54:	4851      	ldr	r0, [pc, #324]	@ (8013e9c <mem_malloc+0x1fc>)
 8013d56:	f00a fda3 	bl	801e8a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013d5a:	8a7b      	ldrh	r3, [r7, #18]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff fca9 	bl	80136b4 <ptr_to_mem>
 8013d62:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2200      	movs	r2, #0
 8013d68:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	881a      	ldrh	r2, [r3, #0]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	8bfa      	ldrh	r2, [r7, #30]
 8013d76:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	8a7a      	ldrh	r2, [r7, #18]
 8013d7c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	2201      	movs	r2, #1
 8013d82:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	881b      	ldrh	r3, [r3, #0]
 8013d88:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d00b      	beq.n	8013da8 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	881b      	ldrh	r3, [r3, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff fc8d 	bl	80136b4 <ptr_to_mem>
 8013d9a:	4602      	mov	r2, r0
 8013d9c:	8a7b      	ldrh	r3, [r7, #18]
 8013d9e:	8053      	strh	r3, [r2, #2]
 8013da0:	e002      	b.n	8013da8 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	2201      	movs	r2, #1
 8013da6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013da8:	4b39      	ldr	r3, [pc, #228]	@ (8013e90 <mem_malloc+0x1f0>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d127      	bne.n	8013e02 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8013db2:	4b37      	ldr	r3, [pc, #220]	@ (8013e90 <mem_malloc+0x1f0>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013db8:	e005      	b.n	8013dc6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff fc78 	bl	80136b4 <ptr_to_mem>
 8013dc4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	791b      	ldrb	r3, [r3, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d004      	beq.n	8013dd8 <mem_malloc+0x138>
 8013dce:	4b34      	ldr	r3, [pc, #208]	@ (8013ea0 <mem_malloc+0x200>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	69ba      	ldr	r2, [r7, #24]
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d1f0      	bne.n	8013dba <mem_malloc+0x11a>
          }
          lfree = cur;
 8013dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8013e90 <mem_malloc+0x1f0>)
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013dde:	4b2c      	ldr	r3, [pc, #176]	@ (8013e90 <mem_malloc+0x1f0>)
 8013de0:	681a      	ldr	r2, [r3, #0]
 8013de2:	4b2f      	ldr	r3, [pc, #188]	@ (8013ea0 <mem_malloc+0x200>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d00b      	beq.n	8013e02 <mem_malloc+0x162>
 8013dea:	4b29      	ldr	r3, [pc, #164]	@ (8013e90 <mem_malloc+0x1f0>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	791b      	ldrb	r3, [r3, #4]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d006      	beq.n	8013e02 <mem_malloc+0x162>
 8013df4:	4b27      	ldr	r3, [pc, #156]	@ (8013e94 <mem_malloc+0x1f4>)
 8013df6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013dfa:	492a      	ldr	r1, [pc, #168]	@ (8013ea4 <mem_malloc+0x204>)
 8013dfc:	4827      	ldr	r0, [pc, #156]	@ (8013e9c <mem_malloc+0x1fc>)
 8013dfe:	f00a fd4f 	bl	801e8a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013e02:	4822      	ldr	r0, [pc, #136]	@ (8013e8c <mem_malloc+0x1ec>)
 8013e04:	f00a fc01 	bl	801e60a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013e08:	8bba      	ldrh	r2, [r7, #28]
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	3308      	adds	r3, #8
 8013e10:	4a23      	ldr	r2, [pc, #140]	@ (8013ea0 <mem_malloc+0x200>)
 8013e12:	6812      	ldr	r2, [r2, #0]
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d906      	bls.n	8013e26 <mem_malloc+0x186>
 8013e18:	4b1e      	ldr	r3, [pc, #120]	@ (8013e94 <mem_malloc+0x1f4>)
 8013e1a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013e1e:	4922      	ldr	r1, [pc, #136]	@ (8013ea8 <mem_malloc+0x208>)
 8013e20:	481e      	ldr	r0, [pc, #120]	@ (8013e9c <mem_malloc+0x1fc>)
 8013e22:	f00a fd3d 	bl	801e8a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	f003 0303 	and.w	r3, r3, #3
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d006      	beq.n	8013e3e <mem_malloc+0x19e>
 8013e30:	4b18      	ldr	r3, [pc, #96]	@ (8013e94 <mem_malloc+0x1f4>)
 8013e32:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013e36:	491d      	ldr	r1, [pc, #116]	@ (8013eac <mem_malloc+0x20c>)
 8013e38:	4818      	ldr	r0, [pc, #96]	@ (8013e9c <mem_malloc+0x1fc>)
 8013e3a:	f00a fd31 	bl	801e8a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	f003 0303 	and.w	r3, r3, #3
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d006      	beq.n	8013e56 <mem_malloc+0x1b6>
 8013e48:	4b12      	ldr	r3, [pc, #72]	@ (8013e94 <mem_malloc+0x1f4>)
 8013e4a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013e4e:	4918      	ldr	r1, [pc, #96]	@ (8013eb0 <mem_malloc+0x210>)
 8013e50:	4812      	ldr	r0, [pc, #72]	@ (8013e9c <mem_malloc+0x1fc>)
 8013e52:	f00a fd25 	bl	801e8a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	3308      	adds	r3, #8
 8013e5a:	e012      	b.n	8013e82 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8013e5c:	8bfb      	ldrh	r3, [r7, #30]
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7ff fc28 	bl	80136b4 <ptr_to_mem>
 8013e64:	4603      	mov	r3, r0
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013e6a:	8bfa      	ldrh	r2, [r7, #30]
 8013e6c:	8bb9      	ldrh	r1, [r7, #28]
 8013e6e:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 8013e72:	1a5b      	subs	r3, r3, r1
 8013e74:	429a      	cmp	r2, r3
 8013e76:	f4ff af3e 	bcc.w	8013cf6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013e7a:	4804      	ldr	r0, [pc, #16]	@ (8013e8c <mem_malloc+0x1ec>)
 8013e7c:	f00a fbc5 	bl	801e60a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	240053b4 	.word	0x240053b4
 8013e90:	240053b8 	.word	0x240053b8
 8013e94:	0802036c 	.word	0x0802036c
 8013e98:	08020530 	.word	0x08020530
 8013e9c:	080203b4 	.word	0x080203b4
 8013ea0:	240053b0 	.word	0x240053b0
 8013ea4:	08020544 	.word	0x08020544
 8013ea8:	08020560 	.word	0x08020560
 8013eac:	08020590 	.word	0x08020590
 8013eb0:	080205c0 	.word	0x080205c0

08013eb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	689b      	ldr	r3, [r3, #8]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	3303      	adds	r3, #3
 8013eca:	f023 0303 	bic.w	r3, r3, #3
 8013ece:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60fb      	str	r3, [r7, #12]
 8013ed4:	e011      	b.n	8013efa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	689b      	ldr	r3, [r3, #8]
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	689b      	ldr	r3, [r3, #8]
 8013ee4:	68ba      	ldr	r2, [r7, #8]
 8013ee6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	881b      	ldrh	r3, [r3, #0]
 8013eec:	461a      	mov	r2, r3
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	60fb      	str	r3, [r7, #12]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	885b      	ldrh	r3, [r3, #2]
 8013efe:	461a      	mov	r2, r3
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	4293      	cmp	r3, r2
 8013f04:	dbe7      	blt.n	8013ed6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013f06:	bf00      	nop
 8013f08:	bf00      	nop
 8013f0a:	3714      	adds	r7, #20
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	80fb      	strh	r3, [r7, #6]
 8013f1e:	e009      	b.n	8013f34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013f20:	88fb      	ldrh	r3, [r7, #6]
 8013f22:	4a08      	ldr	r2, [pc, #32]	@ (8013f44 <memp_init+0x30>)
 8013f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff ffc3 	bl	8013eb4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013f2e:	88fb      	ldrh	r3, [r7, #6]
 8013f30:	3301      	adds	r3, #1
 8013f32:	80fb      	strh	r3, [r7, #6]
 8013f34:	88fb      	ldrh	r3, [r7, #6]
 8013f36:	2b0c      	cmp	r3, #12
 8013f38:	d9f2      	bls.n	8013f20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013f3a:	bf00      	nop
 8013f3c:	bf00      	nop
 8013f3e:	3708      	adds	r7, #8
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	08022e98 	.word	0x08022e98

08013f48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013f50:	f00a fb88 	bl	801e664 <sys_arch_protect>
 8013f54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	689b      	ldr	r3, [r3, #8]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d015      	beq.n	8013f90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	689b      	ldr	r3, [r3, #8]
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	6812      	ldr	r2, [r2, #0]
 8013f6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	f003 0303 	and.w	r3, r3, #3
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d006      	beq.n	8013f86 <do_memp_malloc_pool+0x3e>
 8013f78:	4b09      	ldr	r3, [pc, #36]	@ (8013fa0 <do_memp_malloc_pool+0x58>)
 8013f7a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013f7e:	4909      	ldr	r1, [pc, #36]	@ (8013fa4 <do_memp_malloc_pool+0x5c>)
 8013f80:	4809      	ldr	r0, [pc, #36]	@ (8013fa8 <do_memp_malloc_pool+0x60>)
 8013f82:	f00a fc8d 	bl	801e8a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f00a fb7a 	bl	801e680 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	e003      	b.n	8013f98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f00a fb75 	bl	801e680 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	080205e4 	.word	0x080205e4
 8013fa4:	08020614 	.word	0x08020614
 8013fa8:	08020638 	.word	0x08020638

08013fac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d106      	bne.n	8013fc8 <memp_malloc_pool+0x1c>
 8013fba:	4b0a      	ldr	r3, [pc, #40]	@ (8013fe4 <memp_malloc_pool+0x38>)
 8013fbc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013fc0:	4909      	ldr	r1, [pc, #36]	@ (8013fe8 <memp_malloc_pool+0x3c>)
 8013fc2:	480a      	ldr	r0, [pc, #40]	@ (8013fec <memp_malloc_pool+0x40>)
 8013fc4:	f00a fc6c 	bl	801e8a0 <iprintf>
  if (desc == NULL) {
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <memp_malloc_pool+0x26>
    return NULL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e003      	b.n	8013fda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7ff ffb8 	bl	8013f48 <do_memp_malloc_pool>
 8013fd8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	080205e4 	.word	0x080205e4
 8013fe8:	08020660 	.word	0x08020660
 8013fec:	08020638 	.word	0x08020638

08013ff0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013ffa:	79fb      	ldrb	r3, [r7, #7]
 8013ffc:	2b0c      	cmp	r3, #12
 8013ffe:	d908      	bls.n	8014012 <memp_malloc+0x22>
 8014000:	4b0a      	ldr	r3, [pc, #40]	@ (801402c <memp_malloc+0x3c>)
 8014002:	f240 1257 	movw	r2, #343	@ 0x157
 8014006:	490a      	ldr	r1, [pc, #40]	@ (8014030 <memp_malloc+0x40>)
 8014008:	480a      	ldr	r0, [pc, #40]	@ (8014034 <memp_malloc+0x44>)
 801400a:	f00a fc49 	bl	801e8a0 <iprintf>
 801400e:	2300      	movs	r3, #0
 8014010:	e008      	b.n	8014024 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014012:	79fb      	ldrb	r3, [r7, #7]
 8014014:	4a08      	ldr	r2, [pc, #32]	@ (8014038 <memp_malloc+0x48>)
 8014016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801401a:	4618      	mov	r0, r3
 801401c:	f7ff ff94 	bl	8013f48 <do_memp_malloc_pool>
 8014020:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014022:	68fb      	ldr	r3, [r7, #12]
}
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	080205e4 	.word	0x080205e4
 8014030:	08020674 	.word	0x08020674
 8014034:	08020638 	.word	0x08020638
 8014038:	08022e98 	.word	0x08022e98

0801403c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	f003 0303 	and.w	r3, r3, #3
 801404c:	2b00      	cmp	r3, #0
 801404e:	d006      	beq.n	801405e <do_memp_free_pool+0x22>
 8014050:	4b0d      	ldr	r3, [pc, #52]	@ (8014088 <do_memp_free_pool+0x4c>)
 8014052:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8014056:	490d      	ldr	r1, [pc, #52]	@ (801408c <do_memp_free_pool+0x50>)
 8014058:	480d      	ldr	r0, [pc, #52]	@ (8014090 <do_memp_free_pool+0x54>)
 801405a:	f00a fc21 	bl	801e8a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014062:	f00a faff 	bl	801e664 <sys_arch_protect>
 8014066:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	68fa      	ldr	r2, [r7, #12]
 8014078:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801407a:	68b8      	ldr	r0, [r7, #8]
 801407c:	f00a fb00 	bl	801e680 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014080:	bf00      	nop
 8014082:	3710      	adds	r7, #16
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}
 8014088:	080205e4 	.word	0x080205e4
 801408c:	08020694 	.word	0x08020694
 8014090:	08020638 	.word	0x08020638

08014094 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d106      	bne.n	80140b2 <memp_free_pool+0x1e>
 80140a4:	4b0a      	ldr	r3, [pc, #40]	@ (80140d0 <memp_free_pool+0x3c>)
 80140a6:	f240 1295 	movw	r2, #405	@ 0x195
 80140aa:	490a      	ldr	r1, [pc, #40]	@ (80140d4 <memp_free_pool+0x40>)
 80140ac:	480a      	ldr	r0, [pc, #40]	@ (80140d8 <memp_free_pool+0x44>)
 80140ae:	f00a fbf7 	bl	801e8a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d007      	beq.n	80140c8 <memp_free_pool+0x34>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d004      	beq.n	80140c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80140be:	6839      	ldr	r1, [r7, #0]
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f7ff ffbb 	bl	801403c <do_memp_free_pool>
 80140c6:	e000      	b.n	80140ca <memp_free_pool+0x36>
    return;
 80140c8:	bf00      	nop
}
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	080205e4 	.word	0x080205e4
 80140d4:	08020660 	.word	0x08020660
 80140d8:	08020638 	.word	0x08020638

080140dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	4603      	mov	r3, r0
 80140e4:	6039      	str	r1, [r7, #0]
 80140e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80140e8:	79fb      	ldrb	r3, [r7, #7]
 80140ea:	2b0c      	cmp	r3, #12
 80140ec:	d907      	bls.n	80140fe <memp_free+0x22>
 80140ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014120 <memp_free+0x44>)
 80140f0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80140f4:	490b      	ldr	r1, [pc, #44]	@ (8014124 <memp_free+0x48>)
 80140f6:	480c      	ldr	r0, [pc, #48]	@ (8014128 <memp_free+0x4c>)
 80140f8:	f00a fbd2 	bl	801e8a0 <iprintf>
 80140fc:	e00c      	b.n	8014118 <memp_free+0x3c>

  if (mem == NULL) {
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d008      	beq.n	8014116 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014104:	79fb      	ldrb	r3, [r7, #7]
 8014106:	4a09      	ldr	r2, [pc, #36]	@ (801412c <memp_free+0x50>)
 8014108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801410c:	6839      	ldr	r1, [r7, #0]
 801410e:	4618      	mov	r0, r3
 8014110:	f7ff ff94 	bl	801403c <do_memp_free_pool>
 8014114:	e000      	b.n	8014118 <memp_free+0x3c>
    return;
 8014116:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	080205e4 	.word	0x080205e4
 8014124:	080206b4 	.word	0x080206b4
 8014128:	08020638 	.word	0x08020638
 801412c:	08022e98 	.word	0x08022e98

08014130 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014130:	b480      	push	{r7}
 8014132:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014134:	bf00      	nop
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr
	...

08014140 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d108      	bne.n	8014166 <netif_add+0x26>
 8014154:	4b57      	ldr	r3, [pc, #348]	@ (80142b4 <netif_add+0x174>)
 8014156:	f240 1227 	movw	r2, #295	@ 0x127
 801415a:	4957      	ldr	r1, [pc, #348]	@ (80142b8 <netif_add+0x178>)
 801415c:	4857      	ldr	r0, [pc, #348]	@ (80142bc <netif_add+0x17c>)
 801415e:	f00a fb9f 	bl	801e8a0 <iprintf>
 8014162:	2300      	movs	r3, #0
 8014164:	e0a2      	b.n	80142ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014168:	2b00      	cmp	r3, #0
 801416a:	d108      	bne.n	801417e <netif_add+0x3e>
 801416c:	4b51      	ldr	r3, [pc, #324]	@ (80142b4 <netif_add+0x174>)
 801416e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8014172:	4953      	ldr	r1, [pc, #332]	@ (80142c0 <netif_add+0x180>)
 8014174:	4851      	ldr	r0, [pc, #324]	@ (80142bc <netif_add+0x17c>)
 8014176:	f00a fb93 	bl	801e8a0 <iprintf>
 801417a:	2300      	movs	r3, #0
 801417c:	e096      	b.n	80142ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d101      	bne.n	8014188 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014184:	4b4f      	ldr	r3, [pc, #316]	@ (80142c4 <netif_add+0x184>)
 8014186:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801418e:	4b4d      	ldr	r3, [pc, #308]	@ (80142c4 <netif_add+0x184>)
 8014190:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d101      	bne.n	801419c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014198:	4b4a      	ldr	r3, [pc, #296]	@ (80142c4 <netif_add+0x184>)
 801419a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2200      	movs	r2, #0
 80141a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2200      	movs	r2, #0
 80141a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2200      	movs	r2, #0
 80141ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	4a45      	ldr	r2, [pc, #276]	@ (80142c8 <netif_add+0x188>)
 80141b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2200      	movs	r2, #0
 80141b8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2200      	movs	r2, #0
 80141be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2200      	movs	r2, #0
 80141c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6a3a      	ldr	r2, [r7, #32]
 80141cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80141ce:	4b3f      	ldr	r3, [pc, #252]	@ (80142cc <netif_add+0x18c>)
 80141d0:	781a      	ldrb	r2, [r3, #0]
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80141dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	68b9      	ldr	r1, [r7, #8]
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	f000 f913 	bl	8014410 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80141ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	4798      	blx	r3
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d001      	beq.n	80141fa <netif_add+0xba>
    return NULL;
 80141f6:	2300      	movs	r3, #0
 80141f8:	e058      	b.n	80142ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014200:	2bff      	cmp	r3, #255	@ 0xff
 8014202:	d103      	bne.n	801420c <netif_add+0xcc>
        netif->num = 0;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2200      	movs	r2, #0
 8014208:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014210:	4b2f      	ldr	r3, [pc, #188]	@ (80142d0 <netif_add+0x190>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	617b      	str	r3, [r7, #20]
 8014216:	e02b      	b.n	8014270 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014218:	697a      	ldr	r2, [r7, #20]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	429a      	cmp	r2, r3
 801421e:	d106      	bne.n	801422e <netif_add+0xee>
 8014220:	4b24      	ldr	r3, [pc, #144]	@ (80142b4 <netif_add+0x174>)
 8014222:	f240 128b 	movw	r2, #395	@ 0x18b
 8014226:	492b      	ldr	r1, [pc, #172]	@ (80142d4 <netif_add+0x194>)
 8014228:	4824      	ldr	r0, [pc, #144]	@ (80142bc <netif_add+0x17c>)
 801422a:	f00a fb39 	bl	801e8a0 <iprintf>
        num_netifs++;
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	3301      	adds	r3, #1
 8014232:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	2bff      	cmp	r3, #255	@ 0xff
 8014238:	dd06      	ble.n	8014248 <netif_add+0x108>
 801423a:	4b1e      	ldr	r3, [pc, #120]	@ (80142b4 <netif_add+0x174>)
 801423c:	f240 128d 	movw	r2, #397	@ 0x18d
 8014240:	4925      	ldr	r1, [pc, #148]	@ (80142d8 <netif_add+0x198>)
 8014242:	481e      	ldr	r0, [pc, #120]	@ (80142bc <netif_add+0x17c>)
 8014244:	f00a fb2c 	bl	801e8a0 <iprintf>
        if (netif2->num == netif->num) {
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014254:	429a      	cmp	r2, r3
 8014256:	d108      	bne.n	801426a <netif_add+0x12a>
          netif->num++;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801425e:	3301      	adds	r3, #1
 8014260:	b2da      	uxtb	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8014268:	e005      	b.n	8014276 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	617b      	str	r3, [r7, #20]
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d1d0      	bne.n	8014218 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d1be      	bne.n	80141fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014282:	2bfe      	cmp	r3, #254	@ 0xfe
 8014284:	d103      	bne.n	801428e <netif_add+0x14e>
    netif_num = 0;
 8014286:	4b11      	ldr	r3, [pc, #68]	@ (80142cc <netif_add+0x18c>)
 8014288:	2200      	movs	r2, #0
 801428a:	701a      	strb	r2, [r3, #0]
 801428c:	e006      	b.n	801429c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014294:	3301      	adds	r3, #1
 8014296:	b2da      	uxtb	r2, r3
 8014298:	4b0c      	ldr	r3, [pc, #48]	@ (80142cc <netif_add+0x18c>)
 801429a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801429c:	4b0c      	ldr	r3, [pc, #48]	@ (80142d0 <netif_add+0x190>)
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80142a4:	4a0a      	ldr	r2, [pc, #40]	@ (80142d0 <netif_add+0x190>)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80142aa:	68fb      	ldr	r3, [r7, #12]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3718      	adds	r7, #24
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	080206d0 	.word	0x080206d0
 80142b8:	08020764 	.word	0x08020764
 80142bc:	08020720 	.word	0x08020720
 80142c0:	08020780 	.word	0x08020780
 80142c4:	08022f0c 	.word	0x08022f0c
 80142c8:	080146eb 	.word	0x080146eb
 80142cc:	24008790 	.word	0x24008790
 80142d0:	24008788 	.word	0x24008788
 80142d4:	080207a4 	.word	0x080207a4
 80142d8:	080207b8 	.word	0x080207b8

080142dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80142e6:	6839      	ldr	r1, [r7, #0]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f002 fe55 	bl	8016f98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80142ee:	6839      	ldr	r1, [r7, #0]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f007 fd03 	bl	801bcfc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80142f6:	bf00      	nop
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
	...

08014300 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b086      	sub	sp, #24
 8014304:	af00      	add	r7, sp, #0
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d106      	bne.n	8014320 <netif_do_set_ipaddr+0x20>
 8014312:	4b1d      	ldr	r3, [pc, #116]	@ (8014388 <netif_do_set_ipaddr+0x88>)
 8014314:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8014318:	491c      	ldr	r1, [pc, #112]	@ (801438c <netif_do_set_ipaddr+0x8c>)
 801431a:	481d      	ldr	r0, [pc, #116]	@ (8014390 <netif_do_set_ipaddr+0x90>)
 801431c:	f00a fac0 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d106      	bne.n	8014334 <netif_do_set_ipaddr+0x34>
 8014326:	4b18      	ldr	r3, [pc, #96]	@ (8014388 <netif_do_set_ipaddr+0x88>)
 8014328:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801432c:	4917      	ldr	r1, [pc, #92]	@ (801438c <netif_do_set_ipaddr+0x8c>)
 801432e:	4818      	ldr	r0, [pc, #96]	@ (8014390 <netif_do_set_ipaddr+0x90>)
 8014330:	f00a fab6 	bl	801e8a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	3304      	adds	r3, #4
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	d01c      	beq.n	801437c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	3304      	adds	r3, #4
 801434c:	681a      	ldr	r2, [r3, #0]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014352:	f107 0314 	add.w	r3, r7, #20
 8014356:	4619      	mov	r1, r3
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f7ff ffbf 	bl	80142dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d002      	beq.n	801436a <netif_do_set_ipaddr+0x6a>
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	e000      	b.n	801436c <netif_do_set_ipaddr+0x6c>
 801436a:	2300      	movs	r3, #0
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014370:	2101      	movs	r1, #1
 8014372:	68f8      	ldr	r0, [r7, #12]
 8014374:	f000 f8d2 	bl	801451c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014378:	2301      	movs	r3, #1
 801437a:	e000      	b.n	801437e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801437c:	2300      	movs	r3, #0
}
 801437e:	4618      	mov	r0, r3
 8014380:	3718      	adds	r7, #24
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	080206d0 	.word	0x080206d0
 801438c:	080207e8 	.word	0x080207e8
 8014390:	08020720 	.word	0x08020720

08014394 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	3308      	adds	r3, #8
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d00a      	beq.n	80143c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <netif_do_set_netmask+0x26>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	e000      	b.n	80143bc <netif_do_set_netmask+0x28>
 80143ba:	2300      	movs	r3, #0
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3714      	adds	r7, #20
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b085      	sub	sp, #20
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	60f8      	str	r0, [r7, #12]
 80143da:	60b9      	str	r1, [r7, #8]
 80143dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	330c      	adds	r3, #12
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d00a      	beq.n	8014402 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <netif_do_set_gw+0x26>
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	e000      	b.n	80143fa <netif_do_set_gw+0x28>
 80143f8:	2300      	movs	r3, #0
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80143fe:	2301      	movs	r3, #1
 8014400:	e000      	b.n	8014404 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014402:	2300      	movs	r3, #0
}
 8014404:	4618      	mov	r0, r3
 8014406:	3714      	adds	r7, #20
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b088      	sub	sp, #32
 8014414:	af00      	add	r7, sp, #0
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801441e:	2300      	movs	r3, #0
 8014420:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014422:	2300      	movs	r3, #0
 8014424:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801442c:	4b1c      	ldr	r3, [pc, #112]	@ (80144a0 <netif_set_addr+0x90>)
 801442e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d101      	bne.n	801443a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014436:	4b1a      	ldr	r3, [pc, #104]	@ (80144a0 <netif_set_addr+0x90>)
 8014438:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d101      	bne.n	8014444 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014440:	4b17      	ldr	r3, [pc, #92]	@ (80144a0 <netif_set_addr+0x90>)
 8014442:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d003      	beq.n	8014452 <netif_set_addr+0x42>
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d101      	bne.n	8014456 <netif_set_addr+0x46>
 8014452:	2301      	movs	r3, #1
 8014454:	e000      	b.n	8014458 <netif_set_addr+0x48>
 8014456:	2300      	movs	r3, #0
 8014458:	617b      	str	r3, [r7, #20]
  if (remove) {
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d006      	beq.n	801446e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014460:	f107 0310 	add.w	r3, r7, #16
 8014464:	461a      	mov	r2, r3
 8014466:	68b9      	ldr	r1, [r7, #8]
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f7ff ff49 	bl	8014300 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801446e:	69fa      	ldr	r2, [r7, #28]
 8014470:	6879      	ldr	r1, [r7, #4]
 8014472:	68f8      	ldr	r0, [r7, #12]
 8014474:	f7ff ff8e 	bl	8014394 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014478:	69ba      	ldr	r2, [r7, #24]
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	68f8      	ldr	r0, [r7, #12]
 801447e:	f7ff ffa8 	bl	80143d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d106      	bne.n	8014496 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014488:	f107 0310 	add.w	r3, r7, #16
 801448c:	461a      	mov	r2, r3
 801448e:	68b9      	ldr	r1, [r7, #8]
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f7ff ff35 	bl	8014300 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014496:	bf00      	nop
 8014498:	3720      	adds	r7, #32
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	08022f0c 	.word	0x08022f0c

080144a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80144ac:	4a04      	ldr	r2, [pc, #16]	@ (80144c0 <netif_set_default+0x1c>)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80144b2:	bf00      	nop
 80144b4:	370c      	adds	r7, #12
 80144b6:	46bd      	mov	sp, r7
 80144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144bc:	4770      	bx	lr
 80144be:	bf00      	nop
 80144c0:	2400878c 	.word	0x2400878c

080144c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d107      	bne.n	80144e2 <netif_set_up+0x1e>
 80144d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014510 <netif_set_up+0x4c>)
 80144d4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80144d8:	490e      	ldr	r1, [pc, #56]	@ (8014514 <netif_set_up+0x50>)
 80144da:	480f      	ldr	r0, [pc, #60]	@ (8014518 <netif_set_up+0x54>)
 80144dc:	f00a f9e0 	bl	801e8a0 <iprintf>
 80144e0:	e013      	b.n	801450a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144e8:	f003 0301 	and.w	r3, r3, #1
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d10c      	bne.n	801450a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144f6:	f043 0301 	orr.w	r3, r3, #1
 80144fa:	b2da      	uxtb	r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014502:	2103      	movs	r1, #3
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 f809 	bl	801451c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801450a:	3708      	adds	r7, #8
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	080206d0 	.word	0x080206d0
 8014514:	08020858 	.word	0x08020858
 8014518:	08020720 	.word	0x08020720

0801451c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	460b      	mov	r3, r1
 8014526:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <netif_issue_reports+0x20>
 801452e:	4b18      	ldr	r3, [pc, #96]	@ (8014590 <netif_issue_reports+0x74>)
 8014530:	f240 326d 	movw	r2, #877	@ 0x36d
 8014534:	4917      	ldr	r1, [pc, #92]	@ (8014594 <netif_issue_reports+0x78>)
 8014536:	4818      	ldr	r0, [pc, #96]	@ (8014598 <netif_issue_reports+0x7c>)
 8014538:	f00a f9b2 	bl	801e8a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014542:	f003 0304 	and.w	r3, r3, #4
 8014546:	2b00      	cmp	r3, #0
 8014548:	d01e      	beq.n	8014588 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014550:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014554:	2b00      	cmp	r3, #0
 8014556:	d017      	beq.n	8014588 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014558:	78fb      	ldrb	r3, [r7, #3]
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	2b00      	cmp	r3, #0
 8014560:	d013      	beq.n	801458a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	3304      	adds	r3, #4
 8014566:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00e      	beq.n	801458a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014572:	f003 0308 	and.w	r3, r3, #8
 8014576:	2b00      	cmp	r3, #0
 8014578:	d007      	beq.n	801458a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	3304      	adds	r3, #4
 801457e:	4619      	mov	r1, r3
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f008 fb25 	bl	801cbd0 <etharp_request>
 8014586:	e000      	b.n	801458a <netif_issue_reports+0x6e>
    return;
 8014588:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801458a:	3708      	adds	r7, #8
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	080206d0 	.word	0x080206d0
 8014594:	08020874 	.word	0x08020874
 8014598:	08020720 	.word	0x08020720

0801459c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d107      	bne.n	80145ba <netif_set_down+0x1e>
 80145aa:	4b12      	ldr	r3, [pc, #72]	@ (80145f4 <netif_set_down+0x58>)
 80145ac:	f240 329b 	movw	r2, #923	@ 0x39b
 80145b0:	4911      	ldr	r1, [pc, #68]	@ (80145f8 <netif_set_down+0x5c>)
 80145b2:	4812      	ldr	r0, [pc, #72]	@ (80145fc <netif_set_down+0x60>)
 80145b4:	f00a f974 	bl	801e8a0 <iprintf>
 80145b8:	e019      	b.n	80145ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145c0:	f003 0301 	and.w	r3, r3, #1
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d012      	beq.n	80145ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145ce:	f023 0301 	bic.w	r3, r3, #1
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145e0:	f003 0308 	and.w	r3, r3, #8
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d002      	beq.n	80145ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f007 feaf 	bl	801c34c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	080206d0 	.word	0x080206d0
 80145f8:	08020898 	.word	0x08020898
 80145fc:	08020720 	.word	0x08020720

08014600 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d107      	bne.n	801461e <netif_set_link_up+0x1e>
 801460e:	4b13      	ldr	r3, [pc, #76]	@ (801465c <netif_set_link_up+0x5c>)
 8014610:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014614:	4912      	ldr	r1, [pc, #72]	@ (8014660 <netif_set_link_up+0x60>)
 8014616:	4813      	ldr	r0, [pc, #76]	@ (8014664 <netif_set_link_up+0x64>)
 8014618:	f00a f942 	bl	801e8a0 <iprintf>
 801461c:	e01b      	b.n	8014656 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014624:	f003 0304 	and.w	r3, r3, #4
 8014628:	2b00      	cmp	r3, #0
 801462a:	d114      	bne.n	8014656 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014632:	f043 0304 	orr.w	r3, r3, #4
 8014636:	b2da      	uxtb	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801463e:	2103      	movs	r1, #3
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f7ff ff6b 	bl	801451c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	69db      	ldr	r3, [r3, #28]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d003      	beq.n	8014656 <netif_set_link_up+0x56>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	69db      	ldr	r3, [r3, #28]
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	080206d0 	.word	0x080206d0
 8014660:	080208b8 	.word	0x080208b8
 8014664:	08020720 	.word	0x08020720

08014668 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d107      	bne.n	8014686 <netif_set_link_down+0x1e>
 8014676:	4b11      	ldr	r3, [pc, #68]	@ (80146bc <netif_set_link_down+0x54>)
 8014678:	f240 4206 	movw	r2, #1030	@ 0x406
 801467c:	4910      	ldr	r1, [pc, #64]	@ (80146c0 <netif_set_link_down+0x58>)
 801467e:	4811      	ldr	r0, [pc, #68]	@ (80146c4 <netif_set_link_down+0x5c>)
 8014680:	f00a f90e 	bl	801e8a0 <iprintf>
 8014684:	e017      	b.n	80146b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801468c:	f003 0304 	and.w	r3, r3, #4
 8014690:	2b00      	cmp	r3, #0
 8014692:	d010      	beq.n	80146b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801469a:	f023 0304 	bic.w	r3, r3, #4
 801469e:	b2da      	uxtb	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	69db      	ldr	r3, [r3, #28]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d003      	beq.n	80146b6 <netif_set_link_down+0x4e>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	69db      	ldr	r3, [r3, #28]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80146b6:	3708      	adds	r7, #8
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	080206d0 	.word	0x080206d0
 80146c0:	080208dc 	.word	0x080208dc
 80146c4:	08020720 	.word	0x08020720

080146c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d002      	beq.n	80146de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	683a      	ldr	r2, [r7, #0]
 80146dc:	61da      	str	r2, [r3, #28]
  }
}
 80146de:	bf00      	nop
 80146e0:	370c      	adds	r7, #12
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80146ea:	b480      	push	{r7}
 80146ec:	b085      	sub	sp, #20
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	60f8      	str	r0, [r7, #12]
 80146f2:	60b9      	str	r1, [r7, #8]
 80146f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80146f6:	f06f 030b 	mvn.w	r3, #11
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3714      	adds	r7, #20
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr
	...

08014708 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	4603      	mov	r3, r0
 8014710:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d013      	beq.n	8014740 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014718:	4b0d      	ldr	r3, [pc, #52]	@ (8014750 <netif_get_by_index+0x48>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	60fb      	str	r3, [r7, #12]
 801471e:	e00c      	b.n	801473a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014726:	3301      	adds	r3, #1
 8014728:	b2db      	uxtb	r3, r3
 801472a:	79fa      	ldrb	r2, [r7, #7]
 801472c:	429a      	cmp	r2, r3
 801472e:	d101      	bne.n	8014734 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	e006      	b.n	8014742 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	60fb      	str	r3, [r7, #12]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d1ef      	bne.n	8014720 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014740:	2300      	movs	r3, #0
}
 8014742:	4618      	mov	r0, r3
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	24008788 	.word	0x24008788

08014754 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801475a:	f009 ff83 	bl	801e664 <sys_arch_protect>
 801475e:	6038      	str	r0, [r7, #0]
 8014760:	4b0d      	ldr	r3, [pc, #52]	@ (8014798 <pbuf_free_ooseq+0x44>)
 8014762:	2200      	movs	r2, #0
 8014764:	701a      	strb	r2, [r3, #0]
 8014766:	6838      	ldr	r0, [r7, #0]
 8014768:	f009 ff8a 	bl	801e680 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801476c:	4b0b      	ldr	r3, [pc, #44]	@ (801479c <pbuf_free_ooseq+0x48>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	607b      	str	r3, [r7, #4]
 8014772:	e00a      	b.n	801478a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014778:	2b00      	cmp	r3, #0
 801477a:	d003      	beq.n	8014784 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f002 fc49 	bl	8017014 <tcp_free_ooseq>
      return;
 8014782:	e005      	b.n	8014790 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	607b      	str	r3, [r7, #4]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d1f1      	bne.n	8014774 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	24008791 	.word	0x24008791
 801479c:	240087a0 	.word	0x240087a0

080147a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80147a8:	f7ff ffd4 	bl	8014754 <pbuf_free_ooseq>
}
 80147ac:	bf00      	nop
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}

080147b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80147ba:	f009 ff53 	bl	801e664 <sys_arch_protect>
 80147be:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80147c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014800 <pbuf_pool_is_empty+0x4c>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80147c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014800 <pbuf_pool_is_empty+0x4c>)
 80147c8:	2201      	movs	r2, #1
 80147ca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f009 ff57 	bl	801e680 <sys_arch_unprotect>

  if (!queued) {
 80147d2:	78fb      	ldrb	r3, [r7, #3]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10f      	bne.n	80147f8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80147d8:	2100      	movs	r1, #0
 80147da:	480a      	ldr	r0, [pc, #40]	@ (8014804 <pbuf_pool_is_empty+0x50>)
 80147dc:	f7fe fdc8 	bl	8013370 <tcpip_try_callback>
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d008      	beq.n	80147f8 <pbuf_pool_is_empty+0x44>
 80147e6:	f009 ff3d 	bl	801e664 <sys_arch_protect>
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	4b04      	ldr	r3, [pc, #16]	@ (8014800 <pbuf_pool_is_empty+0x4c>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	701a      	strb	r2, [r3, #0]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f009 ff44 	bl	801e680 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80147f8:	bf00      	nop
 80147fa:	3708      	adds	r7, #8
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	24008791 	.word	0x24008791
 8014804:	080147a1 	.word	0x080147a1

08014808 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014808:	b480      	push	{r7}
 801480a:	b085      	sub	sp, #20
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	4611      	mov	r1, r2
 8014814:	461a      	mov	r2, r3
 8014816:	460b      	mov	r3, r1
 8014818:	80fb      	strh	r3, [r7, #6]
 801481a:	4613      	mov	r3, r2
 801481c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2200      	movs	r2, #0
 8014822:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	68ba      	ldr	r2, [r7, #8]
 8014828:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	88fa      	ldrh	r2, [r7, #6]
 801482e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	88ba      	ldrh	r2, [r7, #4]
 8014834:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014836:	8b3b      	ldrh	r3, [r7, #24]
 8014838:	b2da      	uxtb	r2, r3
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	7f3a      	ldrb	r2, [r7, #28]
 8014842:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2201      	movs	r2, #1
 8014848:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	73da      	strb	r2, [r3, #15]
}
 8014850:	bf00      	nop
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b08c      	sub	sp, #48	@ 0x30
 8014860:	af02      	add	r7, sp, #8
 8014862:	4603      	mov	r3, r0
 8014864:	71fb      	strb	r3, [r7, #7]
 8014866:	460b      	mov	r3, r1
 8014868:	80bb      	strh	r3, [r7, #4]
 801486a:	4613      	mov	r3, r2
 801486c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801486e:	79fb      	ldrb	r3, [r7, #7]
 8014870:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014872:	887b      	ldrh	r3, [r7, #2]
 8014874:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014878:	d07f      	beq.n	801497a <pbuf_alloc+0x11e>
 801487a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801487e:	f300 80c8 	bgt.w	8014a12 <pbuf_alloc+0x1b6>
 8014882:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014886:	d010      	beq.n	80148aa <pbuf_alloc+0x4e>
 8014888:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801488c:	f300 80c1 	bgt.w	8014a12 <pbuf_alloc+0x1b6>
 8014890:	2b01      	cmp	r3, #1
 8014892:	d002      	beq.n	801489a <pbuf_alloc+0x3e>
 8014894:	2b41      	cmp	r3, #65	@ 0x41
 8014896:	f040 80bc 	bne.w	8014a12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801489a:	887a      	ldrh	r2, [r7, #2]
 801489c:	88bb      	ldrh	r3, [r7, #4]
 801489e:	4619      	mov	r1, r3
 80148a0:	2000      	movs	r0, #0
 80148a2:	f000 f8d1 	bl	8014a48 <pbuf_alloc_reference>
 80148a6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80148a8:	e0bd      	b.n	8014a26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80148aa:	2300      	movs	r3, #0
 80148ac:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80148ae:	2300      	movs	r3, #0
 80148b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80148b2:	88bb      	ldrh	r3, [r7, #4]
 80148b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80148b6:	200c      	movs	r0, #12
 80148b8:	f7ff fb9a 	bl	8013ff0 <memp_malloc>
 80148bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d109      	bne.n	80148d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80148c4:	f7ff ff76 	bl	80147b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80148c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d002      	beq.n	80148d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80148ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148d0:	f000 faa8 	bl	8014e24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e0a7      	b.n	8014a28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80148d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148da:	3303      	adds	r3, #3
 80148dc:	b29b      	uxth	r3, r3
 80148de:	f023 0303 	bic.w	r3, r3, #3
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	f5c3 7320 	rsb	r3, r3, #640	@ 0x280
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	8b7a      	ldrh	r2, [r7, #26]
 80148ec:	4293      	cmp	r3, r2
 80148ee:	bf28      	it	cs
 80148f0:	4613      	movcs	r3, r2
 80148f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80148f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148f6:	3310      	adds	r3, #16
 80148f8:	693a      	ldr	r2, [r7, #16]
 80148fa:	4413      	add	r3, r2
 80148fc:	3303      	adds	r3, #3
 80148fe:	f023 0303 	bic.w	r3, r3, #3
 8014902:	4618      	mov	r0, r3
 8014904:	89f9      	ldrh	r1, [r7, #14]
 8014906:	8b7a      	ldrh	r2, [r7, #26]
 8014908:	2300      	movs	r3, #0
 801490a:	9301      	str	r3, [sp, #4]
 801490c:	887b      	ldrh	r3, [r7, #2]
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	460b      	mov	r3, r1
 8014912:	4601      	mov	r1, r0
 8014914:	6938      	ldr	r0, [r7, #16]
 8014916:	f7ff ff77 	bl	8014808 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	f003 0303 	and.w	r3, r3, #3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d006      	beq.n	8014934 <pbuf_alloc+0xd8>
 8014926:	4b42      	ldr	r3, [pc, #264]	@ (8014a30 <pbuf_alloc+0x1d4>)
 8014928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801492c:	4941      	ldr	r1, [pc, #260]	@ (8014a34 <pbuf_alloc+0x1d8>)
 801492e:	4842      	ldr	r0, [pc, #264]	@ (8014a38 <pbuf_alloc+0x1dc>)
 8014930:	f009 ffb6 	bl	801e8a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014936:	3303      	adds	r3, #3
 8014938:	f023 0303 	bic.w	r3, r3, #3
 801493c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014940:	d106      	bne.n	8014950 <pbuf_alloc+0xf4>
 8014942:	4b3b      	ldr	r3, [pc, #236]	@ (8014a30 <pbuf_alloc+0x1d4>)
 8014944:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014948:	493c      	ldr	r1, [pc, #240]	@ (8014a3c <pbuf_alloc+0x1e0>)
 801494a:	483b      	ldr	r0, [pc, #236]	@ (8014a38 <pbuf_alloc+0x1dc>)
 801494c:	f009 ffa8 	bl	801e8a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014952:	2b00      	cmp	r3, #0
 8014954:	d102      	bne.n	801495c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	627b      	str	r3, [r7, #36]	@ 0x24
 801495a:	e002      	b.n	8014962 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	693a      	ldr	r2, [r7, #16]
 8014960:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014966:	8b7a      	ldrh	r2, [r7, #26]
 8014968:	89fb      	ldrh	r3, [r7, #14]
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801496e:	2300      	movs	r3, #0
 8014970:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014972:	8b7b      	ldrh	r3, [r7, #26]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d19e      	bne.n	80148b6 <pbuf_alloc+0x5a>
      break;
 8014978:	e055      	b.n	8014a26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801497a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801497c:	3303      	adds	r3, #3
 801497e:	b29b      	uxth	r3, r3
 8014980:	f023 0303 	bic.w	r3, r3, #3
 8014984:	b29a      	uxth	r2, r3
 8014986:	88bb      	ldrh	r3, [r7, #4]
 8014988:	3303      	adds	r3, #3
 801498a:	b29b      	uxth	r3, r3
 801498c:	f023 0303 	bic.w	r3, r3, #3
 8014990:	b29b      	uxth	r3, r3
 8014992:	4413      	add	r3, r2
 8014994:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014996:	8b3b      	ldrh	r3, [r7, #24]
 8014998:	3310      	adds	r3, #16
 801499a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801499c:	8b3a      	ldrh	r2, [r7, #24]
 801499e:	88bb      	ldrh	r3, [r7, #4]
 80149a0:	3303      	adds	r3, #3
 80149a2:	f023 0303 	bic.w	r3, r3, #3
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d306      	bcc.n	80149b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80149aa:	8afa      	ldrh	r2, [r7, #22]
 80149ac:	88bb      	ldrh	r3, [r7, #4]
 80149ae:	3303      	adds	r3, #3
 80149b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d201      	bcs.n	80149bc <pbuf_alloc+0x160>
        return NULL;
 80149b8:	2300      	movs	r3, #0
 80149ba:	e035      	b.n	8014a28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80149bc:	8afb      	ldrh	r3, [r7, #22]
 80149be:	4618      	mov	r0, r3
 80149c0:	f7ff f96e 	bl	8013ca0 <mem_malloc>
 80149c4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80149c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d101      	bne.n	80149d0 <pbuf_alloc+0x174>
        return NULL;
 80149cc:	2300      	movs	r3, #0
 80149ce:	e02b      	b.n	8014a28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80149d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80149d2:	3310      	adds	r3, #16
 80149d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149d6:	4413      	add	r3, r2
 80149d8:	3303      	adds	r3, #3
 80149da:	f023 0303 	bic.w	r3, r3, #3
 80149de:	4618      	mov	r0, r3
 80149e0:	88b9      	ldrh	r1, [r7, #4]
 80149e2:	88ba      	ldrh	r2, [r7, #4]
 80149e4:	2300      	movs	r3, #0
 80149e6:	9301      	str	r3, [sp, #4]
 80149e8:	887b      	ldrh	r3, [r7, #2]
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	460b      	mov	r3, r1
 80149ee:	4601      	mov	r1, r0
 80149f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149f2:	f7ff ff09 	bl	8014808 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80149f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	f003 0303 	and.w	r3, r3, #3
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d010      	beq.n	8014a24 <pbuf_alloc+0x1c8>
 8014a02:	4b0b      	ldr	r3, [pc, #44]	@ (8014a30 <pbuf_alloc+0x1d4>)
 8014a04:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8014a08:	490d      	ldr	r1, [pc, #52]	@ (8014a40 <pbuf_alloc+0x1e4>)
 8014a0a:	480b      	ldr	r0, [pc, #44]	@ (8014a38 <pbuf_alloc+0x1dc>)
 8014a0c:	f009 ff48 	bl	801e8a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014a10:	e008      	b.n	8014a24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014a12:	4b07      	ldr	r3, [pc, #28]	@ (8014a30 <pbuf_alloc+0x1d4>)
 8014a14:	f240 1227 	movw	r2, #295	@ 0x127
 8014a18:	490a      	ldr	r1, [pc, #40]	@ (8014a44 <pbuf_alloc+0x1e8>)
 8014a1a:	4807      	ldr	r0, [pc, #28]	@ (8014a38 <pbuf_alloc+0x1dc>)
 8014a1c:	f009 ff40 	bl	801e8a0 <iprintf>
      return NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	e001      	b.n	8014a28 <pbuf_alloc+0x1cc>
      break;
 8014a24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3728      	adds	r7, #40	@ 0x28
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	08020900 	.word	0x08020900
 8014a34:	08020930 	.word	0x08020930
 8014a38:	08020960 	.word	0x08020960
 8014a3c:	08020988 	.word	0x08020988
 8014a40:	080209bc 	.word	0x080209bc
 8014a44:	080209e8 	.word	0x080209e8

08014a48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af02      	add	r7, sp, #8
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	460b      	mov	r3, r1
 8014a52:	807b      	strh	r3, [r7, #2]
 8014a54:	4613      	mov	r3, r2
 8014a56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014a58:	883b      	ldrh	r3, [r7, #0]
 8014a5a:	2b41      	cmp	r3, #65	@ 0x41
 8014a5c:	d009      	beq.n	8014a72 <pbuf_alloc_reference+0x2a>
 8014a5e:	883b      	ldrh	r3, [r7, #0]
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d006      	beq.n	8014a72 <pbuf_alloc_reference+0x2a>
 8014a64:	4b0f      	ldr	r3, [pc, #60]	@ (8014aa4 <pbuf_alloc_reference+0x5c>)
 8014a66:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014a6a:	490f      	ldr	r1, [pc, #60]	@ (8014aa8 <pbuf_alloc_reference+0x60>)
 8014a6c:	480f      	ldr	r0, [pc, #60]	@ (8014aac <pbuf_alloc_reference+0x64>)
 8014a6e:	f009 ff17 	bl	801e8a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014a72:	200b      	movs	r0, #11
 8014a74:	f7ff fabc 	bl	8013ff0 <memp_malloc>
 8014a78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d101      	bne.n	8014a84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014a80:	2300      	movs	r3, #0
 8014a82:	e00b      	b.n	8014a9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014a84:	8879      	ldrh	r1, [r7, #2]
 8014a86:	887a      	ldrh	r2, [r7, #2]
 8014a88:	2300      	movs	r3, #0
 8014a8a:	9301      	str	r3, [sp, #4]
 8014a8c:	883b      	ldrh	r3, [r7, #0]
 8014a8e:	9300      	str	r3, [sp, #0]
 8014a90:	460b      	mov	r3, r1
 8014a92:	6879      	ldr	r1, [r7, #4]
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f7ff feb7 	bl	8014808 <pbuf_init_alloced_pbuf>
  return p;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3710      	adds	r7, #16
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	08020900 	.word	0x08020900
 8014aa8:	08020a04 	.word	0x08020a04
 8014aac:	08020960 	.word	0x08020960

08014ab0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b088      	sub	sp, #32
 8014ab4:	af02      	add	r7, sp, #8
 8014ab6:	607b      	str	r3, [r7, #4]
 8014ab8:	4603      	mov	r3, r0
 8014aba:	73fb      	strb	r3, [r7, #15]
 8014abc:	460b      	mov	r3, r1
 8014abe:	81bb      	strh	r3, [r7, #12]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
 8014ac6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014ac8:	8a7b      	ldrh	r3, [r7, #18]
 8014aca:	3303      	adds	r3, #3
 8014acc:	f023 0203 	bic.w	r2, r3, #3
 8014ad0:	89bb      	ldrh	r3, [r7, #12]
 8014ad2:	441a      	add	r2, r3
 8014ad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d901      	bls.n	8014ade <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	e018      	b.n	8014b10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014ade:	6a3b      	ldr	r3, [r7, #32]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d007      	beq.n	8014af4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014ae4:	8a7b      	ldrh	r3, [r7, #18]
 8014ae6:	3303      	adds	r3, #3
 8014ae8:	f023 0303 	bic.w	r3, r3, #3
 8014aec:	6a3a      	ldr	r2, [r7, #32]
 8014aee:	4413      	add	r3, r2
 8014af0:	617b      	str	r3, [r7, #20]
 8014af2:	e001      	b.n	8014af8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014af4:	2300      	movs	r3, #0
 8014af6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	89b9      	ldrh	r1, [r7, #12]
 8014afc:	89ba      	ldrh	r2, [r7, #12]
 8014afe:	2302      	movs	r3, #2
 8014b00:	9301      	str	r3, [sp, #4]
 8014b02:	897b      	ldrh	r3, [r7, #10]
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	460b      	mov	r3, r1
 8014b08:	6979      	ldr	r1, [r7, #20]
 8014b0a:	f7ff fe7d 	bl	8014808 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014b0e:	687b      	ldr	r3, [r7, #4]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3718      	adds	r7, #24
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	460b      	mov	r3, r1
 8014b22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d106      	bne.n	8014b38 <pbuf_realloc+0x20>
 8014b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8014c14 <pbuf_realloc+0xfc>)
 8014b2c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014b30:	4939      	ldr	r1, [pc, #228]	@ (8014c18 <pbuf_realloc+0x100>)
 8014b32:	483a      	ldr	r0, [pc, #232]	@ (8014c1c <pbuf_realloc+0x104>)
 8014b34:	f009 feb4 	bl	801e8a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	891b      	ldrh	r3, [r3, #8]
 8014b3c:	887a      	ldrh	r2, [r7, #2]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d263      	bcs.n	8014c0a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	891a      	ldrh	r2, [r3, #8]
 8014b46:	887b      	ldrh	r3, [r7, #2]
 8014b48:	1ad3      	subs	r3, r2, r3
 8014b4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014b4c:	887b      	ldrh	r3, [r7, #2]
 8014b4e:	817b      	strh	r3, [r7, #10]
  q = p;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014b54:	e018      	b.n	8014b88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	895b      	ldrh	r3, [r3, #10]
 8014b5a:	897a      	ldrh	r2, [r7, #10]
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	891a      	ldrh	r2, [r3, #8]
 8014b64:	893b      	ldrh	r3, [r7, #8]
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d106      	bne.n	8014b88 <pbuf_realloc+0x70>
 8014b7a:	4b26      	ldr	r3, [pc, #152]	@ (8014c14 <pbuf_realloc+0xfc>)
 8014b7c:	f240 12af 	movw	r2, #431	@ 0x1af
 8014b80:	4927      	ldr	r1, [pc, #156]	@ (8014c20 <pbuf_realloc+0x108>)
 8014b82:	4826      	ldr	r0, [pc, #152]	@ (8014c1c <pbuf_realloc+0x104>)
 8014b84:	f009 fe8c 	bl	801e8a0 <iprintf>
  while (rem_len > q->len) {
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	895b      	ldrh	r3, [r3, #10]
 8014b8c:	897a      	ldrh	r2, [r7, #10]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d8e1      	bhi.n	8014b56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	7b1b      	ldrb	r3, [r3, #12]
 8014b96:	f003 030f 	and.w	r3, r3, #15
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d121      	bne.n	8014be2 <pbuf_realloc+0xca>
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	895b      	ldrh	r3, [r3, #10]
 8014ba2:	897a      	ldrh	r2, [r7, #10]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d01c      	beq.n	8014be2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	7b5b      	ldrb	r3, [r3, #13]
 8014bac:	f003 0302 	and.w	r3, r3, #2
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d116      	bne.n	8014be2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	685a      	ldr	r2, [r3, #4]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	1ad3      	subs	r3, r2, r3
 8014bbc:	b29a      	uxth	r2, r3
 8014bbe:	897b      	ldrh	r3, [r7, #10]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f7fe ff5a 	bl	8013a80 <mem_trim>
 8014bcc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d106      	bne.n	8014be2 <pbuf_realloc+0xca>
 8014bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8014c14 <pbuf_realloc+0xfc>)
 8014bd6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014bda:	4912      	ldr	r1, [pc, #72]	@ (8014c24 <pbuf_realloc+0x10c>)
 8014bdc:	480f      	ldr	r0, [pc, #60]	@ (8014c1c <pbuf_realloc+0x104>)
 8014bde:	f009 fe5f 	bl	801e8a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	897a      	ldrh	r2, [r7, #10]
 8014be6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	895a      	ldrh	r2, [r3, #10]
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d004      	beq.n	8014c02 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f000 f911 	bl	8014e24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2200      	movs	r2, #0
 8014c06:	601a      	str	r2, [r3, #0]
 8014c08:	e000      	b.n	8014c0c <pbuf_realloc+0xf4>
    return;
 8014c0a:	bf00      	nop

}
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	08020900 	.word	0x08020900
 8014c18:	08020a18 	.word	0x08020a18
 8014c1c:	08020960 	.word	0x08020960
 8014c20:	08020a30 	.word	0x08020a30
 8014c24:	08020a48 	.word	0x08020a48

08014c28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	4613      	mov	r3, r2
 8014c34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d106      	bne.n	8014c4a <pbuf_add_header_impl+0x22>
 8014c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8014cec <pbuf_add_header_impl+0xc4>)
 8014c3e:	f240 12df 	movw	r2, #479	@ 0x1df
 8014c42:	492b      	ldr	r1, [pc, #172]	@ (8014cf0 <pbuf_add_header_impl+0xc8>)
 8014c44:	482b      	ldr	r0, [pc, #172]	@ (8014cf4 <pbuf_add_header_impl+0xcc>)
 8014c46:	f009 fe2b 	bl	801e8a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d003      	beq.n	8014c58 <pbuf_add_header_impl+0x30>
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c56:	d301      	bcc.n	8014c5c <pbuf_add_header_impl+0x34>
    return 1;
 8014c58:	2301      	movs	r3, #1
 8014c5a:	e043      	b.n	8014ce4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d101      	bne.n	8014c66 <pbuf_add_header_impl+0x3e>
    return 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	e03e      	b.n	8014ce4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	891a      	ldrh	r2, [r3, #8]
 8014c6e:	8a7b      	ldrh	r3, [r7, #18]
 8014c70:	4413      	add	r3, r2
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	8a7a      	ldrh	r2, [r7, #18]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d901      	bls.n	8014c7e <pbuf_add_header_impl+0x56>
    return 1;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e032      	b.n	8014ce4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	7b1b      	ldrb	r3, [r3, #12]
 8014c82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014c84:	8a3b      	ldrh	r3, [r7, #16]
 8014c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00c      	beq.n	8014ca8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	685a      	ldr	r2, [r3, #4]
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	425b      	negs	r3, r3
 8014c96:	4413      	add	r3, r2
 8014c98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	3310      	adds	r3, #16
 8014c9e:	697a      	ldr	r2, [r7, #20]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d20d      	bcs.n	8014cc0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e01d      	b.n	8014ce4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014ca8:	79fb      	ldrb	r3, [r7, #7]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d006      	beq.n	8014cbc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	685a      	ldr	r2, [r3, #4]
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	425b      	negs	r3, r3
 8014cb6:	4413      	add	r3, r2
 8014cb8:	617b      	str	r3, [r7, #20]
 8014cba:	e001      	b.n	8014cc0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	e011      	b.n	8014ce4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	697a      	ldr	r2, [r7, #20]
 8014cc4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	895a      	ldrh	r2, [r3, #10]
 8014cca:	8a7b      	ldrh	r3, [r7, #18]
 8014ccc:	4413      	add	r3, r2
 8014cce:	b29a      	uxth	r2, r3
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	891a      	ldrh	r2, [r3, #8]
 8014cd8:	8a7b      	ldrh	r3, [r7, #18]
 8014cda:	4413      	add	r3, r2
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	811a      	strh	r2, [r3, #8]


  return 0;
 8014ce2:	2300      	movs	r3, #0
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3718      	adds	r7, #24
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	08020900 	.word	0x08020900
 8014cf0:	08020a64 	.word	0x08020a64
 8014cf4:	08020960 	.word	0x08020960

08014cf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014d02:	2200      	movs	r2, #0
 8014d04:	6839      	ldr	r1, [r7, #0]
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7ff ff8e 	bl	8014c28 <pbuf_add_header_impl>
 8014d0c:	4603      	mov	r3, r0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3708      	adds	r7, #8
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
	...

08014d18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d106      	bne.n	8014d36 <pbuf_remove_header+0x1e>
 8014d28:	4b20      	ldr	r3, [pc, #128]	@ (8014dac <pbuf_remove_header+0x94>)
 8014d2a:	f240 224b 	movw	r2, #587	@ 0x24b
 8014d2e:	4920      	ldr	r1, [pc, #128]	@ (8014db0 <pbuf_remove_header+0x98>)
 8014d30:	4820      	ldr	r0, [pc, #128]	@ (8014db4 <pbuf_remove_header+0x9c>)
 8014d32:	f009 fdb5 	bl	801e8a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d003      	beq.n	8014d44 <pbuf_remove_header+0x2c>
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d42:	d301      	bcc.n	8014d48 <pbuf_remove_header+0x30>
    return 1;
 8014d44:	2301      	movs	r3, #1
 8014d46:	e02c      	b.n	8014da2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d101      	bne.n	8014d52 <pbuf_remove_header+0x3a>
    return 0;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	e027      	b.n	8014da2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	895b      	ldrh	r3, [r3, #10]
 8014d5a:	89fa      	ldrh	r2, [r7, #14]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d908      	bls.n	8014d72 <pbuf_remove_header+0x5a>
 8014d60:	4b12      	ldr	r3, [pc, #72]	@ (8014dac <pbuf_remove_header+0x94>)
 8014d62:	f240 2255 	movw	r2, #597	@ 0x255
 8014d66:	4914      	ldr	r1, [pc, #80]	@ (8014db8 <pbuf_remove_header+0xa0>)
 8014d68:	4812      	ldr	r0, [pc, #72]	@ (8014db4 <pbuf_remove_header+0x9c>)
 8014d6a:	f009 fd99 	bl	801e8a0 <iprintf>
 8014d6e:	2301      	movs	r3, #1
 8014d70:	e017      	b.n	8014da2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	685a      	ldr	r2, [r3, #4]
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	441a      	add	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	895a      	ldrh	r2, [r3, #10]
 8014d88:	89fb      	ldrh	r3, [r7, #14]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	891a      	ldrh	r2, [r3, #8]
 8014d96:	89fb      	ldrh	r3, [r7, #14]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3710      	adds	r7, #16
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	08020900 	.word	0x08020900
 8014db0:	08020a64 	.word	0x08020a64
 8014db4:	08020960 	.word	0x08020960
 8014db8:	08020a70 	.word	0x08020a70

08014dbc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	807b      	strh	r3, [r7, #2]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014dcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	da08      	bge.n	8014de6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014dd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014dd8:	425b      	negs	r3, r3
 8014dda:	4619      	mov	r1, r3
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7ff ff9b 	bl	8014d18 <pbuf_remove_header>
 8014de2:	4603      	mov	r3, r0
 8014de4:	e007      	b.n	8014df6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014de6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014dea:	787a      	ldrb	r2, [r7, #1]
 8014dec:	4619      	mov	r1, r3
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f7ff ff1a 	bl	8014c28 <pbuf_add_header_impl>
 8014df4:	4603      	mov	r3, r0
  }
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}

08014dfe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014dfe:	b580      	push	{r7, lr}
 8014e00:	b082      	sub	sp, #8
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	6078      	str	r0, [r7, #4]
 8014e06:	460b      	mov	r3, r1
 8014e08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014e0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014e0e:	2201      	movs	r2, #1
 8014e10:	4619      	mov	r1, r3
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7ff ffd2 	bl	8014dbc <pbuf_header_impl>
 8014e18:	4603      	mov	r3, r0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3708      	adds	r7, #8
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
	...

08014e24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b088      	sub	sp, #32
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d10b      	bne.n	8014e4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d106      	bne.n	8014e46 <pbuf_free+0x22>
 8014e38:	4b3b      	ldr	r3, [pc, #236]	@ (8014f28 <pbuf_free+0x104>)
 8014e3a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014e3e:	493b      	ldr	r1, [pc, #236]	@ (8014f2c <pbuf_free+0x108>)
 8014e40:	483b      	ldr	r0, [pc, #236]	@ (8014f30 <pbuf_free+0x10c>)
 8014e42:	f009 fd2d 	bl	801e8a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014e46:	2300      	movs	r3, #0
 8014e48:	e069      	b.n	8014f1e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014e4e:	e062      	b.n	8014f16 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014e50:	f009 fc08 	bl	801e664 <sys_arch_protect>
 8014e54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	7b9b      	ldrb	r3, [r3, #14]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d106      	bne.n	8014e6c <pbuf_free+0x48>
 8014e5e:	4b32      	ldr	r3, [pc, #200]	@ (8014f28 <pbuf_free+0x104>)
 8014e60:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014e64:	4933      	ldr	r1, [pc, #204]	@ (8014f34 <pbuf_free+0x110>)
 8014e66:	4832      	ldr	r0, [pc, #200]	@ (8014f30 <pbuf_free+0x10c>)
 8014e68:	f009 fd1a 	bl	801e8a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	7b9b      	ldrb	r3, [r3, #14]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	b2da      	uxtb	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	739a      	strb	r2, [r3, #14]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	7b9b      	ldrb	r3, [r3, #14]
 8014e7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014e7e:	69b8      	ldr	r0, [r7, #24]
 8014e80:	f009 fbfe 	bl	801e680 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014e84:	7dfb      	ldrb	r3, [r7, #23]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d143      	bne.n	8014f12 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	7b1b      	ldrb	r3, [r3, #12]
 8014e94:	f003 030f 	and.w	r3, r3, #15
 8014e98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	7b5b      	ldrb	r3, [r3, #13]
 8014e9e:	f003 0302 	and.w	r3, r3, #2
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d011      	beq.n	8014eca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	691b      	ldr	r3, [r3, #16]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <pbuf_free+0x9c>
 8014eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8014f28 <pbuf_free+0x104>)
 8014eb4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014eb8:	491f      	ldr	r1, [pc, #124]	@ (8014f38 <pbuf_free+0x114>)
 8014eba:	481d      	ldr	r0, [pc, #116]	@ (8014f30 <pbuf_free+0x10c>)
 8014ebc:	f009 fcf0 	bl	801e8a0 <iprintf>
        pc->custom_free_function(p);
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	691b      	ldr	r3, [r3, #16]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	4798      	blx	r3
 8014ec8:	e01d      	b.n	8014f06 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014eca:	7bfb      	ldrb	r3, [r7, #15]
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d104      	bne.n	8014eda <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014ed0:	6879      	ldr	r1, [r7, #4]
 8014ed2:	200c      	movs	r0, #12
 8014ed4:	f7ff f902 	bl	80140dc <memp_free>
 8014ed8:	e015      	b.n	8014f06 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014eda:	7bfb      	ldrb	r3, [r7, #15]
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	d104      	bne.n	8014eea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014ee0:	6879      	ldr	r1, [r7, #4]
 8014ee2:	200b      	movs	r0, #11
 8014ee4:	f7ff f8fa 	bl	80140dc <memp_free>
 8014ee8:	e00d      	b.n	8014f06 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014eea:	7bfb      	ldrb	r3, [r7, #15]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d103      	bne.n	8014ef8 <pbuf_free+0xd4>
          mem_free(p);
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f7fe fd35 	bl	8013960 <mem_free>
 8014ef6:	e006      	b.n	8014f06 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8014f28 <pbuf_free+0x104>)
 8014efa:	f240 320f 	movw	r2, #783	@ 0x30f
 8014efe:	490f      	ldr	r1, [pc, #60]	@ (8014f3c <pbuf_free+0x118>)
 8014f00:	480b      	ldr	r0, [pc, #44]	@ (8014f30 <pbuf_free+0x10c>)
 8014f02:	f009 fccd 	bl	801e8a0 <iprintf>
        }
      }
      count++;
 8014f06:	7ffb      	ldrb	r3, [r7, #31]
 8014f08:	3301      	adds	r3, #1
 8014f0a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	607b      	str	r3, [r7, #4]
 8014f10:	e001      	b.n	8014f16 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d199      	bne.n	8014e50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3720      	adds	r7, #32
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	08020900 	.word	0x08020900
 8014f2c:	08020a64 	.word	0x08020a64
 8014f30:	08020960 	.word	0x08020960
 8014f34:	08020a90 	.word	0x08020a90
 8014f38:	08020aa8 	.word	0x08020aa8
 8014f3c:	08020acc 	.word	0x08020acc

08014f40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b085      	sub	sp, #20
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014f4c:	e005      	b.n	8014f5a <pbuf_clen+0x1a>
    ++len;
 8014f4e:	89fb      	ldrh	r3, [r7, #14]
 8014f50:	3301      	adds	r3, #1
 8014f52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d1f6      	bne.n	8014f4e <pbuf_clen+0xe>
  }
  return len;
 8014f60:	89fb      	ldrh	r3, [r7, #14]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3714      	adds	r7, #20
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr
	...

08014f70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d016      	beq.n	8014fac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014f7e:	f009 fb71 	bl	801e664 <sys_arch_protect>
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	7b9b      	ldrb	r3, [r3, #14]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	b2da      	uxtb	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	739a      	strb	r2, [r3, #14]
 8014f90:	68f8      	ldr	r0, [r7, #12]
 8014f92:	f009 fb75 	bl	801e680 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	7b9b      	ldrb	r3, [r3, #14]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <pbuf_ref+0x3c>
 8014f9e:	4b05      	ldr	r3, [pc, #20]	@ (8014fb4 <pbuf_ref+0x44>)
 8014fa0:	f240 3242 	movw	r2, #834	@ 0x342
 8014fa4:	4904      	ldr	r1, [pc, #16]	@ (8014fb8 <pbuf_ref+0x48>)
 8014fa6:	4805      	ldr	r0, [pc, #20]	@ (8014fbc <pbuf_ref+0x4c>)
 8014fa8:	f009 fc7a 	bl	801e8a0 <iprintf>
  }
}
 8014fac:	bf00      	nop
 8014fae:	3710      	adds	r7, #16
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	08020900 	.word	0x08020900
 8014fb8:	08020ae0 	.word	0x08020ae0
 8014fbc:	08020960 	.word	0x08020960

08014fc0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <pbuf_cat+0x16>
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d107      	bne.n	8014fe6 <pbuf_cat+0x26>
 8014fd6:	4b20      	ldr	r3, [pc, #128]	@ (8015058 <pbuf_cat+0x98>)
 8014fd8:	f240 3259 	movw	r2, #857	@ 0x359
 8014fdc:	491f      	ldr	r1, [pc, #124]	@ (801505c <pbuf_cat+0x9c>)
 8014fde:	4820      	ldr	r0, [pc, #128]	@ (8015060 <pbuf_cat+0xa0>)
 8014fe0:	f009 fc5e 	bl	801e8a0 <iprintf>
 8014fe4:	e034      	b.n	8015050 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	60fb      	str	r3, [r7, #12]
 8014fea:	e00a      	b.n	8015002 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	891a      	ldrh	r2, [r3, #8]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	891b      	ldrh	r3, [r3, #8]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	60fb      	str	r3, [r7, #12]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1f0      	bne.n	8014fec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	891a      	ldrh	r2, [r3, #8]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	895b      	ldrh	r3, [r3, #10]
 8015012:	429a      	cmp	r2, r3
 8015014:	d006      	beq.n	8015024 <pbuf_cat+0x64>
 8015016:	4b10      	ldr	r3, [pc, #64]	@ (8015058 <pbuf_cat+0x98>)
 8015018:	f240 3262 	movw	r2, #866	@ 0x362
 801501c:	4911      	ldr	r1, [pc, #68]	@ (8015064 <pbuf_cat+0xa4>)
 801501e:	4810      	ldr	r0, [pc, #64]	@ (8015060 <pbuf_cat+0xa0>)
 8015020:	f009 fc3e 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d006      	beq.n	801503a <pbuf_cat+0x7a>
 801502c:	4b0a      	ldr	r3, [pc, #40]	@ (8015058 <pbuf_cat+0x98>)
 801502e:	f240 3263 	movw	r2, #867	@ 0x363
 8015032:	490d      	ldr	r1, [pc, #52]	@ (8015068 <pbuf_cat+0xa8>)
 8015034:	480a      	ldr	r0, [pc, #40]	@ (8015060 <pbuf_cat+0xa0>)
 8015036:	f009 fc33 	bl	801e8a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	891a      	ldrh	r2, [r3, #8]
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	891b      	ldrh	r3, [r3, #8]
 8015042:	4413      	add	r3, r2
 8015044:	b29a      	uxth	r2, r3
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015050:	3710      	adds	r7, #16
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	08020900 	.word	0x08020900
 801505c:	08020af4 	.word	0x08020af4
 8015060:	08020960 	.word	0x08020960
 8015064:	08020b2c 	.word	0x08020b2c
 8015068:	08020b5c 	.word	0x08020b5c

0801506c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015076:	2300      	movs	r3, #0
 8015078:	617b      	str	r3, [r7, #20]
 801507a:	2300      	movs	r3, #0
 801507c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d008      	beq.n	8015096 <pbuf_copy+0x2a>
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d005      	beq.n	8015096 <pbuf_copy+0x2a>
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	891a      	ldrh	r2, [r3, #8]
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	891b      	ldrh	r3, [r3, #8]
 8015092:	429a      	cmp	r2, r3
 8015094:	d209      	bcs.n	80150aa <pbuf_copy+0x3e>
 8015096:	4b57      	ldr	r3, [pc, #348]	@ (80151f4 <pbuf_copy+0x188>)
 8015098:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801509c:	4956      	ldr	r1, [pc, #344]	@ (80151f8 <pbuf_copy+0x18c>)
 801509e:	4857      	ldr	r0, [pc, #348]	@ (80151fc <pbuf_copy+0x190>)
 80150a0:	f009 fbfe 	bl	801e8a0 <iprintf>
 80150a4:	f06f 030f 	mvn.w	r3, #15
 80150a8:	e09f      	b.n	80151ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	895b      	ldrh	r3, [r3, #10]
 80150ae:	461a      	mov	r2, r3
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	1ad2      	subs	r2, r2, r3
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	895b      	ldrh	r3, [r3, #10]
 80150b8:	4619      	mov	r1, r3
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	1acb      	subs	r3, r1, r3
 80150be:	429a      	cmp	r2, r3
 80150c0:	d306      	bcc.n	80150d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	895b      	ldrh	r3, [r3, #10]
 80150c6:	461a      	mov	r2, r3
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	1ad3      	subs	r3, r2, r3
 80150cc:	60fb      	str	r3, [r7, #12]
 80150ce:	e005      	b.n	80150dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	895b      	ldrh	r3, [r3, #10]
 80150d4:	461a      	mov	r2, r3
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	685a      	ldr	r2, [r3, #4]
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	18d0      	adds	r0, r2, r3
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	4413      	add	r3, r2
 80150ec:	68fa      	ldr	r2, [r7, #12]
 80150ee:	4619      	mov	r1, r3
 80150f0:	f009 fd07 	bl	801eb02 <memcpy>
    offset_to += len;
 80150f4:	697a      	ldr	r2, [r7, #20]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	4413      	add	r3, r2
 80150fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80150fc:	693a      	ldr	r2, [r7, #16]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	4413      	add	r3, r2
 8015102:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	895b      	ldrh	r3, [r3, #10]
 8015108:	461a      	mov	r2, r3
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	4293      	cmp	r3, r2
 801510e:	d906      	bls.n	801511e <pbuf_copy+0xb2>
 8015110:	4b38      	ldr	r3, [pc, #224]	@ (80151f4 <pbuf_copy+0x188>)
 8015112:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8015116:	493a      	ldr	r1, [pc, #232]	@ (8015200 <pbuf_copy+0x194>)
 8015118:	4838      	ldr	r0, [pc, #224]	@ (80151fc <pbuf_copy+0x190>)
 801511a:	f009 fbc1 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	895b      	ldrh	r3, [r3, #10]
 8015122:	461a      	mov	r2, r3
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	4293      	cmp	r3, r2
 8015128:	d906      	bls.n	8015138 <pbuf_copy+0xcc>
 801512a:	4b32      	ldr	r3, [pc, #200]	@ (80151f4 <pbuf_copy+0x188>)
 801512c:	f240 32da 	movw	r2, #986	@ 0x3da
 8015130:	4934      	ldr	r1, [pc, #208]	@ (8015204 <pbuf_copy+0x198>)
 8015132:	4832      	ldr	r0, [pc, #200]	@ (80151fc <pbuf_copy+0x190>)
 8015134:	f009 fbb4 	bl	801e8a0 <iprintf>
    if (offset_from >= p_from->len) {
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	895b      	ldrh	r3, [r3, #10]
 801513c:	461a      	mov	r2, r3
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	4293      	cmp	r3, r2
 8015142:	d304      	bcc.n	801514e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	895b      	ldrh	r3, [r3, #10]
 8015152:	461a      	mov	r2, r3
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	4293      	cmp	r3, r2
 8015158:	d114      	bne.n	8015184 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d10c      	bne.n	8015184 <pbuf_copy+0x118>
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d009      	beq.n	8015184 <pbuf_copy+0x118>
 8015170:	4b20      	ldr	r3, [pc, #128]	@ (80151f4 <pbuf_copy+0x188>)
 8015172:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8015176:	4924      	ldr	r1, [pc, #144]	@ (8015208 <pbuf_copy+0x19c>)
 8015178:	4820      	ldr	r0, [pc, #128]	@ (80151fc <pbuf_copy+0x190>)
 801517a:	f009 fb91 	bl	801e8a0 <iprintf>
 801517e:	f06f 030f 	mvn.w	r3, #15
 8015182:	e032      	b.n	80151ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d013      	beq.n	80151b2 <pbuf_copy+0x146>
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	895a      	ldrh	r2, [r3, #10]
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	891b      	ldrh	r3, [r3, #8]
 8015192:	429a      	cmp	r2, r3
 8015194:	d10d      	bne.n	80151b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d009      	beq.n	80151b2 <pbuf_copy+0x146>
 801519e:	4b15      	ldr	r3, [pc, #84]	@ (80151f4 <pbuf_copy+0x188>)
 80151a0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80151a4:	4919      	ldr	r1, [pc, #100]	@ (801520c <pbuf_copy+0x1a0>)
 80151a6:	4815      	ldr	r0, [pc, #84]	@ (80151fc <pbuf_copy+0x190>)
 80151a8:	f009 fb7a 	bl	801e8a0 <iprintf>
 80151ac:	f06f 0305 	mvn.w	r3, #5
 80151b0:	e01b      	b.n	80151ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d013      	beq.n	80151e0 <pbuf_copy+0x174>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	895a      	ldrh	r2, [r3, #10]
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	891b      	ldrh	r3, [r3, #8]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d10d      	bne.n	80151e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d009      	beq.n	80151e0 <pbuf_copy+0x174>
 80151cc:	4b09      	ldr	r3, [pc, #36]	@ (80151f4 <pbuf_copy+0x188>)
 80151ce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80151d2:	490e      	ldr	r1, [pc, #56]	@ (801520c <pbuf_copy+0x1a0>)
 80151d4:	4809      	ldr	r0, [pc, #36]	@ (80151fc <pbuf_copy+0x190>)
 80151d6:	f009 fb63 	bl	801e8a0 <iprintf>
 80151da:	f06f 0305 	mvn.w	r3, #5
 80151de:	e004      	b.n	80151ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	f47f af61 	bne.w	80150aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80151e8:	2300      	movs	r3, #0
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3718      	adds	r7, #24
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	08020900 	.word	0x08020900
 80151f8:	08020ba8 	.word	0x08020ba8
 80151fc:	08020960 	.word	0x08020960
 8015200:	08020bd8 	.word	0x08020bd8
 8015204:	08020bf0 	.word	0x08020bf0
 8015208:	08020c0c 	.word	0x08020c0c
 801520c:	08020c1c 	.word	0x08020c1c

08015210 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b088      	sub	sp, #32
 8015214:	af00      	add	r7, sp, #0
 8015216:	60f8      	str	r0, [r7, #12]
 8015218:	60b9      	str	r1, [r7, #8]
 801521a:	4611      	mov	r1, r2
 801521c:	461a      	mov	r2, r3
 801521e:	460b      	mov	r3, r1
 8015220:	80fb      	strh	r3, [r7, #6]
 8015222:	4613      	mov	r3, r2
 8015224:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015226:	2300      	movs	r3, #0
 8015228:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801522a:	2300      	movs	r3, #0
 801522c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d108      	bne.n	8015246 <pbuf_copy_partial+0x36>
 8015234:	4b2b      	ldr	r3, [pc, #172]	@ (80152e4 <pbuf_copy_partial+0xd4>)
 8015236:	f240 420a 	movw	r2, #1034	@ 0x40a
 801523a:	492b      	ldr	r1, [pc, #172]	@ (80152e8 <pbuf_copy_partial+0xd8>)
 801523c:	482b      	ldr	r0, [pc, #172]	@ (80152ec <pbuf_copy_partial+0xdc>)
 801523e:	f009 fb2f 	bl	801e8a0 <iprintf>
 8015242:	2300      	movs	r3, #0
 8015244:	e04a      	b.n	80152dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d108      	bne.n	801525e <pbuf_copy_partial+0x4e>
 801524c:	4b25      	ldr	r3, [pc, #148]	@ (80152e4 <pbuf_copy_partial+0xd4>)
 801524e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8015252:	4927      	ldr	r1, [pc, #156]	@ (80152f0 <pbuf_copy_partial+0xe0>)
 8015254:	4825      	ldr	r0, [pc, #148]	@ (80152ec <pbuf_copy_partial+0xdc>)
 8015256:	f009 fb23 	bl	801e8a0 <iprintf>
 801525a:	2300      	movs	r3, #0
 801525c:	e03e      	b.n	80152dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	61fb      	str	r3, [r7, #28]
 8015262:	e034      	b.n	80152ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015264:	88bb      	ldrh	r3, [r7, #4]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00a      	beq.n	8015280 <pbuf_copy_partial+0x70>
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	895b      	ldrh	r3, [r3, #10]
 801526e:	88ba      	ldrh	r2, [r7, #4]
 8015270:	429a      	cmp	r2, r3
 8015272:	d305      	bcc.n	8015280 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	895b      	ldrh	r3, [r3, #10]
 8015278:	88ba      	ldrh	r2, [r7, #4]
 801527a:	1ad3      	subs	r3, r2, r3
 801527c:	80bb      	strh	r3, [r7, #4]
 801527e:	e023      	b.n	80152c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	895a      	ldrh	r2, [r3, #10]
 8015284:	88bb      	ldrh	r3, [r7, #4]
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801528a:	8b3a      	ldrh	r2, [r7, #24]
 801528c:	88fb      	ldrh	r3, [r7, #6]
 801528e:	429a      	cmp	r2, r3
 8015290:	d901      	bls.n	8015296 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015292:	88fb      	ldrh	r3, [r7, #6]
 8015294:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015296:	8b7b      	ldrh	r3, [r7, #26]
 8015298:	68ba      	ldr	r2, [r7, #8]
 801529a:	18d0      	adds	r0, r2, r3
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	685a      	ldr	r2, [r3, #4]
 80152a0:	88bb      	ldrh	r3, [r7, #4]
 80152a2:	4413      	add	r3, r2
 80152a4:	8b3a      	ldrh	r2, [r7, #24]
 80152a6:	4619      	mov	r1, r3
 80152a8:	f009 fc2b 	bl	801eb02 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80152ac:	8afa      	ldrh	r2, [r7, #22]
 80152ae:	8b3b      	ldrh	r3, [r7, #24]
 80152b0:	4413      	add	r3, r2
 80152b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80152b4:	8b7a      	ldrh	r2, [r7, #26]
 80152b6:	8b3b      	ldrh	r3, [r7, #24]
 80152b8:	4413      	add	r3, r2
 80152ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80152bc:	88fa      	ldrh	r2, [r7, #6]
 80152be:	8b3b      	ldrh	r3, [r7, #24]
 80152c0:	1ad3      	subs	r3, r2, r3
 80152c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80152c4:	2300      	movs	r3, #0
 80152c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	61fb      	str	r3, [r7, #28]
 80152ce:	88fb      	ldrh	r3, [r7, #6]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <pbuf_copy_partial+0xca>
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1c4      	bne.n	8015264 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80152da:	8afb      	ldrh	r3, [r7, #22]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3720      	adds	r7, #32
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}
 80152e4:	08020900 	.word	0x08020900
 80152e8:	08020c48 	.word	0x08020c48
 80152ec:	08020960 	.word	0x08020960
 80152f0:	08020c68 	.word	0x08020c68

080152f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	4603      	mov	r3, r0
 80152fc:	603a      	str	r2, [r7, #0]
 80152fe:	71fb      	strb	r3, [r7, #7]
 8015300:	460b      	mov	r3, r1
 8015302:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	8919      	ldrh	r1, [r3, #8]
 8015308:	88ba      	ldrh	r2, [r7, #4]
 801530a:	79fb      	ldrb	r3, [r7, #7]
 801530c:	4618      	mov	r0, r3
 801530e:	f7ff faa5 	bl	801485c <pbuf_alloc>
 8015312:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d101      	bne.n	801531e <pbuf_clone+0x2a>
    return NULL;
 801531a:	2300      	movs	r3, #0
 801531c:	e011      	b.n	8015342 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801531e:	6839      	ldr	r1, [r7, #0]
 8015320:	68f8      	ldr	r0, [r7, #12]
 8015322:	f7ff fea3 	bl	801506c <pbuf_copy>
 8015326:	4603      	mov	r3, r0
 8015328:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801532a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d006      	beq.n	8015340 <pbuf_clone+0x4c>
 8015332:	4b06      	ldr	r3, [pc, #24]	@ (801534c <pbuf_clone+0x58>)
 8015334:	f240 5224 	movw	r2, #1316	@ 0x524
 8015338:	4905      	ldr	r1, [pc, #20]	@ (8015350 <pbuf_clone+0x5c>)
 801533a:	4806      	ldr	r0, [pc, #24]	@ (8015354 <pbuf_clone+0x60>)
 801533c:	f009 fab0 	bl	801e8a0 <iprintf>
  return q;
 8015340:	68fb      	ldr	r3, [r7, #12]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	08020900 	.word	0x08020900
 8015350:	08020d74 	.word	0x08020d74
 8015354:	08020960 	.word	0x08020960

08015358 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801535c:	f009 f9a0 	bl	801e6a0 <rand>
 8015360:	4603      	mov	r3, r0
 8015362:	b29b      	uxth	r3, r3
 8015364:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015368:	b29b      	uxth	r3, r3
 801536a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801536e:	b29a      	uxth	r2, r3
 8015370:	4b01      	ldr	r3, [pc, #4]	@ (8015378 <tcp_init+0x20>)
 8015372:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015374:	bf00      	nop
 8015376:	bd80      	pop	{r7, pc}
 8015378:	24000028 	.word	0x24000028

0801537c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	7d1b      	ldrb	r3, [r3, #20]
 8015388:	2b01      	cmp	r3, #1
 801538a:	d105      	bne.n	8015398 <tcp_free+0x1c>
 801538c:	4b06      	ldr	r3, [pc, #24]	@ (80153a8 <tcp_free+0x2c>)
 801538e:	22d4      	movs	r2, #212	@ 0xd4
 8015390:	4906      	ldr	r1, [pc, #24]	@ (80153ac <tcp_free+0x30>)
 8015392:	4807      	ldr	r0, [pc, #28]	@ (80153b0 <tcp_free+0x34>)
 8015394:	f009 fa84 	bl	801e8a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015398:	6879      	ldr	r1, [r7, #4]
 801539a:	2001      	movs	r0, #1
 801539c:	f7fe fe9e 	bl	80140dc <memp_free>
}
 80153a0:	bf00      	nop
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}
 80153a8:	08020e00 	.word	0x08020e00
 80153ac:	08020e30 	.word	0x08020e30
 80153b0:	08020e44 	.word	0x08020e44

080153b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	7d1b      	ldrb	r3, [r3, #20]
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d105      	bne.n	80153d0 <tcp_free_listen+0x1c>
 80153c4:	4b06      	ldr	r3, [pc, #24]	@ (80153e0 <tcp_free_listen+0x2c>)
 80153c6:	22df      	movs	r2, #223	@ 0xdf
 80153c8:	4906      	ldr	r1, [pc, #24]	@ (80153e4 <tcp_free_listen+0x30>)
 80153ca:	4807      	ldr	r0, [pc, #28]	@ (80153e8 <tcp_free_listen+0x34>)
 80153cc:	f009 fa68 	bl	801e8a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80153d0:	6879      	ldr	r1, [r7, #4]
 80153d2:	2002      	movs	r0, #2
 80153d4:	f7fe fe82 	bl	80140dc <memp_free>
}
 80153d8:	bf00      	nop
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	08020e00 	.word	0x08020e00
 80153e4:	08020e6c 	.word	0x08020e6c
 80153e8:	08020e44 	.word	0x08020e44

080153ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80153f0:	f001 f8aa 	bl	8016548 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80153f4:	4b07      	ldr	r3, [pc, #28]	@ (8015414 <tcp_tmr+0x28>)
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	b2da      	uxtb	r2, r3
 80153fc:	4b05      	ldr	r3, [pc, #20]	@ (8015414 <tcp_tmr+0x28>)
 80153fe:	701a      	strb	r2, [r3, #0]
 8015400:	4b04      	ldr	r3, [pc, #16]	@ (8015414 <tcp_tmr+0x28>)
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	f003 0301 	and.w	r3, r3, #1
 8015408:	2b00      	cmp	r3, #0
 801540a:	d001      	beq.n	8015410 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801540c:	f000 fd5a 	bl	8015ec4 <tcp_slowtmr>
  }
}
 8015410:	bf00      	nop
 8015412:	bd80      	pop	{r7, pc}
 8015414:	240087a9 	.word	0x240087a9

08015418 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d105      	bne.n	8015434 <tcp_remove_listener+0x1c>
 8015428:	4b0d      	ldr	r3, [pc, #52]	@ (8015460 <tcp_remove_listener+0x48>)
 801542a:	22ff      	movs	r2, #255	@ 0xff
 801542c:	490d      	ldr	r1, [pc, #52]	@ (8015464 <tcp_remove_listener+0x4c>)
 801542e:	480e      	ldr	r0, [pc, #56]	@ (8015468 <tcp_remove_listener+0x50>)
 8015430:	f009 fa36 	bl	801e8a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	60fb      	str	r3, [r7, #12]
 8015438:	e00a      	b.n	8015450 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801543e:	683a      	ldr	r2, [r7, #0]
 8015440:	429a      	cmp	r2, r3
 8015442:	d102      	bne.n	801544a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2200      	movs	r2, #0
 8015448:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	68db      	ldr	r3, [r3, #12]
 801544e:	60fb      	str	r3, [r7, #12]
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1f1      	bne.n	801543a <tcp_remove_listener+0x22>
    }
  }
}
 8015456:	bf00      	nop
 8015458:	bf00      	nop
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	08020e00 	.word	0x08020e00
 8015464:	08020e88 	.word	0x08020e88
 8015468:	08020e44 	.word	0x08020e44

0801546c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d106      	bne.n	8015488 <tcp_listen_closed+0x1c>
 801547a:	4b14      	ldr	r3, [pc, #80]	@ (80154cc <tcp_listen_closed+0x60>)
 801547c:	f240 1211 	movw	r2, #273	@ 0x111
 8015480:	4913      	ldr	r1, [pc, #76]	@ (80154d0 <tcp_listen_closed+0x64>)
 8015482:	4814      	ldr	r0, [pc, #80]	@ (80154d4 <tcp_listen_closed+0x68>)
 8015484:	f009 fa0c 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	7d1b      	ldrb	r3, [r3, #20]
 801548c:	2b01      	cmp	r3, #1
 801548e:	d006      	beq.n	801549e <tcp_listen_closed+0x32>
 8015490:	4b0e      	ldr	r3, [pc, #56]	@ (80154cc <tcp_listen_closed+0x60>)
 8015492:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015496:	4910      	ldr	r1, [pc, #64]	@ (80154d8 <tcp_listen_closed+0x6c>)
 8015498:	480e      	ldr	r0, [pc, #56]	@ (80154d4 <tcp_listen_closed+0x68>)
 801549a:	f009 fa01 	bl	801e8a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801549e:	2301      	movs	r3, #1
 80154a0:	60fb      	str	r3, [r7, #12]
 80154a2:	e00b      	b.n	80154bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80154a4:	4a0d      	ldr	r2, [pc, #52]	@ (80154dc <tcp_listen_closed+0x70>)
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	6879      	ldr	r1, [r7, #4]
 80154b0:	4618      	mov	r0, r3
 80154b2:	f7ff ffb1 	bl	8015418 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	3301      	adds	r3, #1
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2b03      	cmp	r3, #3
 80154c0:	d9f0      	bls.n	80154a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80154c2:	bf00      	nop
 80154c4:	bf00      	nop
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	08020e00 	.word	0x08020e00
 80154d0:	08020eb0 	.word	0x08020eb0
 80154d4:	08020e44 	.word	0x08020e44
 80154d8:	08020ebc 	.word	0x08020ebc
 80154dc:	08022ee4 	.word	0x08022ee4

080154e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80154e0:	b5b0      	push	{r4, r5, r7, lr}
 80154e2:	b088      	sub	sp, #32
 80154e4:	af04      	add	r7, sp, #16
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	460b      	mov	r3, r1
 80154ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d106      	bne.n	8015500 <tcp_close_shutdown+0x20>
 80154f2:	4b63      	ldr	r3, [pc, #396]	@ (8015680 <tcp_close_shutdown+0x1a0>)
 80154f4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80154f8:	4962      	ldr	r1, [pc, #392]	@ (8015684 <tcp_close_shutdown+0x1a4>)
 80154fa:	4863      	ldr	r0, [pc, #396]	@ (8015688 <tcp_close_shutdown+0x1a8>)
 80154fc:	f009 f9d0 	bl	801e8a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015500:	78fb      	ldrb	r3, [r7, #3]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d067      	beq.n	80155d6 <tcp_close_shutdown+0xf6>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	7d1b      	ldrb	r3, [r3, #20]
 801550a:	2b04      	cmp	r3, #4
 801550c:	d003      	beq.n	8015516 <tcp_close_shutdown+0x36>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	7d1b      	ldrb	r3, [r3, #20]
 8015512:	2b07      	cmp	r3, #7
 8015514:	d15f      	bne.n	80155d6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801551a:	2b00      	cmp	r3, #0
 801551c:	d105      	bne.n	801552a <tcp_close_shutdown+0x4a>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015522:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8015526:	4293      	cmp	r3, r2
 8015528:	d055      	beq.n	80155d6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	8b5b      	ldrh	r3, [r3, #26]
 801552e:	f003 0310 	and.w	r3, r3, #16
 8015532:	2b00      	cmp	r3, #0
 8015534:	d106      	bne.n	8015544 <tcp_close_shutdown+0x64>
 8015536:	4b52      	ldr	r3, [pc, #328]	@ (8015680 <tcp_close_shutdown+0x1a0>)
 8015538:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801553c:	4953      	ldr	r1, [pc, #332]	@ (801568c <tcp_close_shutdown+0x1ac>)
 801553e:	4852      	ldr	r0, [pc, #328]	@ (8015688 <tcp_close_shutdown+0x1a8>)
 8015540:	f009 f9ae 	bl	801e8a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801554c:	687d      	ldr	r5, [r7, #4]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	3304      	adds	r3, #4
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	8ad2      	ldrh	r2, [r2, #22]
 8015556:	6879      	ldr	r1, [r7, #4]
 8015558:	8b09      	ldrh	r1, [r1, #24]
 801555a:	9102      	str	r1, [sp, #8]
 801555c:	9201      	str	r2, [sp, #4]
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	462b      	mov	r3, r5
 8015562:	4622      	mov	r2, r4
 8015564:	4601      	mov	r1, r0
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f005 fdbc 	bl	801b0e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f001 fb9d 	bl	8016cac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015572:	4b47      	ldr	r3, [pc, #284]	@ (8015690 <tcp_close_shutdown+0x1b0>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	687a      	ldr	r2, [r7, #4]
 8015578:	429a      	cmp	r2, r3
 801557a:	d105      	bne.n	8015588 <tcp_close_shutdown+0xa8>
 801557c:	4b44      	ldr	r3, [pc, #272]	@ (8015690 <tcp_close_shutdown+0x1b0>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	68db      	ldr	r3, [r3, #12]
 8015582:	4a43      	ldr	r2, [pc, #268]	@ (8015690 <tcp_close_shutdown+0x1b0>)
 8015584:	6013      	str	r3, [r2, #0]
 8015586:	e013      	b.n	80155b0 <tcp_close_shutdown+0xd0>
 8015588:	4b41      	ldr	r3, [pc, #260]	@ (8015690 <tcp_close_shutdown+0x1b0>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	60fb      	str	r3, [r7, #12]
 801558e:	e00c      	b.n	80155aa <tcp_close_shutdown+0xca>
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	68db      	ldr	r3, [r3, #12]
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	429a      	cmp	r2, r3
 8015598:	d104      	bne.n	80155a4 <tcp_close_shutdown+0xc4>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	68da      	ldr	r2, [r3, #12]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	60da      	str	r2, [r3, #12]
 80155a2:	e005      	b.n	80155b0 <tcp_close_shutdown+0xd0>
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	68db      	ldr	r3, [r3, #12]
 80155a8:	60fb      	str	r3, [r7, #12]
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d1ef      	bne.n	8015590 <tcp_close_shutdown+0xb0>
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2200      	movs	r2, #0
 80155b4:	60da      	str	r2, [r3, #12]
 80155b6:	4b37      	ldr	r3, [pc, #220]	@ (8015694 <tcp_close_shutdown+0x1b4>)
 80155b8:	2201      	movs	r2, #1
 80155ba:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80155bc:	4b36      	ldr	r3, [pc, #216]	@ (8015698 <tcp_close_shutdown+0x1b8>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d102      	bne.n	80155cc <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80155c6:	f004 f833 	bl	8019630 <tcp_trigger_input_pcb_close>
 80155ca:	e002      	b.n	80155d2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f7ff fed5 	bl	801537c <tcp_free>
      }
      return ERR_OK;
 80155d2:	2300      	movs	r3, #0
 80155d4:	e050      	b.n	8015678 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	7d1b      	ldrb	r3, [r3, #20]
 80155da:	2b02      	cmp	r3, #2
 80155dc:	d03b      	beq.n	8015656 <tcp_close_shutdown+0x176>
 80155de:	2b02      	cmp	r3, #2
 80155e0:	dc44      	bgt.n	801566c <tcp_close_shutdown+0x18c>
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d002      	beq.n	80155ec <tcp_close_shutdown+0x10c>
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d02a      	beq.n	8015640 <tcp_close_shutdown+0x160>
 80155ea:	e03f      	b.n	801566c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	8adb      	ldrh	r3, [r3, #22]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d021      	beq.n	8015638 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80155f4:	4b29      	ldr	r3, [pc, #164]	@ (801569c <tcp_close_shutdown+0x1bc>)
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d105      	bne.n	801560a <tcp_close_shutdown+0x12a>
 80155fe:	4b27      	ldr	r3, [pc, #156]	@ (801569c <tcp_close_shutdown+0x1bc>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	68db      	ldr	r3, [r3, #12]
 8015604:	4a25      	ldr	r2, [pc, #148]	@ (801569c <tcp_close_shutdown+0x1bc>)
 8015606:	6013      	str	r3, [r2, #0]
 8015608:	e013      	b.n	8015632 <tcp_close_shutdown+0x152>
 801560a:	4b24      	ldr	r3, [pc, #144]	@ (801569c <tcp_close_shutdown+0x1bc>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	60bb      	str	r3, [r7, #8]
 8015610:	e00c      	b.n	801562c <tcp_close_shutdown+0x14c>
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	429a      	cmp	r2, r3
 801561a:	d104      	bne.n	8015626 <tcp_close_shutdown+0x146>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	68da      	ldr	r2, [r3, #12]
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	60da      	str	r2, [r3, #12]
 8015624:	e005      	b.n	8015632 <tcp_close_shutdown+0x152>
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	60bb      	str	r3, [r7, #8]
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d1ef      	bne.n	8015612 <tcp_close_shutdown+0x132>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2200      	movs	r2, #0
 8015636:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f7ff fe9f 	bl	801537c <tcp_free>
      break;
 801563e:	e01a      	b.n	8015676 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f7ff ff13 	bl	801546c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015646:	6879      	ldr	r1, [r7, #4]
 8015648:	4815      	ldr	r0, [pc, #84]	@ (80156a0 <tcp_close_shutdown+0x1c0>)
 801564a:	f001 fb7f 	bl	8016d4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7ff feb0 	bl	80153b4 <tcp_free_listen>
      break;
 8015654:	e00f      	b.n	8015676 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015656:	6879      	ldr	r1, [r7, #4]
 8015658:	480d      	ldr	r0, [pc, #52]	@ (8015690 <tcp_close_shutdown+0x1b0>)
 801565a:	f001 fb77 	bl	8016d4c <tcp_pcb_remove>
 801565e:	4b0d      	ldr	r3, [pc, #52]	@ (8015694 <tcp_close_shutdown+0x1b4>)
 8015660:	2201      	movs	r2, #1
 8015662:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff fe89 	bl	801537c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801566a:	e004      	b.n	8015676 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f000 f819 	bl	80156a4 <tcp_close_shutdown_fin>
 8015672:	4603      	mov	r3, r0
 8015674:	e000      	b.n	8015678 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8015676:	2300      	movs	r3, #0
}
 8015678:	4618      	mov	r0, r3
 801567a:	3710      	adds	r7, #16
 801567c:	46bd      	mov	sp, r7
 801567e:	bdb0      	pop	{r4, r5, r7, pc}
 8015680:	08020e00 	.word	0x08020e00
 8015684:	08020ed4 	.word	0x08020ed4
 8015688:	08020e44 	.word	0x08020e44
 801568c:	08020ef4 	.word	0x08020ef4
 8015690:	240087a0 	.word	0x240087a0
 8015694:	240087a8 	.word	0x240087a8
 8015698:	240087e0 	.word	0x240087e0
 801569c:	24008798 	.word	0x24008798
 80156a0:	2400879c 	.word	0x2400879c

080156a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d106      	bne.n	80156c0 <tcp_close_shutdown_fin+0x1c>
 80156b2:	4b2e      	ldr	r3, [pc, #184]	@ (801576c <tcp_close_shutdown_fin+0xc8>)
 80156b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80156b8:	492d      	ldr	r1, [pc, #180]	@ (8015770 <tcp_close_shutdown_fin+0xcc>)
 80156ba:	482e      	ldr	r0, [pc, #184]	@ (8015774 <tcp_close_shutdown_fin+0xd0>)
 80156bc:	f009 f8f0 	bl	801e8a0 <iprintf>

  switch (pcb->state) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	7d1b      	ldrb	r3, [r3, #20]
 80156c4:	2b07      	cmp	r3, #7
 80156c6:	d020      	beq.n	801570a <tcp_close_shutdown_fin+0x66>
 80156c8:	2b07      	cmp	r3, #7
 80156ca:	dc2b      	bgt.n	8015724 <tcp_close_shutdown_fin+0x80>
 80156cc:	2b03      	cmp	r3, #3
 80156ce:	d002      	beq.n	80156d6 <tcp_close_shutdown_fin+0x32>
 80156d0:	2b04      	cmp	r3, #4
 80156d2:	d00d      	beq.n	80156f0 <tcp_close_shutdown_fin+0x4c>
 80156d4:	e026      	b.n	8015724 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f004 fe12 	bl	801a300 <tcp_send_fin>
 80156dc:	4603      	mov	r3, r0
 80156de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80156e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d11f      	bne.n	8015728 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2205      	movs	r2, #5
 80156ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80156ee:	e01b      	b.n	8015728 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f004 fe05 	bl	801a300 <tcp_send_fin>
 80156f6:	4603      	mov	r3, r0
 80156f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80156fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d114      	bne.n	801572c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2205      	movs	r2, #5
 8015706:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015708:	e010      	b.n	801572c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f004 fdf8 	bl	801a300 <tcp_send_fin>
 8015710:	4603      	mov	r3, r0
 8015712:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d109      	bne.n	8015730 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2209      	movs	r2, #9
 8015720:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015722:	e005      	b.n	8015730 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015724:	2300      	movs	r3, #0
 8015726:	e01c      	b.n	8015762 <tcp_close_shutdown_fin+0xbe>
      break;
 8015728:	bf00      	nop
 801572a:	e002      	b.n	8015732 <tcp_close_shutdown_fin+0x8e>
      break;
 801572c:	bf00      	nop
 801572e:	e000      	b.n	8015732 <tcp_close_shutdown_fin+0x8e>
      break;
 8015730:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d103      	bne.n	8015742 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f004 ff1e 	bl	801a57c <tcp_output>
 8015740:	e00d      	b.n	801575e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801574a:	d108      	bne.n	801575e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8b5b      	ldrh	r3, [r3, #26]
 8015750:	f043 0308 	orr.w	r3, r3, #8
 8015754:	b29a      	uxth	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801575a:	2300      	movs	r3, #0
 801575c:	e001      	b.n	8015762 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801575e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	08020e00 	.word	0x08020e00
 8015770:	08020eb0 	.word	0x08020eb0
 8015774:	08020e44 	.word	0x08020e44

08015778 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d109      	bne.n	801579a <tcp_close+0x22>
 8015786:	4b0f      	ldr	r3, [pc, #60]	@ (80157c4 <tcp_close+0x4c>)
 8015788:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801578c:	490e      	ldr	r1, [pc, #56]	@ (80157c8 <tcp_close+0x50>)
 801578e:	480f      	ldr	r0, [pc, #60]	@ (80157cc <tcp_close+0x54>)
 8015790:	f009 f886 	bl	801e8a0 <iprintf>
 8015794:	f06f 030f 	mvn.w	r3, #15
 8015798:	e00f      	b.n	80157ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	7d1b      	ldrb	r3, [r3, #20]
 801579e:	2b01      	cmp	r3, #1
 80157a0:	d006      	beq.n	80157b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	8b5b      	ldrh	r3, [r3, #26]
 80157a6:	f043 0310 	orr.w	r3, r3, #16
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80157b0:	2101      	movs	r1, #1
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7ff fe94 	bl	80154e0 <tcp_close_shutdown>
 80157b8:	4603      	mov	r3, r0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3708      	adds	r7, #8
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	08020e00 	.word	0x08020e00
 80157c8:	08020f10 	.word	0x08020f10
 80157cc:	08020e44 	.word	0x08020e44

080157d0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d109      	bne.n	80157f6 <tcp_shutdown+0x26>
 80157e2:	4b26      	ldr	r3, [pc, #152]	@ (801587c <tcp_shutdown+0xac>)
 80157e4:	f240 2207 	movw	r2, #519	@ 0x207
 80157e8:	4925      	ldr	r1, [pc, #148]	@ (8015880 <tcp_shutdown+0xb0>)
 80157ea:	4826      	ldr	r0, [pc, #152]	@ (8015884 <tcp_shutdown+0xb4>)
 80157ec:	f009 f858 	bl	801e8a0 <iprintf>
 80157f0:	f06f 030f 	mvn.w	r3, #15
 80157f4:	e03d      	b.n	8015872 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	7d1b      	ldrb	r3, [r3, #20]
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d102      	bne.n	8015804 <tcp_shutdown+0x34>
    return ERR_CONN;
 80157fe:	f06f 030a 	mvn.w	r3, #10
 8015802:	e036      	b.n	8015872 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d01b      	beq.n	8015842 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	8b5b      	ldrh	r3, [r3, #26]
 801580e:	f043 0310 	orr.w	r3, r3, #16
 8015812:	b29a      	uxth	r2, r3
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d005      	beq.n	801582a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801581e:	2101      	movs	r1, #1
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f7ff fe5d 	bl	80154e0 <tcp_close_shutdown>
 8015826:	4603      	mov	r3, r0
 8015828:	e023      	b.n	8015872 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801582e:	2b00      	cmp	r3, #0
 8015830:	d007      	beq.n	8015842 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015836:	4618      	mov	r0, r3
 8015838:	f7ff faf4 	bl	8014e24 <pbuf_free>
      pcb->refused_data = NULL;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2200      	movs	r2, #0
 8015840:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d013      	beq.n	8015870 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	7d1b      	ldrb	r3, [r3, #20]
 801584c:	2b04      	cmp	r3, #4
 801584e:	dc02      	bgt.n	8015856 <tcp_shutdown+0x86>
 8015850:	2b03      	cmp	r3, #3
 8015852:	da02      	bge.n	801585a <tcp_shutdown+0x8a>
 8015854:	e009      	b.n	801586a <tcp_shutdown+0x9a>
 8015856:	2b07      	cmp	r3, #7
 8015858:	d107      	bne.n	801586a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	b2db      	uxtb	r3, r3
 801585e:	4619      	mov	r1, r3
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	f7ff fe3d 	bl	80154e0 <tcp_close_shutdown>
 8015866:	4603      	mov	r3, r0
 8015868:	e003      	b.n	8015872 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801586a:	f06f 030a 	mvn.w	r3, #10
 801586e:	e000      	b.n	8015872 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	3710      	adds	r7, #16
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	08020e00 	.word	0x08020e00
 8015880:	08020f28 	.word	0x08020f28
 8015884:	08020e44 	.word	0x08020e44

08015888 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b08e      	sub	sp, #56	@ 0x38
 801588c:	af04      	add	r7, sp, #16
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d107      	bne.n	80158a8 <tcp_abandon+0x20>
 8015898:	4b52      	ldr	r3, [pc, #328]	@ (80159e4 <tcp_abandon+0x15c>)
 801589a:	f240 223d 	movw	r2, #573	@ 0x23d
 801589e:	4952      	ldr	r1, [pc, #328]	@ (80159e8 <tcp_abandon+0x160>)
 80158a0:	4852      	ldr	r0, [pc, #328]	@ (80159ec <tcp_abandon+0x164>)
 80158a2:	f008 fffd 	bl	801e8a0 <iprintf>
 80158a6:	e099      	b.n	80159dc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	7d1b      	ldrb	r3, [r3, #20]
 80158ac:	2b01      	cmp	r3, #1
 80158ae:	d106      	bne.n	80158be <tcp_abandon+0x36>
 80158b0:	4b4c      	ldr	r3, [pc, #304]	@ (80159e4 <tcp_abandon+0x15c>)
 80158b2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80158b6:	494e      	ldr	r1, [pc, #312]	@ (80159f0 <tcp_abandon+0x168>)
 80158b8:	484c      	ldr	r0, [pc, #304]	@ (80159ec <tcp_abandon+0x164>)
 80158ba:	f008 fff1 	bl	801e8a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	7d1b      	ldrb	r3, [r3, #20]
 80158c2:	2b0a      	cmp	r3, #10
 80158c4:	d107      	bne.n	80158d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80158c6:	6879      	ldr	r1, [r7, #4]
 80158c8:	484a      	ldr	r0, [pc, #296]	@ (80159f4 <tcp_abandon+0x16c>)
 80158ca:	f001 fa3f 	bl	8016d4c <tcp_pcb_remove>
    tcp_free(pcb);
 80158ce:	6878      	ldr	r0, [r7, #4]
 80158d0:	f7ff fd54 	bl	801537c <tcp_free>
 80158d4:	e082      	b.n	80159dc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80158d6:	2300      	movs	r3, #0
 80158d8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80158da:	2300      	movs	r3, #0
 80158dc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80158f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	691b      	ldr	r3, [r3, #16]
 80158f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	7d1b      	ldrb	r3, [r3, #20]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d126      	bne.n	801594e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	8adb      	ldrh	r3, [r3, #22]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d02e      	beq.n	8015966 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015908:	4b3b      	ldr	r3, [pc, #236]	@ (80159f8 <tcp_abandon+0x170>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	429a      	cmp	r2, r3
 8015910:	d105      	bne.n	801591e <tcp_abandon+0x96>
 8015912:	4b39      	ldr	r3, [pc, #228]	@ (80159f8 <tcp_abandon+0x170>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	4a37      	ldr	r2, [pc, #220]	@ (80159f8 <tcp_abandon+0x170>)
 801591a:	6013      	str	r3, [r2, #0]
 801591c:	e013      	b.n	8015946 <tcp_abandon+0xbe>
 801591e:	4b36      	ldr	r3, [pc, #216]	@ (80159f8 <tcp_abandon+0x170>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	61fb      	str	r3, [r7, #28]
 8015924:	e00c      	b.n	8015940 <tcp_abandon+0xb8>
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d104      	bne.n	801593a <tcp_abandon+0xb2>
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	68da      	ldr	r2, [r3, #12]
 8015934:	69fb      	ldr	r3, [r7, #28]
 8015936:	60da      	str	r2, [r3, #12]
 8015938:	e005      	b.n	8015946 <tcp_abandon+0xbe>
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	61fb      	str	r3, [r7, #28]
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d1ef      	bne.n	8015926 <tcp_abandon+0x9e>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2200      	movs	r2, #0
 801594a:	60da      	str	r2, [r3, #12]
 801594c:	e00b      	b.n	8015966 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	8adb      	ldrh	r3, [r3, #22]
 8015956:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015958:	6879      	ldr	r1, [r7, #4]
 801595a:	4828      	ldr	r0, [pc, #160]	@ (80159fc <tcp_abandon+0x174>)
 801595c:	f001 f9f6 	bl	8016d4c <tcp_pcb_remove>
 8015960:	4b27      	ldr	r3, [pc, #156]	@ (8015a00 <tcp_abandon+0x178>)
 8015962:	2201      	movs	r2, #1
 8015964:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801596a:	2b00      	cmp	r3, #0
 801596c:	d004      	beq.n	8015978 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015972:	4618      	mov	r0, r3
 8015974:	f000 feca 	bl	801670c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801597c:	2b00      	cmp	r3, #0
 801597e:	d004      	beq.n	801598a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015984:	4618      	mov	r0, r3
 8015986:	f000 fec1 	bl	801670c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801598e:	2b00      	cmp	r3, #0
 8015990:	d004      	beq.n	801599c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015996:	4618      	mov	r0, r3
 8015998:	f000 feb8 	bl	801670c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d00e      	beq.n	80159c0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	3304      	adds	r3, #4
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	8b12      	ldrh	r2, [r2, #24]
 80159ac:	9202      	str	r2, [sp, #8]
 80159ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80159b0:	9201      	str	r2, [sp, #4]
 80159b2:	9300      	str	r3, [sp, #0]
 80159b4:	460b      	mov	r3, r1
 80159b6:	697a      	ldr	r2, [r7, #20]
 80159b8:	69b9      	ldr	r1, [r7, #24]
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f005 fb92 	bl	801b0e4 <tcp_rst>
    }
    last_state = pcb->state;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	7d1b      	ldrb	r3, [r3, #20]
 80159c4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f7ff fcd8 	bl	801537c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d004      	beq.n	80159dc <tcp_abandon+0x154>
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	f06f 010c 	mvn.w	r1, #12
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	4798      	blx	r3
  }
}
 80159dc:	3728      	adds	r7, #40	@ 0x28
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	08020e00 	.word	0x08020e00
 80159e8:	08020f44 	.word	0x08020f44
 80159ec:	08020e44 	.word	0x08020e44
 80159f0:	08020f60 	.word	0x08020f60
 80159f4:	240087a4 	.word	0x240087a4
 80159f8:	24008798 	.word	0x24008798
 80159fc:	240087a0 	.word	0x240087a0
 8015a00:	240087a8 	.word	0x240087a8

08015a04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015a0c:	2101      	movs	r1, #1
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f7ff ff3a 	bl	8015888 <tcp_abandon>
}
 8015a14:	bf00      	nop
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b088      	sub	sp, #32
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	4613      	mov	r3, r2
 8015a28:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015a2a:	2304      	movs	r3, #4
 8015a2c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d101      	bne.n	8015a38 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015a34:	4b3e      	ldr	r3, [pc, #248]	@ (8015b30 <tcp_bind+0x114>)
 8015a36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d109      	bne.n	8015a52 <tcp_bind+0x36>
 8015a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8015b34 <tcp_bind+0x118>)
 8015a40:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015a44:	493c      	ldr	r1, [pc, #240]	@ (8015b38 <tcp_bind+0x11c>)
 8015a46:	483d      	ldr	r0, [pc, #244]	@ (8015b3c <tcp_bind+0x120>)
 8015a48:	f008 ff2a 	bl	801e8a0 <iprintf>
 8015a4c:	f06f 030f 	mvn.w	r3, #15
 8015a50:	e06a      	b.n	8015b28 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	7d1b      	ldrb	r3, [r3, #20]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d009      	beq.n	8015a6e <tcp_bind+0x52>
 8015a5a:	4b36      	ldr	r3, [pc, #216]	@ (8015b34 <tcp_bind+0x118>)
 8015a5c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015a60:	4937      	ldr	r1, [pc, #220]	@ (8015b40 <tcp_bind+0x124>)
 8015a62:	4836      	ldr	r0, [pc, #216]	@ (8015b3c <tcp_bind+0x120>)
 8015a64:	f008 ff1c 	bl	801e8a0 <iprintf>
 8015a68:	f06f 0305 	mvn.w	r3, #5
 8015a6c:	e05c      	b.n	8015b28 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015a6e:	88fb      	ldrh	r3, [r7, #6]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d109      	bne.n	8015a88 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015a74:	f000 f9e0 	bl	8015e38 <tcp_new_port>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015a7c:	88fb      	ldrh	r3, [r7, #6]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d135      	bne.n	8015aee <tcp_bind+0xd2>
      return ERR_BUF;
 8015a82:	f06f 0301 	mvn.w	r3, #1
 8015a86:	e04f      	b.n	8015b28 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015a88:	2300      	movs	r3, #0
 8015a8a:	61fb      	str	r3, [r7, #28]
 8015a8c:	e02b      	b.n	8015ae6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8015b44 <tcp_bind+0x128>)
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	61bb      	str	r3, [r7, #24]
 8015a9a:	e01e      	b.n	8015ada <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	8adb      	ldrh	r3, [r3, #22]
 8015aa0:	88fa      	ldrh	r2, [r7, #6]
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	d116      	bne.n	8015ad4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015aa6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d010      	beq.n	8015ace <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015aac:	69bb      	ldr	r3, [r7, #24]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d00c      	beq.n	8015ace <tcp_bind+0xb2>
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d009      	beq.n	8015ace <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d005      	beq.n	8015ace <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015ac2:	69bb      	ldr	r3, [r7, #24]
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d102      	bne.n	8015ad4 <tcp_bind+0xb8>
              return ERR_USE;
 8015ace:	f06f 0307 	mvn.w	r3, #7
 8015ad2:	e029      	b.n	8015b28 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015ad4:	69bb      	ldr	r3, [r7, #24]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	61bb      	str	r3, [r7, #24]
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d1dd      	bne.n	8015a9c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	61fb      	str	r3, [r7, #28]
 8015ae6:	69fa      	ldr	r2, [r7, #28]
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	dbcf      	blt.n	8015a8e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d00c      	beq.n	8015b0e <tcp_bind+0xf2>
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d008      	beq.n	8015b0e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <tcp_bind+0xec>
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	e000      	b.n	8015b0a <tcp_bind+0xee>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	68fa      	ldr	r2, [r7, #12]
 8015b0c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	88fa      	ldrh	r2, [r7, #6]
 8015b12:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015b14:	4b0c      	ldr	r3, [pc, #48]	@ (8015b48 <tcp_bind+0x12c>)
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	60da      	str	r2, [r3, #12]
 8015b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8015b48 <tcp_bind+0x12c>)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6013      	str	r3, [r2, #0]
 8015b22:	f005 fca1 	bl	801b468 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015b26:	2300      	movs	r3, #0
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3720      	adds	r7, #32
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	08022f0c 	.word	0x08022f0c
 8015b34:	08020e00 	.word	0x08020e00
 8015b38:	08020f94 	.word	0x08020f94
 8015b3c:	08020e44 	.word	0x08020e44
 8015b40:	08020fac 	.word	0x08020fac
 8015b44:	08022ee4 	.word	0x08022ee4
 8015b48:	24008798 	.word	0x24008798

08015b4c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	4613      	mov	r3, r2
 8015b58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d106      	bne.n	8015b6e <tcp_accept_null+0x22>
 8015b60:	4b07      	ldr	r3, [pc, #28]	@ (8015b80 <tcp_accept_null+0x34>)
 8015b62:	f240 320f 	movw	r2, #783	@ 0x30f
 8015b66:	4907      	ldr	r1, [pc, #28]	@ (8015b84 <tcp_accept_null+0x38>)
 8015b68:	4807      	ldr	r0, [pc, #28]	@ (8015b88 <tcp_accept_null+0x3c>)
 8015b6a:	f008 fe99 	bl	801e8a0 <iprintf>

  tcp_abort(pcb);
 8015b6e:	68b8      	ldr	r0, [r7, #8]
 8015b70:	f7ff ff48 	bl	8015a04 <tcp_abort>

  return ERR_ABRT;
 8015b74:	f06f 030c 	mvn.w	r3, #12
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3710      	adds	r7, #16
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	08020e00 	.word	0x08020e00
 8015b84:	08020fd4 	.word	0x08020fd4
 8015b88:	08020e44 	.word	0x08020e44

08015b8c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b088      	sub	sp, #32
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	460b      	mov	r3, r1
 8015b96:	607a      	str	r2, [r7, #4]
 8015b98:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d109      	bne.n	8015bb8 <tcp_listen_with_backlog_and_err+0x2c>
 8015ba4:	4b47      	ldr	r3, [pc, #284]	@ (8015cc4 <tcp_listen_with_backlog_and_err+0x138>)
 8015ba6:	f240 3259 	movw	r2, #857	@ 0x359
 8015baa:	4947      	ldr	r1, [pc, #284]	@ (8015cc8 <tcp_listen_with_backlog_and_err+0x13c>)
 8015bac:	4847      	ldr	r0, [pc, #284]	@ (8015ccc <tcp_listen_with_backlog_and_err+0x140>)
 8015bae:	f008 fe77 	bl	801e8a0 <iprintf>
 8015bb2:	23f0      	movs	r3, #240	@ 0xf0
 8015bb4:	76fb      	strb	r3, [r7, #27]
 8015bb6:	e079      	b.n	8015cac <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	7d1b      	ldrb	r3, [r3, #20]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d009      	beq.n	8015bd4 <tcp_listen_with_backlog_and_err+0x48>
 8015bc0:	4b40      	ldr	r3, [pc, #256]	@ (8015cc4 <tcp_listen_with_backlog_and_err+0x138>)
 8015bc2:	f240 325a 	movw	r2, #858	@ 0x35a
 8015bc6:	4942      	ldr	r1, [pc, #264]	@ (8015cd0 <tcp_listen_with_backlog_and_err+0x144>)
 8015bc8:	4840      	ldr	r0, [pc, #256]	@ (8015ccc <tcp_listen_with_backlog_and_err+0x140>)
 8015bca:	f008 fe69 	bl	801e8a0 <iprintf>
 8015bce:	23f1      	movs	r3, #241	@ 0xf1
 8015bd0:	76fb      	strb	r3, [r7, #27]
 8015bd2:	e06b      	b.n	8015cac <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	7d1b      	ldrb	r3, [r3, #20]
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	d104      	bne.n	8015be6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015be0:	23f7      	movs	r3, #247	@ 0xf7
 8015be2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015be4:	e062      	b.n	8015cac <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015be6:	2002      	movs	r0, #2
 8015be8:	f7fe fa02 	bl	8013ff0 <memp_malloc>
 8015bec:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8015bee:	69fb      	ldr	r3, [r7, #28]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d102      	bne.n	8015bfa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015bf4:	23ff      	movs	r3, #255	@ 0xff
 8015bf6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015bf8:	e058      	b.n	8015cac <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	691a      	ldr	r2, [r3, #16]
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	8ada      	ldrh	r2, [r3, #22]
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	7d5a      	ldrb	r2, [r3, #21]
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	7a5a      	ldrb	r2, [r3, #9]
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	2200      	movs	r2, #0
 8015c24:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	7ada      	ldrb	r2, [r3, #11]
 8015c2a:	69fb      	ldr	r3, [r7, #28]
 8015c2c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	7a9a      	ldrb	r2, [r3, #10]
 8015c32:	69fb      	ldr	r3, [r7, #28]
 8015c34:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	69fb      	ldr	r3, [r7, #28]
 8015c3c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	8adb      	ldrh	r3, [r3, #22]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d021      	beq.n	8015c8a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015c46:	4b23      	ldr	r3, [pc, #140]	@ (8015cd4 <tcp_listen_with_backlog_and_err+0x148>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d105      	bne.n	8015c5c <tcp_listen_with_backlog_and_err+0xd0>
 8015c50:	4b20      	ldr	r3, [pc, #128]	@ (8015cd4 <tcp_listen_with_backlog_and_err+0x148>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	4a1f      	ldr	r2, [pc, #124]	@ (8015cd4 <tcp_listen_with_backlog_and_err+0x148>)
 8015c58:	6013      	str	r3, [r2, #0]
 8015c5a:	e013      	b.n	8015c84 <tcp_listen_with_backlog_and_err+0xf8>
 8015c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8015cd4 <tcp_listen_with_backlog_and_err+0x148>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	617b      	str	r3, [r7, #20]
 8015c62:	e00c      	b.n	8015c7e <tcp_listen_with_backlog_and_err+0xf2>
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d104      	bne.n	8015c78 <tcp_listen_with_backlog_and_err+0xec>
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	68da      	ldr	r2, [r3, #12]
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	60da      	str	r2, [r3, #12]
 8015c76:	e005      	b.n	8015c84 <tcp_listen_with_backlog_and_err+0xf8>
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	617b      	str	r3, [r7, #20]
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d1ef      	bne.n	8015c64 <tcp_listen_with_backlog_and_err+0xd8>
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2200      	movs	r2, #0
 8015c88:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	f7ff fb76 	bl	801537c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	4a11      	ldr	r2, [pc, #68]	@ (8015cd8 <tcp_listen_with_backlog_and_err+0x14c>)
 8015c94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015c96:	4b11      	ldr	r3, [pc, #68]	@ (8015cdc <tcp_listen_with_backlog_and_err+0x150>)
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	69fb      	ldr	r3, [r7, #28]
 8015c9c:	60da      	str	r2, [r3, #12]
 8015c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8015cdc <tcp_listen_with_backlog_and_err+0x150>)
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	6013      	str	r3, [r2, #0]
 8015ca4:	f005 fbe0 	bl	801b468 <tcp_timer_needed>
  res = ERR_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	7efa      	ldrb	r2, [r7, #27]
 8015cb6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015cb8:	69fb      	ldr	r3, [r7, #28]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3720      	adds	r7, #32
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	08020e00 	.word	0x08020e00
 8015cc8:	08020ff4 	.word	0x08020ff4
 8015ccc:	08020e44 	.word	0x08020e44
 8015cd0:	08021024 	.word	0x08021024
 8015cd4:	24008798 	.word	0x24008798
 8015cd8:	08015b4d 	.word	0x08015b4d
 8015cdc:	2400879c 	.word	0x2400879c

08015ce0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <tcp_update_rcv_ann_wnd+0x1c>
 8015cee:	4b25      	ldr	r3, [pc, #148]	@ (8015d84 <tcp_update_rcv_ann_wnd+0xa4>)
 8015cf0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015cf4:	4924      	ldr	r1, [pc, #144]	@ (8015d88 <tcp_update_rcv_ann_wnd+0xa8>)
 8015cf6:	4825      	ldr	r0, [pc, #148]	@ (8015d8c <tcp_update_rcv_ann_wnd+0xac>)
 8015cf8:	f008 fdd2 	bl	801e8a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015d04:	4413      	add	r3, r2
 8015d06:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015d10:	f640 3168 	movw	r1, #2920	@ 0xb68
 8015d14:	428a      	cmp	r2, r1
 8015d16:	bf28      	it	cs
 8015d18:	460a      	movcs	r2, r1
 8015d1a:	b292      	uxth	r2, r2
 8015d1c:	4413      	add	r3, r2
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	1ad3      	subs	r3, r2, r3
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	db08      	blt.n	8015d38 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	e020      	b.n	8015d7a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	dd03      	ble.n	8015d4e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d4c:	e014      	b.n	8015d78 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d60:	d306      	bcc.n	8015d70 <tcp_update_rcv_ann_wnd+0x90>
 8015d62:	4b08      	ldr	r3, [pc, #32]	@ (8015d84 <tcp_update_rcv_ann_wnd+0xa4>)
 8015d64:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015d68:	4909      	ldr	r1, [pc, #36]	@ (8015d90 <tcp_update_rcv_ann_wnd+0xb0>)
 8015d6a:	4808      	ldr	r0, [pc, #32]	@ (8015d8c <tcp_update_rcv_ann_wnd+0xac>)
 8015d6c:	f008 fd98 	bl	801e8a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015d78:	2300      	movs	r3, #0
  }
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3710      	adds	r7, #16
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop
 8015d84:	08020e00 	.word	0x08020e00
 8015d88:	0802105c 	.word	0x0802105c
 8015d8c:	08020e44 	.word	0x08020e44
 8015d90:	08021080 	.word	0x08021080

08015d94 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d107      	bne.n	8015db6 <tcp_recved+0x22>
 8015da6:	4b20      	ldr	r3, [pc, #128]	@ (8015e28 <tcp_recved+0x94>)
 8015da8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015dac:	491f      	ldr	r1, [pc, #124]	@ (8015e2c <tcp_recved+0x98>)
 8015dae:	4820      	ldr	r0, [pc, #128]	@ (8015e30 <tcp_recved+0x9c>)
 8015db0:	f008 fd76 	bl	801e8a0 <iprintf>
 8015db4:	e034      	b.n	8015e20 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	7d1b      	ldrb	r3, [r3, #20]
 8015dba:	2b01      	cmp	r3, #1
 8015dbc:	d106      	bne.n	8015dcc <tcp_recved+0x38>
 8015dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8015e28 <tcp_recved+0x94>)
 8015dc0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015dc4:	491b      	ldr	r1, [pc, #108]	@ (8015e34 <tcp_recved+0xa0>)
 8015dc6:	481a      	ldr	r0, [pc, #104]	@ (8015e30 <tcp_recved+0x9c>)
 8015dc8:	f008 fd6a 	bl	801e8a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015dd0:	887b      	ldrh	r3, [r7, #2]
 8015dd2:	4413      	add	r3, r2
 8015dd4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015dd6:	89fb      	ldrh	r3, [r7, #14]
 8015dd8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d804      	bhi.n	8015dea <tcp_recved+0x56>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015de4:	89fa      	ldrh	r2, [r7, #14]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d204      	bcs.n	8015df4 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8015df0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015df2:	e002      	b.n	8015dfa <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	89fa      	ldrh	r2, [r7, #14]
 8015df8:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f7ff ff70 	bl	8015ce0 <tcp_update_rcv_ann_wnd>
 8015e00:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d909      	bls.n	8015e20 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	8b5b      	ldrh	r3, [r3, #26]
 8015e10:	f043 0302 	orr.w	r3, r3, #2
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f004 fbae 	bl	801a57c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015e20:	3710      	adds	r7, #16
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	08020e00 	.word	0x08020e00
 8015e2c:	0802109c 	.word	0x0802109c
 8015e30:	08020e44 	.word	0x08020e44
 8015e34:	080210b4 	.word	0x080210b4

08015e38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015e42:	4b1e      	ldr	r3, [pc, #120]	@ (8015ebc <tcp_new_port+0x84>)
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	3301      	adds	r3, #1
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8015ebc <tcp_new_port+0x84>)
 8015e4c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015ebc <tcp_new_port+0x84>)
 8015e50:	881b      	ldrh	r3, [r3, #0]
 8015e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e56:	4293      	cmp	r3, r2
 8015e58:	d103      	bne.n	8015e62 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015e5a:	4b18      	ldr	r3, [pc, #96]	@ (8015ebc <tcp_new_port+0x84>)
 8015e5c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015e60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015e62:	2300      	movs	r3, #0
 8015e64:	71fb      	strb	r3, [r7, #7]
 8015e66:	e01e      	b.n	8015ea6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015e68:	79fb      	ldrb	r3, [r7, #7]
 8015e6a:	4a15      	ldr	r2, [pc, #84]	@ (8015ec0 <tcp_new_port+0x88>)
 8015e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	603b      	str	r3, [r7, #0]
 8015e74:	e011      	b.n	8015e9a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	8ada      	ldrh	r2, [r3, #22]
 8015e7a:	4b10      	ldr	r3, [pc, #64]	@ (8015ebc <tcp_new_port+0x84>)
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d108      	bne.n	8015e94 <tcp_new_port+0x5c>
        n++;
 8015e82:	88bb      	ldrh	r3, [r7, #4]
 8015e84:	3301      	adds	r3, #1
 8015e86:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015e88:	88bb      	ldrh	r3, [r7, #4]
 8015e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015e8e:	d3d8      	bcc.n	8015e42 <tcp_new_port+0xa>
          return 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	e00d      	b.n	8015eb0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	68db      	ldr	r3, [r3, #12]
 8015e98:	603b      	str	r3, [r7, #0]
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d1ea      	bne.n	8015e76 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015ea0:	79fb      	ldrb	r3, [r7, #7]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	71fb      	strb	r3, [r7, #7]
 8015ea6:	79fb      	ldrb	r3, [r7, #7]
 8015ea8:	2b03      	cmp	r3, #3
 8015eaa:	d9dd      	bls.n	8015e68 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015eac:	4b03      	ldr	r3, [pc, #12]	@ (8015ebc <tcp_new_port+0x84>)
 8015eae:	881b      	ldrh	r3, [r3, #0]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	370c      	adds	r7, #12
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eba:	4770      	bx	lr
 8015ebc:	24000028 	.word	0x24000028
 8015ec0:	08022ee4 	.word	0x08022ee4

08015ec4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015ec4:	b5b0      	push	{r4, r5, r7, lr}
 8015ec6:	b090      	sub	sp, #64	@ 0x40
 8015ec8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015ed0:	4b95      	ldr	r3, [pc, #596]	@ (8016128 <tcp_slowtmr+0x264>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	4a94      	ldr	r2, [pc, #592]	@ (8016128 <tcp_slowtmr+0x264>)
 8015ed8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015eda:	4b94      	ldr	r3, [pc, #592]	@ (801612c <tcp_slowtmr+0x268>)
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	b2da      	uxtb	r2, r3
 8015ee2:	4b92      	ldr	r3, [pc, #584]	@ (801612c <tcp_slowtmr+0x268>)
 8015ee4:	701a      	strb	r2, [r3, #0]
 8015ee6:	e000      	b.n	8015eea <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015ee8:	bf00      	nop
  prev = NULL;
 8015eea:	2300      	movs	r3, #0
 8015eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015eee:	4b90      	ldr	r3, [pc, #576]	@ (8016130 <tcp_slowtmr+0x26c>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015ef4:	e29d      	b.n	8016432 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ef8:	7d1b      	ldrb	r3, [r3, #20]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d106      	bne.n	8015f0c <tcp_slowtmr+0x48>
 8015efe:	4b8d      	ldr	r3, [pc, #564]	@ (8016134 <tcp_slowtmr+0x270>)
 8015f00:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015f04:	498c      	ldr	r1, [pc, #560]	@ (8016138 <tcp_slowtmr+0x274>)
 8015f06:	488d      	ldr	r0, [pc, #564]	@ (801613c <tcp_slowtmr+0x278>)
 8015f08:	f008 fcca 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f0e:	7d1b      	ldrb	r3, [r3, #20]
 8015f10:	2b01      	cmp	r3, #1
 8015f12:	d106      	bne.n	8015f22 <tcp_slowtmr+0x5e>
 8015f14:	4b87      	ldr	r3, [pc, #540]	@ (8016134 <tcp_slowtmr+0x270>)
 8015f16:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015f1a:	4989      	ldr	r1, [pc, #548]	@ (8016140 <tcp_slowtmr+0x27c>)
 8015f1c:	4887      	ldr	r0, [pc, #540]	@ (801613c <tcp_slowtmr+0x278>)
 8015f1e:	f008 fcbf 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f24:	7d1b      	ldrb	r3, [r3, #20]
 8015f26:	2b0a      	cmp	r3, #10
 8015f28:	d106      	bne.n	8015f38 <tcp_slowtmr+0x74>
 8015f2a:	4b82      	ldr	r3, [pc, #520]	@ (8016134 <tcp_slowtmr+0x270>)
 8015f2c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015f30:	4984      	ldr	r1, [pc, #528]	@ (8016144 <tcp_slowtmr+0x280>)
 8015f32:	4882      	ldr	r0, [pc, #520]	@ (801613c <tcp_slowtmr+0x278>)
 8015f34:	f008 fcb4 	bl	801e8a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f3a:	7f9a      	ldrb	r2, [r3, #30]
 8015f3c:	4b7b      	ldr	r3, [pc, #492]	@ (801612c <tcp_slowtmr+0x268>)
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d105      	bne.n	8015f50 <tcp_slowtmr+0x8c>
      prev = pcb;
 8015f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f46:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f4a:	68db      	ldr	r3, [r3, #12]
 8015f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015f4e:	e270      	b.n	8016432 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015f50:	4b76      	ldr	r3, [pc, #472]	@ (801612c <tcp_slowtmr+0x268>)
 8015f52:	781a      	ldrb	r2, [r3, #0]
 8015f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f56:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	7d1b      	ldrb	r3, [r3, #20]
 8015f68:	2b02      	cmp	r3, #2
 8015f6a:	d10a      	bne.n	8015f82 <tcp_slowtmr+0xbe>
 8015f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015f72:	2b05      	cmp	r3, #5
 8015f74:	d905      	bls.n	8015f82 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f80:	e11e      	b.n	80161c0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015f88:	2b0b      	cmp	r3, #11
 8015f8a:	d905      	bls.n	8015f98 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f90:	3301      	adds	r3, #1
 8015f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f96:	e113      	b.n	80161c0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d075      	beq.n	801608e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d006      	beq.n	8015fb8 <tcp_slowtmr+0xf4>
 8015faa:	4b62      	ldr	r3, [pc, #392]	@ (8016134 <tcp_slowtmr+0x270>)
 8015fac:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015fb0:	4965      	ldr	r1, [pc, #404]	@ (8016148 <tcp_slowtmr+0x284>)
 8015fb2:	4862      	ldr	r0, [pc, #392]	@ (801613c <tcp_slowtmr+0x278>)
 8015fb4:	f008 fc74 	bl	801e8a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d106      	bne.n	8015fce <tcp_slowtmr+0x10a>
 8015fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8016134 <tcp_slowtmr+0x270>)
 8015fc2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015fc6:	4961      	ldr	r1, [pc, #388]	@ (801614c <tcp_slowtmr+0x288>)
 8015fc8:	485c      	ldr	r0, [pc, #368]	@ (801613c <tcp_slowtmr+0x278>)
 8015fca:	f008 fc69 	bl	801e8a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015fd4:	2b0b      	cmp	r3, #11
 8015fd6:	d905      	bls.n	8015fe4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fdc:	3301      	adds	r3, #1
 8015fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015fe2:	e0ed      	b.n	80161c0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015fea:	3b01      	subs	r3, #1
 8015fec:	4a58      	ldr	r2, [pc, #352]	@ (8016150 <tcp_slowtmr+0x28c>)
 8015fee:	5cd3      	ldrb	r3, [r2, r3]
 8015ff0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015ff8:	7c7a      	ldrb	r2, [r7, #17]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d907      	bls.n	801600e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016000:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016004:	3301      	adds	r3, #1
 8016006:	b2da      	uxtb	r2, r3
 8016008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801600a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016010:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016014:	7c7a      	ldrb	r2, [r7, #17]
 8016016:	429a      	cmp	r2, r3
 8016018:	f200 80d2 	bhi.w	80161c0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801601c:	2301      	movs	r3, #1
 801601e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8016020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016026:	2b00      	cmp	r3, #0
 8016028:	d108      	bne.n	801603c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801602a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801602c:	f005 f94e 	bl	801b2cc <tcp_zero_window_probe>
 8016030:	4603      	mov	r3, r0
 8016032:	2b00      	cmp	r3, #0
 8016034:	d014      	beq.n	8016060 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8016036:	2300      	movs	r3, #0
 8016038:	623b      	str	r3, [r7, #32]
 801603a:	e011      	b.n	8016060 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801603e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016042:	4619      	mov	r1, r3
 8016044:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016046:	f004 f813 	bl	801a070 <tcp_split_unsent_seg>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d107      	bne.n	8016060 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8016050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016052:	f004 fa93 	bl	801a57c <tcp_output>
 8016056:	4603      	mov	r3, r0
 8016058:	2b00      	cmp	r3, #0
 801605a:	d101      	bne.n	8016060 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8016060:	6a3b      	ldr	r3, [r7, #32]
 8016062:	2b00      	cmp	r3, #0
 8016064:	f000 80ac 	beq.w	80161c0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8016068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801606a:	2200      	movs	r2, #0
 801606c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016072:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016076:	2b06      	cmp	r3, #6
 8016078:	f200 80a2 	bhi.w	80161c0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801607e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016082:	3301      	adds	r3, #1
 8016084:	b2da      	uxtb	r2, r3
 8016086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016088:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801608c:	e098      	b.n	80161c0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016090:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016094:	2b00      	cmp	r3, #0
 8016096:	db0f      	blt.n	80160b8 <tcp_slowtmr+0x1f4>
 8016098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801609a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801609e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80160a2:	4293      	cmp	r3, r2
 80160a4:	d008      	beq.n	80160b8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80160a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	3301      	adds	r3, #1
 80160b0:	b29b      	uxth	r3, r3
 80160b2:	b21a      	sxth	r2, r3
 80160b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160b6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80160b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80160be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80160c4:	429a      	cmp	r2, r3
 80160c6:	db7b      	blt.n	80161c0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80160c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160ca:	f004 fd4b 	bl	801ab64 <tcp_rexmit_rto_prepare>
 80160ce:	4603      	mov	r3, r0
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d007      	beq.n	80160e4 <tcp_slowtmr+0x220>
 80160d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d171      	bne.n	80161c0 <tcp_slowtmr+0x2fc>
 80160dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d06d      	beq.n	80161c0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80160e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160e6:	7d1b      	ldrb	r3, [r3, #20]
 80160e8:	2b02      	cmp	r3, #2
 80160ea:	d03a      	beq.n	8016162 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80160ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80160f2:	2b0c      	cmp	r3, #12
 80160f4:	bf28      	it	cs
 80160f6:	230c      	movcs	r3, #12
 80160f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80160fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016100:	10db      	asrs	r3, r3, #3
 8016102:	b21b      	sxth	r3, r3
 8016104:	461a      	mov	r2, r3
 8016106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016108:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801610c:	4413      	add	r3, r2
 801610e:	7efa      	ldrb	r2, [r7, #27]
 8016110:	4910      	ldr	r1, [pc, #64]	@ (8016154 <tcp_slowtmr+0x290>)
 8016112:	5c8a      	ldrb	r2, [r1, r2]
 8016114:	4093      	lsls	r3, r2
 8016116:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801611e:	4293      	cmp	r3, r2
 8016120:	dc1a      	bgt.n	8016158 <tcp_slowtmr+0x294>
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	b21a      	sxth	r2, r3
 8016126:	e019      	b.n	801615c <tcp_slowtmr+0x298>
 8016128:	24008794 	.word	0x24008794
 801612c:	240087aa 	.word	0x240087aa
 8016130:	240087a0 	.word	0x240087a0
 8016134:	08020e00 	.word	0x08020e00
 8016138:	08021144 	.word	0x08021144
 801613c:	08020e44 	.word	0x08020e44
 8016140:	08021170 	.word	0x08021170
 8016144:	0802119c 	.word	0x0802119c
 8016148:	080211cc 	.word	0x080211cc
 801614c:	08021200 	.word	0x08021200
 8016150:	08022edc 	.word	0x08022edc
 8016154:	08022ecc 	.word	0x08022ecc
 8016158:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801615e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8016162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016164:	2200      	movs	r2, #0
 8016166:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801616a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016170:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016174:	4293      	cmp	r3, r2
 8016176:	bf28      	it	cs
 8016178:	4613      	movcs	r3, r2
 801617a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801617c:	8a7b      	ldrh	r3, [r7, #18]
 801617e:	085b      	lsrs	r3, r3, #1
 8016180:	b29a      	uxth	r2, r3
 8016182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016184:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801618a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801618e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016192:	005b      	lsls	r3, r3, #1
 8016194:	b29b      	uxth	r3, r3
 8016196:	429a      	cmp	r2, r3
 8016198:	d206      	bcs.n	80161a8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	b29a      	uxth	r2, r3
 80161a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80161a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161aa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80161ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80161b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161b4:	2200      	movs	r2, #0
 80161b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80161ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80161bc:	f004 fd42 	bl	801ac44 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80161c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c2:	7d1b      	ldrb	r3, [r3, #20]
 80161c4:	2b06      	cmp	r3, #6
 80161c6:	d111      	bne.n	80161ec <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80161c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ca:	8b5b      	ldrh	r3, [r3, #26]
 80161cc:	f003 0310 	and.w	r3, r3, #16
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00b      	beq.n	80161ec <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80161d4:	4b9c      	ldr	r3, [pc, #624]	@ (8016448 <tcp_slowtmr+0x584>)
 80161d6:	681a      	ldr	r2, [r3, #0]
 80161d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161da:	6a1b      	ldr	r3, [r3, #32]
 80161dc:	1ad3      	subs	r3, r2, r3
 80161de:	2b28      	cmp	r3, #40	@ 0x28
 80161e0:	d904      	bls.n	80161ec <tcp_slowtmr+0x328>
          ++pcb_remove;
 80161e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80161e6:	3301      	adds	r3, #1
 80161e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80161ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ee:	7a5b      	ldrb	r3, [r3, #9]
 80161f0:	f003 0308 	and.w	r3, r3, #8
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d04a      	beq.n	801628e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80161f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80161fc:	2b04      	cmp	r3, #4
 80161fe:	d003      	beq.n	8016208 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8016200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016202:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016204:	2b07      	cmp	r3, #7
 8016206:	d142      	bne.n	801628e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016208:	4b8f      	ldr	r3, [pc, #572]	@ (8016448 <tcp_slowtmr+0x584>)
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801620e:	6a1b      	ldr	r3, [r3, #32]
 8016210:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016214:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016218:	4b8c      	ldr	r3, [pc, #560]	@ (801644c <tcp_slowtmr+0x588>)
 801621a:	440b      	add	r3, r1
 801621c:	498c      	ldr	r1, [pc, #560]	@ (8016450 <tcp_slowtmr+0x58c>)
 801621e:	fba1 1303 	umull	r1, r3, r1, r3
 8016222:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016224:	429a      	cmp	r2, r3
 8016226:	d90a      	bls.n	801623e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8016228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801622c:	3301      	adds	r3, #1
 801622e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8016232:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016236:	3301      	adds	r3, #1
 8016238:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801623c:	e027      	b.n	801628e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801623e:	4b82      	ldr	r3, [pc, #520]	@ (8016448 <tcp_slowtmr+0x584>)
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016244:	6a1b      	ldr	r3, [r3, #32]
 8016246:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801624a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016250:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016254:	4618      	mov	r0, r3
 8016256:	4b7f      	ldr	r3, [pc, #508]	@ (8016454 <tcp_slowtmr+0x590>)
 8016258:	fb00 f303 	mul.w	r3, r0, r3
 801625c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801625e:	497c      	ldr	r1, [pc, #496]	@ (8016450 <tcp_slowtmr+0x58c>)
 8016260:	fba1 1303 	umull	r1, r3, r1, r3
 8016264:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016266:	429a      	cmp	r2, r3
 8016268:	d911      	bls.n	801628e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801626a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801626c:	f004 ffee 	bl	801b24c <tcp_keepalive>
 8016270:	4603      	mov	r3, r0
 8016272:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8016276:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801627a:	2b00      	cmp	r3, #0
 801627c:	d107      	bne.n	801628e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016280:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016284:	3301      	adds	r3, #1
 8016286:	b2da      	uxtb	r2, r3
 8016288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801628a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016292:	2b00      	cmp	r3, #0
 8016294:	d011      	beq.n	80162ba <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016296:	4b6c      	ldr	r3, [pc, #432]	@ (8016448 <tcp_slowtmr+0x584>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801629c:	6a1b      	ldr	r3, [r3, #32]
 801629e:	1ad2      	subs	r2, r2, r3
 80162a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80162a6:	4619      	mov	r1, r3
 80162a8:	460b      	mov	r3, r1
 80162aa:	005b      	lsls	r3, r3, #1
 80162ac:	440b      	add	r3, r1
 80162ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d302      	bcc.n	80162ba <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80162b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80162b6:	f000 fead 	bl	8017014 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80162ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162bc:	7d1b      	ldrb	r3, [r3, #20]
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d10b      	bne.n	80162da <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80162c2:	4b61      	ldr	r3, [pc, #388]	@ (8016448 <tcp_slowtmr+0x584>)
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162c8:	6a1b      	ldr	r3, [r3, #32]
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	2b28      	cmp	r3, #40	@ 0x28
 80162ce:	d904      	bls.n	80162da <tcp_slowtmr+0x416>
        ++pcb_remove;
 80162d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162d4:	3301      	adds	r3, #1
 80162d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80162da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162dc:	7d1b      	ldrb	r3, [r3, #20]
 80162de:	2b09      	cmp	r3, #9
 80162e0:	d10b      	bne.n	80162fa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80162e2:	4b59      	ldr	r3, [pc, #356]	@ (8016448 <tcp_slowtmr+0x584>)
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e8:	6a1b      	ldr	r3, [r3, #32]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	2bf0      	cmp	r3, #240	@ 0xf0
 80162ee:	d904      	bls.n	80162fa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80162f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162f4:	3301      	adds	r3, #1
 80162f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80162fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d060      	beq.n	80163c4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8016302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016308:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801630a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801630c:	f000 fcce 	bl	8016cac <tcp_pcb_purge>
      if (prev != NULL) {
 8016310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016312:	2b00      	cmp	r3, #0
 8016314:	d010      	beq.n	8016338 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016316:	4b50      	ldr	r3, [pc, #320]	@ (8016458 <tcp_slowtmr+0x594>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801631c:	429a      	cmp	r2, r3
 801631e:	d106      	bne.n	801632e <tcp_slowtmr+0x46a>
 8016320:	4b4e      	ldr	r3, [pc, #312]	@ (801645c <tcp_slowtmr+0x598>)
 8016322:	f240 526d 	movw	r2, #1389	@ 0x56d
 8016326:	494e      	ldr	r1, [pc, #312]	@ (8016460 <tcp_slowtmr+0x59c>)
 8016328:	484e      	ldr	r0, [pc, #312]	@ (8016464 <tcp_slowtmr+0x5a0>)
 801632a:	f008 fab9 	bl	801e8a0 <iprintf>
        prev->next = pcb->next;
 801632e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016330:	68da      	ldr	r2, [r3, #12]
 8016332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016334:	60da      	str	r2, [r3, #12]
 8016336:	e00f      	b.n	8016358 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016338:	4b47      	ldr	r3, [pc, #284]	@ (8016458 <tcp_slowtmr+0x594>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801633e:	429a      	cmp	r2, r3
 8016340:	d006      	beq.n	8016350 <tcp_slowtmr+0x48c>
 8016342:	4b46      	ldr	r3, [pc, #280]	@ (801645c <tcp_slowtmr+0x598>)
 8016344:	f240 5271 	movw	r2, #1393	@ 0x571
 8016348:	4947      	ldr	r1, [pc, #284]	@ (8016468 <tcp_slowtmr+0x5a4>)
 801634a:	4846      	ldr	r0, [pc, #280]	@ (8016464 <tcp_slowtmr+0x5a0>)
 801634c:	f008 faa8 	bl	801e8a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	4a40      	ldr	r2, [pc, #256]	@ (8016458 <tcp_slowtmr+0x594>)
 8016356:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801635c:	2b00      	cmp	r3, #0
 801635e:	d013      	beq.n	8016388 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016362:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016366:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016368:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801636c:	3304      	adds	r3, #4
 801636e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016370:	8ad2      	ldrh	r2, [r2, #22]
 8016372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016374:	8b09      	ldrh	r1, [r1, #24]
 8016376:	9102      	str	r1, [sp, #8]
 8016378:	9201      	str	r2, [sp, #4]
 801637a:	9300      	str	r3, [sp, #0]
 801637c:	462b      	mov	r3, r5
 801637e:	4622      	mov	r2, r4
 8016380:	4601      	mov	r1, r0
 8016382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016384:	f004 feae 	bl	801b0e4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8016388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801638a:	691b      	ldr	r3, [r3, #16]
 801638c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016390:	7d1b      	ldrb	r3, [r3, #20]
 8016392:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016396:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801639a:	68db      	ldr	r3, [r3, #12]
 801639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801639e:	6838      	ldr	r0, [r7, #0]
 80163a0:	f7fe ffec 	bl	801537c <tcp_free>
      tcp_active_pcbs_changed = 0;
 80163a4:	4b31      	ldr	r3, [pc, #196]	@ (801646c <tcp_slowtmr+0x5a8>)
 80163a6:	2200      	movs	r2, #0
 80163a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d004      	beq.n	80163ba <tcp_slowtmr+0x4f6>
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f06f 010c 	mvn.w	r1, #12
 80163b6:	68b8      	ldr	r0, [r7, #8]
 80163b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80163ba:	4b2c      	ldr	r3, [pc, #176]	@ (801646c <tcp_slowtmr+0x5a8>)
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d037      	beq.n	8016432 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80163c2:	e592      	b.n	8015eea <tcp_slowtmr+0x26>
      prev = pcb;
 80163c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80163c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80163ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163d0:	7f1b      	ldrb	r3, [r3, #28]
 80163d2:	3301      	adds	r3, #1
 80163d4:	b2da      	uxtb	r2, r3
 80163d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80163da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163dc:	7f1a      	ldrb	r2, [r3, #28]
 80163de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163e0:	7f5b      	ldrb	r3, [r3, #29]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d325      	bcc.n	8016432 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80163e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163e8:	2200      	movs	r2, #0
 80163ea:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80163ec:	4b1f      	ldr	r3, [pc, #124]	@ (801646c <tcp_slowtmr+0x5a8>)
 80163ee:	2200      	movs	r2, #0
 80163f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80163f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d00b      	beq.n	8016414 <tcp_slowtmr+0x550>
 80163fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016404:	6912      	ldr	r2, [r2, #16]
 8016406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016408:	4610      	mov	r0, r2
 801640a:	4798      	blx	r3
 801640c:	4603      	mov	r3, r0
 801640e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016412:	e002      	b.n	801641a <tcp_slowtmr+0x556>
 8016414:	2300      	movs	r3, #0
 8016416:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801641a:	4b14      	ldr	r3, [pc, #80]	@ (801646c <tcp_slowtmr+0x5a8>)
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	2b00      	cmp	r3, #0
 8016420:	f47f ad62 	bne.w	8015ee8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016424:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016428:	2b00      	cmp	r3, #0
 801642a:	d102      	bne.n	8016432 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801642c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801642e:	f004 f8a5 	bl	801a57c <tcp_output>
  while (pcb != NULL) {
 8016432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016434:	2b00      	cmp	r3, #0
 8016436:	f47f ad5e 	bne.w	8015ef6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801643a:	2300      	movs	r3, #0
 801643c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801643e:	4b0c      	ldr	r3, [pc, #48]	@ (8016470 <tcp_slowtmr+0x5ac>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016444:	e069      	b.n	801651a <tcp_slowtmr+0x656>
 8016446:	bf00      	nop
 8016448:	24008794 	.word	0x24008794
 801644c:	000a4cb8 	.word	0x000a4cb8
 8016450:	10624dd3 	.word	0x10624dd3
 8016454:	000124f8 	.word	0x000124f8
 8016458:	240087a0 	.word	0x240087a0
 801645c:	08020e00 	.word	0x08020e00
 8016460:	08021238 	.word	0x08021238
 8016464:	08020e44 	.word	0x08020e44
 8016468:	08021264 	.word	0x08021264
 801646c:	240087a8 	.word	0x240087a8
 8016470:	240087a4 	.word	0x240087a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016476:	7d1b      	ldrb	r3, [r3, #20]
 8016478:	2b0a      	cmp	r3, #10
 801647a:	d006      	beq.n	801648a <tcp_slowtmr+0x5c6>
 801647c:	4b2b      	ldr	r3, [pc, #172]	@ (801652c <tcp_slowtmr+0x668>)
 801647e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8016482:	492b      	ldr	r1, [pc, #172]	@ (8016530 <tcp_slowtmr+0x66c>)
 8016484:	482b      	ldr	r0, [pc, #172]	@ (8016534 <tcp_slowtmr+0x670>)
 8016486:	f008 fa0b 	bl	801e8a0 <iprintf>
    pcb_remove = 0;
 801648a:	2300      	movs	r3, #0
 801648c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016490:	4b29      	ldr	r3, [pc, #164]	@ (8016538 <tcp_slowtmr+0x674>)
 8016492:	681a      	ldr	r2, [r3, #0]
 8016494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016496:	6a1b      	ldr	r3, [r3, #32]
 8016498:	1ad3      	subs	r3, r2, r3
 801649a:	2bf0      	cmp	r3, #240	@ 0xf0
 801649c:	d904      	bls.n	80164a8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801649e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80164a2:	3301      	adds	r3, #1
 80164a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80164a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d02f      	beq.n	8016510 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80164b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80164b2:	f000 fbfb 	bl	8016cac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80164b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d010      	beq.n	80164de <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80164bc:	4b1f      	ldr	r3, [pc, #124]	@ (801653c <tcp_slowtmr+0x678>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d106      	bne.n	80164d4 <tcp_slowtmr+0x610>
 80164c6:	4b19      	ldr	r3, [pc, #100]	@ (801652c <tcp_slowtmr+0x668>)
 80164c8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80164cc:	491c      	ldr	r1, [pc, #112]	@ (8016540 <tcp_slowtmr+0x67c>)
 80164ce:	4819      	ldr	r0, [pc, #100]	@ (8016534 <tcp_slowtmr+0x670>)
 80164d0:	f008 f9e6 	bl	801e8a0 <iprintf>
        prev->next = pcb->next;
 80164d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164d6:	68da      	ldr	r2, [r3, #12]
 80164d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164da:	60da      	str	r2, [r3, #12]
 80164dc:	e00f      	b.n	80164fe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80164de:	4b17      	ldr	r3, [pc, #92]	@ (801653c <tcp_slowtmr+0x678>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d006      	beq.n	80164f6 <tcp_slowtmr+0x632>
 80164e8:	4b10      	ldr	r3, [pc, #64]	@ (801652c <tcp_slowtmr+0x668>)
 80164ea:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80164ee:	4915      	ldr	r1, [pc, #84]	@ (8016544 <tcp_slowtmr+0x680>)
 80164f0:	4810      	ldr	r0, [pc, #64]	@ (8016534 <tcp_slowtmr+0x670>)
 80164f2:	f008 f9d5 	bl	801e8a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80164f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	4a10      	ldr	r2, [pc, #64]	@ (801653c <tcp_slowtmr+0x678>)
 80164fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80164fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016500:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016508:	69f8      	ldr	r0, [r7, #28]
 801650a:	f7fe ff37 	bl	801537c <tcp_free>
 801650e:	e004      	b.n	801651a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8016510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016512:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1a9      	bne.n	8016474 <tcp_slowtmr+0x5b0>
    }
  }
}
 8016520:	bf00      	nop
 8016522:	bf00      	nop
 8016524:	3730      	adds	r7, #48	@ 0x30
 8016526:	46bd      	mov	sp, r7
 8016528:	bdb0      	pop	{r4, r5, r7, pc}
 801652a:	bf00      	nop
 801652c:	08020e00 	.word	0x08020e00
 8016530:	08021290 	.word	0x08021290
 8016534:	08020e44 	.word	0x08020e44
 8016538:	24008794 	.word	0x24008794
 801653c:	240087a4 	.word	0x240087a4
 8016540:	080212c0 	.word	0x080212c0
 8016544:	080212e8 	.word	0x080212e8

08016548 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801654e:	4b2d      	ldr	r3, [pc, #180]	@ (8016604 <tcp_fasttmr+0xbc>)
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	3301      	adds	r3, #1
 8016554:	b2da      	uxtb	r2, r3
 8016556:	4b2b      	ldr	r3, [pc, #172]	@ (8016604 <tcp_fasttmr+0xbc>)
 8016558:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801655a:	4b2b      	ldr	r3, [pc, #172]	@ (8016608 <tcp_fasttmr+0xc0>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016560:	e048      	b.n	80165f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	7f9a      	ldrb	r2, [r3, #30]
 8016566:	4b27      	ldr	r3, [pc, #156]	@ (8016604 <tcp_fasttmr+0xbc>)
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	429a      	cmp	r2, r3
 801656c:	d03f      	beq.n	80165ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801656e:	4b25      	ldr	r3, [pc, #148]	@ (8016604 <tcp_fasttmr+0xbc>)
 8016570:	781a      	ldrb	r2, [r3, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	8b5b      	ldrh	r3, [r3, #26]
 801657a:	f003 0301 	and.w	r3, r3, #1
 801657e:	2b00      	cmp	r3, #0
 8016580:	d010      	beq.n	80165a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	8b5b      	ldrh	r3, [r3, #26]
 8016586:	f043 0302 	orr.w	r3, r3, #2
 801658a:	b29a      	uxth	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f003 fff3 	bl	801a57c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	8b5b      	ldrh	r3, [r3, #26]
 801659a:	f023 0303 	bic.w	r3, r3, #3
 801659e:	b29a      	uxth	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	8b5b      	ldrh	r3, [r3, #26]
 80165a8:	f003 0308 	and.w	r3, r3, #8
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d009      	beq.n	80165c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	8b5b      	ldrh	r3, [r3, #26]
 80165b4:	f023 0308 	bic.w	r3, r3, #8
 80165b8:	b29a      	uxth	r2, r3
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f7ff f870 	bl	80156a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	68db      	ldr	r3, [r3, #12]
 80165c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d00a      	beq.n	80165e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80165d2:	4b0e      	ldr	r3, [pc, #56]	@ (801660c <tcp_fasttmr+0xc4>)
 80165d4:	2200      	movs	r2, #0
 80165d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 f819 	bl	8016610 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80165de:	4b0b      	ldr	r3, [pc, #44]	@ (801660c <tcp_fasttmr+0xc4>)
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d000      	beq.n	80165e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80165e6:	e7b8      	b.n	801655a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	607b      	str	r3, [r7, #4]
 80165ec:	e002      	b.n	80165f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	68db      	ldr	r3, [r3, #12]
 80165f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d1b3      	bne.n	8016562 <tcp_fasttmr+0x1a>
    }
  }
}
 80165fa:	bf00      	nop
 80165fc:	bf00      	nop
 80165fe:	3708      	adds	r7, #8
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	240087aa 	.word	0x240087aa
 8016608:	240087a0 	.word	0x240087a0
 801660c:	240087a8 	.word	0x240087a8

08016610 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016610:	b590      	push	{r4, r7, lr}
 8016612:	b085      	sub	sp, #20
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d109      	bne.n	8016632 <tcp_process_refused_data+0x22>
 801661e:	4b38      	ldr	r3, [pc, #224]	@ (8016700 <tcp_process_refused_data+0xf0>)
 8016620:	f240 6209 	movw	r2, #1545	@ 0x609
 8016624:	4937      	ldr	r1, [pc, #220]	@ (8016704 <tcp_process_refused_data+0xf4>)
 8016626:	4838      	ldr	r0, [pc, #224]	@ (8016708 <tcp_process_refused_data+0xf8>)
 8016628:	f008 f93a 	bl	801e8a0 <iprintf>
 801662c:	f06f 030f 	mvn.w	r3, #15
 8016630:	e061      	b.n	80166f6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016636:	7b5b      	ldrb	r3, [r3, #13]
 8016638:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801663e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2200      	movs	r2, #0
 8016644:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801664c:	2b00      	cmp	r3, #0
 801664e:	d00b      	beq.n	8016668 <tcp_process_refused_data+0x58>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	6918      	ldr	r0, [r3, #16]
 801665a:	2300      	movs	r3, #0
 801665c:	68ba      	ldr	r2, [r7, #8]
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	47a0      	blx	r4
 8016662:	4603      	mov	r3, r0
 8016664:	73fb      	strb	r3, [r7, #15]
 8016666:	e007      	b.n	8016678 <tcp_process_refused_data+0x68>
 8016668:	2300      	movs	r3, #0
 801666a:	68ba      	ldr	r2, [r7, #8]
 801666c:	6879      	ldr	r1, [r7, #4]
 801666e:	2000      	movs	r0, #0
 8016670:	f000 f8a6 	bl	80167c0 <tcp_recv_null>
 8016674:	4603      	mov	r3, r0
 8016676:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d12b      	bne.n	80166d8 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016680:	7bbb      	ldrb	r3, [r7, #14]
 8016682:	f003 0320 	and.w	r3, r3, #32
 8016686:	2b00      	cmp	r3, #0
 8016688:	d034      	beq.n	80166f4 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801668e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016692:	4293      	cmp	r3, r2
 8016694:	d005      	beq.n	80166a2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801669a:	3301      	adds	r3, #1
 801669c:	b29a      	uxth	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d00b      	beq.n	80166c4 <tcp_process_refused_data+0xb4>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6918      	ldr	r0, [r3, #16]
 80166b6:	2300      	movs	r3, #0
 80166b8:	2200      	movs	r2, #0
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	47a0      	blx	r4
 80166be:	4603      	mov	r3, r0
 80166c0:	73fb      	strb	r3, [r7, #15]
 80166c2:	e001      	b.n	80166c8 <tcp_process_refused_data+0xb8>
 80166c4:	2300      	movs	r3, #0
 80166c6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80166c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166cc:	f113 0f0d 	cmn.w	r3, #13
 80166d0:	d110      	bne.n	80166f4 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80166d2:	f06f 030c 	mvn.w	r3, #12
 80166d6:	e00e      	b.n	80166f6 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80166d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166dc:	f113 0f0d 	cmn.w	r3, #13
 80166e0:	d102      	bne.n	80166e8 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80166e2:	f06f 030c 	mvn.w	r3, #12
 80166e6:	e006      	b.n	80166f6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	68ba      	ldr	r2, [r7, #8]
 80166ec:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80166ee:	f06f 0304 	mvn.w	r3, #4
 80166f2:	e000      	b.n	80166f6 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80166f4:	2300      	movs	r3, #0
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3714      	adds	r7, #20
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd90      	pop	{r4, r7, pc}
 80166fe:	bf00      	nop
 8016700:	08020e00 	.word	0x08020e00
 8016704:	08021310 	.word	0x08021310
 8016708:	08020e44 	.word	0x08020e44

0801670c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016714:	e007      	b.n	8016726 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f000 f80a 	bl	8016736 <tcp_seg_free>
    seg = next;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d1f4      	bne.n	8016716 <tcp_segs_free+0xa>
  }
}
 801672c:	bf00      	nop
 801672e:	bf00      	nop
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}

08016736 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016736:	b580      	push	{r7, lr}
 8016738:	b082      	sub	sp, #8
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d00c      	beq.n	801675e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d004      	beq.n	8016756 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	4618      	mov	r0, r3
 8016752:	f7fe fb67 	bl	8014e24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016756:	6879      	ldr	r1, [r7, #4]
 8016758:	2003      	movs	r0, #3
 801675a:	f7fd fcbf 	bl	80140dc <memp_free>
  }
}
 801675e:	bf00      	nop
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
	...

08016768 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d106      	bne.n	8016784 <tcp_seg_copy+0x1c>
 8016776:	4b0f      	ldr	r3, [pc, #60]	@ (80167b4 <tcp_seg_copy+0x4c>)
 8016778:	f240 6282 	movw	r2, #1666	@ 0x682
 801677c:	490e      	ldr	r1, [pc, #56]	@ (80167b8 <tcp_seg_copy+0x50>)
 801677e:	480f      	ldr	r0, [pc, #60]	@ (80167bc <tcp_seg_copy+0x54>)
 8016780:	f008 f88e 	bl	801e8a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016784:	2003      	movs	r0, #3
 8016786:	f7fd fc33 	bl	8013ff0 <memp_malloc>
 801678a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d101      	bne.n	8016796 <tcp_seg_copy+0x2e>
    return NULL;
 8016792:	2300      	movs	r3, #0
 8016794:	e00a      	b.n	80167ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016796:	2210      	movs	r2, #16
 8016798:	6879      	ldr	r1, [r7, #4]
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f008 f9b1 	bl	801eb02 <memcpy>
  pbuf_ref(cseg->p);
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7fe fbe3 	bl	8014f70 <pbuf_ref>
  return cseg;
 80167aa:	68fb      	ldr	r3, [r7, #12]
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3710      	adds	r7, #16
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}
 80167b4:	08020e00 	.word	0x08020e00
 80167b8:	08021354 	.word	0x08021354
 80167bc:	08020e44 	.word	0x08020e44

080167c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b084      	sub	sp, #16
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
 80167cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d109      	bne.n	80167e8 <tcp_recv_null+0x28>
 80167d4:	4b12      	ldr	r3, [pc, #72]	@ (8016820 <tcp_recv_null+0x60>)
 80167d6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80167da:	4912      	ldr	r1, [pc, #72]	@ (8016824 <tcp_recv_null+0x64>)
 80167dc:	4812      	ldr	r0, [pc, #72]	@ (8016828 <tcp_recv_null+0x68>)
 80167de:	f008 f85f 	bl	801e8a0 <iprintf>
 80167e2:	f06f 030f 	mvn.w	r3, #15
 80167e6:	e016      	b.n	8016816 <tcp_recv_null+0x56>

  if (p != NULL) {
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d009      	beq.n	8016802 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	891b      	ldrh	r3, [r3, #8]
 80167f2:	4619      	mov	r1, r3
 80167f4:	68b8      	ldr	r0, [r7, #8]
 80167f6:	f7ff facd 	bl	8015d94 <tcp_recved>
    pbuf_free(p);
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7fe fb12 	bl	8014e24 <pbuf_free>
 8016800:	e008      	b.n	8016814 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d104      	bne.n	8016814 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801680a:	68b8      	ldr	r0, [r7, #8]
 801680c:	f7fe ffb4 	bl	8015778 <tcp_close>
 8016810:	4603      	mov	r3, r0
 8016812:	e000      	b.n	8016816 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	08020e00 	.word	0x08020e00
 8016824:	08021370 	.word	0x08021370
 8016828:	08020e44 	.word	0x08020e44

0801682c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b086      	sub	sp, #24
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801683a:	2b00      	cmp	r3, #0
 801683c:	db01      	blt.n	8016842 <tcp_kill_prio+0x16>
 801683e:	79fb      	ldrb	r3, [r7, #7]
 8016840:	e000      	b.n	8016844 <tcp_kill_prio+0x18>
 8016842:	237f      	movs	r3, #127	@ 0x7f
 8016844:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016846:	7afb      	ldrb	r3, [r7, #11]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d034      	beq.n	80168b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801684c:	7afb      	ldrb	r3, [r7, #11]
 801684e:	3b01      	subs	r3, #1
 8016850:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016852:	2300      	movs	r3, #0
 8016854:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016856:	2300      	movs	r3, #0
 8016858:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801685a:	4b19      	ldr	r3, [pc, #100]	@ (80168c0 <tcp_kill_prio+0x94>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	e01f      	b.n	80168a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	7d5b      	ldrb	r3, [r3, #21]
 8016866:	7afa      	ldrb	r2, [r7, #11]
 8016868:	429a      	cmp	r2, r3
 801686a:	d80c      	bhi.n	8016886 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016870:	7afa      	ldrb	r2, [r7, #11]
 8016872:	429a      	cmp	r2, r3
 8016874:	d112      	bne.n	801689c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016876:	4b13      	ldr	r3, [pc, #76]	@ (80168c4 <tcp_kill_prio+0x98>)
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	697b      	ldr	r3, [r7, #20]
 801687c:	6a1b      	ldr	r3, [r3, #32]
 801687e:	1ad3      	subs	r3, r2, r3
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	429a      	cmp	r2, r3
 8016884:	d80a      	bhi.n	801689c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016886:	4b0f      	ldr	r3, [pc, #60]	@ (80168c4 <tcp_kill_prio+0x98>)
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	6a1b      	ldr	r3, [r3, #32]
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	7d5b      	ldrb	r3, [r3, #21]
 801689a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	68db      	ldr	r3, [r3, #12]
 80168a0:	617b      	str	r3, [r7, #20]
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d1dc      	bne.n	8016862 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d004      	beq.n	80168b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80168ae:	6938      	ldr	r0, [r7, #16]
 80168b0:	f7ff f8a8 	bl	8015a04 <tcp_abort>
 80168b4:	e000      	b.n	80168b8 <tcp_kill_prio+0x8c>
    return;
 80168b6:	bf00      	nop
  }
}
 80168b8:	3718      	adds	r7, #24
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	240087a0 	.word	0x240087a0
 80168c4:	24008794 	.word	0x24008794

080168c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b086      	sub	sp, #24
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	4603      	mov	r3, r0
 80168d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80168d2:	79fb      	ldrb	r3, [r7, #7]
 80168d4:	2b08      	cmp	r3, #8
 80168d6:	d009      	beq.n	80168ec <tcp_kill_state+0x24>
 80168d8:	79fb      	ldrb	r3, [r7, #7]
 80168da:	2b09      	cmp	r3, #9
 80168dc:	d006      	beq.n	80168ec <tcp_kill_state+0x24>
 80168de:	4b1a      	ldr	r3, [pc, #104]	@ (8016948 <tcp_kill_state+0x80>)
 80168e0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80168e4:	4919      	ldr	r1, [pc, #100]	@ (801694c <tcp_kill_state+0x84>)
 80168e6:	481a      	ldr	r0, [pc, #104]	@ (8016950 <tcp_kill_state+0x88>)
 80168e8:	f007 ffda 	bl	801e8a0 <iprintf>

  inactivity = 0;
 80168ec:	2300      	movs	r3, #0
 80168ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80168f4:	4b17      	ldr	r3, [pc, #92]	@ (8016954 <tcp_kill_state+0x8c>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	617b      	str	r3, [r7, #20]
 80168fa:	e017      	b.n	801692c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	7d1b      	ldrb	r3, [r3, #20]
 8016900:	79fa      	ldrb	r2, [r7, #7]
 8016902:	429a      	cmp	r2, r3
 8016904:	d10f      	bne.n	8016926 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016906:	4b14      	ldr	r3, [pc, #80]	@ (8016958 <tcp_kill_state+0x90>)
 8016908:	681a      	ldr	r2, [r3, #0]
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	6a1b      	ldr	r3, [r3, #32]
 801690e:	1ad3      	subs	r3, r2, r3
 8016910:	68fa      	ldr	r2, [r7, #12]
 8016912:	429a      	cmp	r2, r3
 8016914:	d807      	bhi.n	8016926 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016916:	4b10      	ldr	r3, [pc, #64]	@ (8016958 <tcp_kill_state+0x90>)
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	6a1b      	ldr	r3, [r3, #32]
 801691e:	1ad3      	subs	r3, r2, r3
 8016920:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	68db      	ldr	r3, [r3, #12]
 801692a:	617b      	str	r3, [r7, #20]
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d1e4      	bne.n	80168fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d003      	beq.n	8016940 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016938:	2100      	movs	r1, #0
 801693a:	6938      	ldr	r0, [r7, #16]
 801693c:	f7fe ffa4 	bl	8015888 <tcp_abandon>
  }
}
 8016940:	bf00      	nop
 8016942:	3718      	adds	r7, #24
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	08020e00 	.word	0x08020e00
 801694c:	0802138c 	.word	0x0802138c
 8016950:	08020e44 	.word	0x08020e44
 8016954:	240087a0 	.word	0x240087a0
 8016958:	24008794 	.word	0x24008794

0801695c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b084      	sub	sp, #16
 8016960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016962:	2300      	movs	r3, #0
 8016964:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016966:	2300      	movs	r3, #0
 8016968:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801696a:	4b12      	ldr	r3, [pc, #72]	@ (80169b4 <tcp_kill_timewait+0x58>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	60fb      	str	r3, [r7, #12]
 8016970:	e012      	b.n	8016998 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016972:	4b11      	ldr	r3, [pc, #68]	@ (80169b8 <tcp_kill_timewait+0x5c>)
 8016974:	681a      	ldr	r2, [r3, #0]
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	6a1b      	ldr	r3, [r3, #32]
 801697a:	1ad3      	subs	r3, r2, r3
 801697c:	687a      	ldr	r2, [r7, #4]
 801697e:	429a      	cmp	r2, r3
 8016980:	d807      	bhi.n	8016992 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016982:	4b0d      	ldr	r3, [pc, #52]	@ (80169b8 <tcp_kill_timewait+0x5c>)
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	6a1b      	ldr	r3, [r3, #32]
 801698a:	1ad3      	subs	r3, r2, r3
 801698c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	68db      	ldr	r3, [r3, #12]
 8016996:	60fb      	str	r3, [r7, #12]
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d1e9      	bne.n	8016972 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d002      	beq.n	80169aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80169a4:	68b8      	ldr	r0, [r7, #8]
 80169a6:	f7ff f82d 	bl	8015a04 <tcp_abort>
  }
}
 80169aa:	bf00      	nop
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	240087a4 	.word	0x240087a4
 80169b8:	24008794 	.word	0x24008794

080169bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80169c2:	4b10      	ldr	r3, [pc, #64]	@ (8016a04 <tcp_handle_closepend+0x48>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80169c8:	e014      	b.n	80169f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	8b5b      	ldrh	r3, [r3, #26]
 80169d4:	f003 0308 	and.w	r3, r3, #8
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d009      	beq.n	80169f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	8b5b      	ldrh	r3, [r3, #26]
 80169e0:	f023 0308 	bic.w	r3, r3, #8
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f7fe fe5a 	bl	80156a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d1e7      	bne.n	80169ca <tcp_handle_closepend+0xe>
  }
}
 80169fa:	bf00      	nop
 80169fc:	bf00      	nop
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	240087a0 	.word	0x240087a0

08016a08 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b084      	sub	sp, #16
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	4603      	mov	r3, r0
 8016a10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016a12:	2001      	movs	r0, #1
 8016a14:	f7fd faec 	bl	8013ff0 <memp_malloc>
 8016a18:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d126      	bne.n	8016a6e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016a20:	f7ff ffcc 	bl	80169bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016a24:	f7ff ff9a 	bl	801695c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016a28:	2001      	movs	r0, #1
 8016a2a:	f7fd fae1 	bl	8013ff0 <memp_malloc>
 8016a2e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d11b      	bne.n	8016a6e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016a36:	2009      	movs	r0, #9
 8016a38:	f7ff ff46 	bl	80168c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016a3c:	2001      	movs	r0, #1
 8016a3e:	f7fd fad7 	bl	8013ff0 <memp_malloc>
 8016a42:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d111      	bne.n	8016a6e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016a4a:	2008      	movs	r0, #8
 8016a4c:	f7ff ff3c 	bl	80168c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016a50:	2001      	movs	r0, #1
 8016a52:	f7fd facd 	bl	8013ff0 <memp_malloc>
 8016a56:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d107      	bne.n	8016a6e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016a5e:	79fb      	ldrb	r3, [r7, #7]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7ff fee3 	bl	801682c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016a66:	2001      	movs	r0, #1
 8016a68:	f7fd fac2 	bl	8013ff0 <memp_malloc>
 8016a6c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d03f      	beq.n	8016af4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016a74:	229c      	movs	r2, #156	@ 0x9c
 8016a76:	2100      	movs	r1, #0
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f007 ff76 	bl	801e96a <memset>
    pcb->prio = prio;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	79fa      	ldrb	r2, [r7, #7]
 8016a82:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016a8a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	22ff      	movs	r2, #255	@ 0xff
 8016aa2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016aaa:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	2206      	movs	r2, #6
 8016ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	2206      	movs	r2, #6
 8016ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ac0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016aca:	4b0d      	ldr	r3, [pc, #52]	@ (8016b00 <tcp_alloc+0xf8>)
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8016b04 <tcp_alloc+0xfc>)
 8016ad4:	781a      	ldrb	r2, [r3, #0]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	4a08      	ldr	r2, [pc, #32]	@ (8016b08 <tcp_alloc+0x100>)
 8016ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	4a07      	ldr	r2, [pc, #28]	@ (8016b0c <tcp_alloc+0x104>)
 8016af0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016af4:	68fb      	ldr	r3, [r7, #12]
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3710      	adds	r7, #16
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	24008794 	.word	0x24008794
 8016b04:	240087aa 	.word	0x240087aa
 8016b08:	080167c1 	.word	0x080167c1
 8016b0c:	006ddd00 	.word	0x006ddd00

08016b10 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	4603      	mov	r3, r0
 8016b18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016b1a:	2040      	movs	r0, #64	@ 0x40
 8016b1c:	f7ff ff74 	bl	8016a08 <tcp_alloc>
 8016b20:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016b22:	68fb      	ldr	r3, [r7, #12]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3710      	adds	r7, #16
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d002      	beq.n	8016b42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	683a      	ldr	r2, [r7, #0]
 8016b40:	611a      	str	r2, [r3, #16]
  }
}
 8016b42:	bf00      	nop
 8016b44:	370c      	adds	r7, #12
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
	...

08016b50 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d00e      	beq.n	8016b7e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	7d1b      	ldrb	r3, [r3, #20]
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d106      	bne.n	8016b76 <tcp_recv+0x26>
 8016b68:	4b07      	ldr	r3, [pc, #28]	@ (8016b88 <tcp_recv+0x38>)
 8016b6a:	f240 72df 	movw	r2, #2015	@ 0x7df
 8016b6e:	4907      	ldr	r1, [pc, #28]	@ (8016b8c <tcp_recv+0x3c>)
 8016b70:	4807      	ldr	r0, [pc, #28]	@ (8016b90 <tcp_recv+0x40>)
 8016b72:	f007 fe95 	bl	801e8a0 <iprintf>
    pcb->recv = recv;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	683a      	ldr	r2, [r7, #0]
 8016b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8016b7e:	bf00      	nop
 8016b80:	3708      	adds	r7, #8
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	08020e00 	.word	0x08020e00
 8016b8c:	0802139c 	.word	0x0802139c
 8016b90:	08020e44 	.word	0x08020e44

08016b94 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b082      	sub	sp, #8
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d00e      	beq.n	8016bc2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	7d1b      	ldrb	r3, [r3, #20]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d106      	bne.n	8016bba <tcp_sent+0x26>
 8016bac:	4b07      	ldr	r3, [pc, #28]	@ (8016bcc <tcp_sent+0x38>)
 8016bae:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8016bb2:	4907      	ldr	r1, [pc, #28]	@ (8016bd0 <tcp_sent+0x3c>)
 8016bb4:	4807      	ldr	r0, [pc, #28]	@ (8016bd4 <tcp_sent+0x40>)
 8016bb6:	f007 fe73 	bl	801e8a0 <iprintf>
    pcb->sent = sent;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	683a      	ldr	r2, [r7, #0]
 8016bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8016bc2:	bf00      	nop
 8016bc4:	3708      	adds	r7, #8
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	08020e00 	.word	0x08020e00
 8016bd0:	080213c4 	.word	0x080213c4
 8016bd4:	08020e44 	.word	0x08020e44

08016bd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d00e      	beq.n	8016c06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	7d1b      	ldrb	r3, [r3, #20]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	d106      	bne.n	8016bfe <tcp_err+0x26>
 8016bf0:	4b07      	ldr	r3, [pc, #28]	@ (8016c10 <tcp_err+0x38>)
 8016bf2:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016bf6:	4907      	ldr	r1, [pc, #28]	@ (8016c14 <tcp_err+0x3c>)
 8016bf8:	4807      	ldr	r0, [pc, #28]	@ (8016c18 <tcp_err+0x40>)
 8016bfa:	f007 fe51 	bl	801e8a0 <iprintf>
    pcb->errf = err;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	683a      	ldr	r2, [r7, #0]
 8016c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	08020e00 	.word	0x08020e00
 8016c14:	080213ec 	.word	0x080213ec
 8016c18:	08020e44 	.word	0x08020e44

08016c1c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d008      	beq.n	8016c3e <tcp_accept+0x22>
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	7d1b      	ldrb	r3, [r3, #20]
 8016c30:	2b01      	cmp	r3, #1
 8016c32:	d104      	bne.n	8016c3e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	683a      	ldr	r2, [r7, #0]
 8016c3c:	619a      	str	r2, [r3, #24]
  }
}
 8016c3e:	bf00      	nop
 8016c40:	3714      	adds	r7, #20
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr
	...

08016c4c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b084      	sub	sp, #16
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	4613      	mov	r3, r2
 8016c58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d107      	bne.n	8016c70 <tcp_poll+0x24>
 8016c60:	4b0e      	ldr	r3, [pc, #56]	@ (8016c9c <tcp_poll+0x50>)
 8016c62:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016c66:	490e      	ldr	r1, [pc, #56]	@ (8016ca0 <tcp_poll+0x54>)
 8016c68:	480e      	ldr	r0, [pc, #56]	@ (8016ca4 <tcp_poll+0x58>)
 8016c6a:	f007 fe19 	bl	801e8a0 <iprintf>
 8016c6e:	e011      	b.n	8016c94 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	7d1b      	ldrb	r3, [r3, #20]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d106      	bne.n	8016c86 <tcp_poll+0x3a>
 8016c78:	4b08      	ldr	r3, [pc, #32]	@ (8016c9c <tcp_poll+0x50>)
 8016c7a:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016c7e:	490a      	ldr	r1, [pc, #40]	@ (8016ca8 <tcp_poll+0x5c>)
 8016c80:	4808      	ldr	r0, [pc, #32]	@ (8016ca4 <tcp_poll+0x58>)
 8016c82:	f007 fe0d 	bl	801e8a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	68ba      	ldr	r2, [r7, #8]
 8016c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	79fa      	ldrb	r2, [r7, #7]
 8016c92:	775a      	strb	r2, [r3, #29]
}
 8016c94:	3710      	adds	r7, #16
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	08020e00 	.word	0x08020e00
 8016ca0:	08021414 	.word	0x08021414
 8016ca4:	08020e44 	.word	0x08020e44
 8016ca8:	0802142c 	.word	0x0802142c

08016cac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d107      	bne.n	8016cca <tcp_pcb_purge+0x1e>
 8016cba:	4b21      	ldr	r3, [pc, #132]	@ (8016d40 <tcp_pcb_purge+0x94>)
 8016cbc:	f640 0251 	movw	r2, #2129	@ 0x851
 8016cc0:	4920      	ldr	r1, [pc, #128]	@ (8016d44 <tcp_pcb_purge+0x98>)
 8016cc2:	4821      	ldr	r0, [pc, #132]	@ (8016d48 <tcp_pcb_purge+0x9c>)
 8016cc4:	f007 fdec 	bl	801e8a0 <iprintf>
 8016cc8:	e037      	b.n	8016d3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	7d1b      	ldrb	r3, [r3, #20]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d033      	beq.n	8016d3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016cd6:	2b0a      	cmp	r3, #10
 8016cd8:	d02f      	beq.n	8016d3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016cde:	2b01      	cmp	r3, #1
 8016ce0:	d02b      	beq.n	8016d3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d007      	beq.n	8016cfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7fe f898 	bl	8014e24 <pbuf_free>
      pcb->refused_data = NULL;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d002      	beq.n	8016d08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 f986 	bl	8017014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d0e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7ff fcf9 	bl	801670c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7ff fcf4 	bl	801670c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	2200      	movs	r2, #0
 8016d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016d3a:	3708      	adds	r7, #8
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}
 8016d40:	08020e00 	.word	0x08020e00
 8016d44:	0802144c 	.word	0x0802144c
 8016d48:	08020e44 	.word	0x08020e44

08016d4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b084      	sub	sp, #16
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d106      	bne.n	8016d6a <tcp_pcb_remove+0x1e>
 8016d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8016e58 <tcp_pcb_remove+0x10c>)
 8016d5e:	f640 0283 	movw	r2, #2179	@ 0x883
 8016d62:	493e      	ldr	r1, [pc, #248]	@ (8016e5c <tcp_pcb_remove+0x110>)
 8016d64:	483e      	ldr	r0, [pc, #248]	@ (8016e60 <tcp_pcb_remove+0x114>)
 8016d66:	f007 fd9b 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d106      	bne.n	8016d7e <tcp_pcb_remove+0x32>
 8016d70:	4b39      	ldr	r3, [pc, #228]	@ (8016e58 <tcp_pcb_remove+0x10c>)
 8016d72:	f640 0284 	movw	r2, #2180	@ 0x884
 8016d76:	493b      	ldr	r1, [pc, #236]	@ (8016e64 <tcp_pcb_remove+0x118>)
 8016d78:	4839      	ldr	r0, [pc, #228]	@ (8016e60 <tcp_pcb_remove+0x114>)
 8016d7a:	f007 fd91 	bl	801e8a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	683a      	ldr	r2, [r7, #0]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d105      	bne.n	8016d94 <tcp_pcb_remove+0x48>
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	68da      	ldr	r2, [r3, #12]
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	601a      	str	r2, [r3, #0]
 8016d92:	e013      	b.n	8016dbc <tcp_pcb_remove+0x70>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	60fb      	str	r3, [r7, #12]
 8016d9a:	e00c      	b.n	8016db6 <tcp_pcb_remove+0x6a>
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	68db      	ldr	r3, [r3, #12]
 8016da0:	683a      	ldr	r2, [r7, #0]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d104      	bne.n	8016db0 <tcp_pcb_remove+0x64>
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	68da      	ldr	r2, [r3, #12]
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	60da      	str	r2, [r3, #12]
 8016dae:	e005      	b.n	8016dbc <tcp_pcb_remove+0x70>
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	68db      	ldr	r3, [r3, #12]
 8016db4:	60fb      	str	r3, [r7, #12]
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d1ef      	bne.n	8016d9c <tcp_pcb_remove+0x50>
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016dc2:	6838      	ldr	r0, [r7, #0]
 8016dc4:	f7ff ff72 	bl	8016cac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	7d1b      	ldrb	r3, [r3, #20]
 8016dcc:	2b0a      	cmp	r3, #10
 8016dce:	d013      	beq.n	8016df8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016dd0:	683b      	ldr	r3, [r7, #0]
 8016dd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016dd4:	2b01      	cmp	r3, #1
 8016dd6:	d00f      	beq.n	8016df8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016dd8:	683b      	ldr	r3, [r7, #0]
 8016dda:	8b5b      	ldrh	r3, [r3, #26]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d009      	beq.n	8016df8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	8b5b      	ldrh	r3, [r3, #26]
 8016de8:	f043 0302 	orr.w	r3, r3, #2
 8016dec:	b29a      	uxth	r2, r3
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016df2:	6838      	ldr	r0, [r7, #0]
 8016df4:	f003 fbc2 	bl	801a57c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	7d1b      	ldrb	r3, [r3, #20]
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d020      	beq.n	8016e42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d006      	beq.n	8016e16 <tcp_pcb_remove+0xca>
 8016e08:	4b13      	ldr	r3, [pc, #76]	@ (8016e58 <tcp_pcb_remove+0x10c>)
 8016e0a:	f640 0293 	movw	r2, #2195	@ 0x893
 8016e0e:	4916      	ldr	r1, [pc, #88]	@ (8016e68 <tcp_pcb_remove+0x11c>)
 8016e10:	4813      	ldr	r0, [pc, #76]	@ (8016e60 <tcp_pcb_remove+0x114>)
 8016e12:	f007 fd45 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d006      	beq.n	8016e2c <tcp_pcb_remove+0xe0>
 8016e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8016e58 <tcp_pcb_remove+0x10c>)
 8016e20:	f640 0294 	movw	r2, #2196	@ 0x894
 8016e24:	4911      	ldr	r1, [pc, #68]	@ (8016e6c <tcp_pcb_remove+0x120>)
 8016e26:	480e      	ldr	r0, [pc, #56]	@ (8016e60 <tcp_pcb_remove+0x114>)
 8016e28:	f007 fd3a 	bl	801e8a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d006      	beq.n	8016e42 <tcp_pcb_remove+0xf6>
 8016e34:	4b08      	ldr	r3, [pc, #32]	@ (8016e58 <tcp_pcb_remove+0x10c>)
 8016e36:	f640 0296 	movw	r2, #2198	@ 0x896
 8016e3a:	490d      	ldr	r1, [pc, #52]	@ (8016e70 <tcp_pcb_remove+0x124>)
 8016e3c:	4808      	ldr	r0, [pc, #32]	@ (8016e60 <tcp_pcb_remove+0x114>)
 8016e3e:	f007 fd2f 	bl	801e8a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	2200      	movs	r2, #0
 8016e46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016e4e:	bf00      	nop
 8016e50:	3710      	adds	r7, #16
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	08020e00 	.word	0x08020e00
 8016e5c:	08021468 	.word	0x08021468
 8016e60:	08020e44 	.word	0x08020e44
 8016e64:	08021484 	.word	0x08021484
 8016e68:	080214a4 	.word	0x080214a4
 8016e6c:	080214bc 	.word	0x080214bc
 8016e70:	080214d8 	.word	0x080214d8

08016e74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d106      	bne.n	8016e90 <tcp_next_iss+0x1c>
 8016e82:	4b0a      	ldr	r3, [pc, #40]	@ (8016eac <tcp_next_iss+0x38>)
 8016e84:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016e88:	4909      	ldr	r1, [pc, #36]	@ (8016eb0 <tcp_next_iss+0x3c>)
 8016e8a:	480a      	ldr	r0, [pc, #40]	@ (8016eb4 <tcp_next_iss+0x40>)
 8016e8c:	f007 fd08 	bl	801e8a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016e90:	4b09      	ldr	r3, [pc, #36]	@ (8016eb8 <tcp_next_iss+0x44>)
 8016e92:	681a      	ldr	r2, [r3, #0]
 8016e94:	4b09      	ldr	r3, [pc, #36]	@ (8016ebc <tcp_next_iss+0x48>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	4413      	add	r3, r2
 8016e9a:	4a07      	ldr	r2, [pc, #28]	@ (8016eb8 <tcp_next_iss+0x44>)
 8016e9c:	6013      	str	r3, [r2, #0]
  return iss;
 8016e9e:	4b06      	ldr	r3, [pc, #24]	@ (8016eb8 <tcp_next_iss+0x44>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	08020e00 	.word	0x08020e00
 8016eb0:	080214f0 	.word	0x080214f0
 8016eb4:	08020e44 	.word	0x08020e44
 8016eb8:	2400002c 	.word	0x2400002c
 8016ebc:	24008794 	.word	0x24008794

08016ec0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b086      	sub	sp, #24
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	607a      	str	r2, [r7, #4]
 8016ecc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d106      	bne.n	8016ee2 <tcp_eff_send_mss_netif+0x22>
 8016ed4:	4b14      	ldr	r3, [pc, #80]	@ (8016f28 <tcp_eff_send_mss_netif+0x68>)
 8016ed6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016eda:	4914      	ldr	r1, [pc, #80]	@ (8016f2c <tcp_eff_send_mss_netif+0x6c>)
 8016edc:	4814      	ldr	r0, [pc, #80]	@ (8016f30 <tcp_eff_send_mss_netif+0x70>)
 8016ede:	f007 fcdf 	bl	801e8a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d101      	bne.n	8016eec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016ee8:	89fb      	ldrh	r3, [r7, #14]
 8016eea:	e019      	b.n	8016f20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016ef0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016ef2:	8afb      	ldrh	r3, [r7, #22]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d012      	beq.n	8016f1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016ef8:	2328      	movs	r3, #40	@ 0x28
 8016efa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016efc:	8afa      	ldrh	r2, [r7, #22]
 8016efe:	8abb      	ldrh	r3, [r7, #20]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d904      	bls.n	8016f0e <tcp_eff_send_mss_netif+0x4e>
 8016f04:	8afa      	ldrh	r2, [r7, #22]
 8016f06:	8abb      	ldrh	r3, [r7, #20]
 8016f08:	1ad3      	subs	r3, r2, r3
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	e000      	b.n	8016f10 <tcp_eff_send_mss_netif+0x50>
 8016f0e:	2300      	movs	r3, #0
 8016f10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016f12:	8a7a      	ldrh	r2, [r7, #18]
 8016f14:	89fb      	ldrh	r3, [r7, #14]
 8016f16:	4293      	cmp	r3, r2
 8016f18:	bf28      	it	cs
 8016f1a:	4613      	movcs	r3, r2
 8016f1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3718      	adds	r7, #24
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}
 8016f28:	08020e00 	.word	0x08020e00
 8016f2c:	0802150c 	.word	0x0802150c
 8016f30:	08020e44 	.word	0x08020e44

08016f34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b084      	sub	sp, #16
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d119      	bne.n	8016f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016f48:	4b10      	ldr	r3, [pc, #64]	@ (8016f8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016f4a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016f4e:	4910      	ldr	r1, [pc, #64]	@ (8016f90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016f50:	4810      	ldr	r0, [pc, #64]	@ (8016f94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016f52:	f007 fca5 	bl	801e8a0 <iprintf>

  while (pcb != NULL) {
 8016f56:	e011      	b.n	8016f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	681a      	ldr	r2, [r3, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d108      	bne.n	8016f76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	68db      	ldr	r3, [r3, #12]
 8016f68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016f6a:	68f8      	ldr	r0, [r7, #12]
 8016f6c:	f7fe fd4a 	bl	8015a04 <tcp_abort>
      pcb = next;
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	60fb      	str	r3, [r7, #12]
 8016f74:	e002      	b.n	8016f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	68db      	ldr	r3, [r3, #12]
 8016f7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d1ea      	bne.n	8016f58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016f82:	bf00      	nop
 8016f84:	bf00      	nop
 8016f86:	3710      	adds	r7, #16
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	08020e00 	.word	0x08020e00
 8016f90:	08021534 	.word	0x08021534
 8016f94:	08020e44 	.word	0x08020e44

08016f98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d02a      	beq.n	8016ffe <tcp_netif_ip_addr_changed+0x66>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d026      	beq.n	8016ffe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016fb0:	4b15      	ldr	r3, [pc, #84]	@ (8017008 <tcp_netif_ip_addr_changed+0x70>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f7ff ffbc 	bl	8016f34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016fbc:	4b13      	ldr	r3, [pc, #76]	@ (801700c <tcp_netif_ip_addr_changed+0x74>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f7ff ffb6 	bl	8016f34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d017      	beq.n	8016ffe <tcp_netif_ip_addr_changed+0x66>
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d013      	beq.n	8016ffe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8017010 <tcp_netif_ip_addr_changed+0x78>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	60fb      	str	r3, [r7, #12]
 8016fdc:	e00c      	b.n	8016ff8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d103      	bne.n	8016ff2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	68db      	ldr	r3, [r3, #12]
 8016ff6:	60fb      	str	r3, [r7, #12]
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d1ef      	bne.n	8016fde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016ffe:	bf00      	nop
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	240087a0 	.word	0x240087a0
 801700c:	24008798 	.word	0x24008798
 8017010:	2400879c 	.word	0x2400879c

08017014 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017020:	2b00      	cmp	r3, #0
 8017022:	d007      	beq.n	8017034 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017028:	4618      	mov	r0, r3
 801702a:	f7ff fb6f 	bl	801670c <tcp_segs_free>
    pcb->ooseq = NULL;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	2200      	movs	r2, #0
 8017032:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017034:	bf00      	nop
 8017036:	3708      	adds	r7, #8
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801703c:	b590      	push	{r4, r7, lr}
 801703e:	b08d      	sub	sp, #52	@ 0x34
 8017040:	af04      	add	r7, sp, #16
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d105      	bne.n	8017058 <tcp_input+0x1c>
 801704c:	4b9b      	ldr	r3, [pc, #620]	@ (80172bc <tcp_input+0x280>)
 801704e:	2283      	movs	r2, #131	@ 0x83
 8017050:	499b      	ldr	r1, [pc, #620]	@ (80172c0 <tcp_input+0x284>)
 8017052:	489c      	ldr	r0, [pc, #624]	@ (80172c4 <tcp_input+0x288>)
 8017054:	f007 fc24 	bl	801e8a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	4a9a      	ldr	r2, [pc, #616]	@ (80172c8 <tcp_input+0x28c>)
 801705e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	895b      	ldrh	r3, [r3, #10]
 8017064:	2b13      	cmp	r3, #19
 8017066:	f240 83d1 	bls.w	801780c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801706a:	4b98      	ldr	r3, [pc, #608]	@ (80172cc <tcp_input+0x290>)
 801706c:	695b      	ldr	r3, [r3, #20]
 801706e:	4a97      	ldr	r2, [pc, #604]	@ (80172cc <tcp_input+0x290>)
 8017070:	6812      	ldr	r2, [r2, #0]
 8017072:	4611      	mov	r1, r2
 8017074:	4618      	mov	r0, r3
 8017076:	f006 fa07 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801707a:	4603      	mov	r3, r0
 801707c:	2b00      	cmp	r3, #0
 801707e:	f040 83c7 	bne.w	8017810 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017082:	4b92      	ldr	r3, [pc, #584]	@ (80172cc <tcp_input+0x290>)
 8017084:	695b      	ldr	r3, [r3, #20]
 8017086:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801708a:	2be0      	cmp	r3, #224	@ 0xe0
 801708c:	f000 83c0 	beq.w	8017810 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017090:	4b8d      	ldr	r3, [pc, #564]	@ (80172c8 <tcp_input+0x28c>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	899b      	ldrh	r3, [r3, #12]
 8017096:	b29b      	uxth	r3, r3
 8017098:	4618      	mov	r0, r3
 801709a:	f7fc fa09 	bl	80134b0 <lwip_htons>
 801709e:	4603      	mov	r3, r0
 80170a0:	0b1b      	lsrs	r3, r3, #12
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80170aa:	7cbb      	ldrb	r3, [r7, #18]
 80170ac:	2b13      	cmp	r3, #19
 80170ae:	f240 83b1 	bls.w	8017814 <tcp_input+0x7d8>
 80170b2:	7cbb      	ldrb	r3, [r7, #18]
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	891b      	ldrh	r3, [r3, #8]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	f200 83aa 	bhi.w	8017814 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80170c0:	7cbb      	ldrb	r3, [r7, #18]
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	3b14      	subs	r3, #20
 80170c6:	b29a      	uxth	r2, r3
 80170c8:	4b81      	ldr	r3, [pc, #516]	@ (80172d0 <tcp_input+0x294>)
 80170ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80170cc:	4b81      	ldr	r3, [pc, #516]	@ (80172d4 <tcp_input+0x298>)
 80170ce:	2200      	movs	r2, #0
 80170d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	895a      	ldrh	r2, [r3, #10]
 80170d6:	7cbb      	ldrb	r3, [r7, #18]
 80170d8:	b29b      	uxth	r3, r3
 80170da:	429a      	cmp	r2, r3
 80170dc:	d309      	bcc.n	80170f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80170de:	4b7c      	ldr	r3, [pc, #496]	@ (80172d0 <tcp_input+0x294>)
 80170e0:	881a      	ldrh	r2, [r3, #0]
 80170e2:	4b7d      	ldr	r3, [pc, #500]	@ (80172d8 <tcp_input+0x29c>)
 80170e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80170e6:	7cbb      	ldrb	r3, [r7, #18]
 80170e8:	4619      	mov	r1, r3
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f7fd fe14 	bl	8014d18 <pbuf_remove_header>
 80170f0:	e04e      	b.n	8017190 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d105      	bne.n	8017106 <tcp_input+0xca>
 80170fa:	4b70      	ldr	r3, [pc, #448]	@ (80172bc <tcp_input+0x280>)
 80170fc:	22c2      	movs	r2, #194	@ 0xc2
 80170fe:	4977      	ldr	r1, [pc, #476]	@ (80172dc <tcp_input+0x2a0>)
 8017100:	4870      	ldr	r0, [pc, #448]	@ (80172c4 <tcp_input+0x288>)
 8017102:	f007 fbcd 	bl	801e8a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017106:	2114      	movs	r1, #20
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f7fd fe05 	bl	8014d18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	895a      	ldrh	r2, [r3, #10]
 8017112:	4b71      	ldr	r3, [pc, #452]	@ (80172d8 <tcp_input+0x29c>)
 8017114:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017116:	4b6e      	ldr	r3, [pc, #440]	@ (80172d0 <tcp_input+0x294>)
 8017118:	881a      	ldrh	r2, [r3, #0]
 801711a:	4b6f      	ldr	r3, [pc, #444]	@ (80172d8 <tcp_input+0x29c>)
 801711c:	881b      	ldrh	r3, [r3, #0]
 801711e:	1ad3      	subs	r3, r2, r3
 8017120:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017122:	4b6d      	ldr	r3, [pc, #436]	@ (80172d8 <tcp_input+0x29c>)
 8017124:	881b      	ldrh	r3, [r3, #0]
 8017126:	4619      	mov	r1, r3
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f7fd fdf5 	bl	8014d18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	895b      	ldrh	r3, [r3, #10]
 8017134:	8a3a      	ldrh	r2, [r7, #16]
 8017136:	429a      	cmp	r2, r3
 8017138:	f200 836e 	bhi.w	8017818 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	4a64      	ldr	r2, [pc, #400]	@ (80172d4 <tcp_input+0x298>)
 8017144:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	8a3a      	ldrh	r2, [r7, #16]
 801714c:	4611      	mov	r1, r2
 801714e:	4618      	mov	r0, r3
 8017150:	f7fd fde2 	bl	8014d18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	891a      	ldrh	r2, [r3, #8]
 8017158:	8a3b      	ldrh	r3, [r7, #16]
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	b29a      	uxth	r2, r3
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	895b      	ldrh	r3, [r3, #10]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d005      	beq.n	8017176 <tcp_input+0x13a>
 801716a:	4b54      	ldr	r3, [pc, #336]	@ (80172bc <tcp_input+0x280>)
 801716c:	22df      	movs	r2, #223	@ 0xdf
 801716e:	495c      	ldr	r1, [pc, #368]	@ (80172e0 <tcp_input+0x2a4>)
 8017170:	4854      	ldr	r0, [pc, #336]	@ (80172c4 <tcp_input+0x288>)
 8017172:	f007 fb95 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	891a      	ldrh	r2, [r3, #8]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	891b      	ldrh	r3, [r3, #8]
 8017180:	429a      	cmp	r2, r3
 8017182:	d005      	beq.n	8017190 <tcp_input+0x154>
 8017184:	4b4d      	ldr	r3, [pc, #308]	@ (80172bc <tcp_input+0x280>)
 8017186:	22e0      	movs	r2, #224	@ 0xe0
 8017188:	4956      	ldr	r1, [pc, #344]	@ (80172e4 <tcp_input+0x2a8>)
 801718a:	484e      	ldr	r0, [pc, #312]	@ (80172c4 <tcp_input+0x288>)
 801718c:	f007 fb88 	bl	801e8a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017190:	4b4d      	ldr	r3, [pc, #308]	@ (80172c8 <tcp_input+0x28c>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	881b      	ldrh	r3, [r3, #0]
 8017196:	b29b      	uxth	r3, r3
 8017198:	4a4b      	ldr	r2, [pc, #300]	@ (80172c8 <tcp_input+0x28c>)
 801719a:	6814      	ldr	r4, [r2, #0]
 801719c:	4618      	mov	r0, r3
 801719e:	f7fc f987 	bl	80134b0 <lwip_htons>
 80171a2:	4603      	mov	r3, r0
 80171a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80171a6:	4b48      	ldr	r3, [pc, #288]	@ (80172c8 <tcp_input+0x28c>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	885b      	ldrh	r3, [r3, #2]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	4a46      	ldr	r2, [pc, #280]	@ (80172c8 <tcp_input+0x28c>)
 80171b0:	6814      	ldr	r4, [r2, #0]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f7fc f97c 	bl	80134b0 <lwip_htons>
 80171b8:	4603      	mov	r3, r0
 80171ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80171bc:	4b42      	ldr	r3, [pc, #264]	@ (80172c8 <tcp_input+0x28c>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	4a41      	ldr	r2, [pc, #260]	@ (80172c8 <tcp_input+0x28c>)
 80171c4:	6814      	ldr	r4, [r2, #0]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7fc f987 	bl	80134da <lwip_htonl>
 80171cc:	4603      	mov	r3, r0
 80171ce:	6063      	str	r3, [r4, #4]
 80171d0:	6863      	ldr	r3, [r4, #4]
 80171d2:	4a45      	ldr	r2, [pc, #276]	@ (80172e8 <tcp_input+0x2ac>)
 80171d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80171d6:	4b3c      	ldr	r3, [pc, #240]	@ (80172c8 <tcp_input+0x28c>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	689b      	ldr	r3, [r3, #8]
 80171dc:	4a3a      	ldr	r2, [pc, #232]	@ (80172c8 <tcp_input+0x28c>)
 80171de:	6814      	ldr	r4, [r2, #0]
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7fc f97a 	bl	80134da <lwip_htonl>
 80171e6:	4603      	mov	r3, r0
 80171e8:	60a3      	str	r3, [r4, #8]
 80171ea:	68a3      	ldr	r3, [r4, #8]
 80171ec:	4a3f      	ldr	r2, [pc, #252]	@ (80172ec <tcp_input+0x2b0>)
 80171ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80171f0:	4b35      	ldr	r3, [pc, #212]	@ (80172c8 <tcp_input+0x28c>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	89db      	ldrh	r3, [r3, #14]
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	4a33      	ldr	r2, [pc, #204]	@ (80172c8 <tcp_input+0x28c>)
 80171fa:	6814      	ldr	r4, [r2, #0]
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7fc f957 	bl	80134b0 <lwip_htons>
 8017202:	4603      	mov	r3, r0
 8017204:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017206:	4b30      	ldr	r3, [pc, #192]	@ (80172c8 <tcp_input+0x28c>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	899b      	ldrh	r3, [r3, #12]
 801720c:	b29b      	uxth	r3, r3
 801720e:	4618      	mov	r0, r3
 8017210:	f7fc f94e 	bl	80134b0 <lwip_htons>
 8017214:	4603      	mov	r3, r0
 8017216:	b2db      	uxtb	r3, r3
 8017218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801721c:	b2da      	uxtb	r2, r3
 801721e:	4b34      	ldr	r3, [pc, #208]	@ (80172f0 <tcp_input+0x2b4>)
 8017220:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	891a      	ldrh	r2, [r3, #8]
 8017226:	4b33      	ldr	r3, [pc, #204]	@ (80172f4 <tcp_input+0x2b8>)
 8017228:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801722a:	4b31      	ldr	r3, [pc, #196]	@ (80172f0 <tcp_input+0x2b4>)
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	f003 0303 	and.w	r3, r3, #3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00c      	beq.n	8017250 <tcp_input+0x214>
    tcplen++;
 8017236:	4b2f      	ldr	r3, [pc, #188]	@ (80172f4 <tcp_input+0x2b8>)
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	3301      	adds	r3, #1
 801723c:	b29a      	uxth	r2, r3
 801723e:	4b2d      	ldr	r3, [pc, #180]	@ (80172f4 <tcp_input+0x2b8>)
 8017240:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	891a      	ldrh	r2, [r3, #8]
 8017246:	4b2b      	ldr	r3, [pc, #172]	@ (80172f4 <tcp_input+0x2b8>)
 8017248:	881b      	ldrh	r3, [r3, #0]
 801724a:	429a      	cmp	r2, r3
 801724c:	f200 82e6 	bhi.w	801781c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017250:	2300      	movs	r3, #0
 8017252:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017254:	4b28      	ldr	r3, [pc, #160]	@ (80172f8 <tcp_input+0x2bc>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	61fb      	str	r3, [r7, #28]
 801725a:	e09d      	b.n	8017398 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801725c:	69fb      	ldr	r3, [r7, #28]
 801725e:	7d1b      	ldrb	r3, [r3, #20]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d105      	bne.n	8017270 <tcp_input+0x234>
 8017264:	4b15      	ldr	r3, [pc, #84]	@ (80172bc <tcp_input+0x280>)
 8017266:	22fb      	movs	r2, #251	@ 0xfb
 8017268:	4924      	ldr	r1, [pc, #144]	@ (80172fc <tcp_input+0x2c0>)
 801726a:	4816      	ldr	r0, [pc, #88]	@ (80172c4 <tcp_input+0x288>)
 801726c:	f007 fb18 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017270:	69fb      	ldr	r3, [r7, #28]
 8017272:	7d1b      	ldrb	r3, [r3, #20]
 8017274:	2b0a      	cmp	r3, #10
 8017276:	d105      	bne.n	8017284 <tcp_input+0x248>
 8017278:	4b10      	ldr	r3, [pc, #64]	@ (80172bc <tcp_input+0x280>)
 801727a:	22fc      	movs	r2, #252	@ 0xfc
 801727c:	4920      	ldr	r1, [pc, #128]	@ (8017300 <tcp_input+0x2c4>)
 801727e:	4811      	ldr	r0, [pc, #68]	@ (80172c4 <tcp_input+0x288>)
 8017280:	f007 fb0e 	bl	801e8a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017284:	69fb      	ldr	r3, [r7, #28]
 8017286:	7d1b      	ldrb	r3, [r3, #20]
 8017288:	2b01      	cmp	r3, #1
 801728a:	d105      	bne.n	8017298 <tcp_input+0x25c>
 801728c:	4b0b      	ldr	r3, [pc, #44]	@ (80172bc <tcp_input+0x280>)
 801728e:	22fd      	movs	r2, #253	@ 0xfd
 8017290:	491c      	ldr	r1, [pc, #112]	@ (8017304 <tcp_input+0x2c8>)
 8017292:	480c      	ldr	r0, [pc, #48]	@ (80172c4 <tcp_input+0x288>)
 8017294:	f007 fb04 	bl	801e8a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017298:	69fb      	ldr	r3, [r7, #28]
 801729a:	7a1b      	ldrb	r3, [r3, #8]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d033      	beq.n	8017308 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80172a0:	69fb      	ldr	r3, [r7, #28]
 80172a2:	7a1a      	ldrb	r2, [r3, #8]
 80172a4:	4b09      	ldr	r3, [pc, #36]	@ (80172cc <tcp_input+0x290>)
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172ac:	3301      	adds	r3, #1
 80172ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d029      	beq.n	8017308 <tcp_input+0x2cc>
      prev = pcb;
 80172b4:	69fb      	ldr	r3, [r7, #28]
 80172b6:	61bb      	str	r3, [r7, #24]
      continue;
 80172b8:	e06b      	b.n	8017392 <tcp_input+0x356>
 80172ba:	bf00      	nop
 80172bc:	08021568 	.word	0x08021568
 80172c0:	0802159c 	.word	0x0802159c
 80172c4:	080215b4 	.word	0x080215b4
 80172c8:	240087bc 	.word	0x240087bc
 80172cc:	24005394 	.word	0x24005394
 80172d0:	240087c0 	.word	0x240087c0
 80172d4:	240087c4 	.word	0x240087c4
 80172d8:	240087c2 	.word	0x240087c2
 80172dc:	080215dc 	.word	0x080215dc
 80172e0:	080215ec 	.word	0x080215ec
 80172e4:	080215f8 	.word	0x080215f8
 80172e8:	240087cc 	.word	0x240087cc
 80172ec:	240087d0 	.word	0x240087d0
 80172f0:	240087d8 	.word	0x240087d8
 80172f4:	240087d6 	.word	0x240087d6
 80172f8:	240087a0 	.word	0x240087a0
 80172fc:	08021618 	.word	0x08021618
 8017300:	08021640 	.word	0x08021640
 8017304:	0802166c 	.word	0x0802166c
    }

    if (pcb->remote_port == tcphdr->src &&
 8017308:	69fb      	ldr	r3, [r7, #28]
 801730a:	8b1a      	ldrh	r2, [r3, #24]
 801730c:	4b72      	ldr	r3, [pc, #456]	@ (80174d8 <tcp_input+0x49c>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	881b      	ldrh	r3, [r3, #0]
 8017312:	b29b      	uxth	r3, r3
 8017314:	429a      	cmp	r2, r3
 8017316:	d13a      	bne.n	801738e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017318:	69fb      	ldr	r3, [r7, #28]
 801731a:	8ada      	ldrh	r2, [r3, #22]
 801731c:	4b6e      	ldr	r3, [pc, #440]	@ (80174d8 <tcp_input+0x49c>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	885b      	ldrh	r3, [r3, #2]
 8017322:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017324:	429a      	cmp	r2, r3
 8017326:	d132      	bne.n	801738e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017328:	69fb      	ldr	r3, [r7, #28]
 801732a:	685a      	ldr	r2, [r3, #4]
 801732c:	4b6b      	ldr	r3, [pc, #428]	@ (80174dc <tcp_input+0x4a0>)
 801732e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017330:	429a      	cmp	r2, r3
 8017332:	d12c      	bne.n	801738e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017334:	69fb      	ldr	r3, [r7, #28]
 8017336:	681a      	ldr	r2, [r3, #0]
 8017338:	4b68      	ldr	r3, [pc, #416]	@ (80174dc <tcp_input+0x4a0>)
 801733a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801733c:	429a      	cmp	r2, r3
 801733e:	d126      	bne.n	801738e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017340:	69fb      	ldr	r3, [r7, #28]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	69fa      	ldr	r2, [r7, #28]
 8017346:	429a      	cmp	r2, r3
 8017348:	d106      	bne.n	8017358 <tcp_input+0x31c>
 801734a:	4b65      	ldr	r3, [pc, #404]	@ (80174e0 <tcp_input+0x4a4>)
 801734c:	f240 120d 	movw	r2, #269	@ 0x10d
 8017350:	4964      	ldr	r1, [pc, #400]	@ (80174e4 <tcp_input+0x4a8>)
 8017352:	4865      	ldr	r0, [pc, #404]	@ (80174e8 <tcp_input+0x4ac>)
 8017354:	f007 faa4 	bl	801e8a0 <iprintf>
      if (prev != NULL) {
 8017358:	69bb      	ldr	r3, [r7, #24]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d00a      	beq.n	8017374 <tcp_input+0x338>
        prev->next = pcb->next;
 801735e:	69fb      	ldr	r3, [r7, #28]
 8017360:	68da      	ldr	r2, [r3, #12]
 8017362:	69bb      	ldr	r3, [r7, #24]
 8017364:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017366:	4b61      	ldr	r3, [pc, #388]	@ (80174ec <tcp_input+0x4b0>)
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	69fb      	ldr	r3, [r7, #28]
 801736c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801736e:	4a5f      	ldr	r2, [pc, #380]	@ (80174ec <tcp_input+0x4b0>)
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017374:	69fb      	ldr	r3, [r7, #28]
 8017376:	68db      	ldr	r3, [r3, #12]
 8017378:	69fa      	ldr	r2, [r7, #28]
 801737a:	429a      	cmp	r2, r3
 801737c:	d111      	bne.n	80173a2 <tcp_input+0x366>
 801737e:	4b58      	ldr	r3, [pc, #352]	@ (80174e0 <tcp_input+0x4a4>)
 8017380:	f240 1215 	movw	r2, #277	@ 0x115
 8017384:	495a      	ldr	r1, [pc, #360]	@ (80174f0 <tcp_input+0x4b4>)
 8017386:	4858      	ldr	r0, [pc, #352]	@ (80174e8 <tcp_input+0x4ac>)
 8017388:	f007 fa8a 	bl	801e8a0 <iprintf>
      break;
 801738c:	e009      	b.n	80173a2 <tcp_input+0x366>
    }
    prev = pcb;
 801738e:	69fb      	ldr	r3, [r7, #28]
 8017390:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	68db      	ldr	r3, [r3, #12]
 8017396:	61fb      	str	r3, [r7, #28]
 8017398:	69fb      	ldr	r3, [r7, #28]
 801739a:	2b00      	cmp	r3, #0
 801739c:	f47f af5e 	bne.w	801725c <tcp_input+0x220>
 80173a0:	e000      	b.n	80173a4 <tcp_input+0x368>
      break;
 80173a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80173a4:	69fb      	ldr	r3, [r7, #28]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	f040 80aa 	bne.w	8017500 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80173ac:	4b51      	ldr	r3, [pc, #324]	@ (80174f4 <tcp_input+0x4b8>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	61fb      	str	r3, [r7, #28]
 80173b2:	e03f      	b.n	8017434 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80173b4:	69fb      	ldr	r3, [r7, #28]
 80173b6:	7d1b      	ldrb	r3, [r3, #20]
 80173b8:	2b0a      	cmp	r3, #10
 80173ba:	d006      	beq.n	80173ca <tcp_input+0x38e>
 80173bc:	4b48      	ldr	r3, [pc, #288]	@ (80174e0 <tcp_input+0x4a4>)
 80173be:	f240 121f 	movw	r2, #287	@ 0x11f
 80173c2:	494d      	ldr	r1, [pc, #308]	@ (80174f8 <tcp_input+0x4bc>)
 80173c4:	4848      	ldr	r0, [pc, #288]	@ (80174e8 <tcp_input+0x4ac>)
 80173c6:	f007 fa6b 	bl	801e8a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	7a1b      	ldrb	r3, [r3, #8]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d009      	beq.n	80173e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	7a1a      	ldrb	r2, [r3, #8]
 80173d6:	4b41      	ldr	r3, [pc, #260]	@ (80174dc <tcp_input+0x4a0>)
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80173de:	3301      	adds	r3, #1
 80173e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d122      	bne.n	801742c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	8b1a      	ldrh	r2, [r3, #24]
 80173ea:	4b3b      	ldr	r3, [pc, #236]	@ (80174d8 <tcp_input+0x49c>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	881b      	ldrh	r3, [r3, #0]
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d11b      	bne.n	801742e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80173f6:	69fb      	ldr	r3, [r7, #28]
 80173f8:	8ada      	ldrh	r2, [r3, #22]
 80173fa:	4b37      	ldr	r3, [pc, #220]	@ (80174d8 <tcp_input+0x49c>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	885b      	ldrh	r3, [r3, #2]
 8017400:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017402:	429a      	cmp	r2, r3
 8017404:	d113      	bne.n	801742e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	685a      	ldr	r2, [r3, #4]
 801740a:	4b34      	ldr	r3, [pc, #208]	@ (80174dc <tcp_input+0x4a0>)
 801740c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801740e:	429a      	cmp	r2, r3
 8017410:	d10d      	bne.n	801742e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	4b31      	ldr	r3, [pc, #196]	@ (80174dc <tcp_input+0x4a0>)
 8017418:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801741a:	429a      	cmp	r2, r3
 801741c:	d107      	bne.n	801742e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801741e:	69f8      	ldr	r0, [r7, #28]
 8017420:	f000 fb56 	bl	8017ad0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f7fd fcfd 	bl	8014e24 <pbuf_free>
        return;
 801742a:	e1fd      	b.n	8017828 <tcp_input+0x7ec>
        continue;
 801742c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	68db      	ldr	r3, [r3, #12]
 8017432:	61fb      	str	r3, [r7, #28]
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d1bc      	bne.n	80173b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801743a:	2300      	movs	r3, #0
 801743c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801743e:	4b2f      	ldr	r3, [pc, #188]	@ (80174fc <tcp_input+0x4c0>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	617b      	str	r3, [r7, #20]
 8017444:	e02a      	b.n	801749c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	7a1b      	ldrb	r3, [r3, #8]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00c      	beq.n	8017468 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	7a1a      	ldrb	r2, [r3, #8]
 8017452:	4b22      	ldr	r3, [pc, #136]	@ (80174dc <tcp_input+0x4a0>)
 8017454:	685b      	ldr	r3, [r3, #4]
 8017456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801745a:	3301      	adds	r3, #1
 801745c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801745e:	429a      	cmp	r2, r3
 8017460:	d002      	beq.n	8017468 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	61bb      	str	r3, [r7, #24]
        continue;
 8017466:	e016      	b.n	8017496 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017468:	697b      	ldr	r3, [r7, #20]
 801746a:	8ada      	ldrh	r2, [r3, #22]
 801746c:	4b1a      	ldr	r3, [pc, #104]	@ (80174d8 <tcp_input+0x49c>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	885b      	ldrh	r3, [r3, #2]
 8017472:	b29b      	uxth	r3, r3
 8017474:	429a      	cmp	r2, r3
 8017476:	d10c      	bne.n	8017492 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	681a      	ldr	r2, [r3, #0]
 801747c:	4b17      	ldr	r3, [pc, #92]	@ (80174dc <tcp_input+0x4a0>)
 801747e:	695b      	ldr	r3, [r3, #20]
 8017480:	429a      	cmp	r2, r3
 8017482:	d00f      	beq.n	80174a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017484:	697b      	ldr	r3, [r7, #20]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d00d      	beq.n	80174a6 <tcp_input+0x46a>
 801748a:	697b      	ldr	r3, [r7, #20]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d009      	beq.n	80174a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	617b      	str	r3, [r7, #20]
 801749c:	697b      	ldr	r3, [r7, #20]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d1d1      	bne.n	8017446 <tcp_input+0x40a>
 80174a2:	e000      	b.n	80174a6 <tcp_input+0x46a>
            break;
 80174a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80174a6:	697b      	ldr	r3, [r7, #20]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d029      	beq.n	8017500 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80174ac:	69bb      	ldr	r3, [r7, #24]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d00a      	beq.n	80174c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	68da      	ldr	r2, [r3, #12]
 80174b6:	69bb      	ldr	r3, [r7, #24]
 80174b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80174ba:	4b10      	ldr	r3, [pc, #64]	@ (80174fc <tcp_input+0x4c0>)
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80174c2:	4a0e      	ldr	r2, [pc, #56]	@ (80174fc <tcp_input+0x4c0>)
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80174c8:	6978      	ldr	r0, [r7, #20]
 80174ca:	f000 fa03 	bl	80178d4 <tcp_listen_input>
      }
      pbuf_free(p);
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	f7fd fca8 	bl	8014e24 <pbuf_free>
      return;
 80174d4:	e1a8      	b.n	8017828 <tcp_input+0x7ec>
 80174d6:	bf00      	nop
 80174d8:	240087bc 	.word	0x240087bc
 80174dc:	24005394 	.word	0x24005394
 80174e0:	08021568 	.word	0x08021568
 80174e4:	08021694 	.word	0x08021694
 80174e8:	080215b4 	.word	0x080215b4
 80174ec:	240087a0 	.word	0x240087a0
 80174f0:	080216c0 	.word	0x080216c0
 80174f4:	240087a4 	.word	0x240087a4
 80174f8:	080216ec 	.word	0x080216ec
 80174fc:	2400879c 	.word	0x2400879c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017500:	69fb      	ldr	r3, [r7, #28]
 8017502:	2b00      	cmp	r3, #0
 8017504:	f000 8158 	beq.w	80177b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017508:	4b95      	ldr	r3, [pc, #596]	@ (8017760 <tcp_input+0x724>)
 801750a:	2200      	movs	r2, #0
 801750c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	891a      	ldrh	r2, [r3, #8]
 8017512:	4b93      	ldr	r3, [pc, #588]	@ (8017760 <tcp_input+0x724>)
 8017514:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017516:	4a92      	ldr	r2, [pc, #584]	@ (8017760 <tcp_input+0x724>)
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801751c:	4b91      	ldr	r3, [pc, #580]	@ (8017764 <tcp_input+0x728>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	4a8f      	ldr	r2, [pc, #572]	@ (8017760 <tcp_input+0x724>)
 8017522:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017524:	4b90      	ldr	r3, [pc, #576]	@ (8017768 <tcp_input+0x72c>)
 8017526:	2200      	movs	r2, #0
 8017528:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801752a:	4b90      	ldr	r3, [pc, #576]	@ (801776c <tcp_input+0x730>)
 801752c:	2200      	movs	r2, #0
 801752e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017530:	4b8f      	ldr	r3, [pc, #572]	@ (8017770 <tcp_input+0x734>)
 8017532:	2200      	movs	r2, #0
 8017534:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017536:	4b8f      	ldr	r3, [pc, #572]	@ (8017774 <tcp_input+0x738>)
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	f003 0308 	and.w	r3, r3, #8
 801753e:	2b00      	cmp	r3, #0
 8017540:	d006      	beq.n	8017550 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	7b5b      	ldrb	r3, [r3, #13]
 8017546:	f043 0301 	orr.w	r3, r3, #1
 801754a:	b2da      	uxtb	r2, r3
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017554:	2b00      	cmp	r3, #0
 8017556:	d017      	beq.n	8017588 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017558:	69f8      	ldr	r0, [r7, #28]
 801755a:	f7ff f859 	bl	8016610 <tcp_process_refused_data>
 801755e:	4603      	mov	r3, r0
 8017560:	f113 0f0d 	cmn.w	r3, #13
 8017564:	d007      	beq.n	8017576 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017566:	69fb      	ldr	r3, [r7, #28]
 8017568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801756a:	2b00      	cmp	r3, #0
 801756c:	d00c      	beq.n	8017588 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801756e:	4b82      	ldr	r3, [pc, #520]	@ (8017778 <tcp_input+0x73c>)
 8017570:	881b      	ldrh	r3, [r3, #0]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d008      	beq.n	8017588 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017576:	69fb      	ldr	r3, [r7, #28]
 8017578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801757a:	2b00      	cmp	r3, #0
 801757c:	f040 80e4 	bne.w	8017748 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017580:	69f8      	ldr	r0, [r7, #28]
 8017582:	f003 fe01 	bl	801b188 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017586:	e0df      	b.n	8017748 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8017588:	4a7c      	ldr	r2, [pc, #496]	@ (801777c <tcp_input+0x740>)
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801758e:	69f8      	ldr	r0, [r7, #28]
 8017590:	f000 fb18 	bl	8017bc4 <tcp_process>
 8017594:	4603      	mov	r3, r0
 8017596:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801759c:	f113 0f0d 	cmn.w	r3, #13
 80175a0:	f000 80d4 	beq.w	801774c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 80175a4:	4b71      	ldr	r3, [pc, #452]	@ (801776c <tcp_input+0x730>)
 80175a6:	781b      	ldrb	r3, [r3, #0]
 80175a8:	f003 0308 	and.w	r3, r3, #8
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d015      	beq.n	80175dc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80175b0:	69fb      	ldr	r3, [r7, #28]
 80175b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d008      	beq.n	80175cc <tcp_input+0x590>
 80175ba:	69fb      	ldr	r3, [r7, #28]
 80175bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175c0:	69fa      	ldr	r2, [r7, #28]
 80175c2:	6912      	ldr	r2, [r2, #16]
 80175c4:	f06f 010d 	mvn.w	r1, #13
 80175c8:	4610      	mov	r0, r2
 80175ca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80175cc:	69f9      	ldr	r1, [r7, #28]
 80175ce:	486c      	ldr	r0, [pc, #432]	@ (8017780 <tcp_input+0x744>)
 80175d0:	f7ff fbbc 	bl	8016d4c <tcp_pcb_remove>
        tcp_free(pcb);
 80175d4:	69f8      	ldr	r0, [r7, #28]
 80175d6:	f7fd fed1 	bl	801537c <tcp_free>
 80175da:	e0da      	b.n	8017792 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80175dc:	2300      	movs	r3, #0
 80175de:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80175e0:	4b63      	ldr	r3, [pc, #396]	@ (8017770 <tcp_input+0x734>)
 80175e2:	881b      	ldrh	r3, [r3, #0]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d01d      	beq.n	8017624 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80175e8:	4b61      	ldr	r3, [pc, #388]	@ (8017770 <tcp_input+0x734>)
 80175ea:	881b      	ldrh	r3, [r3, #0]
 80175ec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d00a      	beq.n	801760e <tcp_input+0x5d2>
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80175fe:	69fa      	ldr	r2, [r7, #28]
 8017600:	6910      	ldr	r0, [r2, #16]
 8017602:	89fa      	ldrh	r2, [r7, #14]
 8017604:	69f9      	ldr	r1, [r7, #28]
 8017606:	4798      	blx	r3
 8017608:	4603      	mov	r3, r0
 801760a:	74fb      	strb	r3, [r7, #19]
 801760c:	e001      	b.n	8017612 <tcp_input+0x5d6>
 801760e:	2300      	movs	r3, #0
 8017610:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017612:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017616:	f113 0f0d 	cmn.w	r3, #13
 801761a:	f000 8099 	beq.w	8017750 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801761e:	4b54      	ldr	r3, [pc, #336]	@ (8017770 <tcp_input+0x734>)
 8017620:	2200      	movs	r2, #0
 8017622:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017624:	69f8      	ldr	r0, [r7, #28]
 8017626:	f000 f915 	bl	8017854 <tcp_input_delayed_close>
 801762a:	4603      	mov	r3, r0
 801762c:	2b00      	cmp	r3, #0
 801762e:	f040 8091 	bne.w	8017754 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017632:	4b4d      	ldr	r3, [pc, #308]	@ (8017768 <tcp_input+0x72c>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d041      	beq.n	80176be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801763a:	69fb      	ldr	r3, [r7, #28]
 801763c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801763e:	2b00      	cmp	r3, #0
 8017640:	d006      	beq.n	8017650 <tcp_input+0x614>
 8017642:	4b50      	ldr	r3, [pc, #320]	@ (8017784 <tcp_input+0x748>)
 8017644:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017648:	494f      	ldr	r1, [pc, #316]	@ (8017788 <tcp_input+0x74c>)
 801764a:	4850      	ldr	r0, [pc, #320]	@ (801778c <tcp_input+0x750>)
 801764c:	f007 f928 	bl	801e8a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017650:	69fb      	ldr	r3, [r7, #28]
 8017652:	8b5b      	ldrh	r3, [r3, #26]
 8017654:	f003 0310 	and.w	r3, r3, #16
 8017658:	2b00      	cmp	r3, #0
 801765a:	d008      	beq.n	801766e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801765c:	4b42      	ldr	r3, [pc, #264]	@ (8017768 <tcp_input+0x72c>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	4618      	mov	r0, r3
 8017662:	f7fd fbdf 	bl	8014e24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017666:	69f8      	ldr	r0, [r7, #28]
 8017668:	f7fe f9cc 	bl	8015a04 <tcp_abort>
            goto aborted;
 801766c:	e091      	b.n	8017792 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801766e:	69fb      	ldr	r3, [r7, #28]
 8017670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017674:	2b00      	cmp	r3, #0
 8017676:	d00c      	beq.n	8017692 <tcp_input+0x656>
 8017678:	69fb      	ldr	r3, [r7, #28]
 801767a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801767e:	69fb      	ldr	r3, [r7, #28]
 8017680:	6918      	ldr	r0, [r3, #16]
 8017682:	4b39      	ldr	r3, [pc, #228]	@ (8017768 <tcp_input+0x72c>)
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	2300      	movs	r3, #0
 8017688:	69f9      	ldr	r1, [r7, #28]
 801768a:	47a0      	blx	r4
 801768c:	4603      	mov	r3, r0
 801768e:	74fb      	strb	r3, [r7, #19]
 8017690:	e008      	b.n	80176a4 <tcp_input+0x668>
 8017692:	4b35      	ldr	r3, [pc, #212]	@ (8017768 <tcp_input+0x72c>)
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	2300      	movs	r3, #0
 8017698:	69f9      	ldr	r1, [r7, #28]
 801769a:	2000      	movs	r0, #0
 801769c:	f7ff f890 	bl	80167c0 <tcp_recv_null>
 80176a0:	4603      	mov	r3, r0
 80176a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80176a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176a8:	f113 0f0d 	cmn.w	r3, #13
 80176ac:	d054      	beq.n	8017758 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80176ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d003      	beq.n	80176be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80176b6:	4b2c      	ldr	r3, [pc, #176]	@ (8017768 <tcp_input+0x72c>)
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80176be:	4b2b      	ldr	r3, [pc, #172]	@ (801776c <tcp_input+0x730>)
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	f003 0320 	and.w	r3, r3, #32
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d031      	beq.n	801772e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 80176ca:	69fb      	ldr	r3, [r7, #28]
 80176cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d009      	beq.n	80176e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80176d6:	7b5a      	ldrb	r2, [r3, #13]
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80176dc:	f042 0220 	orr.w	r2, r2, #32
 80176e0:	b2d2      	uxtb	r2, r2
 80176e2:	735a      	strb	r2, [r3, #13]
 80176e4:	e023      	b.n	801772e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ea:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80176ee:	4293      	cmp	r3, r2
 80176f0:	d005      	beq.n	80176fe <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80176f2:	69fb      	ldr	r3, [r7, #28]
 80176f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176f6:	3301      	adds	r3, #1
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80176fe:	69fb      	ldr	r3, [r7, #28]
 8017700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00b      	beq.n	8017720 <tcp_input+0x6e4>
 8017708:	69fb      	ldr	r3, [r7, #28]
 801770a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801770e:	69fb      	ldr	r3, [r7, #28]
 8017710:	6918      	ldr	r0, [r3, #16]
 8017712:	2300      	movs	r3, #0
 8017714:	2200      	movs	r2, #0
 8017716:	69f9      	ldr	r1, [r7, #28]
 8017718:	47a0      	blx	r4
 801771a:	4603      	mov	r3, r0
 801771c:	74fb      	strb	r3, [r7, #19]
 801771e:	e001      	b.n	8017724 <tcp_input+0x6e8>
 8017720:	2300      	movs	r3, #0
 8017722:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017728:	f113 0f0d 	cmn.w	r3, #13
 801772c:	d016      	beq.n	801775c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801772e:	4b13      	ldr	r3, [pc, #76]	@ (801777c <tcp_input+0x740>)
 8017730:	2200      	movs	r2, #0
 8017732:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017734:	69f8      	ldr	r0, [r7, #28]
 8017736:	f000 f88d 	bl	8017854 <tcp_input_delayed_close>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	d127      	bne.n	8017790 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017740:	69f8      	ldr	r0, [r7, #28]
 8017742:	f002 ff1b 	bl	801a57c <tcp_output>
 8017746:	e024      	b.n	8017792 <tcp_input+0x756>
        goto aborted;
 8017748:	bf00      	nop
 801774a:	e022      	b.n	8017792 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801774c:	bf00      	nop
 801774e:	e020      	b.n	8017792 <tcp_input+0x756>
              goto aborted;
 8017750:	bf00      	nop
 8017752:	e01e      	b.n	8017792 <tcp_input+0x756>
          goto aborted;
 8017754:	bf00      	nop
 8017756:	e01c      	b.n	8017792 <tcp_input+0x756>
            goto aborted;
 8017758:	bf00      	nop
 801775a:	e01a      	b.n	8017792 <tcp_input+0x756>
              goto aborted;
 801775c:	bf00      	nop
 801775e:	e018      	b.n	8017792 <tcp_input+0x756>
 8017760:	240087ac 	.word	0x240087ac
 8017764:	240087bc 	.word	0x240087bc
 8017768:	240087dc 	.word	0x240087dc
 801776c:	240087d9 	.word	0x240087d9
 8017770:	240087d4 	.word	0x240087d4
 8017774:	240087d8 	.word	0x240087d8
 8017778:	240087d6 	.word	0x240087d6
 801777c:	240087e0 	.word	0x240087e0
 8017780:	240087a0 	.word	0x240087a0
 8017784:	08021568 	.word	0x08021568
 8017788:	0802171c 	.word	0x0802171c
 801778c:	080215b4 	.word	0x080215b4
          goto aborted;
 8017790:	bf00      	nop
    tcp_input_pcb = NULL;
 8017792:	4b27      	ldr	r3, [pc, #156]	@ (8017830 <tcp_input+0x7f4>)
 8017794:	2200      	movs	r2, #0
 8017796:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017798:	4b26      	ldr	r3, [pc, #152]	@ (8017834 <tcp_input+0x7f8>)
 801779a:	2200      	movs	r2, #0
 801779c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801779e:	4b26      	ldr	r3, [pc, #152]	@ (8017838 <tcp_input+0x7fc>)
 80177a0:	685b      	ldr	r3, [r3, #4]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d03f      	beq.n	8017826 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80177a6:	4b24      	ldr	r3, [pc, #144]	@ (8017838 <tcp_input+0x7fc>)
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7fd fb3a 	bl	8014e24 <pbuf_free>
      inseg.p = NULL;
 80177b0:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <tcp_input+0x7fc>)
 80177b2:	2200      	movs	r2, #0
 80177b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80177b6:	e036      	b.n	8017826 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80177b8:	4b20      	ldr	r3, [pc, #128]	@ (801783c <tcp_input+0x800>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	899b      	ldrh	r3, [r3, #12]
 80177be:	b29b      	uxth	r3, r3
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7fb fe75 	bl	80134b0 <lwip_htons>
 80177c6:	4603      	mov	r3, r0
 80177c8:	b2db      	uxtb	r3, r3
 80177ca:	f003 0304 	and.w	r3, r3, #4
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d118      	bne.n	8017804 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177d2:	4b1b      	ldr	r3, [pc, #108]	@ (8017840 <tcp_input+0x804>)
 80177d4:	6819      	ldr	r1, [r3, #0]
 80177d6:	4b1b      	ldr	r3, [pc, #108]	@ (8017844 <tcp_input+0x808>)
 80177d8:	881b      	ldrh	r3, [r3, #0]
 80177da:	461a      	mov	r2, r3
 80177dc:	4b1a      	ldr	r3, [pc, #104]	@ (8017848 <tcp_input+0x80c>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177e2:	4b16      	ldr	r3, [pc, #88]	@ (801783c <tcp_input+0x800>)
 80177e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177e6:	885b      	ldrh	r3, [r3, #2]
 80177e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177ea:	4a14      	ldr	r2, [pc, #80]	@ (801783c <tcp_input+0x800>)
 80177ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ee:	8812      	ldrh	r2, [r2, #0]
 80177f0:	b292      	uxth	r2, r2
 80177f2:	9202      	str	r2, [sp, #8]
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	4b15      	ldr	r3, [pc, #84]	@ (801784c <tcp_input+0x810>)
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	4b15      	ldr	r3, [pc, #84]	@ (8017850 <tcp_input+0x814>)
 80177fc:	4602      	mov	r2, r0
 80177fe:	2000      	movs	r0, #0
 8017800:	f003 fc70 	bl	801b0e4 <tcp_rst>
    pbuf_free(p);
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f7fd fb0d 	bl	8014e24 <pbuf_free>
  return;
 801780a:	e00c      	b.n	8017826 <tcp_input+0x7ea>
    goto dropped;
 801780c:	bf00      	nop
 801780e:	e006      	b.n	801781e <tcp_input+0x7e2>
    goto dropped;
 8017810:	bf00      	nop
 8017812:	e004      	b.n	801781e <tcp_input+0x7e2>
    goto dropped;
 8017814:	bf00      	nop
 8017816:	e002      	b.n	801781e <tcp_input+0x7e2>
      goto dropped;
 8017818:	bf00      	nop
 801781a:	e000      	b.n	801781e <tcp_input+0x7e2>
      goto dropped;
 801781c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f7fd fb00 	bl	8014e24 <pbuf_free>
 8017824:	e000      	b.n	8017828 <tcp_input+0x7ec>
  return;
 8017826:	bf00      	nop
}
 8017828:	3724      	adds	r7, #36	@ 0x24
 801782a:	46bd      	mov	sp, r7
 801782c:	bd90      	pop	{r4, r7, pc}
 801782e:	bf00      	nop
 8017830:	240087e0 	.word	0x240087e0
 8017834:	240087dc 	.word	0x240087dc
 8017838:	240087ac 	.word	0x240087ac
 801783c:	240087bc 	.word	0x240087bc
 8017840:	240087d0 	.word	0x240087d0
 8017844:	240087d6 	.word	0x240087d6
 8017848:	240087cc 	.word	0x240087cc
 801784c:	240053a4 	.word	0x240053a4
 8017850:	240053a8 	.word	0x240053a8

08017854 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d106      	bne.n	8017870 <tcp_input_delayed_close+0x1c>
 8017862:	4b17      	ldr	r3, [pc, #92]	@ (80178c0 <tcp_input_delayed_close+0x6c>)
 8017864:	f240 225a 	movw	r2, #602	@ 0x25a
 8017868:	4916      	ldr	r1, [pc, #88]	@ (80178c4 <tcp_input_delayed_close+0x70>)
 801786a:	4817      	ldr	r0, [pc, #92]	@ (80178c8 <tcp_input_delayed_close+0x74>)
 801786c:	f007 f818 	bl	801e8a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017870:	4b16      	ldr	r3, [pc, #88]	@ (80178cc <tcp_input_delayed_close+0x78>)
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	f003 0310 	and.w	r3, r3, #16
 8017878:	2b00      	cmp	r3, #0
 801787a:	d01c      	beq.n	80178b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	8b5b      	ldrh	r3, [r3, #26]
 8017880:	f003 0310 	and.w	r3, r3, #16
 8017884:	2b00      	cmp	r3, #0
 8017886:	d10d      	bne.n	80178a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801788e:	2b00      	cmp	r3, #0
 8017890:	d008      	beq.n	80178a4 <tcp_input_delayed_close+0x50>
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	6912      	ldr	r2, [r2, #16]
 801789c:	f06f 010e 	mvn.w	r1, #14
 80178a0:	4610      	mov	r0, r2
 80178a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80178a4:	6879      	ldr	r1, [r7, #4]
 80178a6:	480a      	ldr	r0, [pc, #40]	@ (80178d0 <tcp_input_delayed_close+0x7c>)
 80178a8:	f7ff fa50 	bl	8016d4c <tcp_pcb_remove>
    tcp_free(pcb);
 80178ac:	6878      	ldr	r0, [r7, #4]
 80178ae:	f7fd fd65 	bl	801537c <tcp_free>
    return 1;
 80178b2:	2301      	movs	r3, #1
 80178b4:	e000      	b.n	80178b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80178b6:	2300      	movs	r3, #0
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	08021568 	.word	0x08021568
 80178c4:	08021738 	.word	0x08021738
 80178c8:	080215b4 	.word	0x080215b4
 80178cc:	240087d9 	.word	0x240087d9
 80178d0:	240087a0 	.word	0x240087a0

080178d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80178d4:	b590      	push	{r4, r7, lr}
 80178d6:	b08b      	sub	sp, #44	@ 0x2c
 80178d8:	af04      	add	r7, sp, #16
 80178da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80178dc:	4b6f      	ldr	r3, [pc, #444]	@ (8017a9c <tcp_listen_input+0x1c8>)
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	f003 0304 	and.w	r3, r3, #4
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	f040 80d2 	bne.w	8017a8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d106      	bne.n	80178fe <tcp_listen_input+0x2a>
 80178f0:	4b6b      	ldr	r3, [pc, #428]	@ (8017aa0 <tcp_listen_input+0x1cc>)
 80178f2:	f240 2281 	movw	r2, #641	@ 0x281
 80178f6:	496b      	ldr	r1, [pc, #428]	@ (8017aa4 <tcp_listen_input+0x1d0>)
 80178f8:	486b      	ldr	r0, [pc, #428]	@ (8017aa8 <tcp_listen_input+0x1d4>)
 80178fa:	f006 ffd1 	bl	801e8a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80178fe:	4b67      	ldr	r3, [pc, #412]	@ (8017a9c <tcp_listen_input+0x1c8>)
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	f003 0310 	and.w	r3, r3, #16
 8017906:	2b00      	cmp	r3, #0
 8017908:	d019      	beq.n	801793e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801790a:	4b68      	ldr	r3, [pc, #416]	@ (8017aac <tcp_listen_input+0x1d8>)
 801790c:	6819      	ldr	r1, [r3, #0]
 801790e:	4b68      	ldr	r3, [pc, #416]	@ (8017ab0 <tcp_listen_input+0x1dc>)
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	461a      	mov	r2, r3
 8017914:	4b67      	ldr	r3, [pc, #412]	@ (8017ab4 <tcp_listen_input+0x1e0>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801791a:	4b67      	ldr	r3, [pc, #412]	@ (8017ab8 <tcp_listen_input+0x1e4>)
 801791c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801791e:	885b      	ldrh	r3, [r3, #2]
 8017920:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017922:	4a65      	ldr	r2, [pc, #404]	@ (8017ab8 <tcp_listen_input+0x1e4>)
 8017924:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017926:	8812      	ldrh	r2, [r2, #0]
 8017928:	b292      	uxth	r2, r2
 801792a:	9202      	str	r2, [sp, #8]
 801792c:	9301      	str	r3, [sp, #4]
 801792e:	4b63      	ldr	r3, [pc, #396]	@ (8017abc <tcp_listen_input+0x1e8>)
 8017930:	9300      	str	r3, [sp, #0]
 8017932:	4b63      	ldr	r3, [pc, #396]	@ (8017ac0 <tcp_listen_input+0x1ec>)
 8017934:	4602      	mov	r2, r0
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f003 fbd4 	bl	801b0e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801793c:	e0a9      	b.n	8017a92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801793e:	4b57      	ldr	r3, [pc, #348]	@ (8017a9c <tcp_listen_input+0x1c8>)
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	f003 0302 	and.w	r3, r3, #2
 8017946:	2b00      	cmp	r3, #0
 8017948:	f000 80a3 	beq.w	8017a92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	7d5b      	ldrb	r3, [r3, #21]
 8017950:	4618      	mov	r0, r3
 8017952:	f7ff f859 	bl	8016a08 <tcp_alloc>
 8017956:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d111      	bne.n	8017982 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	699b      	ldr	r3, [r3, #24]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d00a      	beq.n	801797c <tcp_listen_input+0xa8>
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	699b      	ldr	r3, [r3, #24]
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	6910      	ldr	r0, [r2, #16]
 801796e:	f04f 32ff 	mov.w	r2, #4294967295
 8017972:	2100      	movs	r1, #0
 8017974:	4798      	blx	r3
 8017976:	4603      	mov	r3, r0
 8017978:	73bb      	strb	r3, [r7, #14]
      return;
 801797a:	e08b      	b.n	8017a94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801797c:	23f0      	movs	r3, #240	@ 0xf0
 801797e:	73bb      	strb	r3, [r7, #14]
      return;
 8017980:	e088      	b.n	8017a94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017982:	4b50      	ldr	r3, [pc, #320]	@ (8017ac4 <tcp_listen_input+0x1f0>)
 8017984:	695a      	ldr	r2, [r3, #20]
 8017986:	697b      	ldr	r3, [r7, #20]
 8017988:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801798a:	4b4e      	ldr	r3, [pc, #312]	@ (8017ac4 <tcp_listen_input+0x1f0>)
 801798c:	691a      	ldr	r2, [r3, #16]
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	8ada      	ldrh	r2, [r3, #22]
 8017996:	697b      	ldr	r3, [r7, #20]
 8017998:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801799a:	4b47      	ldr	r3, [pc, #284]	@ (8017ab8 <tcp_listen_input+0x1e4>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	881b      	ldrh	r3, [r3, #0]
 80179a0:	b29a      	uxth	r2, r3
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	2203      	movs	r2, #3
 80179aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80179ac:	4b41      	ldr	r3, [pc, #260]	@ (8017ab4 <tcp_listen_input+0x1e0>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	1c5a      	adds	r2, r3, #1
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80179be:	6978      	ldr	r0, [r7, #20]
 80179c0:	f7ff fa58 	bl	8016e74 <tcp_next_iss>
 80179c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	693a      	ldr	r2, [r7, #16]
 80179d0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	693a      	ldr	r2, [r7, #16]
 80179d6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80179d8:	697b      	ldr	r3, [r7, #20]
 80179da:	693a      	ldr	r2, [r7, #16]
 80179dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80179de:	4b35      	ldr	r3, [pc, #212]	@ (8017ab4 <tcp_listen_input+0x1e0>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	1e5a      	subs	r2, r3, #1
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	691a      	ldr	r2, [r3, #16]
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80179f0:	697b      	ldr	r3, [r7, #20]
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	7a5b      	ldrb	r3, [r3, #9]
 80179fa:	f003 030c 	and.w	r3, r3, #12
 80179fe:	b2da      	uxtb	r2, r3
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	7a1a      	ldrb	r2, [r3, #8]
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8017ac8 <tcp_listen_input+0x1f4>)
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	60da      	str	r2, [r3, #12]
 8017a14:	4a2c      	ldr	r2, [pc, #176]	@ (8017ac8 <tcp_listen_input+0x1f4>)
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	6013      	str	r3, [r2, #0]
 8017a1a:	f003 fd25 	bl	801b468 <tcp_timer_needed>
 8017a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8017acc <tcp_listen_input+0x1f8>)
 8017a20:	2201      	movs	r2, #1
 8017a22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017a24:	6978      	ldr	r0, [r7, #20]
 8017a26:	f001 fd8b 	bl	8019540 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017a2a:	4b23      	ldr	r3, [pc, #140]	@ (8017ab8 <tcp_listen_input+0x1e4>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	89db      	ldrh	r3, [r3, #14]
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017a38:	697b      	ldr	r3, [r7, #20]
 8017a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017a44:	697b      	ldr	r3, [r7, #20]
 8017a46:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	3304      	adds	r3, #4
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f005 fa85 	bl	801cf5c <ip4_route>
 8017a52:	4601      	mov	r1, r0
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	3304      	adds	r3, #4
 8017a58:	461a      	mov	r2, r3
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f7ff fa30 	bl	8016ec0 <tcp_eff_send_mss_netif>
 8017a60:	4603      	mov	r3, r0
 8017a62:	461a      	mov	r2, r3
 8017a64:	697b      	ldr	r3, [r7, #20]
 8017a66:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017a68:	2112      	movs	r1, #18
 8017a6a:	6978      	ldr	r0, [r7, #20]
 8017a6c:	f002 fc98 	bl	801a3a0 <tcp_enqueue_flags>
 8017a70:	4603      	mov	r3, r0
 8017a72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d004      	beq.n	8017a86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017a7c:	2100      	movs	r1, #0
 8017a7e:	6978      	ldr	r0, [r7, #20]
 8017a80:	f7fd ff02 	bl	8015888 <tcp_abandon>
      return;
 8017a84:	e006      	b.n	8017a94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017a86:	6978      	ldr	r0, [r7, #20]
 8017a88:	f002 fd78 	bl	801a57c <tcp_output>
  return;
 8017a8c:	e001      	b.n	8017a92 <tcp_listen_input+0x1be>
    return;
 8017a8e:	bf00      	nop
 8017a90:	e000      	b.n	8017a94 <tcp_listen_input+0x1c0>
  return;
 8017a92:	bf00      	nop
}
 8017a94:	371c      	adds	r7, #28
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd90      	pop	{r4, r7, pc}
 8017a9a:	bf00      	nop
 8017a9c:	240087d8 	.word	0x240087d8
 8017aa0:	08021568 	.word	0x08021568
 8017aa4:	08021760 	.word	0x08021760
 8017aa8:	080215b4 	.word	0x080215b4
 8017aac:	240087d0 	.word	0x240087d0
 8017ab0:	240087d6 	.word	0x240087d6
 8017ab4:	240087cc 	.word	0x240087cc
 8017ab8:	240087bc 	.word	0x240087bc
 8017abc:	240053a4 	.word	0x240053a4
 8017ac0:	240053a8 	.word	0x240053a8
 8017ac4:	24005394 	.word	0x24005394
 8017ac8:	240087a0 	.word	0x240087a0
 8017acc:	240087a8 	.word	0x240087a8

08017ad0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b086      	sub	sp, #24
 8017ad4:	af04      	add	r7, sp, #16
 8017ad6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8017b98 <tcp_timewait_input+0xc8>)
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	f003 0304 	and.w	r3, r3, #4
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d153      	bne.n	8017b8c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d106      	bne.n	8017af8 <tcp_timewait_input+0x28>
 8017aea:	4b2c      	ldr	r3, [pc, #176]	@ (8017b9c <tcp_timewait_input+0xcc>)
 8017aec:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017af0:	492b      	ldr	r1, [pc, #172]	@ (8017ba0 <tcp_timewait_input+0xd0>)
 8017af2:	482c      	ldr	r0, [pc, #176]	@ (8017ba4 <tcp_timewait_input+0xd4>)
 8017af4:	f006 fed4 	bl	801e8a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017af8:	4b27      	ldr	r3, [pc, #156]	@ (8017b98 <tcp_timewait_input+0xc8>)
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	f003 0302 	and.w	r3, r3, #2
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d02a      	beq.n	8017b5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017b04:	4b28      	ldr	r3, [pc, #160]	@ (8017ba8 <tcp_timewait_input+0xd8>)
 8017b06:	681a      	ldr	r2, [r3, #0]
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b0c:	1ad3      	subs	r3, r2, r3
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	db2d      	blt.n	8017b6e <tcp_timewait_input+0x9e>
 8017b12:	4b25      	ldr	r3, [pc, #148]	@ (8017ba8 <tcp_timewait_input+0xd8>)
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b1a:	6879      	ldr	r1, [r7, #4]
 8017b1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b1e:	440b      	add	r3, r1
 8017b20:	1ad3      	subs	r3, r2, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	dc23      	bgt.n	8017b6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b26:	4b21      	ldr	r3, [pc, #132]	@ (8017bac <tcp_timewait_input+0xdc>)
 8017b28:	6819      	ldr	r1, [r3, #0]
 8017b2a:	4b21      	ldr	r3, [pc, #132]	@ (8017bb0 <tcp_timewait_input+0xe0>)
 8017b2c:	881b      	ldrh	r3, [r3, #0]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	4b1d      	ldr	r3, [pc, #116]	@ (8017ba8 <tcp_timewait_input+0xd8>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b36:	4b1f      	ldr	r3, [pc, #124]	@ (8017bb4 <tcp_timewait_input+0xe4>)
 8017b38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b3a:	885b      	ldrh	r3, [r3, #2]
 8017b3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8017bb4 <tcp_timewait_input+0xe4>)
 8017b40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b42:	8812      	ldrh	r2, [r2, #0]
 8017b44:	b292      	uxth	r2, r2
 8017b46:	9202      	str	r2, [sp, #8]
 8017b48:	9301      	str	r3, [sp, #4]
 8017b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8017bb8 <tcp_timewait_input+0xe8>)
 8017b4c:	9300      	str	r3, [sp, #0]
 8017b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8017bbc <tcp_timewait_input+0xec>)
 8017b50:	4602      	mov	r2, r0
 8017b52:	6878      	ldr	r0, [r7, #4]
 8017b54:	f003 fac6 	bl	801b0e4 <tcp_rst>
      return;
 8017b58:	e01b      	b.n	8017b92 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8017b98 <tcp_timewait_input+0xc8>)
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	f003 0301 	and.w	r3, r3, #1
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d003      	beq.n	8017b6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017b66:	4b16      	ldr	r3, [pc, #88]	@ (8017bc0 <tcp_timewait_input+0xf0>)
 8017b68:	681a      	ldr	r2, [r3, #0]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017b6e:	4b10      	ldr	r3, [pc, #64]	@ (8017bb0 <tcp_timewait_input+0xe0>)
 8017b70:	881b      	ldrh	r3, [r3, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d00c      	beq.n	8017b90 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	8b5b      	ldrh	r3, [r3, #26]
 8017b7a:	f043 0302 	orr.w	r3, r3, #2
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f002 fcf9 	bl	801a57c <tcp_output>
  }
  return;
 8017b8a:	e001      	b.n	8017b90 <tcp_timewait_input+0xc0>
    return;
 8017b8c:	bf00      	nop
 8017b8e:	e000      	b.n	8017b92 <tcp_timewait_input+0xc2>
  return;
 8017b90:	bf00      	nop
}
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}
 8017b98:	240087d8 	.word	0x240087d8
 8017b9c:	08021568 	.word	0x08021568
 8017ba0:	08021780 	.word	0x08021780
 8017ba4:	080215b4 	.word	0x080215b4
 8017ba8:	240087cc 	.word	0x240087cc
 8017bac:	240087d0 	.word	0x240087d0
 8017bb0:	240087d6 	.word	0x240087d6
 8017bb4:	240087bc 	.word	0x240087bc
 8017bb8:	240053a4 	.word	0x240053a4
 8017bbc:	240053a8 	.word	0x240053a8
 8017bc0:	24008794 	.word	0x24008794

08017bc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017bc4:	b590      	push	{r4, r7, lr}
 8017bc6:	b08d      	sub	sp, #52	@ 0x34
 8017bc8:	af04      	add	r7, sp, #16
 8017bca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d106      	bne.n	8017be8 <tcp_process+0x24>
 8017bda:	4b9d      	ldr	r3, [pc, #628]	@ (8017e50 <tcp_process+0x28c>)
 8017bdc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017be0:	499c      	ldr	r1, [pc, #624]	@ (8017e54 <tcp_process+0x290>)
 8017be2:	489d      	ldr	r0, [pc, #628]	@ (8017e58 <tcp_process+0x294>)
 8017be4:	f006 fe5c 	bl	801e8a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017be8:	4b9c      	ldr	r3, [pc, #624]	@ (8017e5c <tcp_process+0x298>)
 8017bea:	781b      	ldrb	r3, [r3, #0]
 8017bec:	f003 0304 	and.w	r3, r3, #4
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d04e      	beq.n	8017c92 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7d1b      	ldrb	r3, [r3, #20]
 8017bf8:	2b02      	cmp	r3, #2
 8017bfa:	d108      	bne.n	8017c0e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c00:	4b97      	ldr	r3, [pc, #604]	@ (8017e60 <tcp_process+0x29c>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	429a      	cmp	r2, r3
 8017c06:	d123      	bne.n	8017c50 <tcp_process+0x8c>
        acceptable = 1;
 8017c08:	2301      	movs	r3, #1
 8017c0a:	76fb      	strb	r3, [r7, #27]
 8017c0c:	e020      	b.n	8017c50 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c12:	4b94      	ldr	r3, [pc, #592]	@ (8017e64 <tcp_process+0x2a0>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	429a      	cmp	r2, r3
 8017c18:	d102      	bne.n	8017c20 <tcp_process+0x5c>
        acceptable = 1;
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	76fb      	strb	r3, [r7, #27]
 8017c1e:	e017      	b.n	8017c50 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017c20:	4b90      	ldr	r3, [pc, #576]	@ (8017e64 <tcp_process+0x2a0>)
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c28:	1ad3      	subs	r3, r2, r3
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	db10      	blt.n	8017c50 <tcp_process+0x8c>
 8017c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8017e64 <tcp_process+0x2a0>)
 8017c30:	681a      	ldr	r2, [r3, #0]
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c36:	6879      	ldr	r1, [r7, #4]
 8017c38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017c3a:	440b      	add	r3, r1
 8017c3c:	1ad3      	subs	r3, r2, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	dc06      	bgt.n	8017c50 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	8b5b      	ldrh	r3, [r3, #26]
 8017c46:	f043 0302 	orr.w	r3, r3, #2
 8017c4a:	b29a      	uxth	r2, r3
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017c50:	7efb      	ldrb	r3, [r7, #27]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d01b      	beq.n	8017c8e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	7d1b      	ldrb	r3, [r3, #20]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d106      	bne.n	8017c6c <tcp_process+0xa8>
 8017c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8017e50 <tcp_process+0x28c>)
 8017c60:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017c64:	4980      	ldr	r1, [pc, #512]	@ (8017e68 <tcp_process+0x2a4>)
 8017c66:	487c      	ldr	r0, [pc, #496]	@ (8017e58 <tcp_process+0x294>)
 8017c68:	f006 fe1a 	bl	801e8a0 <iprintf>
      recv_flags |= TF_RESET;
 8017c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8017e6c <tcp_process+0x2a8>)
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	f043 0308 	orr.w	r3, r3, #8
 8017c74:	b2da      	uxtb	r2, r3
 8017c76:	4b7d      	ldr	r3, [pc, #500]	@ (8017e6c <tcp_process+0x2a8>)
 8017c78:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	8b5b      	ldrh	r3, [r3, #26]
 8017c7e:	f023 0301 	bic.w	r3, r3, #1
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017c88:	f06f 030d 	mvn.w	r3, #13
 8017c8c:	e37a      	b.n	8018384 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	e378      	b.n	8018384 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017c92:	4b72      	ldr	r3, [pc, #456]	@ (8017e5c <tcp_process+0x298>)
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	f003 0302 	and.w	r3, r3, #2
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d010      	beq.n	8017cc0 <tcp_process+0xfc>
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	7d1b      	ldrb	r3, [r3, #20]
 8017ca2:	2b02      	cmp	r3, #2
 8017ca4:	d00c      	beq.n	8017cc0 <tcp_process+0xfc>
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	7d1b      	ldrb	r3, [r3, #20]
 8017caa:	2b03      	cmp	r3, #3
 8017cac:	d008      	beq.n	8017cc0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	8b5b      	ldrh	r3, [r3, #26]
 8017cb2:	f043 0302 	orr.w	r3, r3, #2
 8017cb6:	b29a      	uxth	r2, r3
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	e361      	b.n	8018384 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	8b5b      	ldrh	r3, [r3, #26]
 8017cc4:	f003 0310 	and.w	r3, r3, #16
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d103      	bne.n	8017cd4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017ccc:	4b68      	ldr	r3, [pc, #416]	@ (8017e70 <tcp_process+0x2ac>)
 8017cce:	681a      	ldr	r2, [r3, #0]
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f001 fc2b 	bl	8019540 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	7d1b      	ldrb	r3, [r3, #20]
 8017cee:	3b02      	subs	r3, #2
 8017cf0:	2b07      	cmp	r3, #7
 8017cf2:	f200 8337 	bhi.w	8018364 <tcp_process+0x7a0>
 8017cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8017cfc <tcp_process+0x138>)
 8017cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cfc:	08017d1d 	.word	0x08017d1d
 8017d00:	08017f4d 	.word	0x08017f4d
 8017d04:	080180c5 	.word	0x080180c5
 8017d08:	080180ef 	.word	0x080180ef
 8017d0c:	08018213 	.word	0x08018213
 8017d10:	080180c5 	.word	0x080180c5
 8017d14:	0801829f 	.word	0x0801829f
 8017d18:	0801832f 	.word	0x0801832f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8017e5c <tcp_process+0x298>)
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	f003 0310 	and.w	r3, r3, #16
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	f000 80e4 	beq.w	8017ef2 <tcp_process+0x32e>
 8017d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8017e5c <tcp_process+0x298>)
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	f003 0302 	and.w	r3, r3, #2
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	f000 80dd 	beq.w	8017ef2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d3c:	1c5a      	adds	r2, r3, #1
 8017d3e:	4b48      	ldr	r3, [pc, #288]	@ (8017e60 <tcp_process+0x29c>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	429a      	cmp	r2, r3
 8017d44:	f040 80d5 	bne.w	8017ef2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017d48:	4b46      	ldr	r3, [pc, #280]	@ (8017e64 <tcp_process+0x2a0>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	1c5a      	adds	r2, r3, #1
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017d5a:	4b41      	ldr	r3, [pc, #260]	@ (8017e60 <tcp_process+0x29c>)
 8017d5c:	681a      	ldr	r2, [r3, #0]
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017d62:	4b44      	ldr	r3, [pc, #272]	@ (8017e74 <tcp_process+0x2b0>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	89db      	ldrh	r3, [r3, #14]
 8017d68:	b29a      	uxth	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017d7c:	4b39      	ldr	r3, [pc, #228]	@ (8017e64 <tcp_process+0x2a0>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	1e5a      	subs	r2, r3, #1
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	2204      	movs	r2, #4
 8017d8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	3304      	adds	r3, #4
 8017d94:	4618      	mov	r0, r3
 8017d96:	f005 f8e1 	bl	801cf5c <ip4_route>
 8017d9a:	4601      	mov	r1, r0
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	3304      	adds	r3, #4
 8017da0:	461a      	mov	r2, r3
 8017da2:	4620      	mov	r0, r4
 8017da4:	f7ff f88c 	bl	8016ec0 <tcp_eff_send_mss_netif>
 8017da8:	4603      	mov	r3, r0
 8017daa:	461a      	mov	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017db4:	009a      	lsls	r2, r3, #2
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017dc0:	428b      	cmp	r3, r1
 8017dc2:	bf38      	it	cc
 8017dc4:	460b      	movcc	r3, r1
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d204      	bcs.n	8017dd4 <tcp_process+0x210>
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017dce:	009b      	lsls	r3, r3, #2
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	e00d      	b.n	8017df0 <tcp_process+0x22c>
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017dd8:	005b      	lsls	r3, r3, #1
 8017dda:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017dde:	4293      	cmp	r3, r2
 8017de0:	d904      	bls.n	8017dec <tcp_process+0x228>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017de6:	005b      	lsls	r3, r3, #1
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	e001      	b.n	8017df0 <tcp_process+0x22c>
 8017dec:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017df0:	687a      	ldr	r2, [r7, #4]
 8017df2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d106      	bne.n	8017e0e <tcp_process+0x24a>
 8017e00:	4b13      	ldr	r3, [pc, #76]	@ (8017e50 <tcp_process+0x28c>)
 8017e02:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017e06:	491c      	ldr	r1, [pc, #112]	@ (8017e78 <tcp_process+0x2b4>)
 8017e08:	4813      	ldr	r0, [pc, #76]	@ (8017e58 <tcp_process+0x294>)
 8017e0a:	f006 fd49 	bl	801e8a0 <iprintf>
        --pcb->snd_queuelen;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017e14:	3b01      	subs	r3, #1
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017e24:	69fb      	ldr	r3, [r7, #28]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d12a      	bne.n	8017e80 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017e2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017e30:	69fb      	ldr	r3, [r7, #28]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d106      	bne.n	8017e44 <tcp_process+0x280>
 8017e36:	4b06      	ldr	r3, [pc, #24]	@ (8017e50 <tcp_process+0x28c>)
 8017e38:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017e3c:	490f      	ldr	r1, [pc, #60]	@ (8017e7c <tcp_process+0x2b8>)
 8017e3e:	4806      	ldr	r0, [pc, #24]	@ (8017e58 <tcp_process+0x294>)
 8017e40:	f006 fd2e 	bl	801e8a0 <iprintf>
          pcb->unsent = rseg->next;
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	681a      	ldr	r2, [r3, #0]
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017e4c:	e01c      	b.n	8017e88 <tcp_process+0x2c4>
 8017e4e:	bf00      	nop
 8017e50:	08021568 	.word	0x08021568
 8017e54:	080217a0 	.word	0x080217a0
 8017e58:	080215b4 	.word	0x080215b4
 8017e5c:	240087d8 	.word	0x240087d8
 8017e60:	240087d0 	.word	0x240087d0
 8017e64:	240087cc 	.word	0x240087cc
 8017e68:	080217bc 	.word	0x080217bc
 8017e6c:	240087d9 	.word	0x240087d9
 8017e70:	24008794 	.word	0x24008794
 8017e74:	240087bc 	.word	0x240087bc
 8017e78:	080217dc 	.word	0x080217dc
 8017e7c:	080217f4 	.word	0x080217f4
        } else {
          pcb->unacked = rseg->next;
 8017e80:	69fb      	ldr	r3, [r7, #28]
 8017e82:	681a      	ldr	r2, [r3, #0]
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017e88:	69f8      	ldr	r0, [r7, #28]
 8017e8a:	f7fe fc54 	bl	8016736 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d104      	bne.n	8017ea0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e9c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017e9e:	e006      	b.n	8017eae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d00a      	beq.n	8017ece <tcp_process+0x30a>
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	6910      	ldr	r0, [r2, #16]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	6879      	ldr	r1, [r7, #4]
 8017ec6:	4798      	blx	r3
 8017ec8:	4603      	mov	r3, r0
 8017eca:	76bb      	strb	r3, [r7, #26]
 8017ecc:	e001      	b.n	8017ed2 <tcp_process+0x30e>
 8017ece:	2300      	movs	r3, #0
 8017ed0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017ed2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017ed6:	f113 0f0d 	cmn.w	r3, #13
 8017eda:	d102      	bne.n	8017ee2 <tcp_process+0x31e>
          return ERR_ABRT;
 8017edc:	f06f 030c 	mvn.w	r3, #12
 8017ee0:	e250      	b.n	8018384 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	8b5b      	ldrh	r3, [r3, #26]
 8017ee6:	f043 0302 	orr.w	r3, r3, #2
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017ef0:	e23a      	b.n	8018368 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017ef2:	4b98      	ldr	r3, [pc, #608]	@ (8018154 <tcp_process+0x590>)
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	f003 0310 	and.w	r3, r3, #16
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f000 8234 	beq.w	8018368 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f00:	4b95      	ldr	r3, [pc, #596]	@ (8018158 <tcp_process+0x594>)
 8017f02:	6819      	ldr	r1, [r3, #0]
 8017f04:	4b95      	ldr	r3, [pc, #596]	@ (801815c <tcp_process+0x598>)
 8017f06:	881b      	ldrh	r3, [r3, #0]
 8017f08:	461a      	mov	r2, r3
 8017f0a:	4b95      	ldr	r3, [pc, #596]	@ (8018160 <tcp_process+0x59c>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f10:	4b94      	ldr	r3, [pc, #592]	@ (8018164 <tcp_process+0x5a0>)
 8017f12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f14:	885b      	ldrh	r3, [r3, #2]
 8017f16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f18:	4a92      	ldr	r2, [pc, #584]	@ (8018164 <tcp_process+0x5a0>)
 8017f1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f1c:	8812      	ldrh	r2, [r2, #0]
 8017f1e:	b292      	uxth	r2, r2
 8017f20:	9202      	str	r2, [sp, #8]
 8017f22:	9301      	str	r3, [sp, #4]
 8017f24:	4b90      	ldr	r3, [pc, #576]	@ (8018168 <tcp_process+0x5a4>)
 8017f26:	9300      	str	r3, [sp, #0]
 8017f28:	4b90      	ldr	r3, [pc, #576]	@ (801816c <tcp_process+0x5a8>)
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f003 f8d9 	bl	801b0e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017f38:	2b05      	cmp	r3, #5
 8017f3a:	f200 8215 	bhi.w	8018368 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2200      	movs	r2, #0
 8017f42:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017f44:	6878      	ldr	r0, [r7, #4]
 8017f46:	f002 fea5 	bl	801ac94 <tcp_rexmit_rto>
      break;
 8017f4a:	e20d      	b.n	8018368 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017f4c:	4b81      	ldr	r3, [pc, #516]	@ (8018154 <tcp_process+0x590>)
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	f003 0310 	and.w	r3, r3, #16
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 80a1 	beq.w	801809c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8018158 <tcp_process+0x594>)
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f62:	1ad3      	subs	r3, r2, r3
 8017f64:	3b01      	subs	r3, #1
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	db7e      	blt.n	8018068 <tcp_process+0x4a4>
 8017f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8018158 <tcp_process+0x594>)
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f72:	1ad3      	subs	r3, r2, r3
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	dc77      	bgt.n	8018068 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2204      	movs	r2, #4
 8017f7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d102      	bne.n	8017f8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017f86:	23fa      	movs	r3, #250	@ 0xfa
 8017f88:	76bb      	strb	r3, [r7, #26]
 8017f8a:	e01d      	b.n	8017fc8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017f90:	699b      	ldr	r3, [r3, #24]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d106      	bne.n	8017fa4 <tcp_process+0x3e0>
 8017f96:	4b76      	ldr	r3, [pc, #472]	@ (8018170 <tcp_process+0x5ac>)
 8017f98:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017f9c:	4975      	ldr	r1, [pc, #468]	@ (8018174 <tcp_process+0x5b0>)
 8017f9e:	4876      	ldr	r0, [pc, #472]	@ (8018178 <tcp_process+0x5b4>)
 8017fa0:	f006 fc7e 	bl	801e8a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017fa8:	699b      	ldr	r3, [r3, #24]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00a      	beq.n	8017fc4 <tcp_process+0x400>
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017fb2:	699b      	ldr	r3, [r3, #24]
 8017fb4:	687a      	ldr	r2, [r7, #4]
 8017fb6:	6910      	ldr	r0, [r2, #16]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	6879      	ldr	r1, [r7, #4]
 8017fbc:	4798      	blx	r3
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	76bb      	strb	r3, [r7, #26]
 8017fc2:	e001      	b.n	8017fc8 <tcp_process+0x404>
 8017fc4:	23f0      	movs	r3, #240	@ 0xf0
 8017fc6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017fc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d00a      	beq.n	8017fe6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017fd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017fd4:	f113 0f0d 	cmn.w	r3, #13
 8017fd8:	d002      	beq.n	8017fe0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f7fd fd12 	bl	8015a04 <tcp_abort>
            }
            return ERR_ABRT;
 8017fe0:	f06f 030c 	mvn.w	r3, #12
 8017fe4:	e1ce      	b.n	8018384 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f000 fae0 	bl	80185ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017fec:	4b63      	ldr	r3, [pc, #396]	@ (801817c <tcp_process+0x5b8>)
 8017fee:	881b      	ldrh	r3, [r3, #0]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d005      	beq.n	8018000 <tcp_process+0x43c>
            recv_acked--;
 8017ff4:	4b61      	ldr	r3, [pc, #388]	@ (801817c <tcp_process+0x5b8>)
 8017ff6:	881b      	ldrh	r3, [r3, #0]
 8017ff8:	3b01      	subs	r3, #1
 8017ffa:	b29a      	uxth	r2, r3
 8017ffc:	4b5f      	ldr	r3, [pc, #380]	@ (801817c <tcp_process+0x5b8>)
 8017ffe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018004:	009a      	lsls	r2, r3, #2
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801800a:	005b      	lsls	r3, r3, #1
 801800c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8018010:	428b      	cmp	r3, r1
 8018012:	bf38      	it	cc
 8018014:	460b      	movcc	r3, r1
 8018016:	429a      	cmp	r2, r3
 8018018:	d204      	bcs.n	8018024 <tcp_process+0x460>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	b29b      	uxth	r3, r3
 8018022:	e00d      	b.n	8018040 <tcp_process+0x47c>
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018028:	005b      	lsls	r3, r3, #1
 801802a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801802e:	4293      	cmp	r3, r2
 8018030:	d904      	bls.n	801803c <tcp_process+0x478>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018036:	005b      	lsls	r3, r3, #1
 8018038:	b29b      	uxth	r3, r3
 801803a:	e001      	b.n	8018040 <tcp_process+0x47c>
 801803c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018046:	4b4e      	ldr	r3, [pc, #312]	@ (8018180 <tcp_process+0x5bc>)
 8018048:	781b      	ldrb	r3, [r3, #0]
 801804a:	f003 0320 	and.w	r3, r3, #32
 801804e:	2b00      	cmp	r3, #0
 8018050:	d037      	beq.n	80180c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	8b5b      	ldrh	r3, [r3, #26]
 8018056:	f043 0302 	orr.w	r3, r3, #2
 801805a:	b29a      	uxth	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2207      	movs	r2, #7
 8018064:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018066:	e02c      	b.n	80180c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018068:	4b3b      	ldr	r3, [pc, #236]	@ (8018158 <tcp_process+0x594>)
 801806a:	6819      	ldr	r1, [r3, #0]
 801806c:	4b3b      	ldr	r3, [pc, #236]	@ (801815c <tcp_process+0x598>)
 801806e:	881b      	ldrh	r3, [r3, #0]
 8018070:	461a      	mov	r2, r3
 8018072:	4b3b      	ldr	r3, [pc, #236]	@ (8018160 <tcp_process+0x59c>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018078:	4b3a      	ldr	r3, [pc, #232]	@ (8018164 <tcp_process+0x5a0>)
 801807a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801807c:	885b      	ldrh	r3, [r3, #2]
 801807e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018080:	4a38      	ldr	r2, [pc, #224]	@ (8018164 <tcp_process+0x5a0>)
 8018082:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018084:	8812      	ldrh	r2, [r2, #0]
 8018086:	b292      	uxth	r2, r2
 8018088:	9202      	str	r2, [sp, #8]
 801808a:	9301      	str	r3, [sp, #4]
 801808c:	4b36      	ldr	r3, [pc, #216]	@ (8018168 <tcp_process+0x5a4>)
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	4b36      	ldr	r3, [pc, #216]	@ (801816c <tcp_process+0x5a8>)
 8018092:	4602      	mov	r2, r0
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f003 f825 	bl	801b0e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801809a:	e167      	b.n	801836c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801809c:	4b2d      	ldr	r3, [pc, #180]	@ (8018154 <tcp_process+0x590>)
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	f003 0302 	and.w	r3, r3, #2
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f000 8161 	beq.w	801836c <tcp_process+0x7a8>
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180ae:	1e5a      	subs	r2, r3, #1
 80180b0:	4b2b      	ldr	r3, [pc, #172]	@ (8018160 <tcp_process+0x59c>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	f040 8159 	bne.w	801836c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f002 fe0c 	bl	801acd8 <tcp_rexmit>
      break;
 80180c0:	e154      	b.n	801836c <tcp_process+0x7a8>
 80180c2:	e153      	b.n	801836c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f000 fa71 	bl	80185ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80180ca:	4b2d      	ldr	r3, [pc, #180]	@ (8018180 <tcp_process+0x5bc>)
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	f003 0320 	and.w	r3, r3, #32
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	f000 814c 	beq.w	8018370 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	8b5b      	ldrh	r3, [r3, #26]
 80180dc:	f043 0302 	orr.w	r3, r3, #2
 80180e0:	b29a      	uxth	r2, r3
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2207      	movs	r2, #7
 80180ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80180ec:	e140      	b.n	8018370 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	f000 fa5c 	bl	80185ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80180f4:	4b22      	ldr	r3, [pc, #136]	@ (8018180 <tcp_process+0x5bc>)
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	f003 0320 	and.w	r3, r3, #32
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d071      	beq.n	80181e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018100:	4b14      	ldr	r3, [pc, #80]	@ (8018154 <tcp_process+0x590>)
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	f003 0310 	and.w	r3, r3, #16
 8018108:	2b00      	cmp	r3, #0
 801810a:	d060      	beq.n	80181ce <tcp_process+0x60a>
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018110:	4b11      	ldr	r3, [pc, #68]	@ (8018158 <tcp_process+0x594>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	429a      	cmp	r2, r3
 8018116:	d15a      	bne.n	80181ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801811c:	2b00      	cmp	r3, #0
 801811e:	d156      	bne.n	80181ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	8b5b      	ldrh	r3, [r3, #26]
 8018124:	f043 0302 	orr.w	r3, r3, #2
 8018128:	b29a      	uxth	r2, r3
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7fe fdbc 	bl	8016cac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018134:	4b13      	ldr	r3, [pc, #76]	@ (8018184 <tcp_process+0x5c0>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	687a      	ldr	r2, [r7, #4]
 801813a:	429a      	cmp	r2, r3
 801813c:	d105      	bne.n	801814a <tcp_process+0x586>
 801813e:	4b11      	ldr	r3, [pc, #68]	@ (8018184 <tcp_process+0x5c0>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	4a0f      	ldr	r2, [pc, #60]	@ (8018184 <tcp_process+0x5c0>)
 8018146:	6013      	str	r3, [r2, #0]
 8018148:	e02e      	b.n	80181a8 <tcp_process+0x5e4>
 801814a:	4b0e      	ldr	r3, [pc, #56]	@ (8018184 <tcp_process+0x5c0>)
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	617b      	str	r3, [r7, #20]
 8018150:	e027      	b.n	80181a2 <tcp_process+0x5de>
 8018152:	bf00      	nop
 8018154:	240087d8 	.word	0x240087d8
 8018158:	240087d0 	.word	0x240087d0
 801815c:	240087d6 	.word	0x240087d6
 8018160:	240087cc 	.word	0x240087cc
 8018164:	240087bc 	.word	0x240087bc
 8018168:	240053a4 	.word	0x240053a4
 801816c:	240053a8 	.word	0x240053a8
 8018170:	08021568 	.word	0x08021568
 8018174:	08021808 	.word	0x08021808
 8018178:	080215b4 	.word	0x080215b4
 801817c:	240087d4 	.word	0x240087d4
 8018180:	240087d9 	.word	0x240087d9
 8018184:	240087a0 	.word	0x240087a0
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	429a      	cmp	r2, r3
 8018190:	d104      	bne.n	801819c <tcp_process+0x5d8>
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	68da      	ldr	r2, [r3, #12]
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	60da      	str	r2, [r3, #12]
 801819a:	e005      	b.n	80181a8 <tcp_process+0x5e4>
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	68db      	ldr	r3, [r3, #12]
 80181a0:	617b      	str	r3, [r7, #20]
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d1ef      	bne.n	8018188 <tcp_process+0x5c4>
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2200      	movs	r2, #0
 80181ac:	60da      	str	r2, [r3, #12]
 80181ae:	4b77      	ldr	r3, [pc, #476]	@ (801838c <tcp_process+0x7c8>)
 80181b0:	2201      	movs	r2, #1
 80181b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	220a      	movs	r2, #10
 80181b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80181ba:	4b75      	ldr	r3, [pc, #468]	@ (8018390 <tcp_process+0x7cc>)
 80181bc:	681a      	ldr	r2, [r3, #0]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	60da      	str	r2, [r3, #12]
 80181c2:	4a73      	ldr	r2, [pc, #460]	@ (8018390 <tcp_process+0x7cc>)
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	6013      	str	r3, [r2, #0]
 80181c8:	f003 f94e 	bl	801b468 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80181cc:	e0d2      	b.n	8018374 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	8b5b      	ldrh	r3, [r3, #26]
 80181d2:	f043 0302 	orr.w	r3, r3, #2
 80181d6:	b29a      	uxth	r2, r3
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2208      	movs	r2, #8
 80181e0:	751a      	strb	r2, [r3, #20]
      break;
 80181e2:	e0c7      	b.n	8018374 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80181e4:	4b6b      	ldr	r3, [pc, #428]	@ (8018394 <tcp_process+0x7d0>)
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	f003 0310 	and.w	r3, r3, #16
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	f000 80c1 	beq.w	8018374 <tcp_process+0x7b0>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80181f6:	4b68      	ldr	r3, [pc, #416]	@ (8018398 <tcp_process+0x7d4>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	f040 80ba 	bne.w	8018374 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018204:	2b00      	cmp	r3, #0
 8018206:	f040 80b5 	bne.w	8018374 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2206      	movs	r2, #6
 801820e:	751a      	strb	r2, [r3, #20]
      break;
 8018210:	e0b0      	b.n	8018374 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018212:	6878      	ldr	r0, [r7, #4]
 8018214:	f000 f9ca 	bl	80185ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018218:	4b60      	ldr	r3, [pc, #384]	@ (801839c <tcp_process+0x7d8>)
 801821a:	781b      	ldrb	r3, [r3, #0]
 801821c:	f003 0320 	and.w	r3, r3, #32
 8018220:	2b00      	cmp	r3, #0
 8018222:	f000 80a9 	beq.w	8018378 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	8b5b      	ldrh	r3, [r3, #26]
 801822a:	f043 0302 	orr.w	r3, r3, #2
 801822e:	b29a      	uxth	r2, r3
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	f7fe fd39 	bl	8016cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801823a:	4b59      	ldr	r3, [pc, #356]	@ (80183a0 <tcp_process+0x7dc>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	429a      	cmp	r2, r3
 8018242:	d105      	bne.n	8018250 <tcp_process+0x68c>
 8018244:	4b56      	ldr	r3, [pc, #344]	@ (80183a0 <tcp_process+0x7dc>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	68db      	ldr	r3, [r3, #12]
 801824a:	4a55      	ldr	r2, [pc, #340]	@ (80183a0 <tcp_process+0x7dc>)
 801824c:	6013      	str	r3, [r2, #0]
 801824e:	e013      	b.n	8018278 <tcp_process+0x6b4>
 8018250:	4b53      	ldr	r3, [pc, #332]	@ (80183a0 <tcp_process+0x7dc>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	613b      	str	r3, [r7, #16]
 8018256:	e00c      	b.n	8018272 <tcp_process+0x6ae>
 8018258:	693b      	ldr	r3, [r7, #16]
 801825a:	68db      	ldr	r3, [r3, #12]
 801825c:	687a      	ldr	r2, [r7, #4]
 801825e:	429a      	cmp	r2, r3
 8018260:	d104      	bne.n	801826c <tcp_process+0x6a8>
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	68da      	ldr	r2, [r3, #12]
 8018266:	693b      	ldr	r3, [r7, #16]
 8018268:	60da      	str	r2, [r3, #12]
 801826a:	e005      	b.n	8018278 <tcp_process+0x6b4>
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	68db      	ldr	r3, [r3, #12]
 8018270:	613b      	str	r3, [r7, #16]
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d1ef      	bne.n	8018258 <tcp_process+0x694>
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	2200      	movs	r2, #0
 801827c:	60da      	str	r2, [r3, #12]
 801827e:	4b43      	ldr	r3, [pc, #268]	@ (801838c <tcp_process+0x7c8>)
 8018280:	2201      	movs	r2, #1
 8018282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	220a      	movs	r2, #10
 8018288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801828a:	4b41      	ldr	r3, [pc, #260]	@ (8018390 <tcp_process+0x7cc>)
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	60da      	str	r2, [r3, #12]
 8018292:	4a3f      	ldr	r2, [pc, #252]	@ (8018390 <tcp_process+0x7cc>)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	6013      	str	r3, [r2, #0]
 8018298:	f003 f8e6 	bl	801b468 <tcp_timer_needed>
      }
      break;
 801829c:	e06c      	b.n	8018378 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	f000 f984 	bl	80185ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80182a4:	4b3b      	ldr	r3, [pc, #236]	@ (8018394 <tcp_process+0x7d0>)
 80182a6:	781b      	ldrb	r3, [r3, #0]
 80182a8:	f003 0310 	and.w	r3, r3, #16
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d065      	beq.n	801837c <tcp_process+0x7b8>
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80182b4:	4b38      	ldr	r3, [pc, #224]	@ (8018398 <tcp_process+0x7d4>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d15f      	bne.n	801837c <tcp_process+0x7b8>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d15b      	bne.n	801837c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f7fe fcf1 	bl	8016cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80182ca:	4b35      	ldr	r3, [pc, #212]	@ (80183a0 <tcp_process+0x7dc>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	d105      	bne.n	80182e0 <tcp_process+0x71c>
 80182d4:	4b32      	ldr	r3, [pc, #200]	@ (80183a0 <tcp_process+0x7dc>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	4a31      	ldr	r2, [pc, #196]	@ (80183a0 <tcp_process+0x7dc>)
 80182dc:	6013      	str	r3, [r2, #0]
 80182de:	e013      	b.n	8018308 <tcp_process+0x744>
 80182e0:	4b2f      	ldr	r3, [pc, #188]	@ (80183a0 <tcp_process+0x7dc>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	60fb      	str	r3, [r7, #12]
 80182e6:	e00c      	b.n	8018302 <tcp_process+0x73e>
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	687a      	ldr	r2, [r7, #4]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d104      	bne.n	80182fc <tcp_process+0x738>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	68da      	ldr	r2, [r3, #12]
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	60da      	str	r2, [r3, #12]
 80182fa:	e005      	b.n	8018308 <tcp_process+0x744>
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	60fb      	str	r3, [r7, #12]
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d1ef      	bne.n	80182e8 <tcp_process+0x724>
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2200      	movs	r2, #0
 801830c:	60da      	str	r2, [r3, #12]
 801830e:	4b1f      	ldr	r3, [pc, #124]	@ (801838c <tcp_process+0x7c8>)
 8018310:	2201      	movs	r2, #1
 8018312:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	220a      	movs	r2, #10
 8018318:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801831a:	4b1d      	ldr	r3, [pc, #116]	@ (8018390 <tcp_process+0x7cc>)
 801831c:	681a      	ldr	r2, [r3, #0]
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	60da      	str	r2, [r3, #12]
 8018322:	4a1b      	ldr	r2, [pc, #108]	@ (8018390 <tcp_process+0x7cc>)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6013      	str	r3, [r2, #0]
 8018328:	f003 f89e 	bl	801b468 <tcp_timer_needed>
      }
      break;
 801832c:	e026      	b.n	801837c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f000 f93c 	bl	80185ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018334:	4b17      	ldr	r3, [pc, #92]	@ (8018394 <tcp_process+0x7d0>)
 8018336:	781b      	ldrb	r3, [r3, #0]
 8018338:	f003 0310 	and.w	r3, r3, #16
 801833c:	2b00      	cmp	r3, #0
 801833e:	d01f      	beq.n	8018380 <tcp_process+0x7bc>
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018344:	4b14      	ldr	r3, [pc, #80]	@ (8018398 <tcp_process+0x7d4>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	429a      	cmp	r2, r3
 801834a:	d119      	bne.n	8018380 <tcp_process+0x7bc>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018350:	2b00      	cmp	r3, #0
 8018352:	d115      	bne.n	8018380 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018354:	4b11      	ldr	r3, [pc, #68]	@ (801839c <tcp_process+0x7d8>)
 8018356:	781b      	ldrb	r3, [r3, #0]
 8018358:	f043 0310 	orr.w	r3, r3, #16
 801835c:	b2da      	uxtb	r2, r3
 801835e:	4b0f      	ldr	r3, [pc, #60]	@ (801839c <tcp_process+0x7d8>)
 8018360:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018362:	e00d      	b.n	8018380 <tcp_process+0x7bc>
    default:
      break;
 8018364:	bf00      	nop
 8018366:	e00c      	b.n	8018382 <tcp_process+0x7be>
      break;
 8018368:	bf00      	nop
 801836a:	e00a      	b.n	8018382 <tcp_process+0x7be>
      break;
 801836c:	bf00      	nop
 801836e:	e008      	b.n	8018382 <tcp_process+0x7be>
      break;
 8018370:	bf00      	nop
 8018372:	e006      	b.n	8018382 <tcp_process+0x7be>
      break;
 8018374:	bf00      	nop
 8018376:	e004      	b.n	8018382 <tcp_process+0x7be>
      break;
 8018378:	bf00      	nop
 801837a:	e002      	b.n	8018382 <tcp_process+0x7be>
      break;
 801837c:	bf00      	nop
 801837e:	e000      	b.n	8018382 <tcp_process+0x7be>
      break;
 8018380:	bf00      	nop
  }
  return ERR_OK;
 8018382:	2300      	movs	r3, #0
}
 8018384:	4618      	mov	r0, r3
 8018386:	3724      	adds	r7, #36	@ 0x24
 8018388:	46bd      	mov	sp, r7
 801838a:	bd90      	pop	{r4, r7, pc}
 801838c:	240087a8 	.word	0x240087a8
 8018390:	240087a4 	.word	0x240087a4
 8018394:	240087d8 	.word	0x240087d8
 8018398:	240087d0 	.word	0x240087d0
 801839c:	240087d9 	.word	0x240087d9
 80183a0:	240087a0 	.word	0x240087a0

080183a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80183a4:	b590      	push	{r4, r7, lr}
 80183a6:	b085      	sub	sp, #20
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
 80183ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d106      	bne.n	80183c2 <tcp_oos_insert_segment+0x1e>
 80183b4:	4b3b      	ldr	r3, [pc, #236]	@ (80184a4 <tcp_oos_insert_segment+0x100>)
 80183b6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80183ba:	493b      	ldr	r1, [pc, #236]	@ (80184a8 <tcp_oos_insert_segment+0x104>)
 80183bc:	483b      	ldr	r0, [pc, #236]	@ (80184ac <tcp_oos_insert_segment+0x108>)
 80183be:	f006 fa6f 	bl	801e8a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	899b      	ldrh	r3, [r3, #12]
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fb f870 	bl	80134b0 <lwip_htons>
 80183d0:	4603      	mov	r3, r0
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	f003 0301 	and.w	r3, r3, #1
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d028      	beq.n	801842e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80183dc:	6838      	ldr	r0, [r7, #0]
 80183de:	f7fe f995 	bl	801670c <tcp_segs_free>
    next = NULL;
 80183e2:	2300      	movs	r3, #0
 80183e4:	603b      	str	r3, [r7, #0]
 80183e6:	e056      	b.n	8018496 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	68db      	ldr	r3, [r3, #12]
 80183ec:	899b      	ldrh	r3, [r3, #12]
 80183ee:	b29b      	uxth	r3, r3
 80183f0:	4618      	mov	r0, r3
 80183f2:	f7fb f85d 	bl	80134b0 <lwip_htons>
 80183f6:	4603      	mov	r3, r0
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d00d      	beq.n	801841e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	68db      	ldr	r3, [r3, #12]
 8018406:	899b      	ldrh	r3, [r3, #12]
 8018408:	b29c      	uxth	r4, r3
 801840a:	2001      	movs	r0, #1
 801840c:	f7fb f850 	bl	80134b0 <lwip_htons>
 8018410:	4603      	mov	r3, r0
 8018412:	461a      	mov	r2, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	68db      	ldr	r3, [r3, #12]
 8018418:	4322      	orrs	r2, r4
 801841a:	b292      	uxth	r2, r2
 801841c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018428:	68f8      	ldr	r0, [r7, #12]
 801842a:	f7fe f984 	bl	8016736 <tcp_seg_free>
    while (next &&
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d00e      	beq.n	8018452 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	891b      	ldrh	r3, [r3, #8]
 8018438:	461a      	mov	r2, r3
 801843a:	4b1d      	ldr	r3, [pc, #116]	@ (80184b0 <tcp_oos_insert_segment+0x10c>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	441a      	add	r2, r3
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	68db      	ldr	r3, [r3, #12]
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	6839      	ldr	r1, [r7, #0]
 8018448:	8909      	ldrh	r1, [r1, #8]
 801844a:	440b      	add	r3, r1
 801844c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801844e:	2b00      	cmp	r3, #0
 8018450:	daca      	bge.n	80183e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d01e      	beq.n	8018496 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	891b      	ldrh	r3, [r3, #8]
 801845c:	461a      	mov	r2, r3
 801845e:	4b14      	ldr	r3, [pc, #80]	@ (80184b0 <tcp_oos_insert_segment+0x10c>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	441a      	add	r2, r3
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	68db      	ldr	r3, [r3, #12]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801846c:	2b00      	cmp	r3, #0
 801846e:	dd12      	ble.n	8018496 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	68db      	ldr	r3, [r3, #12]
 8018474:	685b      	ldr	r3, [r3, #4]
 8018476:	b29a      	uxth	r2, r3
 8018478:	4b0d      	ldr	r3, [pc, #52]	@ (80184b0 <tcp_oos_insert_segment+0x10c>)
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	b29b      	uxth	r3, r3
 801847e:	1ad3      	subs	r3, r2, r3
 8018480:	b29a      	uxth	r2, r3
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	685a      	ldr	r2, [r3, #4]
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	891b      	ldrh	r3, [r3, #8]
 801848e:	4619      	mov	r1, r3
 8018490:	4610      	mov	r0, r2
 8018492:	f7fc fb41 	bl	8014b18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	683a      	ldr	r2, [r7, #0]
 801849a:	601a      	str	r2, [r3, #0]
}
 801849c:	bf00      	nop
 801849e:	3714      	adds	r7, #20
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd90      	pop	{r4, r7, pc}
 80184a4:	08021568 	.word	0x08021568
 80184a8:	08021828 	.word	0x08021828
 80184ac:	080215b4 	.word	0x080215b4
 80184b0:	240087cc 	.word	0x240087cc

080184b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80184b4:	b5b0      	push	{r4, r5, r7, lr}
 80184b6:	b086      	sub	sp, #24
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
 80184c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80184c2:	e03e      	b.n	8018542 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7fc fd34 	bl	8014f40 <pbuf_clen>
 80184d8:	4603      	mov	r3, r0
 80184da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184e2:	8a7a      	ldrh	r2, [r7, #18]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	d906      	bls.n	80184f6 <tcp_free_acked_segments+0x42>
 80184e8:	4b2a      	ldr	r3, [pc, #168]	@ (8018594 <tcp_free_acked_segments+0xe0>)
 80184ea:	f240 4257 	movw	r2, #1111	@ 0x457
 80184ee:	492a      	ldr	r1, [pc, #168]	@ (8018598 <tcp_free_acked_segments+0xe4>)
 80184f0:	482a      	ldr	r0, [pc, #168]	@ (801859c <tcp_free_acked_segments+0xe8>)
 80184f2:	f006 f9d5 	bl	801e8a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80184fc:	8a7b      	ldrh	r3, [r7, #18]
 80184fe:	1ad3      	subs	r3, r2, r3
 8018500:	b29a      	uxth	r2, r3
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018508:	697b      	ldr	r3, [r7, #20]
 801850a:	891a      	ldrh	r2, [r3, #8]
 801850c:	4b24      	ldr	r3, [pc, #144]	@ (80185a0 <tcp_free_acked_segments+0xec>)
 801850e:	881b      	ldrh	r3, [r3, #0]
 8018510:	4413      	add	r3, r2
 8018512:	b29a      	uxth	r2, r3
 8018514:	4b22      	ldr	r3, [pc, #136]	@ (80185a0 <tcp_free_acked_segments+0xec>)
 8018516:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018518:	6978      	ldr	r0, [r7, #20]
 801851a:	f7fe f90c 	bl	8016736 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018524:	2b00      	cmp	r3, #0
 8018526:	d00c      	beq.n	8018542 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018528:	68bb      	ldr	r3, [r7, #8]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d109      	bne.n	8018542 <tcp_free_acked_segments+0x8e>
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d106      	bne.n	8018542 <tcp_free_acked_segments+0x8e>
 8018534:	4b17      	ldr	r3, [pc, #92]	@ (8018594 <tcp_free_acked_segments+0xe0>)
 8018536:	f240 4261 	movw	r2, #1121	@ 0x461
 801853a:	491a      	ldr	r1, [pc, #104]	@ (80185a4 <tcp_free_acked_segments+0xf0>)
 801853c:	4817      	ldr	r0, [pc, #92]	@ (801859c <tcp_free_acked_segments+0xe8>)
 801853e:	f006 f9af 	bl	801e8a0 <iprintf>
  while (seg_list != NULL &&
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d020      	beq.n	801858a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	68db      	ldr	r3, [r3, #12]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	4618      	mov	r0, r3
 8018550:	f7fa ffc3 	bl	80134da <lwip_htonl>
 8018554:	4604      	mov	r4, r0
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	891b      	ldrh	r3, [r3, #8]
 801855a:	461d      	mov	r5, r3
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	899b      	ldrh	r3, [r3, #12]
 8018562:	b29b      	uxth	r3, r3
 8018564:	4618      	mov	r0, r3
 8018566:	f7fa ffa3 	bl	80134b0 <lwip_htons>
 801856a:	4603      	mov	r3, r0
 801856c:	b2db      	uxtb	r3, r3
 801856e:	f003 0303 	and.w	r3, r3, #3
 8018572:	2b00      	cmp	r3, #0
 8018574:	d001      	beq.n	801857a <tcp_free_acked_segments+0xc6>
 8018576:	2301      	movs	r3, #1
 8018578:	e000      	b.n	801857c <tcp_free_acked_segments+0xc8>
 801857a:	2300      	movs	r3, #0
 801857c:	442b      	add	r3, r5
 801857e:	18e2      	adds	r2, r4, r3
 8018580:	4b09      	ldr	r3, [pc, #36]	@ (80185a8 <tcp_free_acked_segments+0xf4>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018586:	2b00      	cmp	r3, #0
 8018588:	dd9c      	ble.n	80184c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801858a:	68bb      	ldr	r3, [r7, #8]
}
 801858c:	4618      	mov	r0, r3
 801858e:	3718      	adds	r7, #24
 8018590:	46bd      	mov	sp, r7
 8018592:	bdb0      	pop	{r4, r5, r7, pc}
 8018594:	08021568 	.word	0x08021568
 8018598:	08021850 	.word	0x08021850
 801859c:	080215b4 	.word	0x080215b4
 80185a0:	240087d4 	.word	0x240087d4
 80185a4:	08021878 	.word	0x08021878
 80185a8:	240087d0 	.word	0x240087d0

080185ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80185ac:	b5b0      	push	{r4, r5, r7, lr}
 80185ae:	b094      	sub	sp, #80	@ 0x50
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80185b4:	2300      	movs	r3, #0
 80185b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d106      	bne.n	80185cc <tcp_receive+0x20>
 80185be:	4b91      	ldr	r3, [pc, #580]	@ (8018804 <tcp_receive+0x258>)
 80185c0:	f240 427b 	movw	r2, #1147	@ 0x47b
 80185c4:	4990      	ldr	r1, [pc, #576]	@ (8018808 <tcp_receive+0x25c>)
 80185c6:	4891      	ldr	r0, [pc, #580]	@ (801880c <tcp_receive+0x260>)
 80185c8:	f006 f96a 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	7d1b      	ldrb	r3, [r3, #20]
 80185d0:	2b03      	cmp	r3, #3
 80185d2:	d806      	bhi.n	80185e2 <tcp_receive+0x36>
 80185d4:	4b8b      	ldr	r3, [pc, #556]	@ (8018804 <tcp_receive+0x258>)
 80185d6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80185da:	498d      	ldr	r1, [pc, #564]	@ (8018810 <tcp_receive+0x264>)
 80185dc:	488b      	ldr	r0, [pc, #556]	@ (801880c <tcp_receive+0x260>)
 80185de:	f006 f95f 	bl	801e8a0 <iprintf>

  if (flags & TCP_ACK) {
 80185e2:	4b8c      	ldr	r3, [pc, #560]	@ (8018814 <tcp_receive+0x268>)
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	f003 0310 	and.w	r3, r3, #16
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	f000 8264 	beq.w	8018ab8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80185f6:	461a      	mov	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80185fc:	4413      	add	r3, r2
 80185fe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018604:	4b84      	ldr	r3, [pc, #528]	@ (8018818 <tcp_receive+0x26c>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	1ad3      	subs	r3, r2, r3
 801860a:	2b00      	cmp	r3, #0
 801860c:	db1b      	blt.n	8018646 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018612:	4b81      	ldr	r3, [pc, #516]	@ (8018818 <tcp_receive+0x26c>)
 8018614:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018616:	429a      	cmp	r2, r3
 8018618:	d106      	bne.n	8018628 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801861e:	4b7f      	ldr	r3, [pc, #508]	@ (801881c <tcp_receive+0x270>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	1ad3      	subs	r3, r2, r3
 8018624:	2b00      	cmp	r3, #0
 8018626:	db0e      	blt.n	8018646 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801862c:	4b7b      	ldr	r3, [pc, #492]	@ (801881c <tcp_receive+0x270>)
 801862e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018630:	429a      	cmp	r2, r3
 8018632:	d125      	bne.n	8018680 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018634:	4b7a      	ldr	r3, [pc, #488]	@ (8018820 <tcp_receive+0x274>)
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	89db      	ldrh	r3, [r3, #14]
 801863a:	b29a      	uxth	r2, r3
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018642:	429a      	cmp	r2, r3
 8018644:	d91c      	bls.n	8018680 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018646:	4b76      	ldr	r3, [pc, #472]	@ (8018820 <tcp_receive+0x274>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	89db      	ldrh	r3, [r3, #14]
 801864c:	b29a      	uxth	r2, r3
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018660:	429a      	cmp	r2, r3
 8018662:	d205      	bcs.n	8018670 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018670:	4b69      	ldr	r3, [pc, #420]	@ (8018818 <tcp_receive+0x26c>)
 8018672:	681a      	ldr	r2, [r3, #0]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018678:	4b68      	ldr	r3, [pc, #416]	@ (801881c <tcp_receive+0x270>)
 801867a:	681a      	ldr	r2, [r3, #0]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018680:	4b66      	ldr	r3, [pc, #408]	@ (801881c <tcp_receive+0x270>)
 8018682:	681a      	ldr	r2, [r3, #0]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	2b00      	cmp	r3, #0
 801868c:	dc58      	bgt.n	8018740 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801868e:	4b65      	ldr	r3, [pc, #404]	@ (8018824 <tcp_receive+0x278>)
 8018690:	881b      	ldrh	r3, [r3, #0]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d14b      	bne.n	801872e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80186a0:	4413      	add	r3, r2
 80186a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d142      	bne.n	801872e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	db3d      	blt.n	801872e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80186b6:	4b59      	ldr	r3, [pc, #356]	@ (801881c <tcp_receive+0x270>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	429a      	cmp	r2, r3
 80186bc:	d137      	bne.n	801872e <tcp_receive+0x182>
              found_dupack = 1;
 80186be:	2301      	movs	r3, #1
 80186c0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80186c8:	2bff      	cmp	r3, #255	@ 0xff
 80186ca:	d007      	beq.n	80186dc <tcp_receive+0x130>
                ++pcb->dupacks;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80186d2:	3301      	adds	r3, #1
 80186d4:	b2da      	uxtb	r2, r3
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80186e2:	2b03      	cmp	r3, #3
 80186e4:	d91b      	bls.n	801871e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80186f0:	4413      	add	r3, r2
 80186f2:	b29a      	uxth	r2, r3
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80186fa:	429a      	cmp	r2, r3
 80186fc:	d30a      	bcc.n	8018714 <tcp_receive+0x168>
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018708:	4413      	add	r3, r2
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018712:	e004      	b.n	801871e <tcp_receive+0x172>
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801871a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018724:	2b02      	cmp	r3, #2
 8018726:	d902      	bls.n	801872e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f002 fb41 	bl	801adb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018730:	2b00      	cmp	r3, #0
 8018732:	f040 8161 	bne.w	80189f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2200      	movs	r2, #0
 801873a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801873e:	e15b      	b.n	80189f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018740:	4b36      	ldr	r3, [pc, #216]	@ (801881c <tcp_receive+0x270>)
 8018742:	681a      	ldr	r2, [r3, #0]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018748:	1ad3      	subs	r3, r2, r3
 801874a:	3b01      	subs	r3, #1
 801874c:	2b00      	cmp	r3, #0
 801874e:	f2c0 814e 	blt.w	80189ee <tcp_receive+0x442>
 8018752:	4b32      	ldr	r3, [pc, #200]	@ (801881c <tcp_receive+0x270>)
 8018754:	681a      	ldr	r2, [r3, #0]
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801875a:	1ad3      	subs	r3, r2, r3
 801875c:	2b00      	cmp	r3, #0
 801875e:	f300 8146 	bgt.w	80189ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	8b5b      	ldrh	r3, [r3, #26]
 8018766:	f003 0304 	and.w	r3, r3, #4
 801876a:	2b00      	cmp	r3, #0
 801876c:	d010      	beq.n	8018790 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	8b5b      	ldrh	r3, [r3, #26]
 8018772:	f023 0304 	bic.w	r3, r3, #4
 8018776:	b29a      	uxth	r2, r3
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	2200      	movs	r2, #0
 801878c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	2200      	movs	r2, #0
 8018794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801879e:	10db      	asrs	r3, r3, #3
 80187a0:	b21b      	sxth	r3, r3
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	4413      	add	r3, r2
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	b21a      	sxth	r2, r3
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80187b8:	4b18      	ldr	r3, [pc, #96]	@ (801881c <tcp_receive+0x270>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	1ad3      	subs	r3, r2, r3
 80187c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2200      	movs	r2, #0
 80187cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80187d0:	4b12      	ldr	r3, [pc, #72]	@ (801881c <tcp_receive+0x270>)
 80187d2:	681a      	ldr	r2, [r3, #0]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	7d1b      	ldrb	r3, [r3, #20]
 80187dc:	2b03      	cmp	r3, #3
 80187de:	f240 8097 	bls.w	8018910 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80187ee:	429a      	cmp	r2, r3
 80187f0:	d245      	bcs.n	801887e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	8b5b      	ldrh	r3, [r3, #26]
 80187f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d014      	beq.n	8018828 <tcp_receive+0x27c>
 80187fe:	2301      	movs	r3, #1
 8018800:	e013      	b.n	801882a <tcp_receive+0x27e>
 8018802:	bf00      	nop
 8018804:	08021568 	.word	0x08021568
 8018808:	08021898 	.word	0x08021898
 801880c:	080215b4 	.word	0x080215b4
 8018810:	080218b4 	.word	0x080218b4
 8018814:	240087d8 	.word	0x240087d8
 8018818:	240087cc 	.word	0x240087cc
 801881c:	240087d0 	.word	0x240087d0
 8018820:	240087bc 	.word	0x240087bc
 8018824:	240087d6 	.word	0x240087d6
 8018828:	2302      	movs	r3, #2
 801882a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801882e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018832:	b29a      	uxth	r2, r3
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018838:	fb12 f303 	smulbb	r3, r2, r3
 801883c:	b29b      	uxth	r3, r3
 801883e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018840:	4293      	cmp	r3, r2
 8018842:	bf28      	it	cs
 8018844:	4613      	movcs	r3, r2
 8018846:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801884e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018850:	4413      	add	r3, r2
 8018852:	b29a      	uxth	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801885a:	429a      	cmp	r2, r3
 801885c:	d309      	bcc.n	8018872 <tcp_receive+0x2c6>
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018864:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018866:	4413      	add	r3, r2
 8018868:	b29a      	uxth	r2, r3
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018870:	e04e      	b.n	8018910 <tcp_receive+0x364>
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018878:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801887c:	e048      	b.n	8018910 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018884:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018886:	4413      	add	r3, r2
 8018888:	b29a      	uxth	r2, r3
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018890:	429a      	cmp	r2, r3
 8018892:	d309      	bcc.n	80188a8 <tcp_receive+0x2fc>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801889a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801889c:	4413      	add	r3, r2
 801889e:	b29a      	uxth	r2, r3
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80188a6:	e004      	b.n	80188b2 <tcp_receive+0x306>
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80188ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80188be:	429a      	cmp	r2, r3
 80188c0:	d326      	bcc.n	8018910 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80188ce:	1ad3      	subs	r3, r2, r3
 80188d0:	b29a      	uxth	r2, r3
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80188e2:	4413      	add	r3, r2
 80188e4:	b29a      	uxth	r2, r3
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d30a      	bcc.n	8018906 <tcp_receive+0x35a>
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80188fa:	4413      	add	r3, r2
 80188fc:	b29a      	uxth	r2, r3
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018904:	e004      	b.n	8018910 <tcp_receive+0x364>
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801890c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018918:	4a98      	ldr	r2, [pc, #608]	@ (8018b7c <tcp_receive+0x5d0>)
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f7ff fdca 	bl	80184b4 <tcp_free_acked_segments>
 8018920:	4602      	mov	r2, r0
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801892e:	4a94      	ldr	r2, [pc, #592]	@ (8018b80 <tcp_receive+0x5d4>)
 8018930:	6878      	ldr	r0, [r7, #4]
 8018932:	f7ff fdbf 	bl	80184b4 <tcp_free_acked_segments>
 8018936:	4602      	mov	r2, r0
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018940:	2b00      	cmp	r3, #0
 8018942:	d104      	bne.n	801894e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801894a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801894c:	e002      	b.n	8018954 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2200      	movs	r2, #0
 8018952:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2200      	movs	r2, #0
 8018958:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801895e:	2b00      	cmp	r3, #0
 8018960:	d103      	bne.n	801896a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2200      	movs	r2, #0
 8018966:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018970:	4b84      	ldr	r3, [pc, #528]	@ (8018b84 <tcp_receive+0x5d8>)
 8018972:	881b      	ldrh	r3, [r3, #0]
 8018974:	4413      	add	r3, r2
 8018976:	b29a      	uxth	r2, r3
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	8b5b      	ldrh	r3, [r3, #26]
 8018982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018986:	2b00      	cmp	r3, #0
 8018988:	d035      	beq.n	80189f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801898e:	2b00      	cmp	r3, #0
 8018990:	d118      	bne.n	80189c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018996:	2b00      	cmp	r3, #0
 8018998:	d00c      	beq.n	80189b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189a2:	68db      	ldr	r3, [r3, #12]
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7fa fd97 	bl	80134da <lwip_htonl>
 80189ac:	4603      	mov	r3, r0
 80189ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	dc20      	bgt.n	80189f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	8b5b      	ldrh	r3, [r3, #26]
 80189b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80189bc:	b29a      	uxth	r2, r3
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80189c2:	e018      	b.n	80189f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189cc:	68db      	ldr	r3, [r3, #12]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7fa fd82 	bl	80134da <lwip_htonl>
 80189d6:	4603      	mov	r3, r0
 80189d8:	1ae3      	subs	r3, r4, r3
 80189da:	2b00      	cmp	r3, #0
 80189dc:	dc0b      	bgt.n	80189f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	8b5b      	ldrh	r3, [r3, #26]
 80189e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80189ec:	e003      	b.n	80189f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f002 fbca 	bl	801b188 <tcp_send_empty_ack>
 80189f4:	e000      	b.n	80189f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80189f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d05b      	beq.n	8018ab8 <tcp_receive+0x50c>
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018a04:	4b60      	ldr	r3, [pc, #384]	@ (8018b88 <tcp_receive+0x5dc>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	1ad3      	subs	r3, r2, r3
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	da54      	bge.n	8018ab8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8018b8c <tcp_receive+0x5e0>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	b29a      	uxth	r2, r3
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a18:	b29b      	uxth	r3, r3
 8018a1a:	1ad3      	subs	r3, r2, r3
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018a2c:	10db      	asrs	r3, r3, #3
 8018a2e:	b21b      	sxth	r3, r3
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	1ad3      	subs	r3, r2, r3
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018a40:	b29a      	uxth	r2, r3
 8018a42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018a46:	4413      	add	r3, r2
 8018a48:	b29b      	uxth	r3, r3
 8018a4a:	b21a      	sxth	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018a50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	da05      	bge.n	8018a64 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018a5c:	425b      	negs	r3, r3
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018a64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018a6e:	109b      	asrs	r3, r3, #2
 8018a70:	b21b      	sxth	r3, r3
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	1ad3      	subs	r3, r2, r3
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018a82:	b29a      	uxth	r2, r3
 8018a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018a88:	4413      	add	r3, r2
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	b21a      	sxth	r2, r3
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018a98:	10db      	asrs	r3, r3, #3
 8018a9a:	b21b      	sxth	r3, r3
 8018a9c:	b29a      	uxth	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018aa4:	b29b      	uxth	r3, r3
 8018aa6:	4413      	add	r3, r2
 8018aa8:	b29b      	uxth	r3, r3
 8018aaa:	b21a      	sxth	r2, r3
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018ab8:	4b35      	ldr	r3, [pc, #212]	@ (8018b90 <tcp_receive+0x5e4>)
 8018aba:	881b      	ldrh	r3, [r3, #0]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	f000 84df 	beq.w	8019480 <tcp_receive+0xed4>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	7d1b      	ldrb	r3, [r3, #20]
 8018ac6:	2b06      	cmp	r3, #6
 8018ac8:	f200 84da 	bhi.w	8019480 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018ad0:	4b30      	ldr	r3, [pc, #192]	@ (8018b94 <tcp_receive+0x5e8>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	1ad3      	subs	r3, r2, r3
 8018ad6:	3b01      	subs	r3, #1
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	f2c0 808f 	blt.w	8018bfc <tcp_receive+0x650>
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8018b90 <tcp_receive+0x5e4>)
 8018ae4:	881b      	ldrh	r3, [r3, #0]
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8018b94 <tcp_receive+0x5e8>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	440b      	add	r3, r1
 8018aee:	1ad3      	subs	r3, r2, r3
 8018af0:	3301      	adds	r3, #1
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	f300 8082 	bgt.w	8018bfc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018af8:	4b27      	ldr	r3, [pc, #156]	@ (8018b98 <tcp_receive+0x5ec>)
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b02:	4b24      	ldr	r3, [pc, #144]	@ (8018b94 <tcp_receive+0x5e8>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	1ad3      	subs	r3, r2, r3
 8018b08:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018b0a:	4b23      	ldr	r3, [pc, #140]	@ (8018b98 <tcp_receive+0x5ec>)
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d106      	bne.n	8018b20 <tcp_receive+0x574>
 8018b12:	4b22      	ldr	r3, [pc, #136]	@ (8018b9c <tcp_receive+0x5f0>)
 8018b14:	f240 5294 	movw	r2, #1428	@ 0x594
 8018b18:	4921      	ldr	r1, [pc, #132]	@ (8018ba0 <tcp_receive+0x5f4>)
 8018b1a:	4822      	ldr	r0, [pc, #136]	@ (8018ba4 <tcp_receive+0x5f8>)
 8018b1c:	f005 fec0 	bl	801e8a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b22:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018b26:	4293      	cmp	r3, r2
 8018b28:	d906      	bls.n	8018b38 <tcp_receive+0x58c>
 8018b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8018b9c <tcp_receive+0x5f0>)
 8018b2c:	f240 5295 	movw	r2, #1429	@ 0x595
 8018b30:	491d      	ldr	r1, [pc, #116]	@ (8018ba8 <tcp_receive+0x5fc>)
 8018b32:	481c      	ldr	r0, [pc, #112]	@ (8018ba4 <tcp_receive+0x5f8>)
 8018b34:	f005 feb4 	bl	801e8a0 <iprintf>
      off = (u16_t)off32;
 8018b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018b3e:	4b16      	ldr	r3, [pc, #88]	@ (8018b98 <tcp_receive+0x5ec>)
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	891b      	ldrh	r3, [r3, #8]
 8018b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d906      	bls.n	8018b5a <tcp_receive+0x5ae>
 8018b4c:	4b13      	ldr	r3, [pc, #76]	@ (8018b9c <tcp_receive+0x5f0>)
 8018b4e:	f240 5297 	movw	r2, #1431	@ 0x597
 8018b52:	4916      	ldr	r1, [pc, #88]	@ (8018bac <tcp_receive+0x600>)
 8018b54:	4813      	ldr	r0, [pc, #76]	@ (8018ba4 <tcp_receive+0x5f8>)
 8018b56:	f005 fea3 	bl	801e8a0 <iprintf>
      inseg.len -= off;
 8018b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8018b98 <tcp_receive+0x5ec>)
 8018b5c:	891a      	ldrh	r2, [r3, #8]
 8018b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	4b0c      	ldr	r3, [pc, #48]	@ (8018b98 <tcp_receive+0x5ec>)
 8018b68:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8018b98 <tcp_receive+0x5ec>)
 8018b6c:	685b      	ldr	r3, [r3, #4]
 8018b6e:	891a      	ldrh	r2, [r3, #8]
 8018b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b74:	1ad3      	subs	r3, r2, r3
 8018b76:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018b78:	e02a      	b.n	8018bd0 <tcp_receive+0x624>
 8018b7a:	bf00      	nop
 8018b7c:	080218d0 	.word	0x080218d0
 8018b80:	080218d8 	.word	0x080218d8
 8018b84:	240087d4 	.word	0x240087d4
 8018b88:	240087d0 	.word	0x240087d0
 8018b8c:	24008794 	.word	0x24008794
 8018b90:	240087d6 	.word	0x240087d6
 8018b94:	240087cc 	.word	0x240087cc
 8018b98:	240087ac 	.word	0x240087ac
 8018b9c:	08021568 	.word	0x08021568
 8018ba0:	080218e0 	.word	0x080218e0
 8018ba4:	080215b4 	.word	0x080215b4
 8018ba8:	080218f0 	.word	0x080218f0
 8018bac:	08021900 	.word	0x08021900
        off -= p->len;
 8018bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bb2:	895b      	ldrh	r3, [r3, #10]
 8018bb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018bb8:	1ad3      	subs	r3, r2, r3
 8018bba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bc0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018bc2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018bd2:	895b      	ldrh	r3, [r3, #10]
 8018bd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	d8e9      	bhi.n	8018bb0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018bdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018be0:	4619      	mov	r1, r3
 8018be2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018be4:	f7fc f898 	bl	8014d18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bec:	4a90      	ldr	r2, [pc, #576]	@ (8018e30 <tcp_receive+0x884>)
 8018bee:	6013      	str	r3, [r2, #0]
 8018bf0:	4b90      	ldr	r3, [pc, #576]	@ (8018e34 <tcp_receive+0x888>)
 8018bf2:	68db      	ldr	r3, [r3, #12]
 8018bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8018e30 <tcp_receive+0x884>)
 8018bf6:	6812      	ldr	r2, [r2, #0]
 8018bf8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018bfa:	e00d      	b.n	8018c18 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8018e30 <tcp_receive+0x884>)
 8018bfe:	681a      	ldr	r2, [r3, #0]
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c04:	1ad3      	subs	r3, r2, r3
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	da06      	bge.n	8018c18 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	8b5b      	ldrh	r3, [r3, #26]
 8018c0e:	f043 0302 	orr.w	r3, r3, #2
 8018c12:	b29a      	uxth	r2, r3
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018c18:	4b85      	ldr	r3, [pc, #532]	@ (8018e30 <tcp_receive+0x884>)
 8018c1a:	681a      	ldr	r2, [r3, #0]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c20:	1ad3      	subs	r3, r2, r3
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	f2c0 8427 	blt.w	8019476 <tcp_receive+0xeca>
 8018c28:	4b81      	ldr	r3, [pc, #516]	@ (8018e30 <tcp_receive+0x884>)
 8018c2a:	681a      	ldr	r2, [r3, #0]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c30:	6879      	ldr	r1, [r7, #4]
 8018c32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018c34:	440b      	add	r3, r1
 8018c36:	1ad3      	subs	r3, r2, r3
 8018c38:	3301      	adds	r3, #1
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	f300 841b 	bgt.w	8019476 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c44:	4b7a      	ldr	r3, [pc, #488]	@ (8018e30 <tcp_receive+0x884>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	f040 8298 	bne.w	801917e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018c4e:	4b79      	ldr	r3, [pc, #484]	@ (8018e34 <tcp_receive+0x888>)
 8018c50:	891c      	ldrh	r4, [r3, #8]
 8018c52:	4b78      	ldr	r3, [pc, #480]	@ (8018e34 <tcp_receive+0x888>)
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	899b      	ldrh	r3, [r3, #12]
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7fa fc28 	bl	80134b0 <lwip_htons>
 8018c60:	4603      	mov	r3, r0
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	f003 0303 	and.w	r3, r3, #3
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d001      	beq.n	8018c70 <tcp_receive+0x6c4>
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	e000      	b.n	8018c72 <tcp_receive+0x6c6>
 8018c70:	2300      	movs	r3, #0
 8018c72:	4423      	add	r3, r4
 8018c74:	b29a      	uxth	r2, r3
 8018c76:	4b70      	ldr	r3, [pc, #448]	@ (8018e38 <tcp_receive+0x88c>)
 8018c78:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8018e38 <tcp_receive+0x88c>)
 8018c80:	881b      	ldrh	r3, [r3, #0]
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d274      	bcs.n	8018d70 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c86:	4b6b      	ldr	r3, [pc, #428]	@ (8018e34 <tcp_receive+0x888>)
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	899b      	ldrh	r3, [r3, #12]
 8018c8c:	b29b      	uxth	r3, r3
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7fa fc0e 	bl	80134b0 <lwip_htons>
 8018c94:	4603      	mov	r3, r0
 8018c96:	b2db      	uxtb	r3, r3
 8018c98:	f003 0301 	and.w	r3, r3, #1
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d01e      	beq.n	8018cde <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018ca0:	4b64      	ldr	r3, [pc, #400]	@ (8018e34 <tcp_receive+0x888>)
 8018ca2:	68db      	ldr	r3, [r3, #12]
 8018ca4:	899b      	ldrh	r3, [r3, #12]
 8018ca6:	b29b      	uxth	r3, r3
 8018ca8:	b21b      	sxth	r3, r3
 8018caa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018cae:	b21c      	sxth	r4, r3
 8018cb0:	4b60      	ldr	r3, [pc, #384]	@ (8018e34 <tcp_receive+0x888>)
 8018cb2:	68db      	ldr	r3, [r3, #12]
 8018cb4:	899b      	ldrh	r3, [r3, #12]
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7fa fbf9 	bl	80134b0 <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7fa fbf1 	bl	80134b0 <lwip_htons>
 8018cce:	4603      	mov	r3, r0
 8018cd0:	b21b      	sxth	r3, r3
 8018cd2:	4323      	orrs	r3, r4
 8018cd4:	b21a      	sxth	r2, r3
 8018cd6:	4b57      	ldr	r3, [pc, #348]	@ (8018e34 <tcp_receive+0x888>)
 8018cd8:	68db      	ldr	r3, [r3, #12]
 8018cda:	b292      	uxth	r2, r2
 8018cdc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018ce2:	4b54      	ldr	r3, [pc, #336]	@ (8018e34 <tcp_receive+0x888>)
 8018ce4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018ce6:	4b53      	ldr	r3, [pc, #332]	@ (8018e34 <tcp_receive+0x888>)
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	899b      	ldrh	r3, [r3, #12]
 8018cec:	b29b      	uxth	r3, r3
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fa fbde 	bl	80134b0 <lwip_htons>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	b2db      	uxtb	r3, r3
 8018cf8:	f003 0302 	and.w	r3, r3, #2
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d005      	beq.n	8018d0c <tcp_receive+0x760>
            inseg.len -= 1;
 8018d00:	4b4c      	ldr	r3, [pc, #304]	@ (8018e34 <tcp_receive+0x888>)
 8018d02:	891b      	ldrh	r3, [r3, #8]
 8018d04:	3b01      	subs	r3, #1
 8018d06:	b29a      	uxth	r2, r3
 8018d08:	4b4a      	ldr	r3, [pc, #296]	@ (8018e34 <tcp_receive+0x888>)
 8018d0a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018d0c:	4b49      	ldr	r3, [pc, #292]	@ (8018e34 <tcp_receive+0x888>)
 8018d0e:	685b      	ldr	r3, [r3, #4]
 8018d10:	4a48      	ldr	r2, [pc, #288]	@ (8018e34 <tcp_receive+0x888>)
 8018d12:	8912      	ldrh	r2, [r2, #8]
 8018d14:	4611      	mov	r1, r2
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7fb fefe 	bl	8014b18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018d1c:	4b45      	ldr	r3, [pc, #276]	@ (8018e34 <tcp_receive+0x888>)
 8018d1e:	891c      	ldrh	r4, [r3, #8]
 8018d20:	4b44      	ldr	r3, [pc, #272]	@ (8018e34 <tcp_receive+0x888>)
 8018d22:	68db      	ldr	r3, [r3, #12]
 8018d24:	899b      	ldrh	r3, [r3, #12]
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f7fa fbc1 	bl	80134b0 <lwip_htons>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	f003 0303 	and.w	r3, r3, #3
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d001      	beq.n	8018d3e <tcp_receive+0x792>
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	e000      	b.n	8018d40 <tcp_receive+0x794>
 8018d3e:	2300      	movs	r3, #0
 8018d40:	4423      	add	r3, r4
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	4b3c      	ldr	r3, [pc, #240]	@ (8018e38 <tcp_receive+0x88c>)
 8018d46:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018d48:	4b3b      	ldr	r3, [pc, #236]	@ (8018e38 <tcp_receive+0x88c>)
 8018d4a:	881b      	ldrh	r3, [r3, #0]
 8018d4c:	461a      	mov	r2, r3
 8018d4e:	4b38      	ldr	r3, [pc, #224]	@ (8018e30 <tcp_receive+0x884>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	441a      	add	r2, r3
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d58:	6879      	ldr	r1, [r7, #4]
 8018d5a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018d5c:	440b      	add	r3, r1
 8018d5e:	429a      	cmp	r2, r3
 8018d60:	d006      	beq.n	8018d70 <tcp_receive+0x7c4>
 8018d62:	4b36      	ldr	r3, [pc, #216]	@ (8018e3c <tcp_receive+0x890>)
 8018d64:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018d68:	4935      	ldr	r1, [pc, #212]	@ (8018e40 <tcp_receive+0x894>)
 8018d6a:	4836      	ldr	r0, [pc, #216]	@ (8018e44 <tcp_receive+0x898>)
 8018d6c:	f005 fd98 	bl	801e8a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f000 80e6 	beq.w	8018f46 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8018e34 <tcp_receive+0x888>)
 8018d7c:	68db      	ldr	r3, [r3, #12]
 8018d7e:	899b      	ldrh	r3, [r3, #12]
 8018d80:	b29b      	uxth	r3, r3
 8018d82:	4618      	mov	r0, r3
 8018d84:	f7fa fb94 	bl	80134b0 <lwip_htons>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	f003 0301 	and.w	r3, r3, #1
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d010      	beq.n	8018db6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018d94:	e00a      	b.n	8018dac <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d9a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018da0:	681a      	ldr	r2, [r3, #0]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018da6:	68f8      	ldr	r0, [r7, #12]
 8018da8:	f7fd fcc5 	bl	8016736 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d1f0      	bne.n	8018d96 <tcp_receive+0x7ea>
 8018db4:	e0c7      	b.n	8018f46 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018dbc:	e051      	b.n	8018e62 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dc0:	68db      	ldr	r3, [r3, #12]
 8018dc2:	899b      	ldrh	r3, [r3, #12]
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fa fb72 	bl	80134b0 <lwip_htons>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	b2db      	uxtb	r3, r3
 8018dd0:	f003 0301 	and.w	r3, r3, #1
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d03c      	beq.n	8018e52 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018dd8:	4b16      	ldr	r3, [pc, #88]	@ (8018e34 <tcp_receive+0x888>)
 8018dda:	68db      	ldr	r3, [r3, #12]
 8018ddc:	899b      	ldrh	r3, [r3, #12]
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7fa fb65 	bl	80134b0 <lwip_htons>
 8018de6:	4603      	mov	r3, r0
 8018de8:	b2db      	uxtb	r3, r3
 8018dea:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d12f      	bne.n	8018e52 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018df2:	4b10      	ldr	r3, [pc, #64]	@ (8018e34 <tcp_receive+0x888>)
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	899b      	ldrh	r3, [r3, #12]
 8018df8:	b29c      	uxth	r4, r3
 8018dfa:	2001      	movs	r0, #1
 8018dfc:	f7fa fb58 	bl	80134b0 <lwip_htons>
 8018e00:	4603      	mov	r3, r0
 8018e02:	461a      	mov	r2, r3
 8018e04:	4b0b      	ldr	r3, [pc, #44]	@ (8018e34 <tcp_receive+0x888>)
 8018e06:	68db      	ldr	r3, [r3, #12]
 8018e08:	4322      	orrs	r2, r4
 8018e0a:	b292      	uxth	r2, r2
 8018e0c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018e0e:	4b09      	ldr	r3, [pc, #36]	@ (8018e34 <tcp_receive+0x888>)
 8018e10:	891c      	ldrh	r4, [r3, #8]
 8018e12:	4b08      	ldr	r3, [pc, #32]	@ (8018e34 <tcp_receive+0x888>)
 8018e14:	68db      	ldr	r3, [r3, #12]
 8018e16:	899b      	ldrh	r3, [r3, #12]
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	f7fa fb48 	bl	80134b0 <lwip_htons>
 8018e20:	4603      	mov	r3, r0
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	f003 0303 	and.w	r3, r3, #3
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d00d      	beq.n	8018e48 <tcp_receive+0x89c>
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	e00c      	b.n	8018e4a <tcp_receive+0x89e>
 8018e30:	240087cc 	.word	0x240087cc
 8018e34:	240087ac 	.word	0x240087ac
 8018e38:	240087d6 	.word	0x240087d6
 8018e3c:	08021568 	.word	0x08021568
 8018e40:	08021910 	.word	0x08021910
 8018e44:	080215b4 	.word	0x080215b4
 8018e48:	2300      	movs	r3, #0
 8018e4a:	4423      	add	r3, r4
 8018e4c:	b29a      	uxth	r2, r3
 8018e4e:	4b98      	ldr	r3, [pc, #608]	@ (80190b0 <tcp_receive+0xb04>)
 8018e50:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e54:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018e5c:	6938      	ldr	r0, [r7, #16]
 8018e5e:	f7fd fc6a 	bl	8016736 <tcp_seg_free>
            while (next &&
 8018e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00e      	beq.n	8018e86 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018e68:	4b91      	ldr	r3, [pc, #580]	@ (80190b0 <tcp_receive+0xb04>)
 8018e6a:	881b      	ldrh	r3, [r3, #0]
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	4b91      	ldr	r3, [pc, #580]	@ (80190b4 <tcp_receive+0xb08>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	441a      	add	r2, r3
 8018e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e76:	68db      	ldr	r3, [r3, #12]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018e7c:	8909      	ldrh	r1, [r1, #8]
 8018e7e:	440b      	add	r3, r1
 8018e80:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	da9b      	bge.n	8018dbe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d059      	beq.n	8018f40 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018e8c:	4b88      	ldr	r3, [pc, #544]	@ (80190b0 <tcp_receive+0xb04>)
 8018e8e:	881b      	ldrh	r3, [r3, #0]
 8018e90:	461a      	mov	r2, r3
 8018e92:	4b88      	ldr	r3, [pc, #544]	@ (80190b4 <tcp_receive+0xb08>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	441a      	add	r2, r3
 8018e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e9a:	68db      	ldr	r3, [r3, #12]
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	dd4d      	ble.n	8018f40 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ea6:	68db      	ldr	r3, [r3, #12]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	4b81      	ldr	r3, [pc, #516]	@ (80190b4 <tcp_receive+0xb08>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	b29b      	uxth	r3, r3
 8018eb2:	1ad3      	subs	r3, r2, r3
 8018eb4:	b29a      	uxth	r2, r3
 8018eb6:	4b80      	ldr	r3, [pc, #512]	@ (80190b8 <tcp_receive+0xb0c>)
 8018eb8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018eba:	4b7f      	ldr	r3, [pc, #508]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	899b      	ldrh	r3, [r3, #12]
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7fa faf4 	bl	80134b0 <lwip_htons>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	b2db      	uxtb	r3, r3
 8018ecc:	f003 0302 	and.w	r3, r3, #2
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d005      	beq.n	8018ee0 <tcp_receive+0x934>
                inseg.len -= 1;
 8018ed4:	4b78      	ldr	r3, [pc, #480]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ed6:	891b      	ldrh	r3, [r3, #8]
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	b29a      	uxth	r2, r3
 8018edc:	4b76      	ldr	r3, [pc, #472]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ede:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018ee0:	4b75      	ldr	r3, [pc, #468]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	4a74      	ldr	r2, [pc, #464]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ee6:	8912      	ldrh	r2, [r2, #8]
 8018ee8:	4611      	mov	r1, r2
 8018eea:	4618      	mov	r0, r3
 8018eec:	f7fb fe14 	bl	8014b18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018ef0:	4b71      	ldr	r3, [pc, #452]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ef2:	891c      	ldrh	r4, [r3, #8]
 8018ef4:	4b70      	ldr	r3, [pc, #448]	@ (80190b8 <tcp_receive+0xb0c>)
 8018ef6:	68db      	ldr	r3, [r3, #12]
 8018ef8:	899b      	ldrh	r3, [r3, #12]
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	4618      	mov	r0, r3
 8018efe:	f7fa fad7 	bl	80134b0 <lwip_htons>
 8018f02:	4603      	mov	r3, r0
 8018f04:	b2db      	uxtb	r3, r3
 8018f06:	f003 0303 	and.w	r3, r3, #3
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d001      	beq.n	8018f12 <tcp_receive+0x966>
 8018f0e:	2301      	movs	r3, #1
 8018f10:	e000      	b.n	8018f14 <tcp_receive+0x968>
 8018f12:	2300      	movs	r3, #0
 8018f14:	4423      	add	r3, r4
 8018f16:	b29a      	uxth	r2, r3
 8018f18:	4b65      	ldr	r3, [pc, #404]	@ (80190b0 <tcp_receive+0xb04>)
 8018f1a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018f1c:	4b64      	ldr	r3, [pc, #400]	@ (80190b0 <tcp_receive+0xb04>)
 8018f1e:	881b      	ldrh	r3, [r3, #0]
 8018f20:	461a      	mov	r2, r3
 8018f22:	4b64      	ldr	r3, [pc, #400]	@ (80190b4 <tcp_receive+0xb08>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	441a      	add	r2, r3
 8018f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f2a:	68db      	ldr	r3, [r3, #12]
 8018f2c:	685b      	ldr	r3, [r3, #4]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d006      	beq.n	8018f40 <tcp_receive+0x994>
 8018f32:	4b62      	ldr	r3, [pc, #392]	@ (80190bc <tcp_receive+0xb10>)
 8018f34:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018f38:	4961      	ldr	r1, [pc, #388]	@ (80190c0 <tcp_receive+0xb14>)
 8018f3a:	4862      	ldr	r0, [pc, #392]	@ (80190c4 <tcp_receive+0xb18>)
 8018f3c:	f005 fcb0 	bl	801e8a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018f44:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018f46:	4b5a      	ldr	r3, [pc, #360]	@ (80190b0 <tcp_receive+0xb04>)
 8018f48:	881b      	ldrh	r3, [r3, #0]
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	4b59      	ldr	r3, [pc, #356]	@ (80190b4 <tcp_receive+0xb08>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	441a      	add	r2, r3
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018f5a:	4b55      	ldr	r3, [pc, #340]	@ (80190b0 <tcp_receive+0xb04>)
 8018f5c:	881b      	ldrh	r3, [r3, #0]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d206      	bcs.n	8018f70 <tcp_receive+0x9c4>
 8018f62:	4b56      	ldr	r3, [pc, #344]	@ (80190bc <tcp_receive+0xb10>)
 8018f64:	f240 6207 	movw	r2, #1543	@ 0x607
 8018f68:	4957      	ldr	r1, [pc, #348]	@ (80190c8 <tcp_receive+0xb1c>)
 8018f6a:	4856      	ldr	r0, [pc, #344]	@ (80190c4 <tcp_receive+0xb18>)
 8018f6c:	f005 fc98 	bl	801e8a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018f74:	4b4e      	ldr	r3, [pc, #312]	@ (80190b0 <tcp_receive+0xb04>)
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	1ad3      	subs	r3, r2, r3
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7fc fead 	bl	8015ce0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018f86:	4b4c      	ldr	r3, [pc, #304]	@ (80190b8 <tcp_receive+0xb0c>)
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	891b      	ldrh	r3, [r3, #8]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d006      	beq.n	8018f9e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018f90:	4b49      	ldr	r3, [pc, #292]	@ (80190b8 <tcp_receive+0xb0c>)
 8018f92:	685b      	ldr	r3, [r3, #4]
 8018f94:	4a4d      	ldr	r2, [pc, #308]	@ (80190cc <tcp_receive+0xb20>)
 8018f96:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018f98:	4b47      	ldr	r3, [pc, #284]	@ (80190b8 <tcp_receive+0xb0c>)
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018f9e:	4b46      	ldr	r3, [pc, #280]	@ (80190b8 <tcp_receive+0xb0c>)
 8018fa0:	68db      	ldr	r3, [r3, #12]
 8018fa2:	899b      	ldrh	r3, [r3, #12]
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fa fa82 	bl	80134b0 <lwip_htons>
 8018fac:	4603      	mov	r3, r0
 8018fae:	b2db      	uxtb	r3, r3
 8018fb0:	f003 0301 	and.w	r3, r3, #1
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	f000 80b8 	beq.w	801912a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018fba:	4b45      	ldr	r3, [pc, #276]	@ (80190d0 <tcp_receive+0xb24>)
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	f043 0320 	orr.w	r3, r3, #32
 8018fc2:	b2da      	uxtb	r2, r3
 8018fc4:	4b42      	ldr	r3, [pc, #264]	@ (80190d0 <tcp_receive+0xb24>)
 8018fc6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018fc8:	e0af      	b.n	801912a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fd4:	68db      	ldr	r3, [r3, #12]
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	4a36      	ldr	r2, [pc, #216]	@ (80190b4 <tcp_receive+0xb08>)
 8018fda:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	891b      	ldrh	r3, [r3, #8]
 8018fe0:	461c      	mov	r4, r3
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	68db      	ldr	r3, [r3, #12]
 8018fe6:	899b      	ldrh	r3, [r3, #12]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7fa fa60 	bl	80134b0 <lwip_htons>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	f003 0303 	and.w	r3, r3, #3
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d001      	beq.n	8019000 <tcp_receive+0xa54>
 8018ffc:	2301      	movs	r3, #1
 8018ffe:	e000      	b.n	8019002 <tcp_receive+0xa56>
 8019000:	2300      	movs	r3, #0
 8019002:	191a      	adds	r2, r3, r4
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019008:	441a      	add	r2, r3
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019012:	461c      	mov	r4, r3
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	891b      	ldrh	r3, [r3, #8]
 8019018:	461d      	mov	r5, r3
 801901a:	68bb      	ldr	r3, [r7, #8]
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	899b      	ldrh	r3, [r3, #12]
 8019020:	b29b      	uxth	r3, r3
 8019022:	4618      	mov	r0, r3
 8019024:	f7fa fa44 	bl	80134b0 <lwip_htons>
 8019028:	4603      	mov	r3, r0
 801902a:	b2db      	uxtb	r3, r3
 801902c:	f003 0303 	and.w	r3, r3, #3
 8019030:	2b00      	cmp	r3, #0
 8019032:	d001      	beq.n	8019038 <tcp_receive+0xa8c>
 8019034:	2301      	movs	r3, #1
 8019036:	e000      	b.n	801903a <tcp_receive+0xa8e>
 8019038:	2300      	movs	r3, #0
 801903a:	442b      	add	r3, r5
 801903c:	429c      	cmp	r4, r3
 801903e:	d206      	bcs.n	801904e <tcp_receive+0xaa2>
 8019040:	4b1e      	ldr	r3, [pc, #120]	@ (80190bc <tcp_receive+0xb10>)
 8019042:	f240 622b 	movw	r2, #1579	@ 0x62b
 8019046:	4923      	ldr	r1, [pc, #140]	@ (80190d4 <tcp_receive+0xb28>)
 8019048:	481e      	ldr	r0, [pc, #120]	@ (80190c4 <tcp_receive+0xb18>)
 801904a:	f005 fc29 	bl	801e8a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	891b      	ldrh	r3, [r3, #8]
 8019052:	461c      	mov	r4, r3
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	68db      	ldr	r3, [r3, #12]
 8019058:	899b      	ldrh	r3, [r3, #12]
 801905a:	b29b      	uxth	r3, r3
 801905c:	4618      	mov	r0, r3
 801905e:	f7fa fa27 	bl	80134b0 <lwip_htons>
 8019062:	4603      	mov	r3, r0
 8019064:	b2db      	uxtb	r3, r3
 8019066:	f003 0303 	and.w	r3, r3, #3
 801906a:	2b00      	cmp	r3, #0
 801906c:	d001      	beq.n	8019072 <tcp_receive+0xac6>
 801906e:	2301      	movs	r3, #1
 8019070:	e000      	b.n	8019074 <tcp_receive+0xac8>
 8019072:	2300      	movs	r3, #0
 8019074:	1919      	adds	r1, r3, r4
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801907a:	b28b      	uxth	r3, r1
 801907c:	1ad3      	subs	r3, r2, r3
 801907e:	b29a      	uxth	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019084:	6878      	ldr	r0, [r7, #4]
 8019086:	f7fc fe2b 	bl	8015ce0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	685b      	ldr	r3, [r3, #4]
 801908e:	891b      	ldrh	r3, [r3, #8]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d028      	beq.n	80190e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019094:	4b0d      	ldr	r3, [pc, #52]	@ (80190cc <tcp_receive+0xb20>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d01d      	beq.n	80190d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801909c:	4b0b      	ldr	r3, [pc, #44]	@ (80190cc <tcp_receive+0xb20>)
 801909e:	681a      	ldr	r2, [r3, #0]
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	4619      	mov	r1, r3
 80190a6:	4610      	mov	r0, r2
 80190a8:	f7fb ff8a 	bl	8014fc0 <pbuf_cat>
 80190ac:	e018      	b.n	80190e0 <tcp_receive+0xb34>
 80190ae:	bf00      	nop
 80190b0:	240087d6 	.word	0x240087d6
 80190b4:	240087cc 	.word	0x240087cc
 80190b8:	240087ac 	.word	0x240087ac
 80190bc:	08021568 	.word	0x08021568
 80190c0:	08021948 	.word	0x08021948
 80190c4:	080215b4 	.word	0x080215b4
 80190c8:	08021984 	.word	0x08021984
 80190cc:	240087dc 	.word	0x240087dc
 80190d0:	240087d9 	.word	0x240087d9
 80190d4:	080219a4 	.word	0x080219a4
            } else {
              recv_data = cseg->p;
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	685b      	ldr	r3, [r3, #4]
 80190dc:	4a70      	ldr	r2, [pc, #448]	@ (80192a0 <tcp_receive+0xcf4>)
 80190de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	2200      	movs	r2, #0
 80190e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80190e6:	68bb      	ldr	r3, [r7, #8]
 80190e8:	68db      	ldr	r3, [r3, #12]
 80190ea:	899b      	ldrh	r3, [r3, #12]
 80190ec:	b29b      	uxth	r3, r3
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7fa f9de 	bl	80134b0 <lwip_htons>
 80190f4:	4603      	mov	r3, r0
 80190f6:	b2db      	uxtb	r3, r3
 80190f8:	f003 0301 	and.w	r3, r3, #1
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d00d      	beq.n	801911c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019100:	4b68      	ldr	r3, [pc, #416]	@ (80192a4 <tcp_receive+0xcf8>)
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	f043 0320 	orr.w	r3, r3, #32
 8019108:	b2da      	uxtb	r2, r3
 801910a:	4b66      	ldr	r3, [pc, #408]	@ (80192a4 <tcp_receive+0xcf8>)
 801910c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	7d1b      	ldrb	r3, [r3, #20]
 8019112:	2b04      	cmp	r3, #4
 8019114:	d102      	bne.n	801911c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	2207      	movs	r2, #7
 801911a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	681a      	ldr	r2, [r3, #0]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8019124:	68b8      	ldr	r0, [r7, #8]
 8019126:	f7fd fb06 	bl	8016736 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801912e:	2b00      	cmp	r3, #0
 8019130:	d008      	beq.n	8019144 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019136:	68db      	ldr	r3, [r3, #12]
 8019138:	685a      	ldr	r2, [r3, #4]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801913e:	429a      	cmp	r2, r3
 8019140:	f43f af43 	beq.w	8018fca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	8b5b      	ldrh	r3, [r3, #26]
 8019148:	f003 0301 	and.w	r3, r3, #1
 801914c:	2b00      	cmp	r3, #0
 801914e:	d00e      	beq.n	801916e <tcp_receive+0xbc2>
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	8b5b      	ldrh	r3, [r3, #26]
 8019154:	f023 0301 	bic.w	r3, r3, #1
 8019158:	b29a      	uxth	r2, r3
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	835a      	strh	r2, [r3, #26]
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	8b5b      	ldrh	r3, [r3, #26]
 8019162:	f043 0302 	orr.w	r3, r3, #2
 8019166:	b29a      	uxth	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801916c:	e187      	b.n	801947e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	8b5b      	ldrh	r3, [r3, #26]
 8019172:	f043 0301 	orr.w	r3, r3, #1
 8019176:	b29a      	uxth	r2, r3
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801917c:	e17f      	b.n	801947e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019182:	2b00      	cmp	r3, #0
 8019184:	d106      	bne.n	8019194 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019186:	4848      	ldr	r0, [pc, #288]	@ (80192a8 <tcp_receive+0xcfc>)
 8019188:	f7fd faee 	bl	8016768 <tcp_seg_copy>
 801918c:	4602      	mov	r2, r0
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	675a      	str	r2, [r3, #116]	@ 0x74
 8019192:	e16c      	b.n	801946e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019194:	2300      	movs	r3, #0
 8019196:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801919c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801919e:	e156      	b.n	801944e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80191a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191a2:	68db      	ldr	r3, [r3, #12]
 80191a4:	685a      	ldr	r2, [r3, #4]
 80191a6:	4b41      	ldr	r3, [pc, #260]	@ (80192ac <tcp_receive+0xd00>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d11d      	bne.n	80191ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80191ae:	4b3e      	ldr	r3, [pc, #248]	@ (80192a8 <tcp_receive+0xcfc>)
 80191b0:	891a      	ldrh	r2, [r3, #8]
 80191b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191b4:	891b      	ldrh	r3, [r3, #8]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	f240 814e 	bls.w	8019458 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80191bc:	483a      	ldr	r0, [pc, #232]	@ (80192a8 <tcp_receive+0xcfc>)
 80191be:	f7fd fad3 	bl	8016768 <tcp_seg_copy>
 80191c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	f000 8148 	beq.w	801945c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80191cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d003      	beq.n	80191da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80191d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191d4:	697a      	ldr	r2, [r7, #20]
 80191d6:	601a      	str	r2, [r3, #0]
 80191d8:	e002      	b.n	80191e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	697a      	ldr	r2, [r7, #20]
 80191de:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80191e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80191e2:	6978      	ldr	r0, [r7, #20]
 80191e4:	f7ff f8de 	bl	80183a4 <tcp_oos_insert_segment>
                }
                break;
 80191e8:	e138      	b.n	801945c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80191ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d117      	bne.n	8019220 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80191f0:	4b2e      	ldr	r3, [pc, #184]	@ (80192ac <tcp_receive+0xd00>)
 80191f2:	681a      	ldr	r2, [r3, #0]
 80191f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191f6:	68db      	ldr	r3, [r3, #12]
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	1ad3      	subs	r3, r2, r3
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	da57      	bge.n	80192b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019200:	4829      	ldr	r0, [pc, #164]	@ (80192a8 <tcp_receive+0xcfc>)
 8019202:	f7fd fab1 	bl	8016768 <tcp_seg_copy>
 8019206:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019208:	69bb      	ldr	r3, [r7, #24]
 801920a:	2b00      	cmp	r3, #0
 801920c:	f000 8128 	beq.w	8019460 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	69ba      	ldr	r2, [r7, #24]
 8019214:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019216:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019218:	69b8      	ldr	r0, [r7, #24]
 801921a:	f7ff f8c3 	bl	80183a4 <tcp_oos_insert_segment>
                  }
                  break;
 801921e:	e11f      	b.n	8019460 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019220:	4b22      	ldr	r3, [pc, #136]	@ (80192ac <tcp_receive+0xd00>)
 8019222:	681a      	ldr	r2, [r3, #0]
 8019224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019226:	68db      	ldr	r3, [r3, #12]
 8019228:	685b      	ldr	r3, [r3, #4]
 801922a:	1ad3      	subs	r3, r2, r3
 801922c:	3b01      	subs	r3, #1
 801922e:	2b00      	cmp	r3, #0
 8019230:	db3e      	blt.n	80192b0 <tcp_receive+0xd04>
 8019232:	4b1e      	ldr	r3, [pc, #120]	@ (80192ac <tcp_receive+0xd00>)
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019238:	68db      	ldr	r3, [r3, #12]
 801923a:	685b      	ldr	r3, [r3, #4]
 801923c:	1ad3      	subs	r3, r2, r3
 801923e:	3301      	adds	r3, #1
 8019240:	2b00      	cmp	r3, #0
 8019242:	dc35      	bgt.n	80192b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019244:	4818      	ldr	r0, [pc, #96]	@ (80192a8 <tcp_receive+0xcfc>)
 8019246:	f7fd fa8f 	bl	8016768 <tcp_seg_copy>
 801924a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801924c:	69fb      	ldr	r3, [r7, #28]
 801924e:	2b00      	cmp	r3, #0
 8019250:	f000 8108 	beq.w	8019464 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801925c:	8912      	ldrh	r2, [r2, #8]
 801925e:	441a      	add	r2, r3
 8019260:	4b12      	ldr	r3, [pc, #72]	@ (80192ac <tcp_receive+0xd00>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	1ad3      	subs	r3, r2, r3
 8019266:	2b00      	cmp	r3, #0
 8019268:	dd12      	ble.n	8019290 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801926a:	4b10      	ldr	r3, [pc, #64]	@ (80192ac <tcp_receive+0xd00>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	b29a      	uxth	r2, r3
 8019270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019272:	68db      	ldr	r3, [r3, #12]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	b29b      	uxth	r3, r3
 8019278:	1ad3      	subs	r3, r2, r3
 801927a:	b29a      	uxth	r2, r3
 801927c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801927e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019282:	685a      	ldr	r2, [r3, #4]
 8019284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019286:	891b      	ldrh	r3, [r3, #8]
 8019288:	4619      	mov	r1, r3
 801928a:	4610      	mov	r0, r2
 801928c:	f7fb fc44 	bl	8014b18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019292:	69fa      	ldr	r2, [r7, #28]
 8019294:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019298:	69f8      	ldr	r0, [r7, #28]
 801929a:	f7ff f883 	bl	80183a4 <tcp_oos_insert_segment>
                  }
                  break;
 801929e:	e0e1      	b.n	8019464 <tcp_receive+0xeb8>
 80192a0:	240087dc 	.word	0x240087dc
 80192a4:	240087d9 	.word	0x240087d9
 80192a8:	240087ac 	.word	0x240087ac
 80192ac:	240087cc 	.word	0x240087cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80192b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192b2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80192b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f040 80c5 	bne.w	8019448 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80192be:	4b7f      	ldr	r3, [pc, #508]	@ (80194bc <tcp_receive+0xf10>)
 80192c0:	681a      	ldr	r2, [r3, #0]
 80192c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192c4:	68db      	ldr	r3, [r3, #12]
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f340 80bc 	ble.w	8019448 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80192d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192d2:	68db      	ldr	r3, [r3, #12]
 80192d4:	899b      	ldrh	r3, [r3, #12]
 80192d6:	b29b      	uxth	r3, r3
 80192d8:	4618      	mov	r0, r3
 80192da:	f7fa f8e9 	bl	80134b0 <lwip_htons>
 80192de:	4603      	mov	r3, r0
 80192e0:	b2db      	uxtb	r3, r3
 80192e2:	f003 0301 	and.w	r3, r3, #1
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	f040 80be 	bne.w	8019468 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80192ec:	4874      	ldr	r0, [pc, #464]	@ (80194c0 <tcp_receive+0xf14>)
 80192ee:	f7fd fa3b 	bl	8016768 <tcp_seg_copy>
 80192f2:	4602      	mov	r2, r0
 80192f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80192f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	f000 80b5 	beq.w	801946c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019304:	68db      	ldr	r3, [r3, #12]
 8019306:	685b      	ldr	r3, [r3, #4]
 8019308:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801930a:	8912      	ldrh	r2, [r2, #8]
 801930c:	441a      	add	r2, r3
 801930e:	4b6b      	ldr	r3, [pc, #428]	@ (80194bc <tcp_receive+0xf10>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	1ad3      	subs	r3, r2, r3
 8019314:	2b00      	cmp	r3, #0
 8019316:	dd12      	ble.n	801933e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019318:	4b68      	ldr	r3, [pc, #416]	@ (80194bc <tcp_receive+0xf10>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	b29a      	uxth	r2, r3
 801931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019320:	68db      	ldr	r3, [r3, #12]
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	b29b      	uxth	r3, r3
 8019326:	1ad3      	subs	r3, r2, r3
 8019328:	b29a      	uxth	r2, r3
 801932a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801932c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019330:	685a      	ldr	r2, [r3, #4]
 8019332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019334:	891b      	ldrh	r3, [r3, #8]
 8019336:	4619      	mov	r1, r3
 8019338:	4610      	mov	r0, r2
 801933a:	f7fb fbed 	bl	8014b18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801933e:	4b61      	ldr	r3, [pc, #388]	@ (80194c4 <tcp_receive+0xf18>)
 8019340:	881b      	ldrh	r3, [r3, #0]
 8019342:	461a      	mov	r2, r3
 8019344:	4b5d      	ldr	r3, [pc, #372]	@ (80194bc <tcp_receive+0xf10>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	441a      	add	r2, r3
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801934e:	6879      	ldr	r1, [r7, #4]
 8019350:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019352:	440b      	add	r3, r1
 8019354:	1ad3      	subs	r3, r2, r3
 8019356:	2b00      	cmp	r3, #0
 8019358:	f340 8088 	ble.w	801946c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	68db      	ldr	r3, [r3, #12]
 8019362:	899b      	ldrh	r3, [r3, #12]
 8019364:	b29b      	uxth	r3, r3
 8019366:	4618      	mov	r0, r3
 8019368:	f7fa f8a2 	bl	80134b0 <lwip_htons>
 801936c:	4603      	mov	r3, r0
 801936e:	b2db      	uxtb	r3, r3
 8019370:	f003 0301 	and.w	r3, r3, #1
 8019374:	2b00      	cmp	r3, #0
 8019376:	d021      	beq.n	80193bc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	68db      	ldr	r3, [r3, #12]
 801937e:	899b      	ldrh	r3, [r3, #12]
 8019380:	b29b      	uxth	r3, r3
 8019382:	b21b      	sxth	r3, r3
 8019384:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019388:	b21c      	sxth	r4, r3
 801938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	68db      	ldr	r3, [r3, #12]
 8019390:	899b      	ldrh	r3, [r3, #12]
 8019392:	b29b      	uxth	r3, r3
 8019394:	4618      	mov	r0, r3
 8019396:	f7fa f88b 	bl	80134b0 <lwip_htons>
 801939a:	4603      	mov	r3, r0
 801939c:	b2db      	uxtb	r3, r3
 801939e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7fa f883 	bl	80134b0 <lwip_htons>
 80193aa:	4603      	mov	r3, r0
 80193ac:	b21b      	sxth	r3, r3
 80193ae:	4323      	orrs	r3, r4
 80193b0:	b21a      	sxth	r2, r3
 80193b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	68db      	ldr	r3, [r3, #12]
 80193b8:	b292      	uxth	r2, r2
 80193ba:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80193c6:	4413      	add	r3, r2
 80193c8:	b299      	uxth	r1, r3
 80193ca:	4b3c      	ldr	r3, [pc, #240]	@ (80194bc <tcp_receive+0xf10>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	1a8a      	subs	r2, r1, r2
 80193d6:	b292      	uxth	r2, r2
 80193d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80193da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	685a      	ldr	r2, [r3, #4]
 80193e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	891b      	ldrh	r3, [r3, #8]
 80193e6:	4619      	mov	r1, r3
 80193e8:	4610      	mov	r0, r2
 80193ea:	f7fb fb95 	bl	8014b18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80193ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	891c      	ldrh	r4, [r3, #8]
 80193f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	68db      	ldr	r3, [r3, #12]
 80193fa:	899b      	ldrh	r3, [r3, #12]
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	4618      	mov	r0, r3
 8019400:	f7fa f856 	bl	80134b0 <lwip_htons>
 8019404:	4603      	mov	r3, r0
 8019406:	b2db      	uxtb	r3, r3
 8019408:	f003 0303 	and.w	r3, r3, #3
 801940c:	2b00      	cmp	r3, #0
 801940e:	d001      	beq.n	8019414 <tcp_receive+0xe68>
 8019410:	2301      	movs	r3, #1
 8019412:	e000      	b.n	8019416 <tcp_receive+0xe6a>
 8019414:	2300      	movs	r3, #0
 8019416:	4423      	add	r3, r4
 8019418:	b29a      	uxth	r2, r3
 801941a:	4b2a      	ldr	r3, [pc, #168]	@ (80194c4 <tcp_receive+0xf18>)
 801941c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801941e:	4b29      	ldr	r3, [pc, #164]	@ (80194c4 <tcp_receive+0xf18>)
 8019420:	881b      	ldrh	r3, [r3, #0]
 8019422:	461a      	mov	r2, r3
 8019424:	4b25      	ldr	r3, [pc, #148]	@ (80194bc <tcp_receive+0xf10>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	441a      	add	r2, r3
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801942e:	6879      	ldr	r1, [r7, #4]
 8019430:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019432:	440b      	add	r3, r1
 8019434:	429a      	cmp	r2, r3
 8019436:	d019      	beq.n	801946c <tcp_receive+0xec0>
 8019438:	4b23      	ldr	r3, [pc, #140]	@ (80194c8 <tcp_receive+0xf1c>)
 801943a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801943e:	4923      	ldr	r1, [pc, #140]	@ (80194cc <tcp_receive+0xf20>)
 8019440:	4823      	ldr	r0, [pc, #140]	@ (80194d0 <tcp_receive+0xf24>)
 8019442:	f005 fa2d 	bl	801e8a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019446:	e011      	b.n	801946c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019450:	2b00      	cmp	r3, #0
 8019452:	f47f aea5 	bne.w	80191a0 <tcp_receive+0xbf4>
 8019456:	e00a      	b.n	801946e <tcp_receive+0xec2>
                break;
 8019458:	bf00      	nop
 801945a:	e008      	b.n	801946e <tcp_receive+0xec2>
                break;
 801945c:	bf00      	nop
 801945e:	e006      	b.n	801946e <tcp_receive+0xec2>
                  break;
 8019460:	bf00      	nop
 8019462:	e004      	b.n	801946e <tcp_receive+0xec2>
                  break;
 8019464:	bf00      	nop
 8019466:	e002      	b.n	801946e <tcp_receive+0xec2>
                  break;
 8019468:	bf00      	nop
 801946a:	e000      	b.n	801946e <tcp_receive+0xec2>
                break;
 801946c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	f001 fe8a 	bl	801b188 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019474:	e003      	b.n	801947e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f001 fe86 	bl	801b188 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801947c:	e01a      	b.n	80194b4 <tcp_receive+0xf08>
 801947e:	e019      	b.n	80194b4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019480:	4b0e      	ldr	r3, [pc, #56]	@ (80194bc <tcp_receive+0xf10>)
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019488:	1ad3      	subs	r3, r2, r3
 801948a:	2b00      	cmp	r3, #0
 801948c:	db0a      	blt.n	80194a4 <tcp_receive+0xef8>
 801948e:	4b0b      	ldr	r3, [pc, #44]	@ (80194bc <tcp_receive+0xf10>)
 8019490:	681a      	ldr	r2, [r3, #0]
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019496:	6879      	ldr	r1, [r7, #4]
 8019498:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801949a:	440b      	add	r3, r1
 801949c:	1ad3      	subs	r3, r2, r3
 801949e:	3301      	adds	r3, #1
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	dd07      	ble.n	80194b4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	8b5b      	ldrh	r3, [r3, #26]
 80194a8:	f043 0302 	orr.w	r3, r3, #2
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80194b2:	e7ff      	b.n	80194b4 <tcp_receive+0xf08>
 80194b4:	bf00      	nop
 80194b6:	3750      	adds	r7, #80	@ 0x50
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bdb0      	pop	{r4, r5, r7, pc}
 80194bc:	240087cc 	.word	0x240087cc
 80194c0:	240087ac 	.word	0x240087ac
 80194c4:	240087d6 	.word	0x240087d6
 80194c8:	08021568 	.word	0x08021568
 80194cc:	08021910 	.word	0x08021910
 80194d0:	080215b4 	.word	0x080215b4

080194d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80194d4:	b480      	push	{r7}
 80194d6:	b083      	sub	sp, #12
 80194d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80194da:	4b15      	ldr	r3, [pc, #84]	@ (8019530 <tcp_get_next_optbyte+0x5c>)
 80194dc:	881b      	ldrh	r3, [r3, #0]
 80194de:	1c5a      	adds	r2, r3, #1
 80194e0:	b291      	uxth	r1, r2
 80194e2:	4a13      	ldr	r2, [pc, #76]	@ (8019530 <tcp_get_next_optbyte+0x5c>)
 80194e4:	8011      	strh	r1, [r2, #0]
 80194e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80194e8:	4b12      	ldr	r3, [pc, #72]	@ (8019534 <tcp_get_next_optbyte+0x60>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d004      	beq.n	80194fa <tcp_get_next_optbyte+0x26>
 80194f0:	4b11      	ldr	r3, [pc, #68]	@ (8019538 <tcp_get_next_optbyte+0x64>)
 80194f2:	881b      	ldrh	r3, [r3, #0]
 80194f4:	88fa      	ldrh	r2, [r7, #6]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d208      	bcs.n	801950c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80194fa:	4b10      	ldr	r3, [pc, #64]	@ (801953c <tcp_get_next_optbyte+0x68>)
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	3314      	adds	r3, #20
 8019500:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019502:	88fb      	ldrh	r3, [r7, #6]
 8019504:	683a      	ldr	r2, [r7, #0]
 8019506:	4413      	add	r3, r2
 8019508:	781b      	ldrb	r3, [r3, #0]
 801950a:	e00b      	b.n	8019524 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801950c:	88fb      	ldrh	r3, [r7, #6]
 801950e:	b2da      	uxtb	r2, r3
 8019510:	4b09      	ldr	r3, [pc, #36]	@ (8019538 <tcp_get_next_optbyte+0x64>)
 8019512:	881b      	ldrh	r3, [r3, #0]
 8019514:	b2db      	uxtb	r3, r3
 8019516:	1ad3      	subs	r3, r2, r3
 8019518:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801951a:	4b06      	ldr	r3, [pc, #24]	@ (8019534 <tcp_get_next_optbyte+0x60>)
 801951c:	681a      	ldr	r2, [r3, #0]
 801951e:	797b      	ldrb	r3, [r7, #5]
 8019520:	4413      	add	r3, r2
 8019522:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019524:	4618      	mov	r0, r3
 8019526:	370c      	adds	r7, #12
 8019528:	46bd      	mov	sp, r7
 801952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952e:	4770      	bx	lr
 8019530:	240087c8 	.word	0x240087c8
 8019534:	240087c4 	.word	0x240087c4
 8019538:	240087c2 	.word	0x240087c2
 801953c:	240087bc 	.word	0x240087bc

08019540 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b084      	sub	sp, #16
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d106      	bne.n	801955c <tcp_parseopt+0x1c>
 801954e:	4b33      	ldr	r3, [pc, #204]	@ (801961c <tcp_parseopt+0xdc>)
 8019550:	f240 727d 	movw	r2, #1917	@ 0x77d
 8019554:	4932      	ldr	r1, [pc, #200]	@ (8019620 <tcp_parseopt+0xe0>)
 8019556:	4833      	ldr	r0, [pc, #204]	@ (8019624 <tcp_parseopt+0xe4>)
 8019558:	f005 f9a2 	bl	801e8a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801955c:	4b32      	ldr	r3, [pc, #200]	@ (8019628 <tcp_parseopt+0xe8>)
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d057      	beq.n	8019614 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019564:	4b31      	ldr	r3, [pc, #196]	@ (801962c <tcp_parseopt+0xec>)
 8019566:	2200      	movs	r2, #0
 8019568:	801a      	strh	r2, [r3, #0]
 801956a:	e047      	b.n	80195fc <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801956c:	f7ff ffb2 	bl	80194d4 <tcp_get_next_optbyte>
 8019570:	4603      	mov	r3, r0
 8019572:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019574:	7bfb      	ldrb	r3, [r7, #15]
 8019576:	2b02      	cmp	r3, #2
 8019578:	d006      	beq.n	8019588 <tcp_parseopt+0x48>
 801957a:	2b02      	cmp	r3, #2
 801957c:	dc2b      	bgt.n	80195d6 <tcp_parseopt+0x96>
 801957e:	2b00      	cmp	r3, #0
 8019580:	d043      	beq.n	801960a <tcp_parseopt+0xca>
 8019582:	2b01      	cmp	r3, #1
 8019584:	d039      	beq.n	80195fa <tcp_parseopt+0xba>
 8019586:	e026      	b.n	80195d6 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019588:	f7ff ffa4 	bl	80194d4 <tcp_get_next_optbyte>
 801958c:	4603      	mov	r3, r0
 801958e:	2b04      	cmp	r3, #4
 8019590:	d13d      	bne.n	801960e <tcp_parseopt+0xce>
 8019592:	4b26      	ldr	r3, [pc, #152]	@ (801962c <tcp_parseopt+0xec>)
 8019594:	881b      	ldrh	r3, [r3, #0]
 8019596:	3301      	adds	r3, #1
 8019598:	4a23      	ldr	r2, [pc, #140]	@ (8019628 <tcp_parseopt+0xe8>)
 801959a:	8812      	ldrh	r2, [r2, #0]
 801959c:	4293      	cmp	r3, r2
 801959e:	da36      	bge.n	801960e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80195a0:	f7ff ff98 	bl	80194d4 <tcp_get_next_optbyte>
 80195a4:	4603      	mov	r3, r0
 80195a6:	021b      	lsls	r3, r3, #8
 80195a8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80195aa:	f7ff ff93 	bl	80194d4 <tcp_get_next_optbyte>
 80195ae:	4603      	mov	r3, r0
 80195b0:	461a      	mov	r2, r3
 80195b2:	89bb      	ldrh	r3, [r7, #12]
 80195b4:	4313      	orrs	r3, r2
 80195b6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80195b8:	89bb      	ldrh	r3, [r7, #12]
 80195ba:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80195be:	4293      	cmp	r3, r2
 80195c0:	d804      	bhi.n	80195cc <tcp_parseopt+0x8c>
 80195c2:	89bb      	ldrh	r3, [r7, #12]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d001      	beq.n	80195cc <tcp_parseopt+0x8c>
 80195c8:	89ba      	ldrh	r2, [r7, #12]
 80195ca:	e001      	b.n	80195d0 <tcp_parseopt+0x90>
 80195cc:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80195d4:	e012      	b.n	80195fc <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80195d6:	f7ff ff7d 	bl	80194d4 <tcp_get_next_optbyte>
 80195da:	4603      	mov	r3, r0
 80195dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80195de:	7afb      	ldrb	r3, [r7, #11]
 80195e0:	2b01      	cmp	r3, #1
 80195e2:	d916      	bls.n	8019612 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80195e4:	7afb      	ldrb	r3, [r7, #11]
 80195e6:	b29a      	uxth	r2, r3
 80195e8:	4b10      	ldr	r3, [pc, #64]	@ (801962c <tcp_parseopt+0xec>)
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	4413      	add	r3, r2
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	3b02      	subs	r3, #2
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	4b0d      	ldr	r3, [pc, #52]	@ (801962c <tcp_parseopt+0xec>)
 80195f6:	801a      	strh	r2, [r3, #0]
 80195f8:	e000      	b.n	80195fc <tcp_parseopt+0xbc>
          break;
 80195fa:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80195fc:	4b0b      	ldr	r3, [pc, #44]	@ (801962c <tcp_parseopt+0xec>)
 80195fe:	881a      	ldrh	r2, [r3, #0]
 8019600:	4b09      	ldr	r3, [pc, #36]	@ (8019628 <tcp_parseopt+0xe8>)
 8019602:	881b      	ldrh	r3, [r3, #0]
 8019604:	429a      	cmp	r2, r3
 8019606:	d3b1      	bcc.n	801956c <tcp_parseopt+0x2c>
 8019608:	e004      	b.n	8019614 <tcp_parseopt+0xd4>
          return;
 801960a:	bf00      	nop
 801960c:	e002      	b.n	8019614 <tcp_parseopt+0xd4>
            return;
 801960e:	bf00      	nop
 8019610:	e000      	b.n	8019614 <tcp_parseopt+0xd4>
            return;
 8019612:	bf00      	nop
      }
    }
  }
}
 8019614:	3710      	adds	r7, #16
 8019616:	46bd      	mov	sp, r7
 8019618:	bd80      	pop	{r7, pc}
 801961a:	bf00      	nop
 801961c:	08021568 	.word	0x08021568
 8019620:	080219cc 	.word	0x080219cc
 8019624:	080215b4 	.word	0x080215b4
 8019628:	240087c0 	.word	0x240087c0
 801962c:	240087c8 	.word	0x240087c8

08019630 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019630:	b480      	push	{r7}
 8019632:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019634:	4b05      	ldr	r3, [pc, #20]	@ (801964c <tcp_trigger_input_pcb_close+0x1c>)
 8019636:	781b      	ldrb	r3, [r3, #0]
 8019638:	f043 0310 	orr.w	r3, r3, #16
 801963c:	b2da      	uxtb	r2, r3
 801963e:	4b03      	ldr	r3, [pc, #12]	@ (801964c <tcp_trigger_input_pcb_close+0x1c>)
 8019640:	701a      	strb	r2, [r3, #0]
}
 8019642:	bf00      	nop
 8019644:	46bd      	mov	sp, r7
 8019646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964a:	4770      	bx	lr
 801964c:	240087d9 	.word	0x240087d9

08019650 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b084      	sub	sp, #16
 8019654:	af00      	add	r7, sp, #0
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d00a      	beq.n	8019678 <tcp_route+0x28>
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	7a1b      	ldrb	r3, [r3, #8]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d006      	beq.n	8019678 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	7a1b      	ldrb	r3, [r3, #8]
 801966e:	4618      	mov	r0, r3
 8019670:	f7fb f84a 	bl	8014708 <netif_get_by_index>
 8019674:	4603      	mov	r3, r0
 8019676:	e003      	b.n	8019680 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f003 fc6f 	bl	801cf5c <ip4_route>
 801967e:	4603      	mov	r3, r0
  }
}
 8019680:	4618      	mov	r0, r3
 8019682:	3710      	adds	r7, #16
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019688:	b590      	push	{r4, r7, lr}
 801968a:	b087      	sub	sp, #28
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	603b      	str	r3, [r7, #0]
 8019694:	4613      	mov	r3, r2
 8019696:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d105      	bne.n	80196aa <tcp_create_segment+0x22>
 801969e:	4b43      	ldr	r3, [pc, #268]	@ (80197ac <tcp_create_segment+0x124>)
 80196a0:	22a3      	movs	r2, #163	@ 0xa3
 80196a2:	4943      	ldr	r1, [pc, #268]	@ (80197b0 <tcp_create_segment+0x128>)
 80196a4:	4843      	ldr	r0, [pc, #268]	@ (80197b4 <tcp_create_segment+0x12c>)
 80196a6:	f005 f8fb 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80196aa:	68bb      	ldr	r3, [r7, #8]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d105      	bne.n	80196bc <tcp_create_segment+0x34>
 80196b0:	4b3e      	ldr	r3, [pc, #248]	@ (80197ac <tcp_create_segment+0x124>)
 80196b2:	22a4      	movs	r2, #164	@ 0xa4
 80196b4:	4940      	ldr	r1, [pc, #256]	@ (80197b8 <tcp_create_segment+0x130>)
 80196b6:	483f      	ldr	r0, [pc, #252]	@ (80197b4 <tcp_create_segment+0x12c>)
 80196b8:	f005 f8f2 	bl	801e8a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80196bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	b2db      	uxtb	r3, r3
 80196c4:	f003 0304 	and.w	r3, r3, #4
 80196c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80196ca:	2003      	movs	r0, #3
 80196cc:	f7fa fc90 	bl	8013ff0 <memp_malloc>
 80196d0:	6138      	str	r0, [r7, #16]
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d104      	bne.n	80196e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80196d8:	68b8      	ldr	r0, [r7, #8]
 80196da:	f7fb fba3 	bl	8014e24 <pbuf_free>
    return NULL;
 80196de:	2300      	movs	r3, #0
 80196e0:	e060      	b.n	80197a4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80196e2:	693b      	ldr	r3, [r7, #16]
 80196e4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80196e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80196ea:	693b      	ldr	r3, [r7, #16]
 80196ec:	2200      	movs	r2, #0
 80196ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80196f0:	693b      	ldr	r3, [r7, #16]
 80196f2:	68ba      	ldr	r2, [r7, #8]
 80196f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80196f6:	68bb      	ldr	r3, [r7, #8]
 80196f8:	891a      	ldrh	r2, [r3, #8]
 80196fa:	7dfb      	ldrb	r3, [r7, #23]
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	429a      	cmp	r2, r3
 8019700:	d205      	bcs.n	801970e <tcp_create_segment+0x86>
 8019702:	4b2a      	ldr	r3, [pc, #168]	@ (80197ac <tcp_create_segment+0x124>)
 8019704:	22b0      	movs	r2, #176	@ 0xb0
 8019706:	492d      	ldr	r1, [pc, #180]	@ (80197bc <tcp_create_segment+0x134>)
 8019708:	482a      	ldr	r0, [pc, #168]	@ (80197b4 <tcp_create_segment+0x12c>)
 801970a:	f005 f8c9 	bl	801e8a0 <iprintf>
  seg->len = p->tot_len - optlen;
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	891a      	ldrh	r2, [r3, #8]
 8019712:	7dfb      	ldrb	r3, [r7, #23]
 8019714:	b29b      	uxth	r3, r3
 8019716:	1ad3      	subs	r3, r2, r3
 8019718:	b29a      	uxth	r2, r3
 801971a:	693b      	ldr	r3, [r7, #16]
 801971c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801971e:	2114      	movs	r1, #20
 8019720:	68b8      	ldr	r0, [r7, #8]
 8019722:	f7fb fae9 	bl	8014cf8 <pbuf_add_header>
 8019726:	4603      	mov	r3, r0
 8019728:	2b00      	cmp	r3, #0
 801972a:	d004      	beq.n	8019736 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801972c:	6938      	ldr	r0, [r7, #16]
 801972e:	f7fd f802 	bl	8016736 <tcp_seg_free>
    return NULL;
 8019732:	2300      	movs	r3, #0
 8019734:	e036      	b.n	80197a4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019736:	693b      	ldr	r3, [r7, #16]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	685a      	ldr	r2, [r3, #4]
 801973c:	693b      	ldr	r3, [r7, #16]
 801973e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	8ada      	ldrh	r2, [r3, #22]
 8019744:	693b      	ldr	r3, [r7, #16]
 8019746:	68dc      	ldr	r4, [r3, #12]
 8019748:	4610      	mov	r0, r2
 801974a:	f7f9 feb1 	bl	80134b0 <lwip_htons>
 801974e:	4603      	mov	r3, r0
 8019750:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	8b1a      	ldrh	r2, [r3, #24]
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	68dc      	ldr	r4, [r3, #12]
 801975a:	4610      	mov	r0, r2
 801975c:	f7f9 fea8 	bl	80134b0 <lwip_htons>
 8019760:	4603      	mov	r3, r0
 8019762:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019764:	693b      	ldr	r3, [r7, #16]
 8019766:	68dc      	ldr	r4, [r3, #12]
 8019768:	6838      	ldr	r0, [r7, #0]
 801976a:	f7f9 feb6 	bl	80134da <lwip_htonl>
 801976e:	4603      	mov	r3, r0
 8019770:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019772:	7dfb      	ldrb	r3, [r7, #23]
 8019774:	089b      	lsrs	r3, r3, #2
 8019776:	b2db      	uxtb	r3, r3
 8019778:	3305      	adds	r3, #5
 801977a:	b29b      	uxth	r3, r3
 801977c:	031b      	lsls	r3, r3, #12
 801977e:	b29a      	uxth	r2, r3
 8019780:	79fb      	ldrb	r3, [r7, #7]
 8019782:	b29b      	uxth	r3, r3
 8019784:	4313      	orrs	r3, r2
 8019786:	b29a      	uxth	r2, r3
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	68dc      	ldr	r4, [r3, #12]
 801978c:	4610      	mov	r0, r2
 801978e:	f7f9 fe8f 	bl	80134b0 <lwip_htons>
 8019792:	4603      	mov	r3, r0
 8019794:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019796:	693b      	ldr	r3, [r7, #16]
 8019798:	68db      	ldr	r3, [r3, #12]
 801979a:	2200      	movs	r2, #0
 801979c:	749a      	strb	r2, [r3, #18]
 801979e:	2200      	movs	r2, #0
 80197a0:	74da      	strb	r2, [r3, #19]
  return seg;
 80197a2:	693b      	ldr	r3, [r7, #16]
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	371c      	adds	r7, #28
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd90      	pop	{r4, r7, pc}
 80197ac:	080219e8 	.word	0x080219e8
 80197b0:	08021a1c 	.word	0x08021a1c
 80197b4:	08021a3c 	.word	0x08021a3c
 80197b8:	08021a64 	.word	0x08021a64
 80197bc:	08021a88 	.word	0x08021a88

080197c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b086      	sub	sp, #24
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	607b      	str	r3, [r7, #4]
 80197c8:	4603      	mov	r3, r0
 80197ca:	73fb      	strb	r3, [r7, #15]
 80197cc:	460b      	mov	r3, r1
 80197ce:	81bb      	strh	r3, [r7, #12]
 80197d0:	4613      	mov	r3, r2
 80197d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80197d4:	89bb      	ldrh	r3, [r7, #12]
 80197d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d105      	bne.n	80197ea <tcp_pbuf_prealloc+0x2a>
 80197de:	4b30      	ldr	r3, [pc, #192]	@ (80198a0 <tcp_pbuf_prealloc+0xe0>)
 80197e0:	22e8      	movs	r2, #232	@ 0xe8
 80197e2:	4930      	ldr	r1, [pc, #192]	@ (80198a4 <tcp_pbuf_prealloc+0xe4>)
 80197e4:	4830      	ldr	r0, [pc, #192]	@ (80198a8 <tcp_pbuf_prealloc+0xe8>)
 80197e6:	f005 f85b 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80197ea:	6a3b      	ldr	r3, [r7, #32]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d105      	bne.n	80197fc <tcp_pbuf_prealloc+0x3c>
 80197f0:	4b2b      	ldr	r3, [pc, #172]	@ (80198a0 <tcp_pbuf_prealloc+0xe0>)
 80197f2:	22e9      	movs	r2, #233	@ 0xe9
 80197f4:	492d      	ldr	r1, [pc, #180]	@ (80198ac <tcp_pbuf_prealloc+0xec>)
 80197f6:	482c      	ldr	r0, [pc, #176]	@ (80198a8 <tcp_pbuf_prealloc+0xe8>)
 80197f8:	f005 f852 	bl	801e8a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80197fc:	89ba      	ldrh	r2, [r7, #12]
 80197fe:	897b      	ldrh	r3, [r7, #10]
 8019800:	429a      	cmp	r2, r3
 8019802:	d221      	bcs.n	8019848 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019808:	f003 0302 	and.w	r3, r3, #2
 801980c:	2b00      	cmp	r3, #0
 801980e:	d111      	bne.n	8019834 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019810:	6a3b      	ldr	r3, [r7, #32]
 8019812:	8b5b      	ldrh	r3, [r3, #26]
 8019814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019818:	2b00      	cmp	r3, #0
 801981a:	d115      	bne.n	8019848 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801981c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019820:	2b00      	cmp	r3, #0
 8019822:	d007      	beq.n	8019834 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019824:	6a3b      	ldr	r3, [r7, #32]
 8019826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019828:	2b00      	cmp	r3, #0
 801982a:	d103      	bne.n	8019834 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801982c:	6a3b      	ldr	r3, [r7, #32]
 801982e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019830:	2b00      	cmp	r3, #0
 8019832:	d009      	beq.n	8019848 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019834:	89bb      	ldrh	r3, [r7, #12]
 8019836:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801983a:	f023 0203 	bic.w	r2, r3, #3
 801983e:	897b      	ldrh	r3, [r7, #10]
 8019840:	4293      	cmp	r3, r2
 8019842:	bf28      	it	cs
 8019844:	4613      	movcs	r3, r2
 8019846:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019848:	8af9      	ldrh	r1, [r7, #22]
 801984a:	7bfb      	ldrb	r3, [r7, #15]
 801984c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019850:	4618      	mov	r0, r3
 8019852:	f7fb f803 	bl	801485c <pbuf_alloc>
 8019856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019858:	693b      	ldr	r3, [r7, #16]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d101      	bne.n	8019862 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801985e:	2300      	movs	r3, #0
 8019860:	e019      	b.n	8019896 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019862:	693b      	ldr	r3, [r7, #16]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d006      	beq.n	8019878 <tcp_pbuf_prealloc+0xb8>
 801986a:	4b0d      	ldr	r3, [pc, #52]	@ (80198a0 <tcp_pbuf_prealloc+0xe0>)
 801986c:	f240 120b 	movw	r2, #267	@ 0x10b
 8019870:	490f      	ldr	r1, [pc, #60]	@ (80198b0 <tcp_pbuf_prealloc+0xf0>)
 8019872:	480d      	ldr	r0, [pc, #52]	@ (80198a8 <tcp_pbuf_prealloc+0xe8>)
 8019874:	f005 f814 	bl	801e8a0 <iprintf>
  *oversize = p->len - length;
 8019878:	693b      	ldr	r3, [r7, #16]
 801987a:	895a      	ldrh	r2, [r3, #10]
 801987c:	89bb      	ldrh	r3, [r7, #12]
 801987e:	1ad3      	subs	r3, r2, r3
 8019880:	b29a      	uxth	r2, r3
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019886:	693b      	ldr	r3, [r7, #16]
 8019888:	89ba      	ldrh	r2, [r7, #12]
 801988a:	811a      	strh	r2, [r3, #8]
 801988c:	693b      	ldr	r3, [r7, #16]
 801988e:	891a      	ldrh	r2, [r3, #8]
 8019890:	693b      	ldr	r3, [r7, #16]
 8019892:	815a      	strh	r2, [r3, #10]
  return p;
 8019894:	693b      	ldr	r3, [r7, #16]
}
 8019896:	4618      	mov	r0, r3
 8019898:	3718      	adds	r7, #24
 801989a:	46bd      	mov	sp, r7
 801989c:	bd80      	pop	{r7, pc}
 801989e:	bf00      	nop
 80198a0:	080219e8 	.word	0x080219e8
 80198a4:	08021aa0 	.word	0x08021aa0
 80198a8:	08021a3c 	.word	0x08021a3c
 80198ac:	08021ac4 	.word	0x08021ac4
 80198b0:	08021ae4 	.word	0x08021ae4

080198b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b082      	sub	sp, #8
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
 80198bc:	460b      	mov	r3, r1
 80198be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d106      	bne.n	80198d4 <tcp_write_checks+0x20>
 80198c6:	4b33      	ldr	r3, [pc, #204]	@ (8019994 <tcp_write_checks+0xe0>)
 80198c8:	f240 1233 	movw	r2, #307	@ 0x133
 80198cc:	4932      	ldr	r1, [pc, #200]	@ (8019998 <tcp_write_checks+0xe4>)
 80198ce:	4833      	ldr	r0, [pc, #204]	@ (801999c <tcp_write_checks+0xe8>)
 80198d0:	f004 ffe6 	bl	801e8a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	7d1b      	ldrb	r3, [r3, #20]
 80198d8:	2b04      	cmp	r3, #4
 80198da:	d00e      	beq.n	80198fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80198e0:	2b07      	cmp	r3, #7
 80198e2:	d00a      	beq.n	80198fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80198e8:	2b02      	cmp	r3, #2
 80198ea:	d006      	beq.n	80198fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80198f0:	2b03      	cmp	r3, #3
 80198f2:	d002      	beq.n	80198fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80198f4:	f06f 030a 	mvn.w	r3, #10
 80198f8:	e048      	b.n	801998c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80198fa:	887b      	ldrh	r3, [r7, #2]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d101      	bne.n	8019904 <tcp_write_checks+0x50>
    return ERR_OK;
 8019900:	2300      	movs	r3, #0
 8019902:	e043      	b.n	801998c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801990a:	887a      	ldrh	r2, [r7, #2]
 801990c:	429a      	cmp	r2, r3
 801990e:	d909      	bls.n	8019924 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	8b5b      	ldrh	r3, [r3, #26]
 8019914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019918:	b29a      	uxth	r2, r3
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801991e:	f04f 33ff 	mov.w	r3, #4294967295
 8019922:	e033      	b.n	801998c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801992a:	2b0f      	cmp	r3, #15
 801992c:	d909      	bls.n	8019942 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	8b5b      	ldrh	r3, [r3, #26]
 8019932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019936:	b29a      	uxth	r2, r3
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801993c:	f04f 33ff 	mov.w	r3, #4294967295
 8019940:	e024      	b.n	801998c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019948:	2b00      	cmp	r3, #0
 801994a:	d00f      	beq.n	801996c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019950:	2b00      	cmp	r3, #0
 8019952:	d11a      	bne.n	801998a <tcp_write_checks+0xd6>
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019958:	2b00      	cmp	r3, #0
 801995a:	d116      	bne.n	801998a <tcp_write_checks+0xd6>
 801995c:	4b0d      	ldr	r3, [pc, #52]	@ (8019994 <tcp_write_checks+0xe0>)
 801995e:	f240 1255 	movw	r2, #341	@ 0x155
 8019962:	490f      	ldr	r1, [pc, #60]	@ (80199a0 <tcp_write_checks+0xec>)
 8019964:	480d      	ldr	r0, [pc, #52]	@ (801999c <tcp_write_checks+0xe8>)
 8019966:	f004 ff9b 	bl	801e8a0 <iprintf>
 801996a:	e00e      	b.n	801998a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019970:	2b00      	cmp	r3, #0
 8019972:	d103      	bne.n	801997c <tcp_write_checks+0xc8>
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019978:	2b00      	cmp	r3, #0
 801997a:	d006      	beq.n	801998a <tcp_write_checks+0xd6>
 801997c:	4b05      	ldr	r3, [pc, #20]	@ (8019994 <tcp_write_checks+0xe0>)
 801997e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8019982:	4908      	ldr	r1, [pc, #32]	@ (80199a4 <tcp_write_checks+0xf0>)
 8019984:	4805      	ldr	r0, [pc, #20]	@ (801999c <tcp_write_checks+0xe8>)
 8019986:	f004 ff8b 	bl	801e8a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801998a:	2300      	movs	r3, #0
}
 801998c:	4618      	mov	r0, r3
 801998e:	3708      	adds	r7, #8
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}
 8019994:	080219e8 	.word	0x080219e8
 8019998:	08021af8 	.word	0x08021af8
 801999c:	08021a3c 	.word	0x08021a3c
 80199a0:	08021b18 	.word	0x08021b18
 80199a4:	08021b54 	.word	0x08021b54

080199a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80199a8:	b590      	push	{r4, r7, lr}
 80199aa:	b09b      	sub	sp, #108	@ 0x6c
 80199ac:	af04      	add	r7, sp, #16
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	60b9      	str	r1, [r7, #8]
 80199b2:	4611      	mov	r1, r2
 80199b4:	461a      	mov	r2, r3
 80199b6:	460b      	mov	r3, r1
 80199b8:	80fb      	strh	r3, [r7, #6]
 80199ba:	4613      	mov	r3, r2
 80199bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80199be:	2300      	movs	r3, #0
 80199c0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80199c2:	2300      	movs	r3, #0
 80199c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80199c6:	2300      	movs	r3, #0
 80199c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80199ca:	2300      	movs	r3, #0
 80199cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80199ce:	2300      	movs	r3, #0
 80199d0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80199d2:	2300      	movs	r3, #0
 80199d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80199d8:	2300      	movs	r3, #0
 80199da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80199de:	2300      	movs	r3, #0
 80199e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80199e2:	2300      	movs	r3, #0
 80199e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80199e6:	2300      	movs	r3, #0
 80199e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d109      	bne.n	8019a04 <tcp_write+0x5c>
 80199f0:	4ba4      	ldr	r3, [pc, #656]	@ (8019c84 <tcp_write+0x2dc>)
 80199f2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80199f6:	49a4      	ldr	r1, [pc, #656]	@ (8019c88 <tcp_write+0x2e0>)
 80199f8:	48a4      	ldr	r0, [pc, #656]	@ (8019c8c <tcp_write+0x2e4>)
 80199fa:	f004 ff51 	bl	801e8a0 <iprintf>
 80199fe:	f06f 030f 	mvn.w	r3, #15
 8019a02:	e32a      	b.n	801a05a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019a0a:	085b      	lsrs	r3, r3, #1
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a12:	4293      	cmp	r3, r2
 8019a14:	bf28      	it	cs
 8019a16:	4613      	movcs	r3, r2
 8019a18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d102      	bne.n	8019a26 <tcp_write+0x7e>
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a24:	e000      	b.n	8019a28 <tcp_write+0x80>
 8019a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019a28:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019a2a:	68bb      	ldr	r3, [r7, #8]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d109      	bne.n	8019a44 <tcp_write+0x9c>
 8019a30:	4b94      	ldr	r3, [pc, #592]	@ (8019c84 <tcp_write+0x2dc>)
 8019a32:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019a36:	4996      	ldr	r1, [pc, #600]	@ (8019c90 <tcp_write+0x2e8>)
 8019a38:	4894      	ldr	r0, [pc, #592]	@ (8019c8c <tcp_write+0x2e4>)
 8019a3a:	f004 ff31 	bl	801e8a0 <iprintf>
 8019a3e:	f06f 030f 	mvn.w	r3, #15
 8019a42:	e30a      	b.n	801a05a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019a44:	88fb      	ldrh	r3, [r7, #6]
 8019a46:	4619      	mov	r1, r3
 8019a48:	68f8      	ldr	r0, [r7, #12]
 8019a4a:	f7ff ff33 	bl	80198b4 <tcp_write_checks>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8019a54:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d002      	beq.n	8019a62 <tcp_write+0xba>
    return err;
 8019a5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019a60:	e2fb      	b.n	801a05a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019a68:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	f000 80f6 	beq.w	8019c68 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8019a82:	e002      	b.n	8019a8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d1f8      	bne.n	8019a84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a94:	7a9b      	ldrb	r3, [r3, #10]
 8019a96:	009b      	lsls	r3, r3, #2
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	f003 0304 	and.w	r3, r3, #4
 8019a9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019aa0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019aa4:	891b      	ldrh	r3, [r3, #8]
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	8c3b      	ldrh	r3, [r7, #32]
 8019aaa:	440b      	add	r3, r1
 8019aac:	429a      	cmp	r2, r3
 8019aae:	da06      	bge.n	8019abe <tcp_write+0x116>
 8019ab0:	4b74      	ldr	r3, [pc, #464]	@ (8019c84 <tcp_write+0x2dc>)
 8019ab2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8019ab6:	4977      	ldr	r1, [pc, #476]	@ (8019c94 <tcp_write+0x2ec>)
 8019ab8:	4874      	ldr	r0, [pc, #464]	@ (8019c8c <tcp_write+0x2e4>)
 8019aba:	f004 fef1 	bl	801e8a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ac0:	891a      	ldrh	r2, [r3, #8]
 8019ac2:	8c3b      	ldrh	r3, [r7, #32]
 8019ac4:	4413      	add	r3, r2
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019aca:	1ad3      	subs	r3, r2, r3
 8019acc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019ad4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019ad6:	8a7b      	ldrh	r3, [r7, #18]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d026      	beq.n	8019b2a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019adc:	8a7b      	ldrh	r3, [r7, #18]
 8019ade:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019ae0:	429a      	cmp	r2, r3
 8019ae2:	d206      	bcs.n	8019af2 <tcp_write+0x14a>
 8019ae4:	4b67      	ldr	r3, [pc, #412]	@ (8019c84 <tcp_write+0x2dc>)
 8019ae6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019aea:	496b      	ldr	r1, [pc, #428]	@ (8019c98 <tcp_write+0x2f0>)
 8019aec:	4867      	ldr	r0, [pc, #412]	@ (8019c8c <tcp_write+0x2e4>)
 8019aee:	f004 fed7 	bl	801e8a0 <iprintf>
      seg = last_unsent;
 8019af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019af6:	8a7b      	ldrh	r3, [r7, #18]
 8019af8:	88fa      	ldrh	r2, [r7, #6]
 8019afa:	4293      	cmp	r3, r2
 8019afc:	bf28      	it	cs
 8019afe:	4613      	movcs	r3, r2
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019b04:	4293      	cmp	r3, r2
 8019b06:	bf28      	it	cs
 8019b08:	4613      	movcs	r3, r2
 8019b0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8019b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b12:	4413      	add	r3, r2
 8019b14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8019b18:	8a7a      	ldrh	r2, [r7, #18]
 8019b1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b1c:	1ad3      	subs	r3, r2, r3
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019b22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019b24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b26:	1ad3      	subs	r3, r2, r3
 8019b28:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019b2a:	8a7b      	ldrh	r3, [r7, #18]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d00b      	beq.n	8019b48 <tcp_write+0x1a0>
 8019b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b34:	88fb      	ldrh	r3, [r7, #6]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d006      	beq.n	8019b48 <tcp_write+0x1a0>
 8019b3a:	4b52      	ldr	r3, [pc, #328]	@ (8019c84 <tcp_write+0x2dc>)
 8019b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b40:	4956      	ldr	r1, [pc, #344]	@ (8019c9c <tcp_write+0x2f4>)
 8019b42:	4852      	ldr	r0, [pc, #328]	@ (8019c8c <tcp_write+0x2e4>)
 8019b44:	f004 feac 	bl	801e8a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b4c:	88fb      	ldrh	r3, [r7, #6]
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	f080 8167 	bcs.w	8019e22 <tcp_write+0x47a>
 8019b54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	f000 8163 	beq.w	8019e22 <tcp_write+0x47a>
 8019b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b5e:	891b      	ldrh	r3, [r3, #8]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	f000 815e 	beq.w	8019e22 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019b66:	88fa      	ldrh	r2, [r7, #6]
 8019b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b6c:	1ad2      	subs	r2, r2, r3
 8019b6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019b70:	4293      	cmp	r3, r2
 8019b72:	bfa8      	it	ge
 8019b74:	4613      	movge	r3, r2
 8019b76:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019b7c:	797b      	ldrb	r3, [r7, #5]
 8019b7e:	f003 0301 	and.w	r3, r3, #1
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d027      	beq.n	8019bd6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019b86:	f107 0012 	add.w	r0, r7, #18
 8019b8a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019b8c:	8bf9      	ldrh	r1, [r7, #30]
 8019b8e:	2301      	movs	r3, #1
 8019b90:	9302      	str	r3, [sp, #8]
 8019b92:	797b      	ldrb	r3, [r7, #5]
 8019b94:	9301      	str	r3, [sp, #4]
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	9300      	str	r3, [sp, #0]
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2000      	movs	r0, #0
 8019b9e:	f7ff fe0f 	bl	80197c0 <tcp_pbuf_prealloc>
 8019ba2:	6578      	str	r0, [r7, #84]	@ 0x54
 8019ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	f000 8225 	beq.w	8019ff6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bae:	6858      	ldr	r0, [r3, #4]
 8019bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019bb4:	68ba      	ldr	r2, [r7, #8]
 8019bb6:	4413      	add	r3, r2
 8019bb8:	8bfa      	ldrh	r2, [r7, #30]
 8019bba:	4619      	mov	r1, r3
 8019bbc:	f004 ffa1 	bl	801eb02 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019bc0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019bc2:	f7fb f9bd 	bl	8014f40 <pbuf_clen>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	461a      	mov	r2, r3
 8019bca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019bce:	4413      	add	r3, r2
 8019bd0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019bd4:	e041      	b.n	8019c5a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bd8:	685b      	ldr	r3, [r3, #4]
 8019bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bdc:	e002      	b.n	8019be4 <tcp_write+0x23c>
 8019bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8019be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d1f8      	bne.n	8019bde <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019bee:	7b1b      	ldrb	r3, [r3, #12]
 8019bf0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d115      	bne.n	8019c24 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019bfa:	685b      	ldr	r3, [r3, #4]
 8019bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bfe:	8952      	ldrh	r2, [r2, #10]
 8019c00:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019c02:	68ba      	ldr	r2, [r7, #8]
 8019c04:	429a      	cmp	r2, r3
 8019c06:	d10d      	bne.n	8019c24 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019c08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d006      	beq.n	8019c1e <tcp_write+0x276>
 8019c10:	4b1c      	ldr	r3, [pc, #112]	@ (8019c84 <tcp_write+0x2dc>)
 8019c12:	f240 2231 	movw	r2, #561	@ 0x231
 8019c16:	4922      	ldr	r1, [pc, #136]	@ (8019ca0 <tcp_write+0x2f8>)
 8019c18:	481c      	ldr	r0, [pc, #112]	@ (8019c8c <tcp_write+0x2e4>)
 8019c1a:	f004 fe41 	bl	801e8a0 <iprintf>
          extendlen = seglen;
 8019c1e:	8bfb      	ldrh	r3, [r7, #30]
 8019c20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8019c22:	e01a      	b.n	8019c5a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019c24:	8bfb      	ldrh	r3, [r7, #30]
 8019c26:	2201      	movs	r2, #1
 8019c28:	4619      	mov	r1, r3
 8019c2a:	2000      	movs	r0, #0
 8019c2c:	f7fa fe16 	bl	801485c <pbuf_alloc>
 8019c30:	6578      	str	r0, [r7, #84]	@ 0x54
 8019c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f000 81e0 	beq.w	8019ffa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c3e:	68ba      	ldr	r2, [r7, #8]
 8019c40:	441a      	add	r2, r3
 8019c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019c46:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019c48:	f7fb f97a 	bl	8014f40 <pbuf_clen>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	461a      	mov	r2, r3
 8019c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019c54:	4413      	add	r3, r2
 8019c56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019c5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019c5e:	8bfb      	ldrh	r3, [r7, #30]
 8019c60:	4413      	add	r3, r2
 8019c62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019c66:	e0dc      	b.n	8019e22 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	f000 80d7 	beq.w	8019e22 <tcp_write+0x47a>
 8019c74:	4b03      	ldr	r3, [pc, #12]	@ (8019c84 <tcp_write+0x2dc>)
 8019c76:	f240 224a 	movw	r2, #586	@ 0x24a
 8019c7a:	490a      	ldr	r1, [pc, #40]	@ (8019ca4 <tcp_write+0x2fc>)
 8019c7c:	4803      	ldr	r0, [pc, #12]	@ (8019c8c <tcp_write+0x2e4>)
 8019c7e:	f004 fe0f 	bl	801e8a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019c82:	e0ce      	b.n	8019e22 <tcp_write+0x47a>
 8019c84:	080219e8 	.word	0x080219e8
 8019c88:	08021b88 	.word	0x08021b88
 8019c8c:	08021a3c 	.word	0x08021a3c
 8019c90:	08021ba0 	.word	0x08021ba0
 8019c94:	08021bd4 	.word	0x08021bd4
 8019c98:	08021bec 	.word	0x08021bec
 8019c9c:	08021c0c 	.word	0x08021c0c
 8019ca0:	08021c2c 	.word	0x08021c2c
 8019ca4:	08021c58 	.word	0x08021c58
    struct pbuf *p;
    u16_t left = len - pos;
 8019ca8:	88fa      	ldrh	r2, [r7, #6]
 8019caa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019cae:	1ad3      	subs	r3, r2, r3
 8019cb0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019cb2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019cb6:	b29b      	uxth	r3, r3
 8019cb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019cba:	1ad3      	subs	r3, r2, r3
 8019cbc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019cbe:	8b7a      	ldrh	r2, [r7, #26]
 8019cc0:	8bbb      	ldrh	r3, [r7, #28]
 8019cc2:	4293      	cmp	r3, r2
 8019cc4:	bf28      	it	cs
 8019cc6:	4613      	movcs	r3, r2
 8019cc8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019cca:	797b      	ldrb	r3, [r7, #5]
 8019ccc:	f003 0301 	and.w	r3, r3, #1
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d036      	beq.n	8019d42 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019cd8:	b29a      	uxth	r2, r3
 8019cda:	8b3b      	ldrh	r3, [r7, #24]
 8019cdc:	4413      	add	r3, r2
 8019cde:	b299      	uxth	r1, r3
 8019ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bf0c      	ite	eq
 8019ce6:	2301      	moveq	r3, #1
 8019ce8:	2300      	movne	r3, #0
 8019cea:	b2db      	uxtb	r3, r3
 8019cec:	f107 0012 	add.w	r0, r7, #18
 8019cf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019cf2:	9302      	str	r3, [sp, #8]
 8019cf4:	797b      	ldrb	r3, [r7, #5]
 8019cf6:	9301      	str	r3, [sp, #4]
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	2036      	movs	r0, #54	@ 0x36
 8019d00:	f7ff fd5e 	bl	80197c0 <tcp_pbuf_prealloc>
 8019d04:	6338      	str	r0, [r7, #48]	@ 0x30
 8019d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	f000 8178 	beq.w	8019ffe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d10:	895b      	ldrh	r3, [r3, #10]
 8019d12:	8b3a      	ldrh	r2, [r7, #24]
 8019d14:	429a      	cmp	r2, r3
 8019d16:	d906      	bls.n	8019d26 <tcp_write+0x37e>
 8019d18:	4b8c      	ldr	r3, [pc, #560]	@ (8019f4c <tcp_write+0x5a4>)
 8019d1a:	f240 2266 	movw	r2, #614	@ 0x266
 8019d1e:	498c      	ldr	r1, [pc, #560]	@ (8019f50 <tcp_write+0x5a8>)
 8019d20:	488c      	ldr	r0, [pc, #560]	@ (8019f54 <tcp_write+0x5ac>)
 8019d22:	f004 fdbd 	bl	801e8a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d28:	685a      	ldr	r2, [r3, #4]
 8019d2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019d2e:	18d0      	adds	r0, r2, r3
 8019d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019d34:	68ba      	ldr	r2, [r7, #8]
 8019d36:	4413      	add	r3, r2
 8019d38:	8b3a      	ldrh	r2, [r7, #24]
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	f004 fee1 	bl	801eb02 <memcpy>
 8019d40:	e02f      	b.n	8019da2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019d42:	8a7b      	ldrh	r3, [r7, #18]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d006      	beq.n	8019d56 <tcp_write+0x3ae>
 8019d48:	4b80      	ldr	r3, [pc, #512]	@ (8019f4c <tcp_write+0x5a4>)
 8019d4a:	f240 2271 	movw	r2, #625	@ 0x271
 8019d4e:	4982      	ldr	r1, [pc, #520]	@ (8019f58 <tcp_write+0x5b0>)
 8019d50:	4880      	ldr	r0, [pc, #512]	@ (8019f54 <tcp_write+0x5ac>)
 8019d52:	f004 fda5 	bl	801e8a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019d56:	8b3b      	ldrh	r3, [r7, #24]
 8019d58:	2201      	movs	r2, #1
 8019d5a:	4619      	mov	r1, r3
 8019d5c:	2036      	movs	r0, #54	@ 0x36
 8019d5e:	f7fa fd7d 	bl	801485c <pbuf_alloc>
 8019d62:	6178      	str	r0, [r7, #20]
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	f000 814b 	beq.w	801a002 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019d70:	68ba      	ldr	r2, [r7, #8]
 8019d72:	441a      	add	r2, r3
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019d78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d82:	4619      	mov	r1, r3
 8019d84:	2036      	movs	r0, #54	@ 0x36
 8019d86:	f7fa fd69 	bl	801485c <pbuf_alloc>
 8019d8a:	6338      	str	r0, [r7, #48]	@ 0x30
 8019d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d103      	bne.n	8019d9a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019d92:	6978      	ldr	r0, [r7, #20]
 8019d94:	f7fb f846 	bl	8014e24 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019d98:	e136      	b.n	801a008 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019d9a:	6979      	ldr	r1, [r7, #20]
 8019d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019d9e:	f7fb f90f 	bl	8014fc0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019da4:	f7fb f8cc 	bl	8014f40 <pbuf_clen>
 8019da8:	4603      	mov	r3, r0
 8019daa:	461a      	mov	r2, r3
 8019dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019db0:	4413      	add	r3, r2
 8019db2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019dba:	2b10      	cmp	r3, #16
 8019dbc:	d903      	bls.n	8019dc6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019dc0:	f7fb f830 	bl	8014e24 <pbuf_free>
      goto memerr;
 8019dc4:	e120      	b.n	801a008 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019dca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019dce:	441a      	add	r2, r3
 8019dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019dd4:	9300      	str	r3, [sp, #0]
 8019dd6:	4613      	mov	r3, r2
 8019dd8:	2200      	movs	r2, #0
 8019dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019ddc:	68f8      	ldr	r0, [r7, #12]
 8019dde:	f7ff fc53 	bl	8019688 <tcp_create_segment>
 8019de2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	f000 810d 	beq.w	801a006 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d102      	bne.n	8019df8 <tcp_write+0x450>
      queue = seg;
 8019df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019df6:	e00c      	b.n	8019e12 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d106      	bne.n	8019e0c <tcp_write+0x464>
 8019dfe:	4b53      	ldr	r3, [pc, #332]	@ (8019f4c <tcp_write+0x5a4>)
 8019e00:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019e04:	4955      	ldr	r1, [pc, #340]	@ (8019f5c <tcp_write+0x5b4>)
 8019e06:	4853      	ldr	r0, [pc, #332]	@ (8019f54 <tcp_write+0x5ac>)
 8019e08:	f004 fd4a 	bl	801e8a0 <iprintf>
      prev_seg->next = seg;
 8019e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019e10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e14:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019e16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019e1a:	8b3b      	ldrh	r3, [r7, #24]
 8019e1c:	4413      	add	r3, r2
 8019e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8019e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019e26:	88fb      	ldrh	r3, [r7, #6]
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	f4ff af3d 	bcc.w	8019ca8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019e2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d02c      	beq.n	8019e8e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e36:	685b      	ldr	r3, [r3, #4]
 8019e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e3a:	e01e      	b.n	8019e7a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e3e:	891a      	ldrh	r2, [r3, #8]
 8019e40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019e42:	4413      	add	r3, r2
 8019e44:	b29a      	uxth	r2, r3
 8019e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d110      	bne.n	8019e74 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e58:	8952      	ldrh	r2, [r2, #10]
 8019e5a:	4413      	add	r3, r2
 8019e5c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019e5e:	68b9      	ldr	r1, [r7, #8]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f004 fe4e 	bl	801eb02 <memcpy>
        p->len += oversize_used;
 8019e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e68:	895a      	ldrh	r2, [r3, #10]
 8019e6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019e6c:	4413      	add	r3, r2
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d1dd      	bne.n	8019e3c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e82:	891a      	ldrh	r2, [r3, #8]
 8019e84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019e86:	4413      	add	r3, r2
 8019e88:	b29a      	uxth	r2, r3
 8019e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019e8e:	8a7a      	ldrh	r2, [r7, #18]
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d018      	beq.n	8019ece <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d106      	bne.n	8019eb0 <tcp_write+0x508>
 8019ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8019f4c <tcp_write+0x5a4>)
 8019ea4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019ea8:	492d      	ldr	r1, [pc, #180]	@ (8019f60 <tcp_write+0x5b8>)
 8019eaa:	482a      	ldr	r0, [pc, #168]	@ (8019f54 <tcp_write+0x5ac>)
 8019eac:	f004 fcf8 	bl	801e8a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7fb f882 	bl	8014fc0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ebe:	891a      	ldrh	r2, [r3, #8]
 8019ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ec2:	891b      	ldrh	r3, [r3, #8]
 8019ec4:	4413      	add	r3, r2
 8019ec6:	b29a      	uxth	r2, r3
 8019ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eca:	811a      	strh	r2, [r3, #8]
 8019ecc:	e037      	b.n	8019f3e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019ece:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d034      	beq.n	8019f3e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d003      	beq.n	8019ee2 <tcp_write+0x53a>
 8019eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d106      	bne.n	8019ef0 <tcp_write+0x548>
 8019ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8019f4c <tcp_write+0x5a4>)
 8019ee4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019ee8:	491e      	ldr	r1, [pc, #120]	@ (8019f64 <tcp_write+0x5bc>)
 8019eea:	481a      	ldr	r0, [pc, #104]	@ (8019f54 <tcp_write+0x5ac>)
 8019eec:	f004 fcd8 	bl	801e8a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019ef6:	e009      	b.n	8019f0c <tcp_write+0x564>
      p->tot_len += extendlen;
 8019ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019efa:	891a      	ldrh	r2, [r3, #8]
 8019efc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019efe:	4413      	add	r3, r2
 8019f00:	b29a      	uxth	r2, r3
 8019f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f04:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d1f1      	bne.n	8019ef8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f16:	891a      	ldrh	r2, [r3, #8]
 8019f18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019f1a:	4413      	add	r3, r2
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f20:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f24:	895a      	ldrh	r2, [r3, #10]
 8019f26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019f28:	4413      	add	r3, r2
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f2e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f32:	891a      	ldrh	r2, [r3, #8]
 8019f34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019f36:	4413      	add	r3, r2
 8019f38:	b29a      	uxth	r2, r3
 8019f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f3c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d111      	bne.n	8019f68 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019f48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019f4a:	e010      	b.n	8019f6e <tcp_write+0x5c6>
 8019f4c:	080219e8 	.word	0x080219e8
 8019f50:	08021c88 	.word	0x08021c88
 8019f54:	08021a3c 	.word	0x08021a3c
 8019f58:	08021cc8 	.word	0x08021cc8
 8019f5c:	08021cd8 	.word	0x08021cd8
 8019f60:	08021cec 	.word	0x08021cec
 8019f64:	08021d24 	.word	0x08021d24
  } else {
    last_unsent->next = queue;
 8019f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019f6c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019f72:	88fb      	ldrh	r3, [r7, #6]
 8019f74:	441a      	add	r2, r3
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019f80:	88fb      	ldrh	r3, [r7, #6]
 8019f82:	1ad3      	subs	r3, r2, r3
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019f92:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d00e      	beq.n	8019fbe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d10a      	bne.n	8019fbe <tcp_write+0x616>
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d106      	bne.n	8019fbe <tcp_write+0x616>
 8019fb0:	4b2c      	ldr	r3, [pc, #176]	@ (801a064 <tcp_write+0x6bc>)
 8019fb2:	f240 3212 	movw	r2, #786	@ 0x312
 8019fb6:	492c      	ldr	r1, [pc, #176]	@ (801a068 <tcp_write+0x6c0>)
 8019fb8:	482c      	ldr	r0, [pc, #176]	@ (801a06c <tcp_write+0x6c4>)
 8019fba:	f004 fc71 	bl	801e8a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d016      	beq.n	8019ff2 <tcp_write+0x64a>
 8019fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d012      	beq.n	8019ff2 <tcp_write+0x64a>
 8019fcc:	797b      	ldrb	r3, [r7, #5]
 8019fce:	f003 0302 	and.w	r3, r3, #2
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d10d      	bne.n	8019ff2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fd8:	68db      	ldr	r3, [r3, #12]
 8019fda:	899b      	ldrh	r3, [r3, #12]
 8019fdc:	b29c      	uxth	r4, r3
 8019fde:	2008      	movs	r0, #8
 8019fe0:	f7f9 fa66 	bl	80134b0 <lwip_htons>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fea:	68db      	ldr	r3, [r3, #12]
 8019fec:	4322      	orrs	r2, r4
 8019fee:	b292      	uxth	r2, r2
 8019ff0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	e031      	b.n	801a05a <tcp_write+0x6b2>
          goto memerr;
 8019ff6:	bf00      	nop
 8019ff8:	e006      	b.n	801a008 <tcp_write+0x660>
            goto memerr;
 8019ffa:	bf00      	nop
 8019ffc:	e004      	b.n	801a008 <tcp_write+0x660>
        goto memerr;
 8019ffe:	bf00      	nop
 801a000:	e002      	b.n	801a008 <tcp_write+0x660>
        goto memerr;
 801a002:	bf00      	nop
 801a004:	e000      	b.n	801a008 <tcp_write+0x660>
      goto memerr;
 801a006:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	8b5b      	ldrh	r3, [r3, #26]
 801a00c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a010:	b29a      	uxth	r2, r3
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d002      	beq.n	801a022 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801a01c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a01e:	f7fa ff01 	bl	8014e24 <pbuf_free>
  }
  if (queue != NULL) {
 801a022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a024:	2b00      	cmp	r3, #0
 801a026:	d002      	beq.n	801a02e <tcp_write+0x686>
    tcp_segs_free(queue);
 801a028:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a02a:	f7fc fb6f 	bl	801670c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a034:	2b00      	cmp	r3, #0
 801a036:	d00e      	beq.n	801a056 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d10a      	bne.n	801a056 <tcp_write+0x6ae>
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a044:	2b00      	cmp	r3, #0
 801a046:	d106      	bne.n	801a056 <tcp_write+0x6ae>
 801a048:	4b06      	ldr	r3, [pc, #24]	@ (801a064 <tcp_write+0x6bc>)
 801a04a:	f240 3227 	movw	r2, #807	@ 0x327
 801a04e:	4906      	ldr	r1, [pc, #24]	@ (801a068 <tcp_write+0x6c0>)
 801a050:	4806      	ldr	r0, [pc, #24]	@ (801a06c <tcp_write+0x6c4>)
 801a052:	f004 fc25 	bl	801e8a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a056:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a05a:	4618      	mov	r0, r3
 801a05c:	375c      	adds	r7, #92	@ 0x5c
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd90      	pop	{r4, r7, pc}
 801a062:	bf00      	nop
 801a064:	080219e8 	.word	0x080219e8
 801a068:	08021d5c 	.word	0x08021d5c
 801a06c:	08021a3c 	.word	0x08021a3c

0801a070 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a070:	b590      	push	{r4, r7, lr}
 801a072:	b08b      	sub	sp, #44	@ 0x2c
 801a074:	af02      	add	r7, sp, #8
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	460b      	mov	r3, r1
 801a07a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a07c:	2300      	movs	r3, #0
 801a07e:	61fb      	str	r3, [r7, #28]
 801a080:	2300      	movs	r3, #0
 801a082:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a084:	2300      	movs	r3, #0
 801a086:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d106      	bne.n	801a09c <tcp_split_unsent_seg+0x2c>
 801a08e:	4b95      	ldr	r3, [pc, #596]	@ (801a2e4 <tcp_split_unsent_seg+0x274>)
 801a090:	f240 324b 	movw	r2, #843	@ 0x34b
 801a094:	4994      	ldr	r1, [pc, #592]	@ (801a2e8 <tcp_split_unsent_seg+0x278>)
 801a096:	4895      	ldr	r0, [pc, #596]	@ (801a2ec <tcp_split_unsent_seg+0x27c>)
 801a098:	f004 fc02 	bl	801e8a0 <iprintf>

  useg = pcb->unsent;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a0a2:	697b      	ldr	r3, [r7, #20]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d102      	bne.n	801a0ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ac:	e116      	b.n	801a2dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a0ae:	887b      	ldrh	r3, [r7, #2]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d109      	bne.n	801a0c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a0b4:	4b8b      	ldr	r3, [pc, #556]	@ (801a2e4 <tcp_split_unsent_seg+0x274>)
 801a0b6:	f240 3253 	movw	r2, #851	@ 0x353
 801a0ba:	498d      	ldr	r1, [pc, #564]	@ (801a2f0 <tcp_split_unsent_seg+0x280>)
 801a0bc:	488b      	ldr	r0, [pc, #556]	@ (801a2ec <tcp_split_unsent_seg+0x27c>)
 801a0be:	f004 fbef 	bl	801e8a0 <iprintf>
    return ERR_VAL;
 801a0c2:	f06f 0305 	mvn.w	r3, #5
 801a0c6:	e109      	b.n	801a2dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a0c8:	697b      	ldr	r3, [r7, #20]
 801a0ca:	891b      	ldrh	r3, [r3, #8]
 801a0cc:	887a      	ldrh	r2, [r7, #2]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	d301      	bcc.n	801a0d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	e102      	b.n	801a2dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a0da:	887a      	ldrh	r2, [r7, #2]
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	d906      	bls.n	801a0ee <tcp_split_unsent_seg+0x7e>
 801a0e0:	4b80      	ldr	r3, [pc, #512]	@ (801a2e4 <tcp_split_unsent_seg+0x274>)
 801a0e2:	f240 325b 	movw	r2, #859	@ 0x35b
 801a0e6:	4983      	ldr	r1, [pc, #524]	@ (801a2f4 <tcp_split_unsent_seg+0x284>)
 801a0e8:	4880      	ldr	r0, [pc, #512]	@ (801a2ec <tcp_split_unsent_seg+0x27c>)
 801a0ea:	f004 fbd9 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	891b      	ldrh	r3, [r3, #8]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d106      	bne.n	801a104 <tcp_split_unsent_seg+0x94>
 801a0f6:	4b7b      	ldr	r3, [pc, #492]	@ (801a2e4 <tcp_split_unsent_seg+0x274>)
 801a0f8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801a0fc:	497e      	ldr	r1, [pc, #504]	@ (801a2f8 <tcp_split_unsent_seg+0x288>)
 801a0fe:	487b      	ldr	r0, [pc, #492]	@ (801a2ec <tcp_split_unsent_seg+0x27c>)
 801a100:	f004 fbce 	bl	801e8a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a104:	697b      	ldr	r3, [r7, #20]
 801a106:	7a9b      	ldrb	r3, [r3, #10]
 801a108:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a10a:	7bfb      	ldrb	r3, [r7, #15]
 801a10c:	009b      	lsls	r3, r3, #2
 801a10e:	b2db      	uxtb	r3, r3
 801a110:	f003 0304 	and.w	r3, r3, #4
 801a114:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a116:	697b      	ldr	r3, [r7, #20]
 801a118:	891a      	ldrh	r2, [r3, #8]
 801a11a:	887b      	ldrh	r3, [r7, #2]
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a120:	7bbb      	ldrb	r3, [r7, #14]
 801a122:	b29a      	uxth	r2, r3
 801a124:	89bb      	ldrh	r3, [r7, #12]
 801a126:	4413      	add	r3, r2
 801a128:	b29b      	uxth	r3, r3
 801a12a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a12e:	4619      	mov	r1, r3
 801a130:	2036      	movs	r0, #54	@ 0x36
 801a132:	f7fa fb93 	bl	801485c <pbuf_alloc>
 801a136:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a138:	693b      	ldr	r3, [r7, #16]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f000 80b7 	beq.w	801a2ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a140:	697b      	ldr	r3, [r7, #20]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	891a      	ldrh	r2, [r3, #8]
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	891b      	ldrh	r3, [r3, #8]
 801a14a:	1ad3      	subs	r3, r2, r3
 801a14c:	b29a      	uxth	r2, r3
 801a14e:	887b      	ldrh	r3, [r7, #2]
 801a150:	4413      	add	r3, r2
 801a152:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a154:	697b      	ldr	r3, [r7, #20]
 801a156:	6858      	ldr	r0, [r3, #4]
 801a158:	693b      	ldr	r3, [r7, #16]
 801a15a:	685a      	ldr	r2, [r3, #4]
 801a15c:	7bbb      	ldrb	r3, [r7, #14]
 801a15e:	18d1      	adds	r1, r2, r3
 801a160:	897b      	ldrh	r3, [r7, #10]
 801a162:	89ba      	ldrh	r2, [r7, #12]
 801a164:	f7fb f854 	bl	8015210 <pbuf_copy_partial>
 801a168:	4603      	mov	r3, r0
 801a16a:	461a      	mov	r2, r3
 801a16c:	89bb      	ldrh	r3, [r7, #12]
 801a16e:	4293      	cmp	r3, r2
 801a170:	f040 809f 	bne.w	801a2b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a174:	697b      	ldr	r3, [r7, #20]
 801a176:	68db      	ldr	r3, [r3, #12]
 801a178:	899b      	ldrh	r3, [r3, #12]
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	4618      	mov	r0, r3
 801a17e:	f7f9 f997 	bl	80134b0 <lwip_htons>
 801a182:	4603      	mov	r3, r0
 801a184:	b2db      	uxtb	r3, r3
 801a186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a18a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a18c:	2300      	movs	r3, #0
 801a18e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a190:	7efb      	ldrb	r3, [r7, #27]
 801a192:	f003 0308 	and.w	r3, r3, #8
 801a196:	2b00      	cmp	r3, #0
 801a198:	d007      	beq.n	801a1aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a19a:	7efb      	ldrb	r3, [r7, #27]
 801a19c:	f023 0308 	bic.w	r3, r3, #8
 801a1a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a1a2:	7ebb      	ldrb	r3, [r7, #26]
 801a1a4:	f043 0308 	orr.w	r3, r3, #8
 801a1a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a1aa:	7efb      	ldrb	r3, [r7, #27]
 801a1ac:	f003 0301 	and.w	r3, r3, #1
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d007      	beq.n	801a1c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a1b4:	7efb      	ldrb	r3, [r7, #27]
 801a1b6:	f023 0301 	bic.w	r3, r3, #1
 801a1ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a1bc:	7ebb      	ldrb	r3, [r7, #26]
 801a1be:	f043 0301 	orr.w	r3, r3, #1
 801a1c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	68db      	ldr	r3, [r3, #12]
 801a1c8:	685b      	ldr	r3, [r3, #4]
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7f9 f985 	bl	80134da <lwip_htonl>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	887b      	ldrh	r3, [r7, #2]
 801a1d4:	18d1      	adds	r1, r2, r3
 801a1d6:	7eba      	ldrb	r2, [r7, #26]
 801a1d8:	7bfb      	ldrb	r3, [r7, #15]
 801a1da:	9300      	str	r3, [sp, #0]
 801a1dc:	460b      	mov	r3, r1
 801a1de:	6939      	ldr	r1, [r7, #16]
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f7ff fa51 	bl	8019688 <tcp_create_segment>
 801a1e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d063      	beq.n	801a2b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7fa fea4 	bl	8014f40 <pbuf_clen>
 801a1f8:	4603      	mov	r3, r0
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a202:	1a9b      	subs	r3, r3, r2
 801a204:	b29a      	uxth	r2, r3
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a20c:	697b      	ldr	r3, [r7, #20]
 801a20e:	6858      	ldr	r0, [r3, #4]
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	685b      	ldr	r3, [r3, #4]
 801a214:	891a      	ldrh	r2, [r3, #8]
 801a216:	89bb      	ldrh	r3, [r7, #12]
 801a218:	1ad3      	subs	r3, r2, r3
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	4619      	mov	r1, r3
 801a21e:	f7fa fc7b 	bl	8014b18 <pbuf_realloc>
  useg->len -= remainder;
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	891a      	ldrh	r2, [r3, #8]
 801a226:	89bb      	ldrh	r3, [r7, #12]
 801a228:	1ad3      	subs	r3, r2, r3
 801a22a:	b29a      	uxth	r2, r3
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	68db      	ldr	r3, [r3, #12]
 801a234:	899b      	ldrh	r3, [r3, #12]
 801a236:	b29c      	uxth	r4, r3
 801a238:	7efb      	ldrb	r3, [r7, #27]
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	4618      	mov	r0, r3
 801a23e:	f7f9 f937 	bl	80134b0 <lwip_htons>
 801a242:	4603      	mov	r3, r0
 801a244:	461a      	mov	r2, r3
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	68db      	ldr	r3, [r3, #12]
 801a24a:	4322      	orrs	r2, r4
 801a24c:	b292      	uxth	r2, r2
 801a24e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a250:	697b      	ldr	r3, [r7, #20]
 801a252:	685b      	ldr	r3, [r3, #4]
 801a254:	4618      	mov	r0, r3
 801a256:	f7fa fe73 	bl	8014f40 <pbuf_clen>
 801a25a:	4603      	mov	r3, r0
 801a25c:	461a      	mov	r2, r3
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a264:	4413      	add	r3, r2
 801a266:	b29a      	uxth	r2, r3
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a26e:	69fb      	ldr	r3, [r7, #28]
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	4618      	mov	r0, r3
 801a274:	f7fa fe64 	bl	8014f40 <pbuf_clen>
 801a278:	4603      	mov	r3, r0
 801a27a:	461a      	mov	r2, r3
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a282:	4413      	add	r3, r2
 801a284:	b29a      	uxth	r2, r3
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a28c:	697b      	ldr	r3, [r7, #20]
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	69fb      	ldr	r3, [r7, #28]
 801a292:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	69fa      	ldr	r2, [r7, #28]
 801a298:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a29a:	69fb      	ldr	r3, [r7, #28]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d103      	bne.n	801a2aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	e016      	b.n	801a2dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a2ae:	bf00      	nop
 801a2b0:	e002      	b.n	801a2b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a2b2:	bf00      	nop
 801a2b4:	e000      	b.n	801a2b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a2b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a2b8:	69fb      	ldr	r3, [r7, #28]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d006      	beq.n	801a2cc <tcp_split_unsent_seg+0x25c>
 801a2be:	4b09      	ldr	r3, [pc, #36]	@ (801a2e4 <tcp_split_unsent_seg+0x274>)
 801a2c0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a2c4:	490d      	ldr	r1, [pc, #52]	@ (801a2fc <tcp_split_unsent_seg+0x28c>)
 801a2c6:	4809      	ldr	r0, [pc, #36]	@ (801a2ec <tcp_split_unsent_seg+0x27c>)
 801a2c8:	f004 faea 	bl	801e8a0 <iprintf>
  if (p != NULL) {
 801a2cc:	693b      	ldr	r3, [r7, #16]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d002      	beq.n	801a2d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a2d2:	6938      	ldr	r0, [r7, #16]
 801a2d4:	f7fa fda6 	bl	8014e24 <pbuf_free>
  }

  return ERR_MEM;
 801a2d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a2dc:	4618      	mov	r0, r3
 801a2de:	3724      	adds	r7, #36	@ 0x24
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd90      	pop	{r4, r7, pc}
 801a2e4:	080219e8 	.word	0x080219e8
 801a2e8:	08021d7c 	.word	0x08021d7c
 801a2ec:	08021a3c 	.word	0x08021a3c
 801a2f0:	08021da0 	.word	0x08021da0
 801a2f4:	08021dc4 	.word	0x08021dc4
 801a2f8:	08021dd4 	.word	0x08021dd4
 801a2fc:	08021de4 	.word	0x08021de4

0801a300 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a300:	b590      	push	{r4, r7, lr}
 801a302:	b085      	sub	sp, #20
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d106      	bne.n	801a31c <tcp_send_fin+0x1c>
 801a30e:	4b21      	ldr	r3, [pc, #132]	@ (801a394 <tcp_send_fin+0x94>)
 801a310:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a314:	4920      	ldr	r1, [pc, #128]	@ (801a398 <tcp_send_fin+0x98>)
 801a316:	4821      	ldr	r0, [pc, #132]	@ (801a39c <tcp_send_fin+0x9c>)
 801a318:	f004 fac2 	bl	801e8a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a320:	2b00      	cmp	r3, #0
 801a322:	d02e      	beq.n	801a382 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a328:	60fb      	str	r3, [r7, #12]
 801a32a:	e002      	b.n	801a332 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d1f8      	bne.n	801a32c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	68db      	ldr	r3, [r3, #12]
 801a33e:	899b      	ldrh	r3, [r3, #12]
 801a340:	b29b      	uxth	r3, r3
 801a342:	4618      	mov	r0, r3
 801a344:	f7f9 f8b4 	bl	80134b0 <lwip_htons>
 801a348:	4603      	mov	r3, r0
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	f003 0307 	and.w	r3, r3, #7
 801a350:	2b00      	cmp	r3, #0
 801a352:	d116      	bne.n	801a382 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	68db      	ldr	r3, [r3, #12]
 801a358:	899b      	ldrh	r3, [r3, #12]
 801a35a:	b29c      	uxth	r4, r3
 801a35c:	2001      	movs	r0, #1
 801a35e:	f7f9 f8a7 	bl	80134b0 <lwip_htons>
 801a362:	4603      	mov	r3, r0
 801a364:	461a      	mov	r2, r3
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	68db      	ldr	r3, [r3, #12]
 801a36a:	4322      	orrs	r2, r4
 801a36c:	b292      	uxth	r2, r2
 801a36e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	8b5b      	ldrh	r3, [r3, #26]
 801a374:	f043 0320 	orr.w	r3, r3, #32
 801a378:	b29a      	uxth	r2, r3
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a37e:	2300      	movs	r3, #0
 801a380:	e004      	b.n	801a38c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a382:	2101      	movs	r1, #1
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f000 f80b 	bl	801a3a0 <tcp_enqueue_flags>
 801a38a:	4603      	mov	r3, r0
}
 801a38c:	4618      	mov	r0, r3
 801a38e:	3714      	adds	r7, #20
 801a390:	46bd      	mov	sp, r7
 801a392:	bd90      	pop	{r4, r7, pc}
 801a394:	080219e8 	.word	0x080219e8
 801a398:	08021df0 	.word	0x08021df0
 801a39c:	08021a3c 	.word	0x08021a3c

0801a3a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b08a      	sub	sp, #40	@ 0x28
 801a3a4:	af02      	add	r7, sp, #8
 801a3a6:	6078      	str	r0, [r7, #4]
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a3b4:	78fb      	ldrb	r3, [r7, #3]
 801a3b6:	f003 0303 	and.w	r3, r3, #3
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d106      	bne.n	801a3cc <tcp_enqueue_flags+0x2c>
 801a3be:	4b67      	ldr	r3, [pc, #412]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a3c0:	f240 4211 	movw	r2, #1041	@ 0x411
 801a3c4:	4966      	ldr	r1, [pc, #408]	@ (801a560 <tcp_enqueue_flags+0x1c0>)
 801a3c6:	4867      	ldr	r0, [pc, #412]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a3c8:	f004 fa6a 	bl	801e8a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d106      	bne.n	801a3e0 <tcp_enqueue_flags+0x40>
 801a3d2:	4b62      	ldr	r3, [pc, #392]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a3d4:	f240 4213 	movw	r2, #1043	@ 0x413
 801a3d8:	4963      	ldr	r1, [pc, #396]	@ (801a568 <tcp_enqueue_flags+0x1c8>)
 801a3da:	4862      	ldr	r0, [pc, #392]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a3dc:	f004 fa60 	bl	801e8a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a3e0:	78fb      	ldrb	r3, [r7, #3]
 801a3e2:	f003 0302 	and.w	r3, r3, #2
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d001      	beq.n	801a3ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a3ee:	7ffb      	ldrb	r3, [r7, #31]
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	b2db      	uxtb	r3, r3
 801a3f4:	f003 0304 	and.w	r3, r3, #4
 801a3f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a3fa:	7dfb      	ldrb	r3, [r7, #23]
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a402:	4619      	mov	r1, r3
 801a404:	2036      	movs	r0, #54	@ 0x36
 801a406:	f7fa fa29 	bl	801485c <pbuf_alloc>
 801a40a:	6138      	str	r0, [r7, #16]
 801a40c:	693b      	ldr	r3, [r7, #16]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d109      	bne.n	801a426 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	8b5b      	ldrh	r3, [r3, #26]
 801a416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a420:	f04f 33ff 	mov.w	r3, #4294967295
 801a424:	e095      	b.n	801a552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a426:	693b      	ldr	r3, [r7, #16]
 801a428:	895a      	ldrh	r2, [r3, #10]
 801a42a:	7dfb      	ldrb	r3, [r7, #23]
 801a42c:	b29b      	uxth	r3, r3
 801a42e:	429a      	cmp	r2, r3
 801a430:	d206      	bcs.n	801a440 <tcp_enqueue_flags+0xa0>
 801a432:	4b4a      	ldr	r3, [pc, #296]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a434:	f240 4239 	movw	r2, #1081	@ 0x439
 801a438:	494c      	ldr	r1, [pc, #304]	@ (801a56c <tcp_enqueue_flags+0x1cc>)
 801a43a:	484a      	ldr	r0, [pc, #296]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a43c:	f004 fa30 	bl	801e8a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a444:	78fa      	ldrb	r2, [r7, #3]
 801a446:	7ffb      	ldrb	r3, [r7, #31]
 801a448:	9300      	str	r3, [sp, #0]
 801a44a:	460b      	mov	r3, r1
 801a44c:	6939      	ldr	r1, [r7, #16]
 801a44e:	6878      	ldr	r0, [r7, #4]
 801a450:	f7ff f91a 	bl	8019688 <tcp_create_segment>
 801a454:	60f8      	str	r0, [r7, #12]
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d109      	bne.n	801a470 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	8b5b      	ldrh	r3, [r3, #26]
 801a460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a464:	b29a      	uxth	r2, r3
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a46a:	f04f 33ff 	mov.w	r3, #4294967295
 801a46e:	e070      	b.n	801a552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	f003 0303 	and.w	r3, r3, #3
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d006      	beq.n	801a48a <tcp_enqueue_flags+0xea>
 801a47c:	4b37      	ldr	r3, [pc, #220]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a47e:	f240 4242 	movw	r2, #1090	@ 0x442
 801a482:	493b      	ldr	r1, [pc, #236]	@ (801a570 <tcp_enqueue_flags+0x1d0>)
 801a484:	4837      	ldr	r0, [pc, #220]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a486:	f004 fa0b 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	891b      	ldrh	r3, [r3, #8]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d006      	beq.n	801a4a0 <tcp_enqueue_flags+0x100>
 801a492:	4b32      	ldr	r3, [pc, #200]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a494:	f240 4243 	movw	r2, #1091	@ 0x443
 801a498:	4936      	ldr	r1, [pc, #216]	@ (801a574 <tcp_enqueue_flags+0x1d4>)
 801a49a:	4832      	ldr	r0, [pc, #200]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a49c:	f004 fa00 	bl	801e8a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d103      	bne.n	801a4b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	68fa      	ldr	r2, [r7, #12]
 801a4ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a4ae:	e00d      	b.n	801a4cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4b4:	61bb      	str	r3, [r7, #24]
 801a4b6:	e002      	b.n	801a4be <tcp_enqueue_flags+0x11e>
 801a4b8:	69bb      	ldr	r3, [r7, #24]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	61bb      	str	r3, [r7, #24]
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d1f8      	bne.n	801a4b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a4c6:	69bb      	ldr	r3, [r7, #24]
 801a4c8:	68fa      	ldr	r2, [r7, #12]
 801a4ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a4d4:	78fb      	ldrb	r3, [r7, #3]
 801a4d6:	f003 0302 	and.w	r3, r3, #2
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d104      	bne.n	801a4e8 <tcp_enqueue_flags+0x148>
 801a4de:	78fb      	ldrb	r3, [r7, #3]
 801a4e0:	f003 0301 	and.w	r3, r3, #1
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d004      	beq.n	801a4f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4ec:	1c5a      	adds	r2, r3, #1
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a4f2:	78fb      	ldrb	r3, [r7, #3]
 801a4f4:	f003 0301 	and.w	r3, r3, #1
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d006      	beq.n	801a50a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	8b5b      	ldrh	r3, [r3, #26]
 801a500:	f043 0320 	orr.w	r3, r3, #32
 801a504:	b29a      	uxth	r2, r3
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	4618      	mov	r0, r3
 801a510:	f7fa fd16 	bl	8014f40 <pbuf_clen>
 801a514:	4603      	mov	r3, r0
 801a516:	461a      	mov	r2, r3
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a51e:	4413      	add	r3, r2
 801a520:	b29a      	uxth	r2, r3
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d00e      	beq.n	801a550 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a536:	2b00      	cmp	r3, #0
 801a538:	d10a      	bne.n	801a550 <tcp_enqueue_flags+0x1b0>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d106      	bne.n	801a550 <tcp_enqueue_flags+0x1b0>
 801a542:	4b06      	ldr	r3, [pc, #24]	@ (801a55c <tcp_enqueue_flags+0x1bc>)
 801a544:	f240 4265 	movw	r2, #1125	@ 0x465
 801a548:	490b      	ldr	r1, [pc, #44]	@ (801a578 <tcp_enqueue_flags+0x1d8>)
 801a54a:	4806      	ldr	r0, [pc, #24]	@ (801a564 <tcp_enqueue_flags+0x1c4>)
 801a54c:	f004 f9a8 	bl	801e8a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a550:	2300      	movs	r3, #0
}
 801a552:	4618      	mov	r0, r3
 801a554:	3720      	adds	r7, #32
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}
 801a55a:	bf00      	nop
 801a55c:	080219e8 	.word	0x080219e8
 801a560:	08021e0c 	.word	0x08021e0c
 801a564:	08021a3c 	.word	0x08021a3c
 801a568:	08021e64 	.word	0x08021e64
 801a56c:	08021e84 	.word	0x08021e84
 801a570:	08021ec0 	.word	0x08021ec0
 801a574:	08021ed8 	.word	0x08021ed8
 801a578:	08021f04 	.word	0x08021f04

0801a57c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a57c:	b5b0      	push	{r4, r5, r7, lr}
 801a57e:	b08a      	sub	sp, #40	@ 0x28
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d106      	bne.n	801a598 <tcp_output+0x1c>
 801a58a:	4b8a      	ldr	r3, [pc, #552]	@ (801a7b4 <tcp_output+0x238>)
 801a58c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a590:	4989      	ldr	r1, [pc, #548]	@ (801a7b8 <tcp_output+0x23c>)
 801a592:	488a      	ldr	r0, [pc, #552]	@ (801a7bc <tcp_output+0x240>)
 801a594:	f004 f984 	bl	801e8a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	7d1b      	ldrb	r3, [r3, #20]
 801a59c:	2b01      	cmp	r3, #1
 801a59e:	d106      	bne.n	801a5ae <tcp_output+0x32>
 801a5a0:	4b84      	ldr	r3, [pc, #528]	@ (801a7b4 <tcp_output+0x238>)
 801a5a2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a5a6:	4986      	ldr	r1, [pc, #536]	@ (801a7c0 <tcp_output+0x244>)
 801a5a8:	4884      	ldr	r0, [pc, #528]	@ (801a7bc <tcp_output+0x240>)
 801a5aa:	f004 f979 	bl	801e8a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a5ae:	4b85      	ldr	r3, [pc, #532]	@ (801a7c4 <tcp_output+0x248>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	687a      	ldr	r2, [r7, #4]
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d101      	bne.n	801a5bc <tcp_output+0x40>
    return ERR_OK;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	e1ce      	b.n	801a95a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	bf28      	it	cs
 801a5cc:	4613      	movcs	r3, r2
 801a5ce:	b29b      	uxth	r3, r3
 801a5d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d10b      	bne.n	801a5f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	8b5b      	ldrh	r3, [r3, #26]
 801a5e2:	f003 0302 	and.w	r3, r3, #2
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	f000 81aa 	beq.w	801a940 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801a5ec:	6878      	ldr	r0, [r7, #4]
 801a5ee:	f000 fdcb 	bl	801b188 <tcp_send_empty_ack>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	e1b1      	b.n	801a95a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a5f6:	6879      	ldr	r1, [r7, #4]
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	3304      	adds	r3, #4
 801a5fc:	461a      	mov	r2, r3
 801a5fe:	6878      	ldr	r0, [r7, #4]
 801a600:	f7ff f826 	bl	8019650 <tcp_route>
 801a604:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d102      	bne.n	801a612 <tcp_output+0x96>
    return ERR_RTE;
 801a60c:	f06f 0303 	mvn.w	r3, #3
 801a610:	e1a3      	b.n	801a95a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d003      	beq.n	801a620 <tcp_output+0xa4>
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d111      	bne.n	801a644 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d002      	beq.n	801a62c <tcp_output+0xb0>
 801a626:	697b      	ldr	r3, [r7, #20]
 801a628:	3304      	adds	r3, #4
 801a62a:	e000      	b.n	801a62e <tcp_output+0xb2>
 801a62c:	2300      	movs	r3, #0
 801a62e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a630:	693b      	ldr	r3, [r7, #16]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d102      	bne.n	801a63c <tcp_output+0xc0>
      return ERR_RTE;
 801a636:	f06f 0303 	mvn.w	r3, #3
 801a63a:	e18e      	b.n	801a95a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a63c:	693b      	ldr	r3, [r7, #16]
 801a63e:	681a      	ldr	r2, [r3, #0]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a646:	68db      	ldr	r3, [r3, #12]
 801a648:	685b      	ldr	r3, [r3, #4]
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7f8 ff45 	bl	80134da <lwip_htonl>
 801a650:	4602      	mov	r2, r0
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a656:	1ad3      	subs	r3, r2, r3
 801a658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a65a:	8912      	ldrh	r2, [r2, #8]
 801a65c:	4413      	add	r3, r2
 801a65e:	69ba      	ldr	r2, [r7, #24]
 801a660:	429a      	cmp	r2, r3
 801a662:	d227      	bcs.n	801a6b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a66a:	461a      	mov	r2, r3
 801a66c:	69bb      	ldr	r3, [r7, #24]
 801a66e:	4293      	cmp	r3, r2
 801a670:	d114      	bne.n	801a69c <tcp_output+0x120>
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a676:	2b00      	cmp	r3, #0
 801a678:	d110      	bne.n	801a69c <tcp_output+0x120>
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a680:	2b00      	cmp	r3, #0
 801a682:	d10b      	bne.n	801a69c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2200      	movs	r2, #0
 801a688:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	2201      	movs	r2, #1
 801a690:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2200      	movs	r2, #0
 801a698:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	8b5b      	ldrh	r3, [r3, #26]
 801a6a0:	f003 0302 	and.w	r3, r3, #2
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f000 814d 	beq.w	801a944 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a6aa:	6878      	ldr	r0, [r7, #4]
 801a6ac:	f000 fd6c 	bl	801b188 <tcp_send_empty_ack>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	e152      	b.n	801a95a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a6c2:	6a3b      	ldr	r3, [r7, #32]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	f000 811c 	beq.w	801a902 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a6ca:	e002      	b.n	801a6d2 <tcp_output+0x156>
 801a6cc:	6a3b      	ldr	r3, [r7, #32]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	623b      	str	r3, [r7, #32]
 801a6d2:	6a3b      	ldr	r3, [r7, #32]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d1f8      	bne.n	801a6cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a6da:	e112      	b.n	801a902 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	899b      	ldrh	r3, [r3, #12]
 801a6e2:	b29b      	uxth	r3, r3
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f7f8 fee3 	bl	80134b0 <lwip_htons>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	f003 0304 	and.w	r3, r3, #4
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d006      	beq.n	801a704 <tcp_output+0x188>
 801a6f6:	4b2f      	ldr	r3, [pc, #188]	@ (801a7b4 <tcp_output+0x238>)
 801a6f8:	f240 5236 	movw	r2, #1334	@ 0x536
 801a6fc:	4932      	ldr	r1, [pc, #200]	@ (801a7c8 <tcp_output+0x24c>)
 801a6fe:	482f      	ldr	r0, [pc, #188]	@ (801a7bc <tcp_output+0x240>)
 801a700:	f004 f8ce 	bl	801e8a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d01f      	beq.n	801a74c <tcp_output+0x1d0>
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	8b5b      	ldrh	r3, [r3, #26]
 801a710:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a714:	2b00      	cmp	r3, #0
 801a716:	d119      	bne.n	801a74c <tcp_output+0x1d0>
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d00b      	beq.n	801a738 <tcp_output+0x1bc>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d110      	bne.n	801a74c <tcp_output+0x1d0>
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a72e:	891a      	ldrh	r2, [r3, #8]
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a734:	429a      	cmp	r2, r3
 801a736:	d209      	bcs.n	801a74c <tcp_output+0x1d0>
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d004      	beq.n	801a74c <tcp_output+0x1d0>
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a748:	2b0f      	cmp	r3, #15
 801a74a:	d901      	bls.n	801a750 <tcp_output+0x1d4>
 801a74c:	2301      	movs	r3, #1
 801a74e:	e000      	b.n	801a752 <tcp_output+0x1d6>
 801a750:	2300      	movs	r3, #0
 801a752:	2b00      	cmp	r3, #0
 801a754:	d106      	bne.n	801a764 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	8b5b      	ldrh	r3, [r3, #26]
 801a75a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a75e:	2b00      	cmp	r3, #0
 801a760:	f000 80e4 	beq.w	801a92c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	7d1b      	ldrb	r3, [r3, #20]
 801a768:	2b02      	cmp	r3, #2
 801a76a:	d00d      	beq.n	801a788 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a76e:	68db      	ldr	r3, [r3, #12]
 801a770:	899b      	ldrh	r3, [r3, #12]
 801a772:	b29c      	uxth	r4, r3
 801a774:	2010      	movs	r0, #16
 801a776:	f7f8 fe9b 	bl	80134b0 <lwip_htons>
 801a77a:	4603      	mov	r3, r0
 801a77c:	461a      	mov	r2, r3
 801a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a780:	68db      	ldr	r3, [r3, #12]
 801a782:	4322      	orrs	r2, r4
 801a784:	b292      	uxth	r2, r2
 801a786:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a788:	697a      	ldr	r2, [r7, #20]
 801a78a:	6879      	ldr	r1, [r7, #4]
 801a78c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a78e:	f000 f909 	bl	801a9a4 <tcp_output_segment>
 801a792:	4603      	mov	r3, r0
 801a794:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d016      	beq.n	801a7cc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	8b5b      	ldrh	r3, [r3, #26]
 801a7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a7a6:	b29a      	uxth	r2, r3
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	835a      	strh	r2, [r3, #26]
      return err;
 801a7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a7b0:	e0d3      	b.n	801a95a <tcp_output+0x3de>
 801a7b2:	bf00      	nop
 801a7b4:	080219e8 	.word	0x080219e8
 801a7b8:	08021f2c 	.word	0x08021f2c
 801a7bc:	08021a3c 	.word	0x08021a3c
 801a7c0:	08021f44 	.word	0x08021f44
 801a7c4:	240087e0 	.word	0x240087e0
 801a7c8:	08021f6c 	.word	0x08021f6c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ce:	681a      	ldr	r2, [r3, #0]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	7d1b      	ldrb	r3, [r3, #20]
 801a7d8:	2b02      	cmp	r3, #2
 801a7da:	d006      	beq.n	801a7ea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	8b5b      	ldrh	r3, [r3, #26]
 801a7e0:	f023 0303 	bic.w	r3, r3, #3
 801a7e4:	b29a      	uxth	r2, r3
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ec:	68db      	ldr	r3, [r3, #12]
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7f8 fe72 	bl	80134da <lwip_htonl>
 801a7f6:	4604      	mov	r4, r0
 801a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7fa:	891b      	ldrh	r3, [r3, #8]
 801a7fc:	461d      	mov	r5, r3
 801a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a800:	68db      	ldr	r3, [r3, #12]
 801a802:	899b      	ldrh	r3, [r3, #12]
 801a804:	b29b      	uxth	r3, r3
 801a806:	4618      	mov	r0, r3
 801a808:	f7f8 fe52 	bl	80134b0 <lwip_htons>
 801a80c:	4603      	mov	r3, r0
 801a80e:	b2db      	uxtb	r3, r3
 801a810:	f003 0303 	and.w	r3, r3, #3
 801a814:	2b00      	cmp	r3, #0
 801a816:	d001      	beq.n	801a81c <tcp_output+0x2a0>
 801a818:	2301      	movs	r3, #1
 801a81a:	e000      	b.n	801a81e <tcp_output+0x2a2>
 801a81c:	2300      	movs	r3, #0
 801a81e:	442b      	add	r3, r5
 801a820:	4423      	add	r3, r4
 801a822:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a828:	68bb      	ldr	r3, [r7, #8]
 801a82a:	1ad3      	subs	r3, r2, r3
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	da02      	bge.n	801a836 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	68ba      	ldr	r2, [r7, #8]
 801a834:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a838:	891b      	ldrh	r3, [r3, #8]
 801a83a:	461c      	mov	r4, r3
 801a83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a83e:	68db      	ldr	r3, [r3, #12]
 801a840:	899b      	ldrh	r3, [r3, #12]
 801a842:	b29b      	uxth	r3, r3
 801a844:	4618      	mov	r0, r3
 801a846:	f7f8 fe33 	bl	80134b0 <lwip_htons>
 801a84a:	4603      	mov	r3, r0
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	f003 0303 	and.w	r3, r3, #3
 801a852:	2b00      	cmp	r3, #0
 801a854:	d001      	beq.n	801a85a <tcp_output+0x2de>
 801a856:	2301      	movs	r3, #1
 801a858:	e000      	b.n	801a85c <tcp_output+0x2e0>
 801a85a:	2300      	movs	r3, #0
 801a85c:	4423      	add	r3, r4
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d049      	beq.n	801a8f6 <tcp_output+0x37a>
      seg->next = NULL;
 801a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a864:	2200      	movs	r2, #0
 801a866:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d105      	bne.n	801a87c <tcp_output+0x300>
        pcb->unacked = seg;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a874:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a878:	623b      	str	r3, [r7, #32]
 801a87a:	e03f      	b.n	801a8fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	4618      	mov	r0, r3
 801a884:	f7f8 fe29 	bl	80134da <lwip_htonl>
 801a888:	4604      	mov	r4, r0
 801a88a:	6a3b      	ldr	r3, [r7, #32]
 801a88c:	68db      	ldr	r3, [r3, #12]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	4618      	mov	r0, r3
 801a892:	f7f8 fe22 	bl	80134da <lwip_htonl>
 801a896:	4603      	mov	r3, r0
 801a898:	1ae3      	subs	r3, r4, r3
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	da24      	bge.n	801a8e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	3370      	adds	r3, #112	@ 0x70
 801a8a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a8a4:	e002      	b.n	801a8ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a8a6:	69fb      	ldr	r3, [r7, #28]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a8ac:	69fb      	ldr	r3, [r7, #28]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d011      	beq.n	801a8d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a8b4:	69fb      	ldr	r3, [r7, #28]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	68db      	ldr	r3, [r3, #12]
 801a8ba:	685b      	ldr	r3, [r3, #4]
 801a8bc:	4618      	mov	r0, r3
 801a8be:	f7f8 fe0c 	bl	80134da <lwip_htonl>
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8c6:	68db      	ldr	r3, [r3, #12]
 801a8c8:	685b      	ldr	r3, [r3, #4]
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7f8 fe05 	bl	80134da <lwip_htonl>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	dbe6      	blt.n	801a8a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a8d8:	69fb      	ldr	r3, [r7, #28]
 801a8da:	681a      	ldr	r2, [r3, #0]
 801a8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a8e0:	69fb      	ldr	r3, [r7, #28]
 801a8e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a8e4:	601a      	str	r2, [r3, #0]
 801a8e6:	e009      	b.n	801a8fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a8e8:	6a3b      	ldr	r3, [r7, #32]
 801a8ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a8ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a8ee:	6a3b      	ldr	r3, [r7, #32]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	623b      	str	r3, [r7, #32]
 801a8f4:	e002      	b.n	801a8fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a8f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a8f8:	f7fb ff1d 	bl	8016736 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a900:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a904:	2b00      	cmp	r3, #0
 801a906:	d012      	beq.n	801a92e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a90a:	68db      	ldr	r3, [r3, #12]
 801a90c:	685b      	ldr	r3, [r3, #4]
 801a90e:	4618      	mov	r0, r3
 801a910:	f7f8 fde3 	bl	80134da <lwip_htonl>
 801a914:	4602      	mov	r2, r0
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a91e:	8912      	ldrh	r2, [r2, #8]
 801a920:	4413      	add	r3, r2
  while (seg != NULL &&
 801a922:	69ba      	ldr	r2, [r7, #24]
 801a924:	429a      	cmp	r2, r3
 801a926:	f4bf aed9 	bcs.w	801a6dc <tcp_output+0x160>
 801a92a:	e000      	b.n	801a92e <tcp_output+0x3b2>
      break;
 801a92c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a932:	2b00      	cmp	r3, #0
 801a934:	d108      	bne.n	801a948 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	2200      	movs	r2, #0
 801a93a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a93e:	e004      	b.n	801a94a <tcp_output+0x3ce>
    goto output_done;
 801a940:	bf00      	nop
 801a942:	e002      	b.n	801a94a <tcp_output+0x3ce>
    goto output_done;
 801a944:	bf00      	nop
 801a946:	e000      	b.n	801a94a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a948:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	8b5b      	ldrh	r3, [r3, #26]
 801a94e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a952:	b29a      	uxth	r2, r3
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a958:	2300      	movs	r3, #0
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3728      	adds	r7, #40	@ 0x28
 801a95e:	46bd      	mov	sp, r7
 801a960:	bdb0      	pop	{r4, r5, r7, pc}
 801a962:	bf00      	nop

0801a964 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d106      	bne.n	801a980 <tcp_output_segment_busy+0x1c>
 801a972:	4b09      	ldr	r3, [pc, #36]	@ (801a998 <tcp_output_segment_busy+0x34>)
 801a974:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a978:	4908      	ldr	r1, [pc, #32]	@ (801a99c <tcp_output_segment_busy+0x38>)
 801a97a:	4809      	ldr	r0, [pc, #36]	@ (801a9a0 <tcp_output_segment_busy+0x3c>)
 801a97c:	f003 ff90 	bl	801e8a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	685b      	ldr	r3, [r3, #4]
 801a984:	7b9b      	ldrb	r3, [r3, #14]
 801a986:	2b01      	cmp	r3, #1
 801a988:	d001      	beq.n	801a98e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a98a:	2301      	movs	r3, #1
 801a98c:	e000      	b.n	801a990 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a98e:	2300      	movs	r3, #0
}
 801a990:	4618      	mov	r0, r3
 801a992:	3708      	adds	r7, #8
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}
 801a998:	080219e8 	.word	0x080219e8
 801a99c:	08021f84 	.word	0x08021f84
 801a9a0:	08021a3c 	.word	0x08021a3c

0801a9a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a9a4:	b5b0      	push	{r4, r5, r7, lr}
 801a9a6:	b08c      	sub	sp, #48	@ 0x30
 801a9a8:	af04      	add	r7, sp, #16
 801a9aa:	60f8      	str	r0, [r7, #12]
 801a9ac:	60b9      	str	r1, [r7, #8]
 801a9ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d106      	bne.n	801a9c4 <tcp_output_segment+0x20>
 801a9b6:	4b64      	ldr	r3, [pc, #400]	@ (801ab48 <tcp_output_segment+0x1a4>)
 801a9b8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a9bc:	4963      	ldr	r1, [pc, #396]	@ (801ab4c <tcp_output_segment+0x1a8>)
 801a9be:	4864      	ldr	r0, [pc, #400]	@ (801ab50 <tcp_output_segment+0x1ac>)
 801a9c0:	f003 ff6e 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a9c4:	68bb      	ldr	r3, [r7, #8]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d106      	bne.n	801a9d8 <tcp_output_segment+0x34>
 801a9ca:	4b5f      	ldr	r3, [pc, #380]	@ (801ab48 <tcp_output_segment+0x1a4>)
 801a9cc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a9d0:	4960      	ldr	r1, [pc, #384]	@ (801ab54 <tcp_output_segment+0x1b0>)
 801a9d2:	485f      	ldr	r0, [pc, #380]	@ (801ab50 <tcp_output_segment+0x1ac>)
 801a9d4:	f003 ff64 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d106      	bne.n	801a9ec <tcp_output_segment+0x48>
 801a9de:	4b5a      	ldr	r3, [pc, #360]	@ (801ab48 <tcp_output_segment+0x1a4>)
 801a9e0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a9e4:	495c      	ldr	r1, [pc, #368]	@ (801ab58 <tcp_output_segment+0x1b4>)
 801a9e6:	485a      	ldr	r0, [pc, #360]	@ (801ab50 <tcp_output_segment+0x1ac>)
 801a9e8:	f003 ff5a 	bl	801e8a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a9ec:	68f8      	ldr	r0, [r7, #12]
 801a9ee:	f7ff ffb9 	bl	801a964 <tcp_output_segment_busy>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d001      	beq.n	801a9fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	e0a1      	b.n	801ab40 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	68dc      	ldr	r4, [r3, #12]
 801aa04:	4610      	mov	r0, r2
 801aa06:	f7f8 fd68 	bl	80134da <lwip_htonl>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	68dc      	ldr	r4, [r3, #12]
 801aa16:	4610      	mov	r0, r2
 801aa18:	f7f8 fd4a 	bl	80134b0 <lwip_htons>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa24:	68ba      	ldr	r2, [r7, #8]
 801aa26:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801aa28:	441a      	add	r2, r3
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	68db      	ldr	r3, [r3, #12]
 801aa32:	3314      	adds	r3, #20
 801aa34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	7a9b      	ldrb	r3, [r3, #10]
 801aa3a:	f003 0301 	and.w	r3, r3, #1
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d015      	beq.n	801aa6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	3304      	adds	r3, #4
 801aa46:	461a      	mov	r2, r3
 801aa48:	6879      	ldr	r1, [r7, #4]
 801aa4a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801aa4e:	f7fc fa37 	bl	8016ec0 <tcp_eff_send_mss_netif>
 801aa52:	4603      	mov	r3, r0
 801aa54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801aa56:	8b7b      	ldrh	r3, [r7, #26]
 801aa58:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7f8 fd3c 	bl	80134da <lwip_htonl>
 801aa62:	4602      	mov	r2, r0
 801aa64:	69fb      	ldr	r3, [r7, #28]
 801aa66:	601a      	str	r2, [r3, #0]
    opts += 1;
 801aa68:	69fb      	ldr	r3, [r7, #28]
 801aa6a:	3304      	adds	r3, #4
 801aa6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801aa6e:	68bb      	ldr	r3, [r7, #8]
 801aa70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	da02      	bge.n	801aa7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801aa7e:	68bb      	ldr	r3, [r7, #8]
 801aa80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d10c      	bne.n	801aaa0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801aa86:	4b35      	ldr	r3, [pc, #212]	@ (801ab5c <tcp_output_segment+0x1b8>)
 801aa88:	681a      	ldr	r2, [r3, #0]
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	68db      	ldr	r3, [r3, #12]
 801aa92:	685b      	ldr	r3, [r3, #4]
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7f8 fd20 	bl	80134da <lwip_htonl>
 801aa9a:	4602      	mov	r2, r0
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	68da      	ldr	r2, [r3, #12]
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	1ad3      	subs	r3, r2, r3
 801aaac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	685b      	ldr	r3, [r3, #4]
 801aab2:	8959      	ldrh	r1, [r3, #10]
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	685b      	ldr	r3, [r3, #4]
 801aab8:	8b3a      	ldrh	r2, [r7, #24]
 801aaba:	1a8a      	subs	r2, r1, r2
 801aabc:	b292      	uxth	r2, r2
 801aabe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	685b      	ldr	r3, [r3, #4]
 801aac4:	8919      	ldrh	r1, [r3, #8]
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	685b      	ldr	r3, [r3, #4]
 801aaca:	8b3a      	ldrh	r2, [r7, #24]
 801aacc:	1a8a      	subs	r2, r1, r2
 801aace:	b292      	uxth	r2, r2
 801aad0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	68fa      	ldr	r2, [r7, #12]
 801aad8:	68d2      	ldr	r2, [r2, #12]
 801aada:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	68db      	ldr	r3, [r3, #12]
 801aae0:	2200      	movs	r2, #0
 801aae2:	741a      	strb	r2, [r3, #16]
 801aae4:	2200      	movs	r2, #0
 801aae6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	68da      	ldr	r2, [r3, #12]
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	7a9b      	ldrb	r3, [r3, #10]
 801aaf0:	f003 0301 	and.w	r3, r3, #1
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d001      	beq.n	801aafc <tcp_output_segment+0x158>
 801aaf8:	2318      	movs	r3, #24
 801aafa:	e000      	b.n	801aafe <tcp_output_segment+0x15a>
 801aafc:	2314      	movs	r3, #20
 801aafe:	4413      	add	r3, r2
 801ab00:	69fa      	ldr	r2, [r7, #28]
 801ab02:	429a      	cmp	r2, r3
 801ab04:	d006      	beq.n	801ab14 <tcp_output_segment+0x170>
 801ab06:	4b10      	ldr	r3, [pc, #64]	@ (801ab48 <tcp_output_segment+0x1a4>)
 801ab08:	f240 621c 	movw	r2, #1564	@ 0x61c
 801ab0c:	4914      	ldr	r1, [pc, #80]	@ (801ab60 <tcp_output_segment+0x1bc>)
 801ab0e:	4810      	ldr	r0, [pc, #64]	@ (801ab50 <tcp_output_segment+0x1ac>)
 801ab10:	f003 fec6 	bl	801e8a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	6858      	ldr	r0, [r3, #4]
 801ab18:	68b9      	ldr	r1, [r7, #8]
 801ab1a:	68bb      	ldr	r3, [r7, #8]
 801ab1c:	1d1c      	adds	r4, r3, #4
 801ab1e:	68bb      	ldr	r3, [r7, #8]
 801ab20:	7add      	ldrb	r5, [r3, #11]
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	7a9b      	ldrb	r3, [r3, #10]
 801ab26:	687a      	ldr	r2, [r7, #4]
 801ab28:	9202      	str	r2, [sp, #8]
 801ab2a:	2206      	movs	r2, #6
 801ab2c:	9201      	str	r2, [sp, #4]
 801ab2e:	9300      	str	r3, [sp, #0]
 801ab30:	462b      	mov	r3, r5
 801ab32:	4622      	mov	r2, r4
 801ab34:	f002 fbd0 	bl	801d2d8 <ip4_output_if>
 801ab38:	4603      	mov	r3, r0
 801ab3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ab3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	3720      	adds	r7, #32
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bdb0      	pop	{r4, r5, r7, pc}
 801ab48:	080219e8 	.word	0x080219e8
 801ab4c:	08021fac 	.word	0x08021fac
 801ab50:	08021a3c 	.word	0x08021a3c
 801ab54:	08021fcc 	.word	0x08021fcc
 801ab58:	08021fec 	.word	0x08021fec
 801ab5c:	24008794 	.word	0x24008794
 801ab60:	08022010 	.word	0x08022010

0801ab64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ab64:	b5b0      	push	{r4, r5, r7, lr}
 801ab66:	b084      	sub	sp, #16
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d106      	bne.n	801ab80 <tcp_rexmit_rto_prepare+0x1c>
 801ab72:	4b31      	ldr	r3, [pc, #196]	@ (801ac38 <tcp_rexmit_rto_prepare+0xd4>)
 801ab74:	f240 6263 	movw	r2, #1635	@ 0x663
 801ab78:	4930      	ldr	r1, [pc, #192]	@ (801ac3c <tcp_rexmit_rto_prepare+0xd8>)
 801ab7a:	4831      	ldr	r0, [pc, #196]	@ (801ac40 <tcp_rexmit_rto_prepare+0xdc>)
 801ab7c:	f003 fe90 	bl	801e8a0 <iprintf>

  if (pcb->unacked == NULL) {
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d102      	bne.n	801ab8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ab88:	f06f 0305 	mvn.w	r3, #5
 801ab8c:	e050      	b.n	801ac30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab92:	60fb      	str	r3, [r7, #12]
 801ab94:	e00b      	b.n	801abae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ab96:	68f8      	ldr	r0, [r7, #12]
 801ab98:	f7ff fee4 	bl	801a964 <tcp_output_segment_busy>
 801ab9c:	4603      	mov	r3, r0
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d002      	beq.n	801aba8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801aba2:	f06f 0305 	mvn.w	r3, #5
 801aba6:	e043      	b.n	801ac30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	60fb      	str	r3, [r7, #12]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d1ef      	bne.n	801ab96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801abb6:	68f8      	ldr	r0, [r7, #12]
 801abb8:	f7ff fed4 	bl	801a964 <tcp_output_segment_busy>
 801abbc:	4603      	mov	r3, r0
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d002      	beq.n	801abc8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801abc2:	f06f 0305 	mvn.w	r3, #5
 801abc6:	e033      	b.n	801ac30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2200      	movs	r2, #0
 801abdc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	8b5b      	ldrh	r3, [r3, #26]
 801abe2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801abe6:	b29a      	uxth	r2, r3
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	68db      	ldr	r3, [r3, #12]
 801abf0:	685b      	ldr	r3, [r3, #4]
 801abf2:	4618      	mov	r0, r3
 801abf4:	f7f8 fc71 	bl	80134da <lwip_htonl>
 801abf8:	4604      	mov	r4, r0
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	891b      	ldrh	r3, [r3, #8]
 801abfe:	461d      	mov	r5, r3
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	68db      	ldr	r3, [r3, #12]
 801ac04:	899b      	ldrh	r3, [r3, #12]
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	4618      	mov	r0, r3
 801ac0a:	f7f8 fc51 	bl	80134b0 <lwip_htons>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	f003 0303 	and.w	r3, r3, #3
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d001      	beq.n	801ac1e <tcp_rexmit_rto_prepare+0xba>
 801ac1a:	2301      	movs	r3, #1
 801ac1c:	e000      	b.n	801ac20 <tcp_rexmit_rto_prepare+0xbc>
 801ac1e:	2300      	movs	r3, #0
 801ac20:	442b      	add	r3, r5
 801ac22:	18e2      	adds	r2, r4, r3
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801ac2e:	2300      	movs	r3, #0
}
 801ac30:	4618      	mov	r0, r3
 801ac32:	3710      	adds	r7, #16
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bdb0      	pop	{r4, r5, r7, pc}
 801ac38:	080219e8 	.word	0x080219e8
 801ac3c:	08022024 	.word	0x08022024
 801ac40:	08021a3c 	.word	0x08021a3c

0801ac44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b082      	sub	sp, #8
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d106      	bne.n	801ac60 <tcp_rexmit_rto_commit+0x1c>
 801ac52:	4b0d      	ldr	r3, [pc, #52]	@ (801ac88 <tcp_rexmit_rto_commit+0x44>)
 801ac54:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801ac58:	490c      	ldr	r1, [pc, #48]	@ (801ac8c <tcp_rexmit_rto_commit+0x48>)
 801ac5a:	480d      	ldr	r0, [pc, #52]	@ (801ac90 <tcp_rexmit_rto_commit+0x4c>)
 801ac5c:	f003 fe20 	bl	801e8a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ac66:	2bff      	cmp	r3, #255	@ 0xff
 801ac68:	d007      	beq.n	801ac7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ac70:	3301      	adds	r3, #1
 801ac72:	b2da      	uxtb	r2, r3
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801ac7a:	6878      	ldr	r0, [r7, #4]
 801ac7c:	f7ff fc7e 	bl	801a57c <tcp_output>
}
 801ac80:	bf00      	nop
 801ac82:	3708      	adds	r7, #8
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}
 801ac88:	080219e8 	.word	0x080219e8
 801ac8c:	08022048 	.word	0x08022048
 801ac90:	08021a3c 	.word	0x08021a3c

0801ac94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b082      	sub	sp, #8
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d106      	bne.n	801acb0 <tcp_rexmit_rto+0x1c>
 801aca2:	4b0a      	ldr	r3, [pc, #40]	@ (801accc <tcp_rexmit_rto+0x38>)
 801aca4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801aca8:	4909      	ldr	r1, [pc, #36]	@ (801acd0 <tcp_rexmit_rto+0x3c>)
 801acaa:	480a      	ldr	r0, [pc, #40]	@ (801acd4 <tcp_rexmit_rto+0x40>)
 801acac:	f003 fdf8 	bl	801e8a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801acb0:	6878      	ldr	r0, [r7, #4]
 801acb2:	f7ff ff57 	bl	801ab64 <tcp_rexmit_rto_prepare>
 801acb6:	4603      	mov	r3, r0
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d102      	bne.n	801acc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801acbc:	6878      	ldr	r0, [r7, #4]
 801acbe:	f7ff ffc1 	bl	801ac44 <tcp_rexmit_rto_commit>
  }
}
 801acc2:	bf00      	nop
 801acc4:	3708      	adds	r7, #8
 801acc6:	46bd      	mov	sp, r7
 801acc8:	bd80      	pop	{r7, pc}
 801acca:	bf00      	nop
 801accc:	080219e8 	.word	0x080219e8
 801acd0:	0802206c 	.word	0x0802206c
 801acd4:	08021a3c 	.word	0x08021a3c

0801acd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801acd8:	b590      	push	{r4, r7, lr}
 801acda:	b085      	sub	sp, #20
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d106      	bne.n	801acf4 <tcp_rexmit+0x1c>
 801ace6:	4b2f      	ldr	r3, [pc, #188]	@ (801ada4 <tcp_rexmit+0xcc>)
 801ace8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801acec:	492e      	ldr	r1, [pc, #184]	@ (801ada8 <tcp_rexmit+0xd0>)
 801acee:	482f      	ldr	r0, [pc, #188]	@ (801adac <tcp_rexmit+0xd4>)
 801acf0:	f003 fdd6 	bl	801e8a0 <iprintf>

  if (pcb->unacked == NULL) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d102      	bne.n	801ad02 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801acfc:	f06f 0305 	mvn.w	r3, #5
 801ad00:	e04c      	b.n	801ad9c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad06:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ad08:	68b8      	ldr	r0, [r7, #8]
 801ad0a:	f7ff fe2b 	bl	801a964 <tcp_output_segment_busy>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d002      	beq.n	801ad1a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ad14:	f06f 0305 	mvn.w	r3, #5
 801ad18:	e040      	b.n	801ad9c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	336c      	adds	r3, #108	@ 0x6c
 801ad26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ad28:	e002      	b.n	801ad30 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d011      	beq.n	801ad5c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	68db      	ldr	r3, [r3, #12]
 801ad3e:	685b      	ldr	r3, [r3, #4]
 801ad40:	4618      	mov	r0, r3
 801ad42:	f7f8 fbca 	bl	80134da <lwip_htonl>
 801ad46:	4604      	mov	r4, r0
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	685b      	ldr	r3, [r3, #4]
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f7f8 fbc3 	bl	80134da <lwip_htonl>
 801ad54:	4603      	mov	r3, r0
 801ad56:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	dbe6      	blt.n	801ad2a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	681a      	ldr	r2, [r3, #0]
 801ad60:	68bb      	ldr	r3, [r7, #8]
 801ad62:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	68ba      	ldr	r2, [r7, #8]
 801ad68:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d103      	bne.n	801ad7a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2200      	movs	r2, #0
 801ad76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ad80:	2bff      	cmp	r3, #255	@ 0xff
 801ad82:	d007      	beq.n	801ad94 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ad8a:	3301      	adds	r3, #1
 801ad8c:	b2da      	uxtb	r2, r3
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	2200      	movs	r2, #0
 801ad98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ad9a:	2300      	movs	r3, #0
}
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	3714      	adds	r7, #20
 801ada0:	46bd      	mov	sp, r7
 801ada2:	bd90      	pop	{r4, r7, pc}
 801ada4:	080219e8 	.word	0x080219e8
 801ada8:	08022088 	.word	0x08022088
 801adac:	08021a3c 	.word	0x08021a3c

0801adb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b082      	sub	sp, #8
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d106      	bne.n	801adcc <tcp_rexmit_fast+0x1c>
 801adbe:	4b2a      	ldr	r3, [pc, #168]	@ (801ae68 <tcp_rexmit_fast+0xb8>)
 801adc0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801adc4:	4929      	ldr	r1, [pc, #164]	@ (801ae6c <tcp_rexmit_fast+0xbc>)
 801adc6:	482a      	ldr	r0, [pc, #168]	@ (801ae70 <tcp_rexmit_fast+0xc0>)
 801adc8:	f003 fd6a 	bl	801e8a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801add0:	2b00      	cmp	r3, #0
 801add2:	d045      	beq.n	801ae60 <tcp_rexmit_fast+0xb0>
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	8b5b      	ldrh	r3, [r3, #26]
 801add8:	f003 0304 	and.w	r3, r3, #4
 801addc:	2b00      	cmp	r3, #0
 801adde:	d13f      	bne.n	801ae60 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f7ff ff79 	bl	801acd8 <tcp_rexmit>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d139      	bne.n	801ae60 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801adf8:	4293      	cmp	r3, r2
 801adfa:	bf28      	it	cs
 801adfc:	4613      	movcs	r3, r2
 801adfe:	b29b      	uxth	r3, r3
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	da00      	bge.n	801ae06 <tcp_rexmit_fast+0x56>
 801ae04:	3301      	adds	r3, #1
 801ae06:	105b      	asrs	r3, r3, #1
 801ae08:	b29a      	uxth	r2, r3
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ae16:	461a      	mov	r2, r3
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ae1c:	005b      	lsls	r3, r3, #1
 801ae1e:	429a      	cmp	r2, r3
 801ae20:	d206      	bcs.n	801ae30 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ae26:	005b      	lsls	r3, r3, #1
 801ae28:	b29a      	uxth	r2, r3
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ae3a:	4619      	mov	r1, r3
 801ae3c:	0049      	lsls	r1, r1, #1
 801ae3e:	440b      	add	r3, r1
 801ae40:	b29b      	uxth	r3, r3
 801ae42:	4413      	add	r3, r2
 801ae44:	b29a      	uxth	r2, r3
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	8b5b      	ldrh	r3, [r3, #26]
 801ae50:	f043 0304 	orr.w	r3, r3, #4
 801ae54:	b29a      	uxth	r2, r3
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801ae60:	bf00      	nop
 801ae62:	3708      	adds	r7, #8
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bd80      	pop	{r7, pc}
 801ae68:	080219e8 	.word	0x080219e8
 801ae6c:	080220a0 	.word	0x080220a0
 801ae70:	08021a3c 	.word	0x08021a3c

0801ae74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b086      	sub	sp, #24
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	60f8      	str	r0, [r7, #12]
 801ae7c:	607b      	str	r3, [r7, #4]
 801ae7e:	460b      	mov	r3, r1
 801ae80:	817b      	strh	r3, [r7, #10]
 801ae82:	4613      	mov	r3, r2
 801ae84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ae86:	897a      	ldrh	r2, [r7, #10]
 801ae88:	893b      	ldrh	r3, [r7, #8]
 801ae8a:	4413      	add	r3, r2
 801ae8c:	b29b      	uxth	r3, r3
 801ae8e:	3314      	adds	r3, #20
 801ae90:	b29b      	uxth	r3, r3
 801ae92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae96:	4619      	mov	r1, r3
 801ae98:	2022      	movs	r0, #34	@ 0x22
 801ae9a:	f7f9 fcdf 	bl	801485c <pbuf_alloc>
 801ae9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d04d      	beq.n	801af42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801aea6:	897b      	ldrh	r3, [r7, #10]
 801aea8:	3313      	adds	r3, #19
 801aeaa:	697a      	ldr	r2, [r7, #20]
 801aeac:	8952      	ldrh	r2, [r2, #10]
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	db06      	blt.n	801aec0 <tcp_output_alloc_header_common+0x4c>
 801aeb2:	4b26      	ldr	r3, [pc, #152]	@ (801af4c <tcp_output_alloc_header_common+0xd8>)
 801aeb4:	f240 7223 	movw	r2, #1827	@ 0x723
 801aeb8:	4925      	ldr	r1, [pc, #148]	@ (801af50 <tcp_output_alloc_header_common+0xdc>)
 801aeba:	4826      	ldr	r0, [pc, #152]	@ (801af54 <tcp_output_alloc_header_common+0xe0>)
 801aebc:	f003 fcf0 	bl	801e8a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801aec0:	697b      	ldr	r3, [r7, #20]
 801aec2:	685b      	ldr	r3, [r3, #4]
 801aec4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801aec6:	8c3b      	ldrh	r3, [r7, #32]
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7f8 faf1 	bl	80134b0 <lwip_htons>
 801aece:	4603      	mov	r3, r0
 801aed0:	461a      	mov	r2, r3
 801aed2:	693b      	ldr	r3, [r7, #16]
 801aed4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801aed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aed8:	4618      	mov	r0, r3
 801aeda:	f7f8 fae9 	bl	80134b0 <lwip_htons>
 801aede:	4603      	mov	r3, r0
 801aee0:	461a      	mov	r2, r3
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801aee6:	693b      	ldr	r3, [r7, #16]
 801aee8:	687a      	ldr	r2, [r7, #4]
 801aeea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801aeec:	68f8      	ldr	r0, [r7, #12]
 801aeee:	f7f8 faf4 	bl	80134da <lwip_htonl>
 801aef2:	4602      	mov	r2, r0
 801aef4:	693b      	ldr	r3, [r7, #16]
 801aef6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801aef8:	897b      	ldrh	r3, [r7, #10]
 801aefa:	089b      	lsrs	r3, r3, #2
 801aefc:	b29b      	uxth	r3, r3
 801aefe:	3305      	adds	r3, #5
 801af00:	b29b      	uxth	r3, r3
 801af02:	031b      	lsls	r3, r3, #12
 801af04:	b29a      	uxth	r2, r3
 801af06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801af0a:	b29b      	uxth	r3, r3
 801af0c:	4313      	orrs	r3, r2
 801af0e:	b29b      	uxth	r3, r3
 801af10:	4618      	mov	r0, r3
 801af12:	f7f8 facd 	bl	80134b0 <lwip_htons>
 801af16:	4603      	mov	r3, r0
 801af18:	461a      	mov	r2, r3
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801af1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801af20:	4618      	mov	r0, r3
 801af22:	f7f8 fac5 	bl	80134b0 <lwip_htons>
 801af26:	4603      	mov	r3, r0
 801af28:	461a      	mov	r2, r3
 801af2a:	693b      	ldr	r3, [r7, #16]
 801af2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801af2e:	693b      	ldr	r3, [r7, #16]
 801af30:	2200      	movs	r2, #0
 801af32:	741a      	strb	r2, [r3, #16]
 801af34:	2200      	movs	r2, #0
 801af36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801af38:	693b      	ldr	r3, [r7, #16]
 801af3a:	2200      	movs	r2, #0
 801af3c:	749a      	strb	r2, [r3, #18]
 801af3e:	2200      	movs	r2, #0
 801af40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801af42:	697b      	ldr	r3, [r7, #20]
}
 801af44:	4618      	mov	r0, r3
 801af46:	3718      	adds	r7, #24
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}
 801af4c:	080219e8 	.word	0x080219e8
 801af50:	080220c0 	.word	0x080220c0
 801af54:	08021a3c 	.word	0x08021a3c

0801af58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801af58:	b5b0      	push	{r4, r5, r7, lr}
 801af5a:	b08a      	sub	sp, #40	@ 0x28
 801af5c:	af04      	add	r7, sp, #16
 801af5e:	60f8      	str	r0, [r7, #12]
 801af60:	607b      	str	r3, [r7, #4]
 801af62:	460b      	mov	r3, r1
 801af64:	817b      	strh	r3, [r7, #10]
 801af66:	4613      	mov	r3, r2
 801af68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d106      	bne.n	801af7e <tcp_output_alloc_header+0x26>
 801af70:	4b15      	ldr	r3, [pc, #84]	@ (801afc8 <tcp_output_alloc_header+0x70>)
 801af72:	f240 7242 	movw	r2, #1858	@ 0x742
 801af76:	4915      	ldr	r1, [pc, #84]	@ (801afcc <tcp_output_alloc_header+0x74>)
 801af78:	4815      	ldr	r0, [pc, #84]	@ (801afd0 <tcp_output_alloc_header+0x78>)
 801af7a:	f003 fc91 	bl	801e8a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	8adb      	ldrh	r3, [r3, #22]
 801af86:	68fa      	ldr	r2, [r7, #12]
 801af88:	8b12      	ldrh	r2, [r2, #24]
 801af8a:	68f9      	ldr	r1, [r7, #12]
 801af8c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801af8e:	893d      	ldrh	r5, [r7, #8]
 801af90:	897c      	ldrh	r4, [r7, #10]
 801af92:	9103      	str	r1, [sp, #12]
 801af94:	2110      	movs	r1, #16
 801af96:	9102      	str	r1, [sp, #8]
 801af98:	9201      	str	r2, [sp, #4]
 801af9a:	9300      	str	r3, [sp, #0]
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	462a      	mov	r2, r5
 801afa0:	4621      	mov	r1, r4
 801afa2:	f7ff ff67 	bl	801ae74 <tcp_output_alloc_header_common>
 801afa6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801afa8:	697b      	ldr	r3, [r7, #20]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d006      	beq.n	801afbc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afb2:	68fa      	ldr	r2, [r7, #12]
 801afb4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801afb6:	441a      	add	r2, r3
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801afbc:	697b      	ldr	r3, [r7, #20]
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	3718      	adds	r7, #24
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bdb0      	pop	{r4, r5, r7, pc}
 801afc6:	bf00      	nop
 801afc8:	080219e8 	.word	0x080219e8
 801afcc:	080220f0 	.word	0x080220f0
 801afd0:	08021a3c 	.word	0x08021a3c

0801afd4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b088      	sub	sp, #32
 801afd8:	af00      	add	r7, sp, #0
 801afda:	60f8      	str	r0, [r7, #12]
 801afdc:	60b9      	str	r1, [r7, #8]
 801afde:	4611      	mov	r1, r2
 801afe0:	461a      	mov	r2, r3
 801afe2:	460b      	mov	r3, r1
 801afe4:	71fb      	strb	r3, [r7, #7]
 801afe6:	4613      	mov	r3, r2
 801afe8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801afea:	2300      	movs	r3, #0
 801afec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801afee:	68bb      	ldr	r3, [r7, #8]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d106      	bne.n	801b002 <tcp_output_fill_options+0x2e>
 801aff4:	4b12      	ldr	r3, [pc, #72]	@ (801b040 <tcp_output_fill_options+0x6c>)
 801aff6:	f240 7256 	movw	r2, #1878	@ 0x756
 801affa:	4912      	ldr	r1, [pc, #72]	@ (801b044 <tcp_output_fill_options+0x70>)
 801affc:	4812      	ldr	r0, [pc, #72]	@ (801b048 <tcp_output_fill_options+0x74>)
 801affe:	f003 fc4f 	bl	801e8a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b002:	68bb      	ldr	r3, [r7, #8]
 801b004:	685b      	ldr	r3, [r3, #4]
 801b006:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b008:	69bb      	ldr	r3, [r7, #24]
 801b00a:	3314      	adds	r3, #20
 801b00c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b00e:	8bfb      	ldrh	r3, [r7, #30]
 801b010:	009b      	lsls	r3, r3, #2
 801b012:	461a      	mov	r2, r3
 801b014:	79fb      	ldrb	r3, [r7, #7]
 801b016:	009b      	lsls	r3, r3, #2
 801b018:	f003 0304 	and.w	r3, r3, #4
 801b01c:	4413      	add	r3, r2
 801b01e:	3314      	adds	r3, #20
 801b020:	69ba      	ldr	r2, [r7, #24]
 801b022:	4413      	add	r3, r2
 801b024:	697a      	ldr	r2, [r7, #20]
 801b026:	429a      	cmp	r2, r3
 801b028:	d006      	beq.n	801b038 <tcp_output_fill_options+0x64>
 801b02a:	4b05      	ldr	r3, [pc, #20]	@ (801b040 <tcp_output_fill_options+0x6c>)
 801b02c:	f240 7275 	movw	r2, #1909	@ 0x775
 801b030:	4906      	ldr	r1, [pc, #24]	@ (801b04c <tcp_output_fill_options+0x78>)
 801b032:	4805      	ldr	r0, [pc, #20]	@ (801b048 <tcp_output_fill_options+0x74>)
 801b034:	f003 fc34 	bl	801e8a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b038:	bf00      	nop
 801b03a:	3720      	adds	r7, #32
 801b03c:	46bd      	mov	sp, r7
 801b03e:	bd80      	pop	{r7, pc}
 801b040:	080219e8 	.word	0x080219e8
 801b044:	08022118 	.word	0x08022118
 801b048:	08021a3c 	.word	0x08021a3c
 801b04c:	08022010 	.word	0x08022010

0801b050 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b050:	b580      	push	{r7, lr}
 801b052:	b08a      	sub	sp, #40	@ 0x28
 801b054:	af04      	add	r7, sp, #16
 801b056:	60f8      	str	r0, [r7, #12]
 801b058:	60b9      	str	r1, [r7, #8]
 801b05a:	607a      	str	r2, [r7, #4]
 801b05c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d106      	bne.n	801b072 <tcp_output_control_segment+0x22>
 801b064:	4b1c      	ldr	r3, [pc, #112]	@ (801b0d8 <tcp_output_control_segment+0x88>)
 801b066:	f240 7287 	movw	r2, #1927	@ 0x787
 801b06a:	491c      	ldr	r1, [pc, #112]	@ (801b0dc <tcp_output_control_segment+0x8c>)
 801b06c:	481c      	ldr	r0, [pc, #112]	@ (801b0e0 <tcp_output_control_segment+0x90>)
 801b06e:	f003 fc17 	bl	801e8a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b072:	683a      	ldr	r2, [r7, #0]
 801b074:	6879      	ldr	r1, [r7, #4]
 801b076:	68f8      	ldr	r0, [r7, #12]
 801b078:	f7fe faea 	bl	8019650 <tcp_route>
 801b07c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b07e:	693b      	ldr	r3, [r7, #16]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d102      	bne.n	801b08a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b084:	23fc      	movs	r3, #252	@ 0xfc
 801b086:	75fb      	strb	r3, [r7, #23]
 801b088:	e01c      	b.n	801b0c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d006      	beq.n	801b09e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	7adb      	ldrb	r3, [r3, #11]
 801b094:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	7a9b      	ldrb	r3, [r3, #10]
 801b09a:	757b      	strb	r3, [r7, #21]
 801b09c:	e003      	b.n	801b0a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b09e:	23ff      	movs	r3, #255	@ 0xff
 801b0a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b0a6:	7dba      	ldrb	r2, [r7, #22]
 801b0a8:	693b      	ldr	r3, [r7, #16]
 801b0aa:	9302      	str	r3, [sp, #8]
 801b0ac:	2306      	movs	r3, #6
 801b0ae:	9301      	str	r3, [sp, #4]
 801b0b0:	7d7b      	ldrb	r3, [r7, #21]
 801b0b2:	9300      	str	r3, [sp, #0]
 801b0b4:	4613      	mov	r3, r2
 801b0b6:	683a      	ldr	r2, [r7, #0]
 801b0b8:	6879      	ldr	r1, [r7, #4]
 801b0ba:	68b8      	ldr	r0, [r7, #8]
 801b0bc:	f002 f90c 	bl	801d2d8 <ip4_output_if>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b0c4:	68b8      	ldr	r0, [r7, #8]
 801b0c6:	f7f9 fead 	bl	8014e24 <pbuf_free>
  return err;
 801b0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	3718      	adds	r7, #24
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	080219e8 	.word	0x080219e8
 801b0dc:	08022140 	.word	0x08022140
 801b0e0:	08021a3c 	.word	0x08021a3c

0801b0e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b0e4:	b590      	push	{r4, r7, lr}
 801b0e6:	b08b      	sub	sp, #44	@ 0x2c
 801b0e8:	af04      	add	r7, sp, #16
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	60b9      	str	r1, [r7, #8]
 801b0ee:	607a      	str	r2, [r7, #4]
 801b0f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b0f2:	683b      	ldr	r3, [r7, #0]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d106      	bne.n	801b106 <tcp_rst+0x22>
 801b0f8:	4b1f      	ldr	r3, [pc, #124]	@ (801b178 <tcp_rst+0x94>)
 801b0fa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b0fe:	491f      	ldr	r1, [pc, #124]	@ (801b17c <tcp_rst+0x98>)
 801b100:	481f      	ldr	r0, [pc, #124]	@ (801b180 <tcp_rst+0x9c>)
 801b102:	f003 fbcd 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d106      	bne.n	801b11a <tcp_rst+0x36>
 801b10c:	4b1a      	ldr	r3, [pc, #104]	@ (801b178 <tcp_rst+0x94>)
 801b10e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b112:	491c      	ldr	r1, [pc, #112]	@ (801b184 <tcp_rst+0xa0>)
 801b114:	481a      	ldr	r0, [pc, #104]	@ (801b180 <tcp_rst+0x9c>)
 801b116:	f003 fbc3 	bl	801e8a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b11a:	2300      	movs	r3, #0
 801b11c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b11e:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801b122:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b124:	7dfb      	ldrb	r3, [r7, #23]
 801b126:	b29c      	uxth	r4, r3
 801b128:	68b8      	ldr	r0, [r7, #8]
 801b12a:	f7f8 f9d6 	bl	80134da <lwip_htonl>
 801b12e:	4602      	mov	r2, r0
 801b130:	8abb      	ldrh	r3, [r7, #20]
 801b132:	9303      	str	r3, [sp, #12]
 801b134:	2314      	movs	r3, #20
 801b136:	9302      	str	r3, [sp, #8]
 801b138:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b13a:	9301      	str	r3, [sp, #4]
 801b13c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b13e:	9300      	str	r3, [sp, #0]
 801b140:	4613      	mov	r3, r2
 801b142:	2200      	movs	r2, #0
 801b144:	4621      	mov	r1, r4
 801b146:	6878      	ldr	r0, [r7, #4]
 801b148:	f7ff fe94 	bl	801ae74 <tcp_output_alloc_header_common>
 801b14c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d00c      	beq.n	801b16e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b154:	7dfb      	ldrb	r3, [r7, #23]
 801b156:	2200      	movs	r2, #0
 801b158:	6939      	ldr	r1, [r7, #16]
 801b15a:	68f8      	ldr	r0, [r7, #12]
 801b15c:	f7ff ff3a 	bl	801afd4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b162:	683a      	ldr	r2, [r7, #0]
 801b164:	6939      	ldr	r1, [r7, #16]
 801b166:	68f8      	ldr	r0, [r7, #12]
 801b168:	f7ff ff72 	bl	801b050 <tcp_output_control_segment>
 801b16c:	e000      	b.n	801b170 <tcp_rst+0x8c>
    return;
 801b16e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b170:	371c      	adds	r7, #28
 801b172:	46bd      	mov	sp, r7
 801b174:	bd90      	pop	{r4, r7, pc}
 801b176:	bf00      	nop
 801b178:	080219e8 	.word	0x080219e8
 801b17c:	0802216c 	.word	0x0802216c
 801b180:	08021a3c 	.word	0x08021a3c
 801b184:	08022188 	.word	0x08022188

0801b188 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b188:	b590      	push	{r4, r7, lr}
 801b18a:	b087      	sub	sp, #28
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b190:	2300      	movs	r3, #0
 801b192:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b194:	2300      	movs	r3, #0
 801b196:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d106      	bne.n	801b1ac <tcp_send_empty_ack+0x24>
 801b19e:	4b28      	ldr	r3, [pc, #160]	@ (801b240 <tcp_send_empty_ack+0xb8>)
 801b1a0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b1a4:	4927      	ldr	r1, [pc, #156]	@ (801b244 <tcp_send_empty_ack+0xbc>)
 801b1a6:	4828      	ldr	r0, [pc, #160]	@ (801b248 <tcp_send_empty_ack+0xc0>)
 801b1a8:	f003 fb7a 	bl	801e8a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b1ac:	7dfb      	ldrb	r3, [r7, #23]
 801b1ae:	009b      	lsls	r3, r3, #2
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	f003 0304 	and.w	r3, r3, #4
 801b1b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b1b8:	7d7b      	ldrb	r3, [r7, #21]
 801b1ba:	b29c      	uxth	r4, r3
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f7f8 f98a 	bl	80134da <lwip_htonl>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	2200      	movs	r2, #0
 801b1ca:	4621      	mov	r1, r4
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f7ff fec3 	bl	801af58 <tcp_output_alloc_header>
 801b1d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d109      	bne.n	801b1ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	8b5b      	ldrh	r3, [r3, #26]
 801b1de:	f043 0303 	orr.w	r3, r3, #3
 801b1e2:	b29a      	uxth	r2, r3
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b1e8:	f06f 0301 	mvn.w	r3, #1
 801b1ec:	e023      	b.n	801b236 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b1ee:	7dbb      	ldrb	r3, [r7, #22]
 801b1f0:	7dfa      	ldrb	r2, [r7, #23]
 801b1f2:	6939      	ldr	r1, [r7, #16]
 801b1f4:	6878      	ldr	r0, [r7, #4]
 801b1f6:	f7ff feed 	bl	801afd4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1fa:	687a      	ldr	r2, [r7, #4]
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	3304      	adds	r3, #4
 801b200:	6939      	ldr	r1, [r7, #16]
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	f7ff ff24 	bl	801b050 <tcp_output_control_segment>
 801b208:	4603      	mov	r3, r0
 801b20a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d007      	beq.n	801b224 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	8b5b      	ldrh	r3, [r3, #26]
 801b218:	f043 0303 	orr.w	r3, r3, #3
 801b21c:	b29a      	uxth	r2, r3
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	835a      	strh	r2, [r3, #26]
 801b222:	e006      	b.n	801b232 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	8b5b      	ldrh	r3, [r3, #26]
 801b228:	f023 0303 	bic.w	r3, r3, #3
 801b22c:	b29a      	uxth	r2, r3
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b236:	4618      	mov	r0, r3
 801b238:	371c      	adds	r7, #28
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd90      	pop	{r4, r7, pc}
 801b23e:	bf00      	nop
 801b240:	080219e8 	.word	0x080219e8
 801b244:	080221a4 	.word	0x080221a4
 801b248:	08021a3c 	.word	0x08021a3c

0801b24c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b24c:	b590      	push	{r4, r7, lr}
 801b24e:	b087      	sub	sp, #28
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b254:	2300      	movs	r3, #0
 801b256:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d106      	bne.n	801b26c <tcp_keepalive+0x20>
 801b25e:	4b18      	ldr	r3, [pc, #96]	@ (801b2c0 <tcp_keepalive+0x74>)
 801b260:	f640 0224 	movw	r2, #2084	@ 0x824
 801b264:	4917      	ldr	r1, [pc, #92]	@ (801b2c4 <tcp_keepalive+0x78>)
 801b266:	4818      	ldr	r0, [pc, #96]	@ (801b2c8 <tcp_keepalive+0x7c>)
 801b268:	f003 fb1a 	bl	801e8a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b26c:	7dfb      	ldrb	r3, [r7, #23]
 801b26e:	b29c      	uxth	r4, r3
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b274:	3b01      	subs	r3, #1
 801b276:	4618      	mov	r0, r3
 801b278:	f7f8 f92f 	bl	80134da <lwip_htonl>
 801b27c:	4603      	mov	r3, r0
 801b27e:	2200      	movs	r2, #0
 801b280:	4621      	mov	r1, r4
 801b282:	6878      	ldr	r0, [r7, #4]
 801b284:	f7ff fe68 	bl	801af58 <tcp_output_alloc_header>
 801b288:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d102      	bne.n	801b296 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b290:	f04f 33ff 	mov.w	r3, #4294967295
 801b294:	e010      	b.n	801b2b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b296:	7dfb      	ldrb	r3, [r7, #23]
 801b298:	2200      	movs	r2, #0
 801b29a:	6939      	ldr	r1, [r7, #16]
 801b29c:	6878      	ldr	r0, [r7, #4]
 801b29e:	f7ff fe99 	bl	801afd4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b2a2:	687a      	ldr	r2, [r7, #4]
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	3304      	adds	r3, #4
 801b2a8:	6939      	ldr	r1, [r7, #16]
 801b2aa:	6878      	ldr	r0, [r7, #4]
 801b2ac:	f7ff fed0 	bl	801b050 <tcp_output_control_segment>
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	371c      	adds	r7, #28
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd90      	pop	{r4, r7, pc}
 801b2c0:	080219e8 	.word	0x080219e8
 801b2c4:	080221c4 	.word	0x080221c4
 801b2c8:	08021a3c 	.word	0x08021a3c

0801b2cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b2cc:	b590      	push	{r4, r7, lr}
 801b2ce:	b08b      	sub	sp, #44	@ 0x2c
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d106      	bne.n	801b2ee <tcp_zero_window_probe+0x22>
 801b2e0:	4b4c      	ldr	r3, [pc, #304]	@ (801b414 <tcp_zero_window_probe+0x148>)
 801b2e2:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b2e6:	494c      	ldr	r1, [pc, #304]	@ (801b418 <tcp_zero_window_probe+0x14c>)
 801b2e8:	484c      	ldr	r0, [pc, #304]	@ (801b41c <tcp_zero_window_probe+0x150>)
 801b2ea:	f003 fad9 	bl	801e8a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b2f4:	6a3b      	ldr	r3, [r7, #32]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d101      	bne.n	801b2fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	e086      	b.n	801b40c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b304:	2bff      	cmp	r3, #255	@ 0xff
 801b306:	d007      	beq.n	801b318 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b30e:	3301      	adds	r3, #1
 801b310:	b2da      	uxtb	r2, r3
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b318:	6a3b      	ldr	r3, [r7, #32]
 801b31a:	68db      	ldr	r3, [r3, #12]
 801b31c:	899b      	ldrh	r3, [r3, #12]
 801b31e:	b29b      	uxth	r3, r3
 801b320:	4618      	mov	r0, r3
 801b322:	f7f8 f8c5 	bl	80134b0 <lwip_htons>
 801b326:	4603      	mov	r3, r0
 801b328:	b2db      	uxtb	r3, r3
 801b32a:	f003 0301 	and.w	r3, r3, #1
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d005      	beq.n	801b33e <tcp_zero_window_probe+0x72>
 801b332:	6a3b      	ldr	r3, [r7, #32]
 801b334:	891b      	ldrh	r3, [r3, #8]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d101      	bne.n	801b33e <tcp_zero_window_probe+0x72>
 801b33a:	2301      	movs	r3, #1
 801b33c:	e000      	b.n	801b340 <tcp_zero_window_probe+0x74>
 801b33e:	2300      	movs	r3, #0
 801b340:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b342:	7ffb      	ldrb	r3, [r7, #31]
 801b344:	2b00      	cmp	r3, #0
 801b346:	bf0c      	ite	eq
 801b348:	2301      	moveq	r3, #1
 801b34a:	2300      	movne	r3, #0
 801b34c:	b2db      	uxtb	r3, r3
 801b34e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b354:	b299      	uxth	r1, r3
 801b356:	6a3b      	ldr	r3, [r7, #32]
 801b358:	68db      	ldr	r3, [r3, #12]
 801b35a:	685b      	ldr	r3, [r3, #4]
 801b35c:	8bba      	ldrh	r2, [r7, #28]
 801b35e:	6878      	ldr	r0, [r7, #4]
 801b360:	f7ff fdfa 	bl	801af58 <tcp_output_alloc_header>
 801b364:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b366:	69bb      	ldr	r3, [r7, #24]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d102      	bne.n	801b372 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b36c:	f04f 33ff 	mov.w	r3, #4294967295
 801b370:	e04c      	b.n	801b40c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b372:	69bb      	ldr	r3, [r7, #24]
 801b374:	685b      	ldr	r3, [r3, #4]
 801b376:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b378:	7ffb      	ldrb	r3, [r7, #31]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d011      	beq.n	801b3a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b37e:	697b      	ldr	r3, [r7, #20]
 801b380:	899b      	ldrh	r3, [r3, #12]
 801b382:	b29b      	uxth	r3, r3
 801b384:	b21b      	sxth	r3, r3
 801b386:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b38a:	b21c      	sxth	r4, r3
 801b38c:	2011      	movs	r0, #17
 801b38e:	f7f8 f88f 	bl	80134b0 <lwip_htons>
 801b392:	4603      	mov	r3, r0
 801b394:	b21b      	sxth	r3, r3
 801b396:	4323      	orrs	r3, r4
 801b398:	b21b      	sxth	r3, r3
 801b39a:	b29a      	uxth	r2, r3
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	819a      	strh	r2, [r3, #12]
 801b3a0:	e010      	b.n	801b3c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b3a2:	69bb      	ldr	r3, [r7, #24]
 801b3a4:	685b      	ldr	r3, [r3, #4]
 801b3a6:	3314      	adds	r3, #20
 801b3a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b3aa:	6a3b      	ldr	r3, [r7, #32]
 801b3ac:	6858      	ldr	r0, [r3, #4]
 801b3ae:	6a3b      	ldr	r3, [r7, #32]
 801b3b0:	685b      	ldr	r3, [r3, #4]
 801b3b2:	891a      	ldrh	r2, [r3, #8]
 801b3b4:	6a3b      	ldr	r3, [r7, #32]
 801b3b6:	891b      	ldrh	r3, [r3, #8]
 801b3b8:	1ad3      	subs	r3, r2, r3
 801b3ba:	b29b      	uxth	r3, r3
 801b3bc:	2201      	movs	r2, #1
 801b3be:	6939      	ldr	r1, [r7, #16]
 801b3c0:	f7f9 ff26 	bl	8015210 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b3c4:	6a3b      	ldr	r3, [r7, #32]
 801b3c6:	68db      	ldr	r3, [r3, #12]
 801b3c8:	685b      	ldr	r3, [r3, #4]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f7f8 f885 	bl	80134da <lwip_htonl>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	3301      	adds	r3, #1
 801b3d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	1ad3      	subs	r3, r2, r3
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	da02      	bge.n	801b3e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	68fa      	ldr	r2, [r7, #12]
 801b3e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	69b9      	ldr	r1, [r7, #24]
 801b3f0:	6878      	ldr	r0, [r7, #4]
 801b3f2:	f7ff fdef 	bl	801afd4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b3f6:	687a      	ldr	r2, [r7, #4]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	3304      	adds	r3, #4
 801b3fc:	69b9      	ldr	r1, [r7, #24]
 801b3fe:	6878      	ldr	r0, [r7, #4]
 801b400:	f7ff fe26 	bl	801b050 <tcp_output_control_segment>
 801b404:	4603      	mov	r3, r0
 801b406:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b408:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	372c      	adds	r7, #44	@ 0x2c
 801b410:	46bd      	mov	sp, r7
 801b412:	bd90      	pop	{r4, r7, pc}
 801b414:	080219e8 	.word	0x080219e8
 801b418:	080221e0 	.word	0x080221e0
 801b41c:	08021a3c 	.word	0x08021a3c

0801b420 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b082      	sub	sp, #8
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b428:	f7f9 ffe0 	bl	80153ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b42c:	4b0a      	ldr	r3, [pc, #40]	@ (801b458 <tcpip_tcp_timer+0x38>)
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d103      	bne.n	801b43c <tcpip_tcp_timer+0x1c>
 801b434:	4b09      	ldr	r3, [pc, #36]	@ (801b45c <tcpip_tcp_timer+0x3c>)
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d005      	beq.n	801b448 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b43c:	2200      	movs	r2, #0
 801b43e:	4908      	ldr	r1, [pc, #32]	@ (801b460 <tcpip_tcp_timer+0x40>)
 801b440:	20fa      	movs	r0, #250	@ 0xfa
 801b442:	f000 f8f3 	bl	801b62c <sys_timeout>
 801b446:	e003      	b.n	801b450 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b448:	4b06      	ldr	r3, [pc, #24]	@ (801b464 <tcpip_tcp_timer+0x44>)
 801b44a:	2200      	movs	r2, #0
 801b44c:	601a      	str	r2, [r3, #0]
  }
}
 801b44e:	bf00      	nop
 801b450:	bf00      	nop
 801b452:	3708      	adds	r7, #8
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}
 801b458:	240087a0 	.word	0x240087a0
 801b45c:	240087a4 	.word	0x240087a4
 801b460:	0801b421 	.word	0x0801b421
 801b464:	240087ec 	.word	0x240087ec

0801b468 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b46c:	4b0a      	ldr	r3, [pc, #40]	@ (801b498 <tcp_timer_needed+0x30>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d10f      	bne.n	801b494 <tcp_timer_needed+0x2c>
 801b474:	4b09      	ldr	r3, [pc, #36]	@ (801b49c <tcp_timer_needed+0x34>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d103      	bne.n	801b484 <tcp_timer_needed+0x1c>
 801b47c:	4b08      	ldr	r3, [pc, #32]	@ (801b4a0 <tcp_timer_needed+0x38>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d007      	beq.n	801b494 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b484:	4b04      	ldr	r3, [pc, #16]	@ (801b498 <tcp_timer_needed+0x30>)
 801b486:	2201      	movs	r2, #1
 801b488:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b48a:	2200      	movs	r2, #0
 801b48c:	4905      	ldr	r1, [pc, #20]	@ (801b4a4 <tcp_timer_needed+0x3c>)
 801b48e:	20fa      	movs	r0, #250	@ 0xfa
 801b490:	f000 f8cc 	bl	801b62c <sys_timeout>
  }
}
 801b494:	bf00      	nop
 801b496:	bd80      	pop	{r7, pc}
 801b498:	240087ec 	.word	0x240087ec
 801b49c:	240087a0 	.word	0x240087a0
 801b4a0:	240087a4 	.word	0x240087a4
 801b4a4:	0801b421 	.word	0x0801b421

0801b4a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b086      	sub	sp, #24
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	60f8      	str	r0, [r7, #12]
 801b4b0:	60b9      	str	r1, [r7, #8]
 801b4b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b4b4:	200a      	movs	r0, #10
 801b4b6:	f7f8 fd9b 	bl	8013ff0 <memp_malloc>
 801b4ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d109      	bne.n	801b4d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d151      	bne.n	801b56c <sys_timeout_abs+0xc4>
 801b4c8:	4b2a      	ldr	r3, [pc, #168]	@ (801b574 <sys_timeout_abs+0xcc>)
 801b4ca:	22be      	movs	r2, #190	@ 0xbe
 801b4cc:	492a      	ldr	r1, [pc, #168]	@ (801b578 <sys_timeout_abs+0xd0>)
 801b4ce:	482b      	ldr	r0, [pc, #172]	@ (801b57c <sys_timeout_abs+0xd4>)
 801b4d0:	f003 f9e6 	bl	801e8a0 <iprintf>
    return;
 801b4d4:	e04a      	b.n	801b56c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b4d6:	693b      	ldr	r3, [r7, #16]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b4dc:	693b      	ldr	r3, [r7, #16]
 801b4de:	68ba      	ldr	r2, [r7, #8]
 801b4e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	687a      	ldr	r2, [r7, #4]
 801b4e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b4e8:	693b      	ldr	r3, [r7, #16]
 801b4ea:	68fa      	ldr	r2, [r7, #12]
 801b4ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b4ee:	4b24      	ldr	r3, [pc, #144]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d103      	bne.n	801b4fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b4f6:	4a22      	ldr	r2, [pc, #136]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	6013      	str	r3, [r2, #0]
    return;
 801b4fc:	e037      	b.n	801b56e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b4fe:	693b      	ldr	r3, [r7, #16]
 801b500:	685a      	ldr	r2, [r3, #4]
 801b502:	4b1f      	ldr	r3, [pc, #124]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	685b      	ldr	r3, [r3, #4]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	0fdb      	lsrs	r3, r3, #31
 801b50c:	f003 0301 	and.w	r3, r3, #1
 801b510:	b2db      	uxtb	r3, r3
 801b512:	2b00      	cmp	r3, #0
 801b514:	d007      	beq.n	801b526 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b516:	4b1a      	ldr	r3, [pc, #104]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b518:	681a      	ldr	r2, [r3, #0]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b51e:	4a18      	ldr	r2, [pc, #96]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b520:	693b      	ldr	r3, [r7, #16]
 801b522:	6013      	str	r3, [r2, #0]
 801b524:	e023      	b.n	801b56e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b526:	4b16      	ldr	r3, [pc, #88]	@ (801b580 <sys_timeout_abs+0xd8>)
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	617b      	str	r3, [r7, #20]
 801b52c:	e01a      	b.n	801b564 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d00b      	beq.n	801b54e <sys_timeout_abs+0xa6>
 801b536:	693b      	ldr	r3, [r7, #16]
 801b538:	685a      	ldr	r2, [r3, #4]
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	685b      	ldr	r3, [r3, #4]
 801b540:	1ad3      	subs	r3, r2, r3
 801b542:	0fdb      	lsrs	r3, r3, #31
 801b544:	f003 0301 	and.w	r3, r3, #1
 801b548:	b2db      	uxtb	r3, r3
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d007      	beq.n	801b55e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	693b      	ldr	r3, [r7, #16]
 801b554:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b556:	697b      	ldr	r3, [r7, #20]
 801b558:	693a      	ldr	r2, [r7, #16]
 801b55a:	601a      	str	r2, [r3, #0]
        break;
 801b55c:	e007      	b.n	801b56e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	617b      	str	r3, [r7, #20]
 801b564:	697b      	ldr	r3, [r7, #20]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d1e1      	bne.n	801b52e <sys_timeout_abs+0x86>
 801b56a:	e000      	b.n	801b56e <sys_timeout_abs+0xc6>
    return;
 801b56c:	bf00      	nop
      }
    }
  }
}
 801b56e:	3718      	adds	r7, #24
 801b570:	46bd      	mov	sp, r7
 801b572:	bd80      	pop	{r7, pc}
 801b574:	08022204 	.word	0x08022204
 801b578:	08022238 	.word	0x08022238
 801b57c:	08022278 	.word	0x08022278
 801b580:	240087e4 	.word	0x240087e4

0801b584 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b086      	sub	sp, #24
 801b588:	af00      	add	r7, sp, #0
 801b58a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	685b      	ldr	r3, [r3, #4]
 801b594:	4798      	blx	r3

  now = sys_now();
 801b596:	f7f1 fb2b 	bl	800cbf0 <sys_now>
 801b59a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	681a      	ldr	r2, [r3, #0]
 801b5a0:	4b0f      	ldr	r3, [pc, #60]	@ (801b5e0 <lwip_cyclic_timer+0x5c>)
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	4413      	add	r3, r2
 801b5a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b5a8:	68fa      	ldr	r2, [r7, #12]
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	1ad3      	subs	r3, r2, r3
 801b5ae:	0fdb      	lsrs	r3, r3, #31
 801b5b0:	f003 0301 	and.w	r3, r3, #1
 801b5b4:	b2db      	uxtb	r3, r3
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d009      	beq.n	801b5ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	681a      	ldr	r2, [r3, #0]
 801b5be:	693b      	ldr	r3, [r7, #16]
 801b5c0:	4413      	add	r3, r2
 801b5c2:	687a      	ldr	r2, [r7, #4]
 801b5c4:	4907      	ldr	r1, [pc, #28]	@ (801b5e4 <lwip_cyclic_timer+0x60>)
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7ff ff6e 	bl	801b4a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b5cc:	e004      	b.n	801b5d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b5ce:	687a      	ldr	r2, [r7, #4]
 801b5d0:	4904      	ldr	r1, [pc, #16]	@ (801b5e4 <lwip_cyclic_timer+0x60>)
 801b5d2:	68f8      	ldr	r0, [r7, #12]
 801b5d4:	f7ff ff68 	bl	801b4a8 <sys_timeout_abs>
}
 801b5d8:	bf00      	nop
 801b5da:	3718      	adds	r7, #24
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	240087e8 	.word	0x240087e8
 801b5e4:	0801b585 	.word	0x0801b585

0801b5e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b082      	sub	sp, #8
 801b5ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b5ee:	2301      	movs	r3, #1
 801b5f0:	607b      	str	r3, [r7, #4]
 801b5f2:	e00e      	b.n	801b612 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b5f4:	4a0b      	ldr	r2, [pc, #44]	@ (801b624 <sys_timeouts_init+0x3c>)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	00db      	lsls	r3, r3, #3
 801b600:	4a08      	ldr	r2, [pc, #32]	@ (801b624 <sys_timeouts_init+0x3c>)
 801b602:	4413      	add	r3, r2
 801b604:	461a      	mov	r2, r3
 801b606:	4908      	ldr	r1, [pc, #32]	@ (801b628 <sys_timeouts_init+0x40>)
 801b608:	f000 f810 	bl	801b62c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	3301      	adds	r3, #1
 801b610:	607b      	str	r3, [r7, #4]
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	2b02      	cmp	r3, #2
 801b616:	d9ed      	bls.n	801b5f4 <sys_timeouts_init+0xc>
  }
}
 801b618:	bf00      	nop
 801b61a:	bf00      	nop
 801b61c:	3708      	adds	r7, #8
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}
 801b622:	bf00      	nop
 801b624:	08022ef4 	.word	0x08022ef4
 801b628:	0801b585 	.word	0x0801b585

0801b62c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b086      	sub	sp, #24
 801b630:	af00      	add	r7, sp, #0
 801b632:	60f8      	str	r0, [r7, #12]
 801b634:	60b9      	str	r1, [r7, #8]
 801b636:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b63e:	d306      	bcc.n	801b64e <sys_timeout+0x22>
 801b640:	4b0a      	ldr	r3, [pc, #40]	@ (801b66c <sys_timeout+0x40>)
 801b642:	f240 1229 	movw	r2, #297	@ 0x129
 801b646:	490a      	ldr	r1, [pc, #40]	@ (801b670 <sys_timeout+0x44>)
 801b648:	480a      	ldr	r0, [pc, #40]	@ (801b674 <sys_timeout+0x48>)
 801b64a:	f003 f929 	bl	801e8a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b64e:	f7f1 facf 	bl	800cbf0 <sys_now>
 801b652:	4602      	mov	r2, r0
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	4413      	add	r3, r2
 801b658:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b65a:	687a      	ldr	r2, [r7, #4]
 801b65c:	68b9      	ldr	r1, [r7, #8]
 801b65e:	6978      	ldr	r0, [r7, #20]
 801b660:	f7ff ff22 	bl	801b4a8 <sys_timeout_abs>
#endif
}
 801b664:	bf00      	nop
 801b666:	3718      	adds	r7, #24
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd80      	pop	{r7, pc}
 801b66c:	08022204 	.word	0x08022204
 801b670:	080222a0 	.word	0x080222a0
 801b674:	08022278 	.word	0x08022278

0801b678 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b084      	sub	sp, #16
 801b67c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b67e:	f7f1 fab7 	bl	800cbf0 <sys_now>
 801b682:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b684:	4b17      	ldr	r3, [pc, #92]	@ (801b6e4 <sys_check_timeouts+0x6c>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d022      	beq.n	801b6d6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	685b      	ldr	r3, [r3, #4]
 801b694:	68fa      	ldr	r2, [r7, #12]
 801b696:	1ad3      	subs	r3, r2, r3
 801b698:	0fdb      	lsrs	r3, r3, #31
 801b69a:	f003 0301 	and.w	r3, r3, #1
 801b69e:	b2db      	uxtb	r3, r3
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d11a      	bne.n	801b6da <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b6a4:	68bb      	ldr	r3, [r7, #8]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	4a0e      	ldr	r2, [pc, #56]	@ (801b6e4 <sys_check_timeouts+0x6c>)
 801b6aa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	689b      	ldr	r3, [r3, #8]
 801b6b0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b6b2:	68bb      	ldr	r3, [r7, #8]
 801b6b4:	68db      	ldr	r3, [r3, #12]
 801b6b6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	685b      	ldr	r3, [r3, #4]
 801b6bc:	4a0a      	ldr	r2, [pc, #40]	@ (801b6e8 <sys_check_timeouts+0x70>)
 801b6be:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b6c0:	68b9      	ldr	r1, [r7, #8]
 801b6c2:	200a      	movs	r0, #10
 801b6c4:	f7f8 fd0a 	bl	80140dc <memp_free>
    if (handler != NULL) {
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d0da      	beq.n	801b684 <sys_check_timeouts+0xc>
      handler(arg);
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	6838      	ldr	r0, [r7, #0]
 801b6d2:	4798      	blx	r3
  do {
 801b6d4:	e7d6      	b.n	801b684 <sys_check_timeouts+0xc>
      return;
 801b6d6:	bf00      	nop
 801b6d8:	e000      	b.n	801b6dc <sys_check_timeouts+0x64>
      return;
 801b6da:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b6dc:	3710      	adds	r7, #16
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bd80      	pop	{r7, pc}
 801b6e2:	bf00      	nop
 801b6e4:	240087e4 	.word	0x240087e4
 801b6e8:	240087e8 	.word	0x240087e8

0801b6ec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b6ec:	b580      	push	{r7, lr}
 801b6ee:	b082      	sub	sp, #8
 801b6f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b6f2:	4b16      	ldr	r3, [pc, #88]	@ (801b74c <sys_timeouts_sleeptime+0x60>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d102      	bne.n	801b700 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 801b6fe:	e020      	b.n	801b742 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b700:	f7f1 fa76 	bl	800cbf0 <sys_now>
 801b704:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b706:	4b11      	ldr	r3, [pc, #68]	@ (801b74c <sys_timeouts_sleeptime+0x60>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	685a      	ldr	r2, [r3, #4]
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	0fdb      	lsrs	r3, r3, #31
 801b712:	f003 0301 	and.w	r3, r3, #1
 801b716:	b2db      	uxtb	r3, r3
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d001      	beq.n	801b720 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b71c:	2300      	movs	r3, #0
 801b71e:	e010      	b.n	801b742 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b720:	4b0a      	ldr	r3, [pc, #40]	@ (801b74c <sys_timeouts_sleeptime+0x60>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	685a      	ldr	r2, [r3, #4]
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	1ad3      	subs	r3, r2, r3
 801b72a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	da06      	bge.n	801b740 <sys_timeouts_sleeptime+0x54>
 801b732:	4b07      	ldr	r3, [pc, #28]	@ (801b750 <sys_timeouts_sleeptime+0x64>)
 801b734:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b738:	4906      	ldr	r1, [pc, #24]	@ (801b754 <sys_timeouts_sleeptime+0x68>)
 801b73a:	4807      	ldr	r0, [pc, #28]	@ (801b758 <sys_timeouts_sleeptime+0x6c>)
 801b73c:	f003 f8b0 	bl	801e8a0 <iprintf>
    return ret;
 801b740:	683b      	ldr	r3, [r7, #0]
  }
}
 801b742:	4618      	mov	r0, r3
 801b744:	3708      	adds	r7, #8
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	bf00      	nop
 801b74c:	240087e4 	.word	0x240087e4
 801b750:	08022204 	.word	0x08022204
 801b754:	080222d8 	.word	0x080222d8
 801b758:	08022278 	.word	0x08022278

0801b75c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b760:	f002 ff9e 	bl	801e6a0 <rand>
 801b764:	4603      	mov	r3, r0
 801b766:	b29b      	uxth	r3, r3
 801b768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b76c:	b29b      	uxth	r3, r3
 801b76e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b772:	b29a      	uxth	r2, r3
 801b774:	4b01      	ldr	r3, [pc, #4]	@ (801b77c <udp_init+0x20>)
 801b776:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b778:	bf00      	nop
 801b77a:	bd80      	pop	{r7, pc}
 801b77c:	24000030 	.word	0x24000030

0801b780 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b780:	b480      	push	{r7}
 801b782:	b083      	sub	sp, #12
 801b784:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b786:	2300      	movs	r3, #0
 801b788:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b78a:	4b17      	ldr	r3, [pc, #92]	@ (801b7e8 <udp_new_port+0x68>)
 801b78c:	881b      	ldrh	r3, [r3, #0]
 801b78e:	1c5a      	adds	r2, r3, #1
 801b790:	b291      	uxth	r1, r2
 801b792:	4a15      	ldr	r2, [pc, #84]	@ (801b7e8 <udp_new_port+0x68>)
 801b794:	8011      	strh	r1, [r2, #0]
 801b796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b79a:	4293      	cmp	r3, r2
 801b79c:	d103      	bne.n	801b7a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b79e:	4b12      	ldr	r3, [pc, #72]	@ (801b7e8 <udp_new_port+0x68>)
 801b7a0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b7a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7a6:	4b11      	ldr	r3, [pc, #68]	@ (801b7ec <udp_new_port+0x6c>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	603b      	str	r3, [r7, #0]
 801b7ac:	e011      	b.n	801b7d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b7ae:	683b      	ldr	r3, [r7, #0]
 801b7b0:	8a5a      	ldrh	r2, [r3, #18]
 801b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (801b7e8 <udp_new_port+0x68>)
 801b7b4:	881b      	ldrh	r3, [r3, #0]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d108      	bne.n	801b7cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b7ba:	88fb      	ldrh	r3, [r7, #6]
 801b7bc:	3301      	adds	r3, #1
 801b7be:	80fb      	strh	r3, [r7, #6]
 801b7c0:	88fb      	ldrh	r3, [r7, #6]
 801b7c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b7c6:	d3e0      	bcc.n	801b78a <udp_new_port+0xa>
        return 0;
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	e007      	b.n	801b7dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	68db      	ldr	r3, [r3, #12]
 801b7d0:	603b      	str	r3, [r7, #0]
 801b7d2:	683b      	ldr	r3, [r7, #0]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d1ea      	bne.n	801b7ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b7d8:	4b03      	ldr	r3, [pc, #12]	@ (801b7e8 <udp_new_port+0x68>)
 801b7da:	881b      	ldrh	r3, [r3, #0]
}
 801b7dc:	4618      	mov	r0, r3
 801b7de:	370c      	adds	r7, #12
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e6:	4770      	bx	lr
 801b7e8:	24000030 	.word	0x24000030
 801b7ec:	240087f0 	.word	0x240087f0

0801b7f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b084      	sub	sp, #16
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	60f8      	str	r0, [r7, #12]
 801b7f8:	60b9      	str	r1, [r7, #8]
 801b7fa:	4613      	mov	r3, r2
 801b7fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d105      	bne.n	801b810 <udp_input_local_match+0x20>
 801b804:	4b27      	ldr	r3, [pc, #156]	@ (801b8a4 <udp_input_local_match+0xb4>)
 801b806:	2287      	movs	r2, #135	@ 0x87
 801b808:	4927      	ldr	r1, [pc, #156]	@ (801b8a8 <udp_input_local_match+0xb8>)
 801b80a:	4828      	ldr	r0, [pc, #160]	@ (801b8ac <udp_input_local_match+0xbc>)
 801b80c:	f003 f848 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d105      	bne.n	801b822 <udp_input_local_match+0x32>
 801b816:	4b23      	ldr	r3, [pc, #140]	@ (801b8a4 <udp_input_local_match+0xb4>)
 801b818:	2288      	movs	r2, #136	@ 0x88
 801b81a:	4925      	ldr	r1, [pc, #148]	@ (801b8b0 <udp_input_local_match+0xc0>)
 801b81c:	4823      	ldr	r0, [pc, #140]	@ (801b8ac <udp_input_local_match+0xbc>)
 801b81e:	f003 f83f 	bl	801e8a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	7a1b      	ldrb	r3, [r3, #8]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d00b      	beq.n	801b842 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	7a1a      	ldrb	r2, [r3, #8]
 801b82e:	4b21      	ldr	r3, [pc, #132]	@ (801b8b4 <udp_input_local_match+0xc4>)
 801b830:	685b      	ldr	r3, [r3, #4]
 801b832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b836:	3301      	adds	r3, #1
 801b838:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b83a:	429a      	cmp	r2, r3
 801b83c:	d001      	beq.n	801b842 <udp_input_local_match+0x52>
    return 0;
 801b83e:	2300      	movs	r3, #0
 801b840:	e02b      	b.n	801b89a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b842:	79fb      	ldrb	r3, [r7, #7]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d018      	beq.n	801b87a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d013      	beq.n	801b876 <udp_input_local_match+0x86>
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d00f      	beq.n	801b876 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b856:	4b17      	ldr	r3, [pc, #92]	@ (801b8b4 <udp_input_local_match+0xc4>)
 801b858:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b85e:	d00a      	beq.n	801b876 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	681a      	ldr	r2, [r3, #0]
 801b864:	4b13      	ldr	r3, [pc, #76]	@ (801b8b4 <udp_input_local_match+0xc4>)
 801b866:	695b      	ldr	r3, [r3, #20]
 801b868:	405a      	eors	r2, r3
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	3308      	adds	r3, #8
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b872:	2b00      	cmp	r3, #0
 801b874:	d110      	bne.n	801b898 <udp_input_local_match+0xa8>
          return 1;
 801b876:	2301      	movs	r3, #1
 801b878:	e00f      	b.n	801b89a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d009      	beq.n	801b894 <udp_input_local_match+0xa4>
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d005      	beq.n	801b894 <udp_input_local_match+0xa4>
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	681a      	ldr	r2, [r3, #0]
 801b88c:	4b09      	ldr	r3, [pc, #36]	@ (801b8b4 <udp_input_local_match+0xc4>)
 801b88e:	695b      	ldr	r3, [r3, #20]
 801b890:	429a      	cmp	r2, r3
 801b892:	d101      	bne.n	801b898 <udp_input_local_match+0xa8>
        return 1;
 801b894:	2301      	movs	r3, #1
 801b896:	e000      	b.n	801b89a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b898:	2300      	movs	r3, #0
}
 801b89a:	4618      	mov	r0, r3
 801b89c:	3710      	adds	r7, #16
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	bd80      	pop	{r7, pc}
 801b8a2:	bf00      	nop
 801b8a4:	080222ec 	.word	0x080222ec
 801b8a8:	0802231c 	.word	0x0802231c
 801b8ac:	08022340 	.word	0x08022340
 801b8b0:	08022368 	.word	0x08022368
 801b8b4:	24005394 	.word	0x24005394

0801b8b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b8b8:	b590      	push	{r4, r7, lr}
 801b8ba:	b08d      	sub	sp, #52	@ 0x34
 801b8bc:	af02      	add	r7, sp, #8
 801b8be:	6078      	str	r0, [r7, #4]
 801b8c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d105      	bne.n	801b8d8 <udp_input+0x20>
 801b8cc:	4b7c      	ldr	r3, [pc, #496]	@ (801bac0 <udp_input+0x208>)
 801b8ce:	22cf      	movs	r2, #207	@ 0xcf
 801b8d0:	497c      	ldr	r1, [pc, #496]	@ (801bac4 <udp_input+0x20c>)
 801b8d2:	487d      	ldr	r0, [pc, #500]	@ (801bac8 <udp_input+0x210>)
 801b8d4:	f002 ffe4 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d105      	bne.n	801b8ea <udp_input+0x32>
 801b8de:	4b78      	ldr	r3, [pc, #480]	@ (801bac0 <udp_input+0x208>)
 801b8e0:	22d0      	movs	r2, #208	@ 0xd0
 801b8e2:	497a      	ldr	r1, [pc, #488]	@ (801bacc <udp_input+0x214>)
 801b8e4:	4878      	ldr	r0, [pc, #480]	@ (801bac8 <udp_input+0x210>)
 801b8e6:	f002 ffdb 	bl	801e8a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	895b      	ldrh	r3, [r3, #10]
 801b8ee:	2b07      	cmp	r3, #7
 801b8f0:	d803      	bhi.n	801b8fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b8f2:	6878      	ldr	r0, [r7, #4]
 801b8f4:	f7f9 fa96 	bl	8014e24 <pbuf_free>
    goto end;
 801b8f8:	e0de      	b.n	801bab8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b900:	4b73      	ldr	r3, [pc, #460]	@ (801bad0 <udp_input+0x218>)
 801b902:	695b      	ldr	r3, [r3, #20]
 801b904:	4a72      	ldr	r2, [pc, #456]	@ (801bad0 <udp_input+0x218>)
 801b906:	6812      	ldr	r2, [r2, #0]
 801b908:	4611      	mov	r1, r2
 801b90a:	4618      	mov	r0, r3
 801b90c:	f001 fdbc 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801b910:	4603      	mov	r3, r0
 801b912:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	881b      	ldrh	r3, [r3, #0]
 801b918:	b29b      	uxth	r3, r3
 801b91a:	4618      	mov	r0, r3
 801b91c:	f7f7 fdc8 	bl	80134b0 <lwip_htons>
 801b920:	4603      	mov	r3, r0
 801b922:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	885b      	ldrh	r3, [r3, #2]
 801b928:	b29b      	uxth	r3, r3
 801b92a:	4618      	mov	r0, r3
 801b92c:	f7f7 fdc0 	bl	80134b0 <lwip_htons>
 801b930:	4603      	mov	r3, r0
 801b932:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b934:	2300      	movs	r3, #0
 801b936:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b938:	2300      	movs	r3, #0
 801b93a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b93c:	2300      	movs	r3, #0
 801b93e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b940:	4b64      	ldr	r3, [pc, #400]	@ (801bad4 <udp_input+0x21c>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	627b      	str	r3, [r7, #36]	@ 0x24
 801b946:	e054      	b.n	801b9f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94a:	8a5b      	ldrh	r3, [r3, #18]
 801b94c:	89fa      	ldrh	r2, [r7, #14]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d14a      	bne.n	801b9e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b952:	7cfb      	ldrb	r3, [r7, #19]
 801b954:	461a      	mov	r2, r3
 801b956:	6839      	ldr	r1, [r7, #0]
 801b958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b95a:	f7ff ff49 	bl	801b7f0 <udp_input_local_match>
 801b95e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b960:	2b00      	cmp	r3, #0
 801b962:	d041      	beq.n	801b9e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b966:	7c1b      	ldrb	r3, [r3, #16]
 801b968:	f003 0304 	and.w	r3, r3, #4
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d11d      	bne.n	801b9ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b970:	69fb      	ldr	r3, [r7, #28]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d102      	bne.n	801b97c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b978:	61fb      	str	r3, [r7, #28]
 801b97a:	e017      	b.n	801b9ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b97c:	7cfb      	ldrb	r3, [r7, #19]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d014      	beq.n	801b9ac <udp_input+0xf4>
 801b982:	4b53      	ldr	r3, [pc, #332]	@ (801bad0 <udp_input+0x218>)
 801b984:	695b      	ldr	r3, [r3, #20]
 801b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b98a:	d10f      	bne.n	801b9ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b98c:	69fb      	ldr	r3, [r7, #28]
 801b98e:	681a      	ldr	r2, [r3, #0]
 801b990:	683b      	ldr	r3, [r7, #0]
 801b992:	3304      	adds	r3, #4
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	429a      	cmp	r2, r3
 801b998:	d008      	beq.n	801b9ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b99c:	681a      	ldr	r2, [r3, #0]
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	3304      	adds	r3, #4
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d101      	bne.n	801b9ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ae:	8a9b      	ldrh	r3, [r3, #20]
 801b9b0:	8a3a      	ldrh	r2, [r7, #16]
 801b9b2:	429a      	cmp	r2, r3
 801b9b4:	d118      	bne.n	801b9e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d005      	beq.n	801b9ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9c0:	685a      	ldr	r2, [r3, #4]
 801b9c2:	4b43      	ldr	r3, [pc, #268]	@ (801bad0 <udp_input+0x218>)
 801b9c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b9c6:	429a      	cmp	r2, r3
 801b9c8:	d10e      	bne.n	801b9e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b9ca:	6a3b      	ldr	r3, [r7, #32]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d014      	beq.n	801b9fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9d2:	68da      	ldr	r2, [r3, #12]
 801b9d4:	6a3b      	ldr	r3, [r7, #32]
 801b9d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b9d8:	4b3e      	ldr	r3, [pc, #248]	@ (801bad4 <udp_input+0x21c>)
 801b9da:	681a      	ldr	r2, [r3, #0]
 801b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b9e0:	4a3c      	ldr	r2, [pc, #240]	@ (801bad4 <udp_input+0x21c>)
 801b9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b9e6:	e008      	b.n	801b9fa <udp_input+0x142>
      }
    }

    prev = pcb;
 801b9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ee:	68db      	ldr	r3, [r3, #12]
 801b9f0:	627b      	str	r3, [r7, #36]	@ 0x24
 801b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d1a7      	bne.n	801b948 <udp_input+0x90>
 801b9f8:	e000      	b.n	801b9fc <udp_input+0x144>
        break;
 801b9fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d101      	bne.n	801ba06 <udp_input+0x14e>
    pcb = uncon_pcb;
 801ba02:	69fb      	ldr	r3, [r7, #28]
 801ba04:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d002      	beq.n	801ba12 <udp_input+0x15a>
    for_us = 1;
 801ba0c:	2301      	movs	r3, #1
 801ba0e:	76fb      	strb	r3, [r7, #27]
 801ba10:	e00a      	b.n	801ba28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ba12:	683b      	ldr	r3, [r7, #0]
 801ba14:	3304      	adds	r3, #4
 801ba16:	681a      	ldr	r2, [r3, #0]
 801ba18:	4b2d      	ldr	r3, [pc, #180]	@ (801bad0 <udp_input+0x218>)
 801ba1a:	695b      	ldr	r3, [r3, #20]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	bf0c      	ite	eq
 801ba20:	2301      	moveq	r3, #1
 801ba22:	2300      	movne	r3, #0
 801ba24:	b2db      	uxtb	r3, r3
 801ba26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ba28:	7efb      	ldrb	r3, [r7, #27]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d041      	beq.n	801bab2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ba2e:	2108      	movs	r1, #8
 801ba30:	6878      	ldr	r0, [r7, #4]
 801ba32:	f7f9 f971 	bl	8014d18 <pbuf_remove_header>
 801ba36:	4603      	mov	r3, r0
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d00a      	beq.n	801ba52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ba3c:	4b20      	ldr	r3, [pc, #128]	@ (801bac0 <udp_input+0x208>)
 801ba3e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801ba42:	4925      	ldr	r1, [pc, #148]	@ (801bad8 <udp_input+0x220>)
 801ba44:	4820      	ldr	r0, [pc, #128]	@ (801bac8 <udp_input+0x210>)
 801ba46:	f002 ff2b 	bl	801e8a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ba4a:	6878      	ldr	r0, [r7, #4]
 801ba4c:	f7f9 f9ea 	bl	8014e24 <pbuf_free>
      goto end;
 801ba50:	e032      	b.n	801bab8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d012      	beq.n	801ba7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba5a:	699b      	ldr	r3, [r3, #24]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d00a      	beq.n	801ba76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ba60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba62:	699c      	ldr	r4, [r3, #24]
 801ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba66:	69d8      	ldr	r0, [r3, #28]
 801ba68:	8a3b      	ldrh	r3, [r7, #16]
 801ba6a:	9300      	str	r3, [sp, #0]
 801ba6c:	4b1b      	ldr	r3, [pc, #108]	@ (801badc <udp_input+0x224>)
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ba72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ba74:	e021      	b.n	801baba <udp_input+0x202>
        pbuf_free(p);
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f7f9 f9d4 	bl	8014e24 <pbuf_free>
        goto end;
 801ba7c:	e01c      	b.n	801bab8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ba7e:	7cfb      	ldrb	r3, [r7, #19]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d112      	bne.n	801baaa <udp_input+0x1f2>
 801ba84:	4b12      	ldr	r3, [pc, #72]	@ (801bad0 <udp_input+0x218>)
 801ba86:	695b      	ldr	r3, [r3, #20]
 801ba88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba8c:	2be0      	cmp	r3, #224	@ 0xe0
 801ba8e:	d00c      	beq.n	801baaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ba90:	4b0f      	ldr	r3, [pc, #60]	@ (801bad0 <udp_input+0x218>)
 801ba92:	899b      	ldrh	r3, [r3, #12]
 801ba94:	3308      	adds	r3, #8
 801ba96:	b29b      	uxth	r3, r3
 801ba98:	b21b      	sxth	r3, r3
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	6878      	ldr	r0, [r7, #4]
 801ba9e:	f7f9 f9ae 	bl	8014dfe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801baa2:	2103      	movs	r1, #3
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f001 f9c5 	bl	801ce34 <icmp_dest_unreach>
      pbuf_free(p);
 801baaa:	6878      	ldr	r0, [r7, #4]
 801baac:	f7f9 f9ba 	bl	8014e24 <pbuf_free>
  return;
 801bab0:	e003      	b.n	801baba <udp_input+0x202>
    pbuf_free(p);
 801bab2:	6878      	ldr	r0, [r7, #4]
 801bab4:	f7f9 f9b6 	bl	8014e24 <pbuf_free>
  return;
 801bab8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801baba:	372c      	adds	r7, #44	@ 0x2c
 801babc:	46bd      	mov	sp, r7
 801babe:	bd90      	pop	{r4, r7, pc}
 801bac0:	080222ec 	.word	0x080222ec
 801bac4:	08022390 	.word	0x08022390
 801bac8:	08022340 	.word	0x08022340
 801bacc:	080223a8 	.word	0x080223a8
 801bad0:	24005394 	.word	0x24005394
 801bad4:	240087f0 	.word	0x240087f0
 801bad8:	080223c4 	.word	0x080223c4
 801badc:	240053a4 	.word	0x240053a4

0801bae0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b086      	sub	sp, #24
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	60f8      	str	r0, [r7, #12]
 801bae8:	60b9      	str	r1, [r7, #8]
 801baea:	4613      	mov	r3, r2
 801baec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801baee:	68bb      	ldr	r3, [r7, #8]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d101      	bne.n	801baf8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801baf4:	4b39      	ldr	r3, [pc, #228]	@ (801bbdc <udp_bind+0xfc>)
 801baf6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d109      	bne.n	801bb12 <udp_bind+0x32>
 801bafe:	4b38      	ldr	r3, [pc, #224]	@ (801bbe0 <udp_bind+0x100>)
 801bb00:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bb04:	4937      	ldr	r1, [pc, #220]	@ (801bbe4 <udp_bind+0x104>)
 801bb06:	4838      	ldr	r0, [pc, #224]	@ (801bbe8 <udp_bind+0x108>)
 801bb08:	f002 feca 	bl	801e8a0 <iprintf>
 801bb0c:	f06f 030f 	mvn.w	r3, #15
 801bb10:	e060      	b.n	801bbd4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bb12:	2300      	movs	r3, #0
 801bb14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bb16:	4b35      	ldr	r3, [pc, #212]	@ (801bbec <udp_bind+0x10c>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	617b      	str	r3, [r7, #20]
 801bb1c:	e009      	b.n	801bb32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bb1e:	68fa      	ldr	r2, [r7, #12]
 801bb20:	697b      	ldr	r3, [r7, #20]
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d102      	bne.n	801bb2c <udp_bind+0x4c>
      rebind = 1;
 801bb26:	2301      	movs	r3, #1
 801bb28:	74fb      	strb	r3, [r7, #19]
      break;
 801bb2a:	e005      	b.n	801bb38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bb2c:	697b      	ldr	r3, [r7, #20]
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	617b      	str	r3, [r7, #20]
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d1f2      	bne.n	801bb1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bb38:	88fb      	ldrh	r3, [r7, #6]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d109      	bne.n	801bb52 <udp_bind+0x72>
    port = udp_new_port();
 801bb3e:	f7ff fe1f 	bl	801b780 <udp_new_port>
 801bb42:	4603      	mov	r3, r0
 801bb44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bb46:	88fb      	ldrh	r3, [r7, #6]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d12c      	bne.n	801bba6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bb4c:	f06f 0307 	mvn.w	r3, #7
 801bb50:	e040      	b.n	801bbd4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bb52:	4b26      	ldr	r3, [pc, #152]	@ (801bbec <udp_bind+0x10c>)
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	617b      	str	r3, [r7, #20]
 801bb58:	e022      	b.n	801bba0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	697b      	ldr	r3, [r7, #20]
 801bb5e:	429a      	cmp	r2, r3
 801bb60:	d01b      	beq.n	801bb9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	8a5b      	ldrh	r3, [r3, #18]
 801bb66:	88fa      	ldrh	r2, [r7, #6]
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	d116      	bne.n	801bb9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bb6c:	697b      	ldr	r3, [r7, #20]
 801bb6e:	681a      	ldr	r2, [r3, #0]
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d00d      	beq.n	801bb94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bb78:	68bb      	ldr	r3, [r7, #8]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d00a      	beq.n	801bb94 <udp_bind+0xb4>
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d006      	beq.n	801bb94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bb86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d003      	beq.n	801bb94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d102      	bne.n	801bb9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bb94:	f06f 0307 	mvn.w	r3, #7
 801bb98:	e01c      	b.n	801bbd4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	68db      	ldr	r3, [r3, #12]
 801bb9e:	617b      	str	r3, [r7, #20]
 801bba0:	697b      	ldr	r3, [r7, #20]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d1d9      	bne.n	801bb5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d002      	beq.n	801bbb2 <udp_bind+0xd2>
 801bbac:	68bb      	ldr	r3, [r7, #8]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	e000      	b.n	801bbb4 <udp_bind+0xd4>
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	68fa      	ldr	r2, [r7, #12]
 801bbb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	88fa      	ldrh	r2, [r7, #6]
 801bbbc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bbbe:	7cfb      	ldrb	r3, [r7, #19]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d106      	bne.n	801bbd2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bbc4:	4b09      	ldr	r3, [pc, #36]	@ (801bbec <udp_bind+0x10c>)
 801bbc6:	681a      	ldr	r2, [r3, #0]
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bbcc:	4a07      	ldr	r2, [pc, #28]	@ (801bbec <udp_bind+0x10c>)
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bbd2:	2300      	movs	r3, #0
}
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3718      	adds	r7, #24
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	08022f0c 	.word	0x08022f0c
 801bbe0:	080222ec 	.word	0x080222ec
 801bbe4:	080225b4 	.word	0x080225b4
 801bbe8:	08022340 	.word	0x08022340
 801bbec:	240087f0 	.word	0x240087f0

0801bbf0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b084      	sub	sp, #16
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	60f8      	str	r0, [r7, #12]
 801bbf8:	60b9      	str	r1, [r7, #8]
 801bbfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d107      	bne.n	801bc12 <udp_recv+0x22>
 801bc02:	4b08      	ldr	r3, [pc, #32]	@ (801bc24 <udp_recv+0x34>)
 801bc04:	f240 428a 	movw	r2, #1162	@ 0x48a
 801bc08:	4907      	ldr	r1, [pc, #28]	@ (801bc28 <udp_recv+0x38>)
 801bc0a:	4808      	ldr	r0, [pc, #32]	@ (801bc2c <udp_recv+0x3c>)
 801bc0c:	f002 fe48 	bl	801e8a0 <iprintf>
 801bc10:	e005      	b.n	801bc1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	68ba      	ldr	r2, [r7, #8]
 801bc16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	61da      	str	r2, [r3, #28]
}
 801bc1e:	3710      	adds	r7, #16
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd80      	pop	{r7, pc}
 801bc24:	080222ec 	.word	0x080222ec
 801bc28:	08022620 	.word	0x08022620
 801bc2c:	08022340 	.word	0x08022340

0801bc30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b084      	sub	sp, #16
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d107      	bne.n	801bc4e <udp_remove+0x1e>
 801bc3e:	4b19      	ldr	r3, [pc, #100]	@ (801bca4 <udp_remove+0x74>)
 801bc40:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801bc44:	4918      	ldr	r1, [pc, #96]	@ (801bca8 <udp_remove+0x78>)
 801bc46:	4819      	ldr	r0, [pc, #100]	@ (801bcac <udp_remove+0x7c>)
 801bc48:	f002 fe2a 	bl	801e8a0 <iprintf>
 801bc4c:	e026      	b.n	801bc9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801bc4e:	4b18      	ldr	r3, [pc, #96]	@ (801bcb0 <udp_remove+0x80>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	687a      	ldr	r2, [r7, #4]
 801bc54:	429a      	cmp	r2, r3
 801bc56:	d105      	bne.n	801bc64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801bc58:	4b15      	ldr	r3, [pc, #84]	@ (801bcb0 <udp_remove+0x80>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	68db      	ldr	r3, [r3, #12]
 801bc5e:	4a14      	ldr	r2, [pc, #80]	@ (801bcb0 <udp_remove+0x80>)
 801bc60:	6013      	str	r3, [r2, #0]
 801bc62:	e017      	b.n	801bc94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bc64:	4b12      	ldr	r3, [pc, #72]	@ (801bcb0 <udp_remove+0x80>)
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	60fb      	str	r3, [r7, #12]
 801bc6a:	e010      	b.n	801bc8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	68db      	ldr	r3, [r3, #12]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d009      	beq.n	801bc88 <udp_remove+0x58>
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	68db      	ldr	r3, [r3, #12]
 801bc78:	687a      	ldr	r2, [r7, #4]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	d104      	bne.n	801bc88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	68da      	ldr	r2, [r3, #12]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	60da      	str	r2, [r3, #12]
        break;
 801bc86:	e005      	b.n	801bc94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	68db      	ldr	r3, [r3, #12]
 801bc8c:	60fb      	str	r3, [r7, #12]
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d1eb      	bne.n	801bc6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801bc94:	6879      	ldr	r1, [r7, #4]
 801bc96:	2000      	movs	r0, #0
 801bc98:	f7f8 fa20 	bl	80140dc <memp_free>
}
 801bc9c:	3710      	adds	r7, #16
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop
 801bca4:	080222ec 	.word	0x080222ec
 801bca8:	08022638 	.word	0x08022638
 801bcac:	08022340 	.word	0x08022340
 801bcb0:	240087f0 	.word	0x240087f0

0801bcb4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801bcba:	2000      	movs	r0, #0
 801bcbc:	f7f8 f998 	bl	8013ff0 <memp_malloc>
 801bcc0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d007      	beq.n	801bcd8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bcc8:	2220      	movs	r2, #32
 801bcca:	2100      	movs	r1, #0
 801bccc:	6878      	ldr	r0, [r7, #4]
 801bcce:	f002 fe4c 	bl	801e96a <memset>
    pcb->ttl = UDP_TTL;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	22ff      	movs	r2, #255	@ 0xff
 801bcd6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801bcd8:	687b      	ldr	r3, [r7, #4]
}
 801bcda:	4618      	mov	r0, r3
 801bcdc:	3708      	adds	r7, #8
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}

0801bce2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bce2:	b580      	push	{r7, lr}
 801bce4:	b084      	sub	sp, #16
 801bce6:	af00      	add	r7, sp, #0
 801bce8:	4603      	mov	r3, r0
 801bcea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bcec:	f7ff ffe2 	bl	801bcb4 <udp_new>
 801bcf0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bcf2:	68fb      	ldr	r3, [r7, #12]
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3710      	adds	r7, #16
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}

0801bcfc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bcfc:	b480      	push	{r7}
 801bcfe:	b085      	sub	sp, #20
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
 801bd04:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d01e      	beq.n	801bd4a <udp_netif_ip_addr_changed+0x4e>
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d01a      	beq.n	801bd4a <udp_netif_ip_addr_changed+0x4e>
 801bd14:	683b      	ldr	r3, [r7, #0]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d017      	beq.n	801bd4a <udp_netif_ip_addr_changed+0x4e>
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d013      	beq.n	801bd4a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bd22:	4b0d      	ldr	r3, [pc, #52]	@ (801bd58 <udp_netif_ip_addr_changed+0x5c>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	60fb      	str	r3, [r7, #12]
 801bd28:	e00c      	b.n	801bd44 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	681a      	ldr	r2, [r3, #0]
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d103      	bne.n	801bd3e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	681a      	ldr	r2, [r3, #0]
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	68db      	ldr	r3, [r3, #12]
 801bd42:	60fb      	str	r3, [r7, #12]
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d1ef      	bne.n	801bd2a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801bd4a:	bf00      	nop
 801bd4c:	3714      	adds	r7, #20
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd54:	4770      	bx	lr
 801bd56:	bf00      	nop
 801bd58:	240087f0 	.word	0x240087f0

0801bd5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b082      	sub	sp, #8
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bd64:	4915      	ldr	r1, [pc, #84]	@ (801bdbc <etharp_free_entry+0x60>)
 801bd66:	687a      	ldr	r2, [r7, #4]
 801bd68:	4613      	mov	r3, r2
 801bd6a:	005b      	lsls	r3, r3, #1
 801bd6c:	4413      	add	r3, r2
 801bd6e:	00db      	lsls	r3, r3, #3
 801bd70:	440b      	add	r3, r1
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d013      	beq.n	801bda0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bd78:	4910      	ldr	r1, [pc, #64]	@ (801bdbc <etharp_free_entry+0x60>)
 801bd7a:	687a      	ldr	r2, [r7, #4]
 801bd7c:	4613      	mov	r3, r2
 801bd7e:	005b      	lsls	r3, r3, #1
 801bd80:	4413      	add	r3, r2
 801bd82:	00db      	lsls	r3, r3, #3
 801bd84:	440b      	add	r3, r1
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7f9 f84b 	bl	8014e24 <pbuf_free>
    arp_table[i].q = NULL;
 801bd8e:	490b      	ldr	r1, [pc, #44]	@ (801bdbc <etharp_free_entry+0x60>)
 801bd90:	687a      	ldr	r2, [r7, #4]
 801bd92:	4613      	mov	r3, r2
 801bd94:	005b      	lsls	r3, r3, #1
 801bd96:	4413      	add	r3, r2
 801bd98:	00db      	lsls	r3, r3, #3
 801bd9a:	440b      	add	r3, r1
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bda0:	4906      	ldr	r1, [pc, #24]	@ (801bdbc <etharp_free_entry+0x60>)
 801bda2:	687a      	ldr	r2, [r7, #4]
 801bda4:	4613      	mov	r3, r2
 801bda6:	005b      	lsls	r3, r3, #1
 801bda8:	4413      	add	r3, r2
 801bdaa:	00db      	lsls	r3, r3, #3
 801bdac:	440b      	add	r3, r1
 801bdae:	3314      	adds	r3, #20
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bdb4:	bf00      	nop
 801bdb6:	3708      	adds	r7, #8
 801bdb8:	46bd      	mov	sp, r7
 801bdba:	bd80      	pop	{r7, pc}
 801bdbc:	240087f4 	.word	0x240087f4

0801bdc0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b082      	sub	sp, #8
 801bdc4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	607b      	str	r3, [r7, #4]
 801bdca:	e096      	b.n	801befa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bdcc:	494f      	ldr	r1, [pc, #316]	@ (801bf0c <etharp_tmr+0x14c>)
 801bdce:	687a      	ldr	r2, [r7, #4]
 801bdd0:	4613      	mov	r3, r2
 801bdd2:	005b      	lsls	r3, r3, #1
 801bdd4:	4413      	add	r3, r2
 801bdd6:	00db      	lsls	r3, r3, #3
 801bdd8:	440b      	add	r3, r1
 801bdda:	3314      	adds	r3, #20
 801bddc:	781b      	ldrb	r3, [r3, #0]
 801bdde:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bde0:	78fb      	ldrb	r3, [r7, #3]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	f000 8086 	beq.w	801bef4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bde8:	4948      	ldr	r1, [pc, #288]	@ (801bf0c <etharp_tmr+0x14c>)
 801bdea:	687a      	ldr	r2, [r7, #4]
 801bdec:	4613      	mov	r3, r2
 801bdee:	005b      	lsls	r3, r3, #1
 801bdf0:	4413      	add	r3, r2
 801bdf2:	00db      	lsls	r3, r3, #3
 801bdf4:	440b      	add	r3, r1
 801bdf6:	3312      	adds	r3, #18
 801bdf8:	881b      	ldrh	r3, [r3, #0]
 801bdfa:	3301      	adds	r3, #1
 801bdfc:	b298      	uxth	r0, r3
 801bdfe:	4943      	ldr	r1, [pc, #268]	@ (801bf0c <etharp_tmr+0x14c>)
 801be00:	687a      	ldr	r2, [r7, #4]
 801be02:	4613      	mov	r3, r2
 801be04:	005b      	lsls	r3, r3, #1
 801be06:	4413      	add	r3, r2
 801be08:	00db      	lsls	r3, r3, #3
 801be0a:	440b      	add	r3, r1
 801be0c:	3312      	adds	r3, #18
 801be0e:	4602      	mov	r2, r0
 801be10:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801be12:	493e      	ldr	r1, [pc, #248]	@ (801bf0c <etharp_tmr+0x14c>)
 801be14:	687a      	ldr	r2, [r7, #4]
 801be16:	4613      	mov	r3, r2
 801be18:	005b      	lsls	r3, r3, #1
 801be1a:	4413      	add	r3, r2
 801be1c:	00db      	lsls	r3, r3, #3
 801be1e:	440b      	add	r3, r1
 801be20:	3312      	adds	r3, #18
 801be22:	881b      	ldrh	r3, [r3, #0]
 801be24:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801be28:	d215      	bcs.n	801be56 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801be2a:	4938      	ldr	r1, [pc, #224]	@ (801bf0c <etharp_tmr+0x14c>)
 801be2c:	687a      	ldr	r2, [r7, #4]
 801be2e:	4613      	mov	r3, r2
 801be30:	005b      	lsls	r3, r3, #1
 801be32:	4413      	add	r3, r2
 801be34:	00db      	lsls	r3, r3, #3
 801be36:	440b      	add	r3, r1
 801be38:	3314      	adds	r3, #20
 801be3a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801be3c:	2b01      	cmp	r3, #1
 801be3e:	d10e      	bne.n	801be5e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801be40:	4932      	ldr	r1, [pc, #200]	@ (801bf0c <etharp_tmr+0x14c>)
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	4613      	mov	r3, r2
 801be46:	005b      	lsls	r3, r3, #1
 801be48:	4413      	add	r3, r2
 801be4a:	00db      	lsls	r3, r3, #3
 801be4c:	440b      	add	r3, r1
 801be4e:	3312      	adds	r3, #18
 801be50:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801be52:	2b04      	cmp	r3, #4
 801be54:	d903      	bls.n	801be5e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	f7ff ff80 	bl	801bd5c <etharp_free_entry>
 801be5c:	e04a      	b.n	801bef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801be5e:	492b      	ldr	r1, [pc, #172]	@ (801bf0c <etharp_tmr+0x14c>)
 801be60:	687a      	ldr	r2, [r7, #4]
 801be62:	4613      	mov	r3, r2
 801be64:	005b      	lsls	r3, r3, #1
 801be66:	4413      	add	r3, r2
 801be68:	00db      	lsls	r3, r3, #3
 801be6a:	440b      	add	r3, r1
 801be6c:	3314      	adds	r3, #20
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	2b03      	cmp	r3, #3
 801be72:	d10a      	bne.n	801be8a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801be74:	4925      	ldr	r1, [pc, #148]	@ (801bf0c <etharp_tmr+0x14c>)
 801be76:	687a      	ldr	r2, [r7, #4]
 801be78:	4613      	mov	r3, r2
 801be7a:	005b      	lsls	r3, r3, #1
 801be7c:	4413      	add	r3, r2
 801be7e:	00db      	lsls	r3, r3, #3
 801be80:	440b      	add	r3, r1
 801be82:	3314      	adds	r3, #20
 801be84:	2204      	movs	r2, #4
 801be86:	701a      	strb	r2, [r3, #0]
 801be88:	e034      	b.n	801bef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801be8a:	4920      	ldr	r1, [pc, #128]	@ (801bf0c <etharp_tmr+0x14c>)
 801be8c:	687a      	ldr	r2, [r7, #4]
 801be8e:	4613      	mov	r3, r2
 801be90:	005b      	lsls	r3, r3, #1
 801be92:	4413      	add	r3, r2
 801be94:	00db      	lsls	r3, r3, #3
 801be96:	440b      	add	r3, r1
 801be98:	3314      	adds	r3, #20
 801be9a:	781b      	ldrb	r3, [r3, #0]
 801be9c:	2b04      	cmp	r3, #4
 801be9e:	d10a      	bne.n	801beb6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bea0:	491a      	ldr	r1, [pc, #104]	@ (801bf0c <etharp_tmr+0x14c>)
 801bea2:	687a      	ldr	r2, [r7, #4]
 801bea4:	4613      	mov	r3, r2
 801bea6:	005b      	lsls	r3, r3, #1
 801bea8:	4413      	add	r3, r2
 801beaa:	00db      	lsls	r3, r3, #3
 801beac:	440b      	add	r3, r1
 801beae:	3314      	adds	r3, #20
 801beb0:	2202      	movs	r2, #2
 801beb2:	701a      	strb	r2, [r3, #0]
 801beb4:	e01e      	b.n	801bef4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801beb6:	4915      	ldr	r1, [pc, #84]	@ (801bf0c <etharp_tmr+0x14c>)
 801beb8:	687a      	ldr	r2, [r7, #4]
 801beba:	4613      	mov	r3, r2
 801bebc:	005b      	lsls	r3, r3, #1
 801bebe:	4413      	add	r3, r2
 801bec0:	00db      	lsls	r3, r3, #3
 801bec2:	440b      	add	r3, r1
 801bec4:	3314      	adds	r3, #20
 801bec6:	781b      	ldrb	r3, [r3, #0]
 801bec8:	2b01      	cmp	r3, #1
 801beca:	d113      	bne.n	801bef4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801becc:	490f      	ldr	r1, [pc, #60]	@ (801bf0c <etharp_tmr+0x14c>)
 801bece:	687a      	ldr	r2, [r7, #4]
 801bed0:	4613      	mov	r3, r2
 801bed2:	005b      	lsls	r3, r3, #1
 801bed4:	4413      	add	r3, r2
 801bed6:	00db      	lsls	r3, r3, #3
 801bed8:	440b      	add	r3, r1
 801beda:	3308      	adds	r3, #8
 801bedc:	6818      	ldr	r0, [r3, #0]
 801bede:	687a      	ldr	r2, [r7, #4]
 801bee0:	4613      	mov	r3, r2
 801bee2:	005b      	lsls	r3, r3, #1
 801bee4:	4413      	add	r3, r2
 801bee6:	00db      	lsls	r3, r3, #3
 801bee8:	4a08      	ldr	r2, [pc, #32]	@ (801bf0c <etharp_tmr+0x14c>)
 801beea:	4413      	add	r3, r2
 801beec:	3304      	adds	r3, #4
 801beee:	4619      	mov	r1, r3
 801bef0:	f000 fe6e 	bl	801cbd0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	3301      	adds	r3, #1
 801bef8:	607b      	str	r3, [r7, #4]
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	2b09      	cmp	r3, #9
 801befe:	f77f af65 	ble.w	801bdcc <etharp_tmr+0xc>
      }
    }
  }
}
 801bf02:	bf00      	nop
 801bf04:	bf00      	nop
 801bf06:	3708      	adds	r7, #8
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	bd80      	pop	{r7, pc}
 801bf0c:	240087f4 	.word	0x240087f4

0801bf10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b08a      	sub	sp, #40	@ 0x28
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	60f8      	str	r0, [r7, #12]
 801bf18:	460b      	mov	r3, r1
 801bf1a:	607a      	str	r2, [r7, #4]
 801bf1c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bf1e:	230a      	movs	r3, #10
 801bf20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bf22:	230a      	movs	r3, #10
 801bf24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801bf26:	230a      	movs	r3, #10
 801bf28:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801bf2e:	230a      	movs	r3, #10
 801bf30:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801bf32:	2300      	movs	r3, #0
 801bf34:	83bb      	strh	r3, [r7, #28]
 801bf36:	2300      	movs	r3, #0
 801bf38:	837b      	strh	r3, [r7, #26]
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bf3e:	2300      	movs	r3, #0
 801bf40:	843b      	strh	r3, [r7, #32]
 801bf42:	e0ae      	b.n	801c0a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801bf44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf48:	49a6      	ldr	r1, [pc, #664]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801bf4a:	4613      	mov	r3, r2
 801bf4c:	005b      	lsls	r3, r3, #1
 801bf4e:	4413      	add	r3, r2
 801bf50:	00db      	lsls	r3, r3, #3
 801bf52:	440b      	add	r3, r1
 801bf54:	3314      	adds	r3, #20
 801bf56:	781b      	ldrb	r3, [r3, #0]
 801bf58:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801bf5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801bf5e:	2b0a      	cmp	r3, #10
 801bf60:	d105      	bne.n	801bf6e <etharp_find_entry+0x5e>
 801bf62:	7dfb      	ldrb	r3, [r7, #23]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d102      	bne.n	801bf6e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801bf68:	8c3b      	ldrh	r3, [r7, #32]
 801bf6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801bf6c:	e095      	b.n	801c09a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801bf6e:	7dfb      	ldrb	r3, [r7, #23]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	f000 8092 	beq.w	801c09a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bf76:	7dfb      	ldrb	r3, [r7, #23]
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	d009      	beq.n	801bf90 <etharp_find_entry+0x80>
 801bf7c:	7dfb      	ldrb	r3, [r7, #23]
 801bf7e:	2b01      	cmp	r3, #1
 801bf80:	d806      	bhi.n	801bf90 <etharp_find_entry+0x80>
 801bf82:	4b99      	ldr	r3, [pc, #612]	@ (801c1e8 <etharp_find_entry+0x2d8>)
 801bf84:	f240 1223 	movw	r2, #291	@ 0x123
 801bf88:	4998      	ldr	r1, [pc, #608]	@ (801c1ec <etharp_find_entry+0x2dc>)
 801bf8a:	4899      	ldr	r0, [pc, #612]	@ (801c1f0 <etharp_find_entry+0x2e0>)
 801bf8c:	f002 fc88 	bl	801e8a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d020      	beq.n	801bfd8 <etharp_find_entry+0xc8>
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	6819      	ldr	r1, [r3, #0]
 801bf9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf9e:	4891      	ldr	r0, [pc, #580]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801bfa0:	4613      	mov	r3, r2
 801bfa2:	005b      	lsls	r3, r3, #1
 801bfa4:	4413      	add	r3, r2
 801bfa6:	00db      	lsls	r3, r3, #3
 801bfa8:	4403      	add	r3, r0
 801bfaa:	3304      	adds	r3, #4
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	4299      	cmp	r1, r3
 801bfb0:	d112      	bne.n	801bfd8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d00c      	beq.n	801bfd2 <etharp_find_entry+0xc2>
 801bfb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfbc:	4989      	ldr	r1, [pc, #548]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801bfbe:	4613      	mov	r3, r2
 801bfc0:	005b      	lsls	r3, r3, #1
 801bfc2:	4413      	add	r3, r2
 801bfc4:	00db      	lsls	r3, r3, #3
 801bfc6:	440b      	add	r3, r1
 801bfc8:	3308      	adds	r3, #8
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	687a      	ldr	r2, [r7, #4]
 801bfce:	429a      	cmp	r2, r3
 801bfd0:	d102      	bne.n	801bfd8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801bfd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bfd6:	e100      	b.n	801c1da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801bfd8:	7dfb      	ldrb	r3, [r7, #23]
 801bfda:	2b01      	cmp	r3, #1
 801bfdc:	d140      	bne.n	801c060 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bfde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfe2:	4980      	ldr	r1, [pc, #512]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801bfe4:	4613      	mov	r3, r2
 801bfe6:	005b      	lsls	r3, r3, #1
 801bfe8:	4413      	add	r3, r2
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	440b      	add	r3, r1
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d01a      	beq.n	801c02a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bff4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bff8:	497a      	ldr	r1, [pc, #488]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801bffa:	4613      	mov	r3, r2
 801bffc:	005b      	lsls	r3, r3, #1
 801bffe:	4413      	add	r3, r2
 801c000:	00db      	lsls	r3, r3, #3
 801c002:	440b      	add	r3, r1
 801c004:	3312      	adds	r3, #18
 801c006:	881b      	ldrh	r3, [r3, #0]
 801c008:	8bba      	ldrh	r2, [r7, #28]
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d845      	bhi.n	801c09a <etharp_find_entry+0x18a>
            old_queue = i;
 801c00e:	8c3b      	ldrh	r3, [r7, #32]
 801c010:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c016:	4973      	ldr	r1, [pc, #460]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c018:	4613      	mov	r3, r2
 801c01a:	005b      	lsls	r3, r3, #1
 801c01c:	4413      	add	r3, r2
 801c01e:	00db      	lsls	r3, r3, #3
 801c020:	440b      	add	r3, r1
 801c022:	3312      	adds	r3, #18
 801c024:	881b      	ldrh	r3, [r3, #0]
 801c026:	83bb      	strh	r3, [r7, #28]
 801c028:	e037      	b.n	801c09a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c02a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c02e:	496d      	ldr	r1, [pc, #436]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c030:	4613      	mov	r3, r2
 801c032:	005b      	lsls	r3, r3, #1
 801c034:	4413      	add	r3, r2
 801c036:	00db      	lsls	r3, r3, #3
 801c038:	440b      	add	r3, r1
 801c03a:	3312      	adds	r3, #18
 801c03c:	881b      	ldrh	r3, [r3, #0]
 801c03e:	8b7a      	ldrh	r2, [r7, #26]
 801c040:	429a      	cmp	r2, r3
 801c042:	d82a      	bhi.n	801c09a <etharp_find_entry+0x18a>
            old_pending = i;
 801c044:	8c3b      	ldrh	r3, [r7, #32]
 801c046:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801c048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c04c:	4965      	ldr	r1, [pc, #404]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c04e:	4613      	mov	r3, r2
 801c050:	005b      	lsls	r3, r3, #1
 801c052:	4413      	add	r3, r2
 801c054:	00db      	lsls	r3, r3, #3
 801c056:	440b      	add	r3, r1
 801c058:	3312      	adds	r3, #18
 801c05a:	881b      	ldrh	r3, [r3, #0]
 801c05c:	837b      	strh	r3, [r7, #26]
 801c05e:	e01c      	b.n	801c09a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c060:	7dfb      	ldrb	r3, [r7, #23]
 801c062:	2b01      	cmp	r3, #1
 801c064:	d919      	bls.n	801c09a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c06a:	495e      	ldr	r1, [pc, #376]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c06c:	4613      	mov	r3, r2
 801c06e:	005b      	lsls	r3, r3, #1
 801c070:	4413      	add	r3, r2
 801c072:	00db      	lsls	r3, r3, #3
 801c074:	440b      	add	r3, r1
 801c076:	3312      	adds	r3, #18
 801c078:	881b      	ldrh	r3, [r3, #0]
 801c07a:	8b3a      	ldrh	r2, [r7, #24]
 801c07c:	429a      	cmp	r2, r3
 801c07e:	d80c      	bhi.n	801c09a <etharp_find_entry+0x18a>
            old_stable = i;
 801c080:	8c3b      	ldrh	r3, [r7, #32]
 801c082:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801c084:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c088:	4956      	ldr	r1, [pc, #344]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c08a:	4613      	mov	r3, r2
 801c08c:	005b      	lsls	r3, r3, #1
 801c08e:	4413      	add	r3, r2
 801c090:	00db      	lsls	r3, r3, #3
 801c092:	440b      	add	r3, r1
 801c094:	3312      	adds	r3, #18
 801c096:	881b      	ldrh	r3, [r3, #0]
 801c098:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c09a:	8c3b      	ldrh	r3, [r7, #32]
 801c09c:	3301      	adds	r3, #1
 801c09e:	b29b      	uxth	r3, r3
 801c0a0:	843b      	strh	r3, [r7, #32]
 801c0a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c0a6:	2b09      	cmp	r3, #9
 801c0a8:	f77f af4c 	ble.w	801bf44 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c0ac:	7afb      	ldrb	r3, [r7, #11]
 801c0ae:	f003 0302 	and.w	r3, r3, #2
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d108      	bne.n	801c0c8 <etharp_find_entry+0x1b8>
 801c0b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c0ba:	2b0a      	cmp	r3, #10
 801c0bc:	d107      	bne.n	801c0ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c0be:	7afb      	ldrb	r3, [r7, #11]
 801c0c0:	f003 0301 	and.w	r3, r3, #1
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d102      	bne.n	801c0ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c0cc:	e085      	b.n	801c1da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c0ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c0d2:	2b09      	cmp	r3, #9
 801c0d4:	dc02      	bgt.n	801c0dc <etharp_find_entry+0x1cc>
    i = empty;
 801c0d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c0d8:	843b      	strh	r3, [r7, #32]
 801c0da:	e039      	b.n	801c150 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c0dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c0e0:	2b09      	cmp	r3, #9
 801c0e2:	dc14      	bgt.n	801c10e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c0e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c0e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c0ec:	493d      	ldr	r1, [pc, #244]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c0ee:	4613      	mov	r3, r2
 801c0f0:	005b      	lsls	r3, r3, #1
 801c0f2:	4413      	add	r3, r2
 801c0f4:	00db      	lsls	r3, r3, #3
 801c0f6:	440b      	add	r3, r1
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d018      	beq.n	801c130 <etharp_find_entry+0x220>
 801c0fe:	4b3a      	ldr	r3, [pc, #232]	@ (801c1e8 <etharp_find_entry+0x2d8>)
 801c100:	f240 126d 	movw	r2, #365	@ 0x16d
 801c104:	493b      	ldr	r1, [pc, #236]	@ (801c1f4 <etharp_find_entry+0x2e4>)
 801c106:	483a      	ldr	r0, [pc, #232]	@ (801c1f0 <etharp_find_entry+0x2e0>)
 801c108:	f002 fbca 	bl	801e8a0 <iprintf>
 801c10c:	e010      	b.n	801c130 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c10e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c112:	2b09      	cmp	r3, #9
 801c114:	dc02      	bgt.n	801c11c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c116:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c118:	843b      	strh	r3, [r7, #32]
 801c11a:	e009      	b.n	801c130 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c11c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c120:	2b09      	cmp	r3, #9
 801c122:	dc02      	bgt.n	801c12a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c124:	8bfb      	ldrh	r3, [r7, #30]
 801c126:	843b      	strh	r3, [r7, #32]
 801c128:	e002      	b.n	801c130 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c12a:	f04f 33ff 	mov.w	r3, #4294967295
 801c12e:	e054      	b.n	801c1da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c130:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c134:	2b09      	cmp	r3, #9
 801c136:	dd06      	ble.n	801c146 <etharp_find_entry+0x236>
 801c138:	4b2b      	ldr	r3, [pc, #172]	@ (801c1e8 <etharp_find_entry+0x2d8>)
 801c13a:	f240 127f 	movw	r2, #383	@ 0x17f
 801c13e:	492e      	ldr	r1, [pc, #184]	@ (801c1f8 <etharp_find_entry+0x2e8>)
 801c140:	482b      	ldr	r0, [pc, #172]	@ (801c1f0 <etharp_find_entry+0x2e0>)
 801c142:	f002 fbad 	bl	801e8a0 <iprintf>
    etharp_free_entry(i);
 801c146:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c14a:	4618      	mov	r0, r3
 801c14c:	f7ff fe06 	bl	801bd5c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c150:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c154:	2b09      	cmp	r3, #9
 801c156:	dd06      	ble.n	801c166 <etharp_find_entry+0x256>
 801c158:	4b23      	ldr	r3, [pc, #140]	@ (801c1e8 <etharp_find_entry+0x2d8>)
 801c15a:	f240 1283 	movw	r2, #387	@ 0x183
 801c15e:	4926      	ldr	r1, [pc, #152]	@ (801c1f8 <etharp_find_entry+0x2e8>)
 801c160:	4823      	ldr	r0, [pc, #140]	@ (801c1f0 <etharp_find_entry+0x2e0>)
 801c162:	f002 fb9d 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c16a:	491e      	ldr	r1, [pc, #120]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c16c:	4613      	mov	r3, r2
 801c16e:	005b      	lsls	r3, r3, #1
 801c170:	4413      	add	r3, r2
 801c172:	00db      	lsls	r3, r3, #3
 801c174:	440b      	add	r3, r1
 801c176:	3314      	adds	r3, #20
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d006      	beq.n	801c18c <etharp_find_entry+0x27c>
 801c17e:	4b1a      	ldr	r3, [pc, #104]	@ (801c1e8 <etharp_find_entry+0x2d8>)
 801c180:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c184:	491d      	ldr	r1, [pc, #116]	@ (801c1fc <etharp_find_entry+0x2ec>)
 801c186:	481a      	ldr	r0, [pc, #104]	@ (801c1f0 <etharp_find_entry+0x2e0>)
 801c188:	f002 fb8a 	bl	801e8a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d00b      	beq.n	801c1aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	6819      	ldr	r1, [r3, #0]
 801c19a:	4812      	ldr	r0, [pc, #72]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c19c:	4613      	mov	r3, r2
 801c19e:	005b      	lsls	r3, r3, #1
 801c1a0:	4413      	add	r3, r2
 801c1a2:	00db      	lsls	r3, r3, #3
 801c1a4:	4403      	add	r3, r0
 801c1a6:	3304      	adds	r3, #4
 801c1a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c1aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1ae:	490d      	ldr	r1, [pc, #52]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c1b0:	4613      	mov	r3, r2
 801c1b2:	005b      	lsls	r3, r3, #1
 801c1b4:	4413      	add	r3, r2
 801c1b6:	00db      	lsls	r3, r3, #3
 801c1b8:	440b      	add	r3, r1
 801c1ba:	3312      	adds	r3, #18
 801c1bc:	2200      	movs	r2, #0
 801c1be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c1c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1c4:	4907      	ldr	r1, [pc, #28]	@ (801c1e4 <etharp_find_entry+0x2d4>)
 801c1c6:	4613      	mov	r3, r2
 801c1c8:	005b      	lsls	r3, r3, #1
 801c1ca:	4413      	add	r3, r2
 801c1cc:	00db      	lsls	r3, r3, #3
 801c1ce:	440b      	add	r3, r1
 801c1d0:	3308      	adds	r3, #8
 801c1d2:	687a      	ldr	r2, [r7, #4]
 801c1d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c1d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c1da:	4618      	mov	r0, r3
 801c1dc:	3728      	adds	r7, #40	@ 0x28
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd80      	pop	{r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	240087f4 	.word	0x240087f4
 801c1e8:	08022650 	.word	0x08022650
 801c1ec:	08022688 	.word	0x08022688
 801c1f0:	080226c8 	.word	0x080226c8
 801c1f4:	080226f0 	.word	0x080226f0
 801c1f8:	08022708 	.word	0x08022708
 801c1fc:	0802271c 	.word	0x0802271c

0801c200 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b088      	sub	sp, #32
 801c204:	af02      	add	r7, sp, #8
 801c206:	60f8      	str	r0, [r7, #12]
 801c208:	60b9      	str	r1, [r7, #8]
 801c20a:	607a      	str	r2, [r7, #4]
 801c20c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c214:	2b06      	cmp	r3, #6
 801c216:	d006      	beq.n	801c226 <etharp_update_arp_entry+0x26>
 801c218:	4b48      	ldr	r3, [pc, #288]	@ (801c33c <etharp_update_arp_entry+0x13c>)
 801c21a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c21e:	4948      	ldr	r1, [pc, #288]	@ (801c340 <etharp_update_arp_entry+0x140>)
 801c220:	4848      	ldr	r0, [pc, #288]	@ (801c344 <etharp_update_arp_entry+0x144>)
 801c222:	f002 fb3d 	bl	801e8a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c226:	68bb      	ldr	r3, [r7, #8]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d012      	beq.n	801c252 <etharp_update_arp_entry+0x52>
 801c22c:	68bb      	ldr	r3, [r7, #8]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d00e      	beq.n	801c252 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c234:	68bb      	ldr	r3, [r7, #8]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	68f9      	ldr	r1, [r7, #12]
 801c23a:	4618      	mov	r0, r3
 801c23c:	f001 f924 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801c240:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c242:	2b00      	cmp	r3, #0
 801c244:	d105      	bne.n	801c252 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c246:	68bb      	ldr	r3, [r7, #8]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c24e:	2be0      	cmp	r3, #224	@ 0xe0
 801c250:	d102      	bne.n	801c258 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c252:	f06f 030f 	mvn.w	r3, #15
 801c256:	e06c      	b.n	801c332 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c258:	78fb      	ldrb	r3, [r7, #3]
 801c25a:	68fa      	ldr	r2, [r7, #12]
 801c25c:	4619      	mov	r1, r3
 801c25e:	68b8      	ldr	r0, [r7, #8]
 801c260:	f7ff fe56 	bl	801bf10 <etharp_find_entry>
 801c264:	4603      	mov	r3, r0
 801c266:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	da02      	bge.n	801c276 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c270:	8afb      	ldrh	r3, [r7, #22]
 801c272:	b25b      	sxtb	r3, r3
 801c274:	e05d      	b.n	801c332 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c276:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c27a:	4933      	ldr	r1, [pc, #204]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c27c:	4613      	mov	r3, r2
 801c27e:	005b      	lsls	r3, r3, #1
 801c280:	4413      	add	r3, r2
 801c282:	00db      	lsls	r3, r3, #3
 801c284:	440b      	add	r3, r1
 801c286:	3314      	adds	r3, #20
 801c288:	2202      	movs	r2, #2
 801c28a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c28c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c290:	492d      	ldr	r1, [pc, #180]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c292:	4613      	mov	r3, r2
 801c294:	005b      	lsls	r3, r3, #1
 801c296:	4413      	add	r3, r2
 801c298:	00db      	lsls	r3, r3, #3
 801c29a:	440b      	add	r3, r1
 801c29c:	3308      	adds	r3, #8
 801c29e:	68fa      	ldr	r2, [r7, #12]
 801c2a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c2a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c2a6:	4613      	mov	r3, r2
 801c2a8:	005b      	lsls	r3, r3, #1
 801c2aa:	4413      	add	r3, r2
 801c2ac:	00db      	lsls	r3, r3, #3
 801c2ae:	3308      	adds	r3, #8
 801c2b0:	4a25      	ldr	r2, [pc, #148]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c2b2:	4413      	add	r3, r2
 801c2b4:	3304      	adds	r3, #4
 801c2b6:	2206      	movs	r2, #6
 801c2b8:	6879      	ldr	r1, [r7, #4]
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f002 fc21 	bl	801eb02 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c2c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c2c4:	4920      	ldr	r1, [pc, #128]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c2c6:	4613      	mov	r3, r2
 801c2c8:	005b      	lsls	r3, r3, #1
 801c2ca:	4413      	add	r3, r2
 801c2cc:	00db      	lsls	r3, r3, #3
 801c2ce:	440b      	add	r3, r1
 801c2d0:	3312      	adds	r3, #18
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c2d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c2da:	491b      	ldr	r1, [pc, #108]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c2dc:	4613      	mov	r3, r2
 801c2de:	005b      	lsls	r3, r3, #1
 801c2e0:	4413      	add	r3, r2
 801c2e2:	00db      	lsls	r3, r3, #3
 801c2e4:	440b      	add	r3, r1
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d021      	beq.n	801c330 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c2ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c2f0:	4915      	ldr	r1, [pc, #84]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c2f2:	4613      	mov	r3, r2
 801c2f4:	005b      	lsls	r3, r3, #1
 801c2f6:	4413      	add	r3, r2
 801c2f8:	00db      	lsls	r3, r3, #3
 801c2fa:	440b      	add	r3, r1
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c304:	4910      	ldr	r1, [pc, #64]	@ (801c348 <etharp_update_arp_entry+0x148>)
 801c306:	4613      	mov	r3, r2
 801c308:	005b      	lsls	r3, r3, #1
 801c30a:	4413      	add	r3, r2
 801c30c:	00db      	lsls	r3, r3, #3
 801c30e:	440b      	add	r3, r1
 801c310:	2200      	movs	r2, #0
 801c312:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c31a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c31e:	9300      	str	r3, [sp, #0]
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	6939      	ldr	r1, [r7, #16]
 801c324:	68f8      	ldr	r0, [r7, #12]
 801c326:	f001 ffbd 	bl	801e2a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c32a:	6938      	ldr	r0, [r7, #16]
 801c32c:	f7f8 fd7a 	bl	8014e24 <pbuf_free>
  }
  return ERR_OK;
 801c330:	2300      	movs	r3, #0
}
 801c332:	4618      	mov	r0, r3
 801c334:	3718      	adds	r7, #24
 801c336:	46bd      	mov	sp, r7
 801c338:	bd80      	pop	{r7, pc}
 801c33a:	bf00      	nop
 801c33c:	08022650 	.word	0x08022650
 801c340:	08022748 	.word	0x08022748
 801c344:	080226c8 	.word	0x080226c8
 801c348:	240087f4 	.word	0x240087f4

0801c34c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c354:	2300      	movs	r3, #0
 801c356:	60fb      	str	r3, [r7, #12]
 801c358:	e01e      	b.n	801c398 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c35a:	4913      	ldr	r1, [pc, #76]	@ (801c3a8 <etharp_cleanup_netif+0x5c>)
 801c35c:	68fa      	ldr	r2, [r7, #12]
 801c35e:	4613      	mov	r3, r2
 801c360:	005b      	lsls	r3, r3, #1
 801c362:	4413      	add	r3, r2
 801c364:	00db      	lsls	r3, r3, #3
 801c366:	440b      	add	r3, r1
 801c368:	3314      	adds	r3, #20
 801c36a:	781b      	ldrb	r3, [r3, #0]
 801c36c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c36e:	7afb      	ldrb	r3, [r7, #11]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d00e      	beq.n	801c392 <etharp_cleanup_netif+0x46>
 801c374:	490c      	ldr	r1, [pc, #48]	@ (801c3a8 <etharp_cleanup_netif+0x5c>)
 801c376:	68fa      	ldr	r2, [r7, #12]
 801c378:	4613      	mov	r3, r2
 801c37a:	005b      	lsls	r3, r3, #1
 801c37c:	4413      	add	r3, r2
 801c37e:	00db      	lsls	r3, r3, #3
 801c380:	440b      	add	r3, r1
 801c382:	3308      	adds	r3, #8
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	429a      	cmp	r2, r3
 801c38a:	d102      	bne.n	801c392 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c38c:	68f8      	ldr	r0, [r7, #12]
 801c38e:	f7ff fce5 	bl	801bd5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	3301      	adds	r3, #1
 801c396:	60fb      	str	r3, [r7, #12]
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	2b09      	cmp	r3, #9
 801c39c:	dddd      	ble.n	801c35a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c39e:	bf00      	nop
 801c3a0:	bf00      	nop
 801c3a2:	3710      	adds	r7, #16
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	240087f4 	.word	0x240087f4

0801c3ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c3ac:	b5b0      	push	{r4, r5, r7, lr}
 801c3ae:	b08a      	sub	sp, #40	@ 0x28
 801c3b0:	af04      	add	r7, sp, #16
 801c3b2:	6078      	str	r0, [r7, #4]
 801c3b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c3b6:	683b      	ldr	r3, [r7, #0]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d107      	bne.n	801c3cc <etharp_input+0x20>
 801c3bc:	4b3d      	ldr	r3, [pc, #244]	@ (801c4b4 <etharp_input+0x108>)
 801c3be:	f240 228a 	movw	r2, #650	@ 0x28a
 801c3c2:	493d      	ldr	r1, [pc, #244]	@ (801c4b8 <etharp_input+0x10c>)
 801c3c4:	483d      	ldr	r0, [pc, #244]	@ (801c4bc <etharp_input+0x110>)
 801c3c6:	f002 fa6b 	bl	801e8a0 <iprintf>
 801c3ca:	e06f      	b.n	801c4ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	685b      	ldr	r3, [r3, #4]
 801c3d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c3d2:	693b      	ldr	r3, [r7, #16]
 801c3d4:	881b      	ldrh	r3, [r3, #0]
 801c3d6:	b29b      	uxth	r3, r3
 801c3d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c3dc:	d10c      	bne.n	801c3f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c3de:	693b      	ldr	r3, [r7, #16]
 801c3e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c3e2:	2b06      	cmp	r3, #6
 801c3e4:	d108      	bne.n	801c3f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c3ea:	2b04      	cmp	r3, #4
 801c3ec:	d104      	bne.n	801c3f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c3ee:	693b      	ldr	r3, [r7, #16]
 801c3f0:	885b      	ldrh	r3, [r3, #2]
 801c3f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c3f4:	2b08      	cmp	r3, #8
 801c3f6:	d003      	beq.n	801c400 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c3f8:	6878      	ldr	r0, [r7, #4]
 801c3fa:	f7f8 fd13 	bl	8014e24 <pbuf_free>
    return;
 801c3fe:	e055      	b.n	801c4ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c400:	693b      	ldr	r3, [r7, #16]
 801c402:	330e      	adds	r3, #14
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c408:	693b      	ldr	r3, [r7, #16]
 801c40a:	3318      	adds	r3, #24
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	3304      	adds	r3, #4
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d102      	bne.n	801c420 <etharp_input+0x74>
    for_us = 0;
 801c41a:	2300      	movs	r3, #0
 801c41c:	75fb      	strb	r3, [r7, #23]
 801c41e:	e009      	b.n	801c434 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c420:	68ba      	ldr	r2, [r7, #8]
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	3304      	adds	r3, #4
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	429a      	cmp	r2, r3
 801c42a:	bf0c      	ite	eq
 801c42c:	2301      	moveq	r3, #1
 801c42e:	2300      	movne	r3, #0
 801c430:	b2db      	uxtb	r3, r3
 801c432:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	f103 0208 	add.w	r2, r3, #8
 801c43a:	7dfb      	ldrb	r3, [r7, #23]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d001      	beq.n	801c444 <etharp_input+0x98>
 801c440:	2301      	movs	r3, #1
 801c442:	e000      	b.n	801c446 <etharp_input+0x9a>
 801c444:	2302      	movs	r3, #2
 801c446:	f107 010c 	add.w	r1, r7, #12
 801c44a:	6838      	ldr	r0, [r7, #0]
 801c44c:	f7ff fed8 	bl	801c200 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c450:	693b      	ldr	r3, [r7, #16]
 801c452:	88db      	ldrh	r3, [r3, #6]
 801c454:	b29b      	uxth	r3, r3
 801c456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c45a:	d003      	beq.n	801c464 <etharp_input+0xb8>
 801c45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c460:	d01e      	beq.n	801c4a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c462:	e020      	b.n	801c4a6 <etharp_input+0xfa>
      if (for_us) {
 801c464:	7dfb      	ldrb	r3, [r7, #23]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d01c      	beq.n	801c4a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c46a:	683b      	ldr	r3, [r7, #0]
 801c46c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c470:	693b      	ldr	r3, [r7, #16]
 801c472:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801c47c:	683b      	ldr	r3, [r7, #0]
 801c47e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c480:	693a      	ldr	r2, [r7, #16]
 801c482:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c484:	2102      	movs	r1, #2
 801c486:	9103      	str	r1, [sp, #12]
 801c488:	f107 010c 	add.w	r1, r7, #12
 801c48c:	9102      	str	r1, [sp, #8]
 801c48e:	9201      	str	r2, [sp, #4]
 801c490:	9300      	str	r3, [sp, #0]
 801c492:	462b      	mov	r3, r5
 801c494:	4622      	mov	r2, r4
 801c496:	4601      	mov	r1, r0
 801c498:	6838      	ldr	r0, [r7, #0]
 801c49a:	f000 faeb 	bl	801ca74 <etharp_raw>
      break;
 801c49e:	e001      	b.n	801c4a4 <etharp_input+0xf8>
      break;
 801c4a0:	bf00      	nop
 801c4a2:	e000      	b.n	801c4a6 <etharp_input+0xfa>
      break;
 801c4a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c4a6:	6878      	ldr	r0, [r7, #4]
 801c4a8:	f7f8 fcbc 	bl	8014e24 <pbuf_free>
}
 801c4ac:	3718      	adds	r7, #24
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	bdb0      	pop	{r4, r5, r7, pc}
 801c4b2:	bf00      	nop
 801c4b4:	08022650 	.word	0x08022650
 801c4b8:	080227a0 	.word	0x080227a0
 801c4bc:	080226c8 	.word	0x080226c8

0801c4c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b086      	sub	sp, #24
 801c4c4:	af02      	add	r7, sp, #8
 801c4c6:	60f8      	str	r0, [r7, #12]
 801c4c8:	60b9      	str	r1, [r7, #8]
 801c4ca:	4613      	mov	r3, r2
 801c4cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c4ce:	79fa      	ldrb	r2, [r7, #7]
 801c4d0:	4944      	ldr	r1, [pc, #272]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c4d2:	4613      	mov	r3, r2
 801c4d4:	005b      	lsls	r3, r3, #1
 801c4d6:	4413      	add	r3, r2
 801c4d8:	00db      	lsls	r3, r3, #3
 801c4da:	440b      	add	r3, r1
 801c4dc:	3314      	adds	r3, #20
 801c4de:	781b      	ldrb	r3, [r3, #0]
 801c4e0:	2b01      	cmp	r3, #1
 801c4e2:	d806      	bhi.n	801c4f2 <etharp_output_to_arp_index+0x32>
 801c4e4:	4b40      	ldr	r3, [pc, #256]	@ (801c5e8 <etharp_output_to_arp_index+0x128>)
 801c4e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c4ea:	4940      	ldr	r1, [pc, #256]	@ (801c5ec <etharp_output_to_arp_index+0x12c>)
 801c4ec:	4840      	ldr	r0, [pc, #256]	@ (801c5f0 <etharp_output_to_arp_index+0x130>)
 801c4ee:	f002 f9d7 	bl	801e8a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c4f2:	79fa      	ldrb	r2, [r7, #7]
 801c4f4:	493b      	ldr	r1, [pc, #236]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c4f6:	4613      	mov	r3, r2
 801c4f8:	005b      	lsls	r3, r3, #1
 801c4fa:	4413      	add	r3, r2
 801c4fc:	00db      	lsls	r3, r3, #3
 801c4fe:	440b      	add	r3, r1
 801c500:	3314      	adds	r3, #20
 801c502:	781b      	ldrb	r3, [r3, #0]
 801c504:	2b02      	cmp	r3, #2
 801c506:	d153      	bne.n	801c5b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c508:	79fa      	ldrb	r2, [r7, #7]
 801c50a:	4936      	ldr	r1, [pc, #216]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c50c:	4613      	mov	r3, r2
 801c50e:	005b      	lsls	r3, r3, #1
 801c510:	4413      	add	r3, r2
 801c512:	00db      	lsls	r3, r3, #3
 801c514:	440b      	add	r3, r1
 801c516:	3312      	adds	r3, #18
 801c518:	881b      	ldrh	r3, [r3, #0]
 801c51a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801c51e:	d919      	bls.n	801c554 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c520:	79fa      	ldrb	r2, [r7, #7]
 801c522:	4613      	mov	r3, r2
 801c524:	005b      	lsls	r3, r3, #1
 801c526:	4413      	add	r3, r2
 801c528:	00db      	lsls	r3, r3, #3
 801c52a:	4a2e      	ldr	r2, [pc, #184]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c52c:	4413      	add	r3, r2
 801c52e:	3304      	adds	r3, #4
 801c530:	4619      	mov	r1, r3
 801c532:	68f8      	ldr	r0, [r7, #12]
 801c534:	f000 fb4c 	bl	801cbd0 <etharp_request>
 801c538:	4603      	mov	r3, r0
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d138      	bne.n	801c5b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c53e:	79fa      	ldrb	r2, [r7, #7]
 801c540:	4928      	ldr	r1, [pc, #160]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c542:	4613      	mov	r3, r2
 801c544:	005b      	lsls	r3, r3, #1
 801c546:	4413      	add	r3, r2
 801c548:	00db      	lsls	r3, r3, #3
 801c54a:	440b      	add	r3, r1
 801c54c:	3314      	adds	r3, #20
 801c54e:	2203      	movs	r2, #3
 801c550:	701a      	strb	r2, [r3, #0]
 801c552:	e02d      	b.n	801c5b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c554:	79fa      	ldrb	r2, [r7, #7]
 801c556:	4923      	ldr	r1, [pc, #140]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c558:	4613      	mov	r3, r2
 801c55a:	005b      	lsls	r3, r3, #1
 801c55c:	4413      	add	r3, r2
 801c55e:	00db      	lsls	r3, r3, #3
 801c560:	440b      	add	r3, r1
 801c562:	3312      	adds	r3, #18
 801c564:	881b      	ldrh	r3, [r3, #0]
 801c566:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c56a:	d321      	bcc.n	801c5b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c56c:	79fa      	ldrb	r2, [r7, #7]
 801c56e:	4613      	mov	r3, r2
 801c570:	005b      	lsls	r3, r3, #1
 801c572:	4413      	add	r3, r2
 801c574:	00db      	lsls	r3, r3, #3
 801c576:	4a1b      	ldr	r2, [pc, #108]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c578:	4413      	add	r3, r2
 801c57a:	1d19      	adds	r1, r3, #4
 801c57c:	79fa      	ldrb	r2, [r7, #7]
 801c57e:	4613      	mov	r3, r2
 801c580:	005b      	lsls	r3, r3, #1
 801c582:	4413      	add	r3, r2
 801c584:	00db      	lsls	r3, r3, #3
 801c586:	3308      	adds	r3, #8
 801c588:	4a16      	ldr	r2, [pc, #88]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c58a:	4413      	add	r3, r2
 801c58c:	3304      	adds	r3, #4
 801c58e:	461a      	mov	r2, r3
 801c590:	68f8      	ldr	r0, [r7, #12]
 801c592:	f000 fafb 	bl	801cb8c <etharp_request_dst>
 801c596:	4603      	mov	r3, r0
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d109      	bne.n	801c5b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c59c:	79fa      	ldrb	r2, [r7, #7]
 801c59e:	4911      	ldr	r1, [pc, #68]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	005b      	lsls	r3, r3, #1
 801c5a4:	4413      	add	r3, r2
 801c5a6:	00db      	lsls	r3, r3, #3
 801c5a8:	440b      	add	r3, r1
 801c5aa:	3314      	adds	r3, #20
 801c5ac:	2203      	movs	r2, #3
 801c5ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c5b6:	79fa      	ldrb	r2, [r7, #7]
 801c5b8:	4613      	mov	r3, r2
 801c5ba:	005b      	lsls	r3, r3, #1
 801c5bc:	4413      	add	r3, r2
 801c5be:	00db      	lsls	r3, r3, #3
 801c5c0:	3308      	adds	r3, #8
 801c5c2:	4a08      	ldr	r2, [pc, #32]	@ (801c5e4 <etharp_output_to_arp_index+0x124>)
 801c5c4:	4413      	add	r3, r2
 801c5c6:	3304      	adds	r3, #4
 801c5c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c5cc:	9200      	str	r2, [sp, #0]
 801c5ce:	460a      	mov	r2, r1
 801c5d0:	68b9      	ldr	r1, [r7, #8]
 801c5d2:	68f8      	ldr	r0, [r7, #12]
 801c5d4:	f001 fe66 	bl	801e2a4 <ethernet_output>
 801c5d8:	4603      	mov	r3, r0
}
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3710      	adds	r7, #16
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	bf00      	nop
 801c5e4:	240087f4 	.word	0x240087f4
 801c5e8:	08022650 	.word	0x08022650
 801c5ec:	080227c0 	.word	0x080227c0
 801c5f0:	080226c8 	.word	0x080226c8

0801c5f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b08a      	sub	sp, #40	@ 0x28
 801c5f8:	af02      	add	r7, sp, #8
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d106      	bne.n	801c618 <etharp_output+0x24>
 801c60a:	4b73      	ldr	r3, [pc, #460]	@ (801c7d8 <etharp_output+0x1e4>)
 801c60c:	f240 321e 	movw	r2, #798	@ 0x31e
 801c610:	4972      	ldr	r1, [pc, #456]	@ (801c7dc <etharp_output+0x1e8>)
 801c612:	4873      	ldr	r0, [pc, #460]	@ (801c7e0 <etharp_output+0x1ec>)
 801c614:	f002 f944 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c618:	68bb      	ldr	r3, [r7, #8]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d106      	bne.n	801c62c <etharp_output+0x38>
 801c61e:	4b6e      	ldr	r3, [pc, #440]	@ (801c7d8 <etharp_output+0x1e4>)
 801c620:	f240 321f 	movw	r2, #799	@ 0x31f
 801c624:	496f      	ldr	r1, [pc, #444]	@ (801c7e4 <etharp_output+0x1f0>)
 801c626:	486e      	ldr	r0, [pc, #440]	@ (801c7e0 <etharp_output+0x1ec>)
 801c628:	f002 f93a 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d106      	bne.n	801c640 <etharp_output+0x4c>
 801c632:	4b69      	ldr	r3, [pc, #420]	@ (801c7d8 <etharp_output+0x1e4>)
 801c634:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c638:	496b      	ldr	r1, [pc, #428]	@ (801c7e8 <etharp_output+0x1f4>)
 801c63a:	4869      	ldr	r0, [pc, #420]	@ (801c7e0 <etharp_output+0x1ec>)
 801c63c:	f002 f930 	bl	801e8a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	68f9      	ldr	r1, [r7, #12]
 801c646:	4618      	mov	r0, r3
 801c648:	f000 ff1e 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801c64c:	4603      	mov	r3, r0
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d002      	beq.n	801c658 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c652:	4b66      	ldr	r3, [pc, #408]	@ (801c7ec <etharp_output+0x1f8>)
 801c654:	61fb      	str	r3, [r7, #28]
 801c656:	e0af      	b.n	801c7b8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c660:	2be0      	cmp	r3, #224	@ 0xe0
 801c662:	d118      	bne.n	801c696 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c664:	2301      	movs	r3, #1
 801c666:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c668:	2300      	movs	r3, #0
 801c66a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c66c:	235e      	movs	r3, #94	@ 0x5e
 801c66e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	3301      	adds	r3, #1
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	3302      	adds	r3, #2
 801c682:	781b      	ldrb	r3, [r3, #0]
 801c684:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	3303      	adds	r3, #3
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c68e:	f107 0310 	add.w	r3, r7, #16
 801c692:	61fb      	str	r3, [r7, #28]
 801c694:	e090      	b.n	801c7b8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681a      	ldr	r2, [r3, #0]
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	3304      	adds	r3, #4
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	405a      	eors	r2, r3
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	3308      	adds	r3, #8
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	4013      	ands	r3, r2
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d012      	beq.n	801c6d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c6b4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801c6b8:	4293      	cmp	r3, r2
 801c6ba:	d00b      	beq.n	801c6d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	330c      	adds	r3, #12
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d003      	beq.n	801c6ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	330c      	adds	r3, #12
 801c6ca:	61bb      	str	r3, [r7, #24]
 801c6cc:	e002      	b.n	801c6d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c6ce:	f06f 0303 	mvn.w	r3, #3
 801c6d2:	e07d      	b.n	801c7d0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c6d4:	4b46      	ldr	r3, [pc, #280]	@ (801c7f0 <etharp_output+0x1fc>)
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	4619      	mov	r1, r3
 801c6da:	4a46      	ldr	r2, [pc, #280]	@ (801c7f4 <etharp_output+0x200>)
 801c6dc:	460b      	mov	r3, r1
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	440b      	add	r3, r1
 801c6e2:	00db      	lsls	r3, r3, #3
 801c6e4:	4413      	add	r3, r2
 801c6e6:	3314      	adds	r3, #20
 801c6e8:	781b      	ldrb	r3, [r3, #0]
 801c6ea:	2b01      	cmp	r3, #1
 801c6ec:	d925      	bls.n	801c73a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c6ee:	4b40      	ldr	r3, [pc, #256]	@ (801c7f0 <etharp_output+0x1fc>)
 801c6f0:	781b      	ldrb	r3, [r3, #0]
 801c6f2:	4619      	mov	r1, r3
 801c6f4:	4a3f      	ldr	r2, [pc, #252]	@ (801c7f4 <etharp_output+0x200>)
 801c6f6:	460b      	mov	r3, r1
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	440b      	add	r3, r1
 801c6fc:	00db      	lsls	r3, r3, #3
 801c6fe:	4413      	add	r3, r2
 801c700:	3308      	adds	r3, #8
 801c702:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c704:	68fa      	ldr	r2, [r7, #12]
 801c706:	429a      	cmp	r2, r3
 801c708:	d117      	bne.n	801c73a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c70a:	69bb      	ldr	r3, [r7, #24]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	4b38      	ldr	r3, [pc, #224]	@ (801c7f0 <etharp_output+0x1fc>)
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	4618      	mov	r0, r3
 801c714:	4937      	ldr	r1, [pc, #220]	@ (801c7f4 <etharp_output+0x200>)
 801c716:	4603      	mov	r3, r0
 801c718:	005b      	lsls	r3, r3, #1
 801c71a:	4403      	add	r3, r0
 801c71c:	00db      	lsls	r3, r3, #3
 801c71e:	440b      	add	r3, r1
 801c720:	3304      	adds	r3, #4
 801c722:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c724:	429a      	cmp	r2, r3
 801c726:	d108      	bne.n	801c73a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c728:	4b31      	ldr	r3, [pc, #196]	@ (801c7f0 <etharp_output+0x1fc>)
 801c72a:	781b      	ldrb	r3, [r3, #0]
 801c72c:	461a      	mov	r2, r3
 801c72e:	68b9      	ldr	r1, [r7, #8]
 801c730:	68f8      	ldr	r0, [r7, #12]
 801c732:	f7ff fec5 	bl	801c4c0 <etharp_output_to_arp_index>
 801c736:	4603      	mov	r3, r0
 801c738:	e04a      	b.n	801c7d0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c73a:	2300      	movs	r3, #0
 801c73c:	75fb      	strb	r3, [r7, #23]
 801c73e:	e031      	b.n	801c7a4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c740:	7dfa      	ldrb	r2, [r7, #23]
 801c742:	492c      	ldr	r1, [pc, #176]	@ (801c7f4 <etharp_output+0x200>)
 801c744:	4613      	mov	r3, r2
 801c746:	005b      	lsls	r3, r3, #1
 801c748:	4413      	add	r3, r2
 801c74a:	00db      	lsls	r3, r3, #3
 801c74c:	440b      	add	r3, r1
 801c74e:	3314      	adds	r3, #20
 801c750:	781b      	ldrb	r3, [r3, #0]
 801c752:	2b01      	cmp	r3, #1
 801c754:	d923      	bls.n	801c79e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c756:	7dfa      	ldrb	r2, [r7, #23]
 801c758:	4926      	ldr	r1, [pc, #152]	@ (801c7f4 <etharp_output+0x200>)
 801c75a:	4613      	mov	r3, r2
 801c75c:	005b      	lsls	r3, r3, #1
 801c75e:	4413      	add	r3, r2
 801c760:	00db      	lsls	r3, r3, #3
 801c762:	440b      	add	r3, r1
 801c764:	3308      	adds	r3, #8
 801c766:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c768:	68fa      	ldr	r2, [r7, #12]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d117      	bne.n	801c79e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c76e:	69bb      	ldr	r3, [r7, #24]
 801c770:	6819      	ldr	r1, [r3, #0]
 801c772:	7dfa      	ldrb	r2, [r7, #23]
 801c774:	481f      	ldr	r0, [pc, #124]	@ (801c7f4 <etharp_output+0x200>)
 801c776:	4613      	mov	r3, r2
 801c778:	005b      	lsls	r3, r3, #1
 801c77a:	4413      	add	r3, r2
 801c77c:	00db      	lsls	r3, r3, #3
 801c77e:	4403      	add	r3, r0
 801c780:	3304      	adds	r3, #4
 801c782:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c784:	4299      	cmp	r1, r3
 801c786:	d10a      	bne.n	801c79e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c788:	4a19      	ldr	r2, [pc, #100]	@ (801c7f0 <etharp_output+0x1fc>)
 801c78a:	7dfb      	ldrb	r3, [r7, #23]
 801c78c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c78e:	7dfb      	ldrb	r3, [r7, #23]
 801c790:	461a      	mov	r2, r3
 801c792:	68b9      	ldr	r1, [r7, #8]
 801c794:	68f8      	ldr	r0, [r7, #12]
 801c796:	f7ff fe93 	bl	801c4c0 <etharp_output_to_arp_index>
 801c79a:	4603      	mov	r3, r0
 801c79c:	e018      	b.n	801c7d0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c79e:	7dfb      	ldrb	r3, [r7, #23]
 801c7a0:	3301      	adds	r3, #1
 801c7a2:	75fb      	strb	r3, [r7, #23]
 801c7a4:	7dfb      	ldrb	r3, [r7, #23]
 801c7a6:	2b09      	cmp	r3, #9
 801c7a8:	d9ca      	bls.n	801c740 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c7aa:	68ba      	ldr	r2, [r7, #8]
 801c7ac:	69b9      	ldr	r1, [r7, #24]
 801c7ae:	68f8      	ldr	r0, [r7, #12]
 801c7b0:	f000 f822 	bl	801c7f8 <etharp_query>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	e00b      	b.n	801c7d0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c7be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c7c2:	9300      	str	r3, [sp, #0]
 801c7c4:	69fb      	ldr	r3, [r7, #28]
 801c7c6:	68b9      	ldr	r1, [r7, #8]
 801c7c8:	68f8      	ldr	r0, [r7, #12]
 801c7ca:	f001 fd6b 	bl	801e2a4 <ethernet_output>
 801c7ce:	4603      	mov	r3, r0
}
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	3720      	adds	r7, #32
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	bd80      	pop	{r7, pc}
 801c7d8:	08022650 	.word	0x08022650
 801c7dc:	080227a0 	.word	0x080227a0
 801c7e0:	080226c8 	.word	0x080226c8
 801c7e4:	080227f0 	.word	0x080227f0
 801c7e8:	08022790 	.word	0x08022790
 801c7ec:	08022f10 	.word	0x08022f10
 801c7f0:	240088e4 	.word	0x240088e4
 801c7f4:	240087f4 	.word	0x240087f4

0801c7f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b08c      	sub	sp, #48	@ 0x30
 801c7fc:	af02      	add	r7, sp, #8
 801c7fe:	60f8      	str	r0, [r7, #12]
 801c800:	60b9      	str	r1, [r7, #8]
 801c802:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	3326      	adds	r3, #38	@ 0x26
 801c808:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c80a:	23ff      	movs	r3, #255	@ 0xff
 801c80c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801c810:	2300      	movs	r3, #0
 801c812:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c814:	68bb      	ldr	r3, [r7, #8]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	68f9      	ldr	r1, [r7, #12]
 801c81a:	4618      	mov	r0, r3
 801c81c:	f000 fe34 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801c820:	4603      	mov	r3, r0
 801c822:	2b00      	cmp	r3, #0
 801c824:	d10c      	bne.n	801c840 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c826:	68bb      	ldr	r3, [r7, #8]
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c82e:	2be0      	cmp	r3, #224	@ 0xe0
 801c830:	d006      	beq.n	801c840 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c832:	68bb      	ldr	r3, [r7, #8]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d003      	beq.n	801c840 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c838:	68bb      	ldr	r3, [r7, #8]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d102      	bne.n	801c846 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c840:	f06f 030f 	mvn.w	r3, #15
 801c844:	e101      	b.n	801ca4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c846:	68fa      	ldr	r2, [r7, #12]
 801c848:	2101      	movs	r1, #1
 801c84a:	68b8      	ldr	r0, [r7, #8]
 801c84c:	f7ff fb60 	bl	801bf10 <etharp_find_entry>
 801c850:	4603      	mov	r3, r0
 801c852:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c854:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	da02      	bge.n	801c862 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c85c:	8a7b      	ldrh	r3, [r7, #18]
 801c85e:	b25b      	sxtb	r3, r3
 801c860:	e0f3      	b.n	801ca4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c862:	8a7b      	ldrh	r3, [r7, #18]
 801c864:	2b7e      	cmp	r3, #126	@ 0x7e
 801c866:	d906      	bls.n	801c876 <etharp_query+0x7e>
 801c868:	4b7a      	ldr	r3, [pc, #488]	@ (801ca54 <etharp_query+0x25c>)
 801c86a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801c86e:	497a      	ldr	r1, [pc, #488]	@ (801ca58 <etharp_query+0x260>)
 801c870:	487a      	ldr	r0, [pc, #488]	@ (801ca5c <etharp_query+0x264>)
 801c872:	f002 f815 	bl	801e8a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c876:	8a7b      	ldrh	r3, [r7, #18]
 801c878:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c87a:	7c7a      	ldrb	r2, [r7, #17]
 801c87c:	4978      	ldr	r1, [pc, #480]	@ (801ca60 <etharp_query+0x268>)
 801c87e:	4613      	mov	r3, r2
 801c880:	005b      	lsls	r3, r3, #1
 801c882:	4413      	add	r3, r2
 801c884:	00db      	lsls	r3, r3, #3
 801c886:	440b      	add	r3, r1
 801c888:	3314      	adds	r3, #20
 801c88a:	781b      	ldrb	r3, [r3, #0]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d115      	bne.n	801c8bc <etharp_query+0xc4>
    is_new_entry = 1;
 801c890:	2301      	movs	r3, #1
 801c892:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c894:	7c7a      	ldrb	r2, [r7, #17]
 801c896:	4972      	ldr	r1, [pc, #456]	@ (801ca60 <etharp_query+0x268>)
 801c898:	4613      	mov	r3, r2
 801c89a:	005b      	lsls	r3, r3, #1
 801c89c:	4413      	add	r3, r2
 801c89e:	00db      	lsls	r3, r3, #3
 801c8a0:	440b      	add	r3, r1
 801c8a2:	3314      	adds	r3, #20
 801c8a4:	2201      	movs	r2, #1
 801c8a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c8a8:	7c7a      	ldrb	r2, [r7, #17]
 801c8aa:	496d      	ldr	r1, [pc, #436]	@ (801ca60 <etharp_query+0x268>)
 801c8ac:	4613      	mov	r3, r2
 801c8ae:	005b      	lsls	r3, r3, #1
 801c8b0:	4413      	add	r3, r2
 801c8b2:	00db      	lsls	r3, r3, #3
 801c8b4:	440b      	add	r3, r1
 801c8b6:	3308      	adds	r3, #8
 801c8b8:	68fa      	ldr	r2, [r7, #12]
 801c8ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c8bc:	7c7a      	ldrb	r2, [r7, #17]
 801c8be:	4968      	ldr	r1, [pc, #416]	@ (801ca60 <etharp_query+0x268>)
 801c8c0:	4613      	mov	r3, r2
 801c8c2:	005b      	lsls	r3, r3, #1
 801c8c4:	4413      	add	r3, r2
 801c8c6:	00db      	lsls	r3, r3, #3
 801c8c8:	440b      	add	r3, r1
 801c8ca:	3314      	adds	r3, #20
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	2b01      	cmp	r3, #1
 801c8d0:	d011      	beq.n	801c8f6 <etharp_query+0xfe>
 801c8d2:	7c7a      	ldrb	r2, [r7, #17]
 801c8d4:	4962      	ldr	r1, [pc, #392]	@ (801ca60 <etharp_query+0x268>)
 801c8d6:	4613      	mov	r3, r2
 801c8d8:	005b      	lsls	r3, r3, #1
 801c8da:	4413      	add	r3, r2
 801c8dc:	00db      	lsls	r3, r3, #3
 801c8de:	440b      	add	r3, r1
 801c8e0:	3314      	adds	r3, #20
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d806      	bhi.n	801c8f6 <etharp_query+0xfe>
 801c8e8:	4b5a      	ldr	r3, [pc, #360]	@ (801ca54 <etharp_query+0x25c>)
 801c8ea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801c8ee:	495d      	ldr	r1, [pc, #372]	@ (801ca64 <etharp_query+0x26c>)
 801c8f0:	485a      	ldr	r0, [pc, #360]	@ (801ca5c <etharp_query+0x264>)
 801c8f2:	f001 ffd5 	bl	801e8a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c8f6:	6a3b      	ldr	r3, [r7, #32]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d102      	bne.n	801c902 <etharp_query+0x10a>
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d10c      	bne.n	801c91c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c902:	68b9      	ldr	r1, [r7, #8]
 801c904:	68f8      	ldr	r0, [r7, #12]
 801c906:	f000 f963 	bl	801cbd0 <etharp_request>
 801c90a:	4603      	mov	r3, r0
 801c90c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d102      	bne.n	801c91c <etharp_query+0x124>
      return result;
 801c916:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801c91a:	e096      	b.n	801ca4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d106      	bne.n	801c930 <etharp_query+0x138>
 801c922:	4b4c      	ldr	r3, [pc, #304]	@ (801ca54 <etharp_query+0x25c>)
 801c924:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801c928:	494f      	ldr	r1, [pc, #316]	@ (801ca68 <etharp_query+0x270>)
 801c92a:	484c      	ldr	r0, [pc, #304]	@ (801ca5c <etharp_query+0x264>)
 801c92c:	f001 ffb8 	bl	801e8a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c930:	7c7a      	ldrb	r2, [r7, #17]
 801c932:	494b      	ldr	r1, [pc, #300]	@ (801ca60 <etharp_query+0x268>)
 801c934:	4613      	mov	r3, r2
 801c936:	005b      	lsls	r3, r3, #1
 801c938:	4413      	add	r3, r2
 801c93a:	00db      	lsls	r3, r3, #3
 801c93c:	440b      	add	r3, r1
 801c93e:	3314      	adds	r3, #20
 801c940:	781b      	ldrb	r3, [r3, #0]
 801c942:	2b01      	cmp	r3, #1
 801c944:	d917      	bls.n	801c976 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c946:	4a49      	ldr	r2, [pc, #292]	@ (801ca6c <etharp_query+0x274>)
 801c948:	7c7b      	ldrb	r3, [r7, #17]
 801c94a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c94c:	7c7a      	ldrb	r2, [r7, #17]
 801c94e:	4613      	mov	r3, r2
 801c950:	005b      	lsls	r3, r3, #1
 801c952:	4413      	add	r3, r2
 801c954:	00db      	lsls	r3, r3, #3
 801c956:	3308      	adds	r3, #8
 801c958:	4a41      	ldr	r2, [pc, #260]	@ (801ca60 <etharp_query+0x268>)
 801c95a:	4413      	add	r3, r2
 801c95c:	3304      	adds	r3, #4
 801c95e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c962:	9200      	str	r2, [sp, #0]
 801c964:	697a      	ldr	r2, [r7, #20]
 801c966:	6879      	ldr	r1, [r7, #4]
 801c968:	68f8      	ldr	r0, [r7, #12]
 801c96a:	f001 fc9b 	bl	801e2a4 <ethernet_output>
 801c96e:	4603      	mov	r3, r0
 801c970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c974:	e067      	b.n	801ca46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c976:	7c7a      	ldrb	r2, [r7, #17]
 801c978:	4939      	ldr	r1, [pc, #228]	@ (801ca60 <etharp_query+0x268>)
 801c97a:	4613      	mov	r3, r2
 801c97c:	005b      	lsls	r3, r3, #1
 801c97e:	4413      	add	r3, r2
 801c980:	00db      	lsls	r3, r3, #3
 801c982:	440b      	add	r3, r1
 801c984:	3314      	adds	r3, #20
 801c986:	781b      	ldrb	r3, [r3, #0]
 801c988:	2b01      	cmp	r3, #1
 801c98a:	d15c      	bne.n	801ca46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c98c:	2300      	movs	r3, #0
 801c98e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c994:	e01c      	b.n	801c9d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c996:	69fb      	ldr	r3, [r7, #28]
 801c998:	895a      	ldrh	r2, [r3, #10]
 801c99a:	69fb      	ldr	r3, [r7, #28]
 801c99c:	891b      	ldrh	r3, [r3, #8]
 801c99e:	429a      	cmp	r2, r3
 801c9a0:	d10a      	bne.n	801c9b8 <etharp_query+0x1c0>
 801c9a2:	69fb      	ldr	r3, [r7, #28]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d006      	beq.n	801c9b8 <etharp_query+0x1c0>
 801c9aa:	4b2a      	ldr	r3, [pc, #168]	@ (801ca54 <etharp_query+0x25c>)
 801c9ac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801c9b0:	492f      	ldr	r1, [pc, #188]	@ (801ca70 <etharp_query+0x278>)
 801c9b2:	482a      	ldr	r0, [pc, #168]	@ (801ca5c <etharp_query+0x264>)
 801c9b4:	f001 ff74 	bl	801e8a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	7b1b      	ldrb	r3, [r3, #12]
 801c9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d002      	beq.n	801c9ca <etharp_query+0x1d2>
        copy_needed = 1;
 801c9c4:	2301      	movs	r3, #1
 801c9c6:	61bb      	str	r3, [r7, #24]
        break;
 801c9c8:	e005      	b.n	801c9d6 <etharp_query+0x1de>
      }
      p = p->next;
 801c9ca:	69fb      	ldr	r3, [r7, #28]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c9d0:	69fb      	ldr	r3, [r7, #28]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d1df      	bne.n	801c996 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c9d6:	69bb      	ldr	r3, [r7, #24]
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d007      	beq.n	801c9ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c9dc:	687a      	ldr	r2, [r7, #4]
 801c9de:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801c9e2:	200e      	movs	r0, #14
 801c9e4:	f7f8 fc86 	bl	80152f4 <pbuf_clone>
 801c9e8:	61f8      	str	r0, [r7, #28]
 801c9ea:	e004      	b.n	801c9f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c9f0:	69f8      	ldr	r0, [r7, #28]
 801c9f2:	f7f8 fabd 	bl	8014f70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c9f6:	69fb      	ldr	r3, [r7, #28]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d021      	beq.n	801ca40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c9fc:	7c7a      	ldrb	r2, [r7, #17]
 801c9fe:	4918      	ldr	r1, [pc, #96]	@ (801ca60 <etharp_query+0x268>)
 801ca00:	4613      	mov	r3, r2
 801ca02:	005b      	lsls	r3, r3, #1
 801ca04:	4413      	add	r3, r2
 801ca06:	00db      	lsls	r3, r3, #3
 801ca08:	440b      	add	r3, r1
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d00a      	beq.n	801ca26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ca10:	7c7a      	ldrb	r2, [r7, #17]
 801ca12:	4913      	ldr	r1, [pc, #76]	@ (801ca60 <etharp_query+0x268>)
 801ca14:	4613      	mov	r3, r2
 801ca16:	005b      	lsls	r3, r3, #1
 801ca18:	4413      	add	r3, r2
 801ca1a:	00db      	lsls	r3, r3, #3
 801ca1c:	440b      	add	r3, r1
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	4618      	mov	r0, r3
 801ca22:	f7f8 f9ff 	bl	8014e24 <pbuf_free>
      }
      arp_table[i].q = p;
 801ca26:	7c7a      	ldrb	r2, [r7, #17]
 801ca28:	490d      	ldr	r1, [pc, #52]	@ (801ca60 <etharp_query+0x268>)
 801ca2a:	4613      	mov	r3, r2
 801ca2c:	005b      	lsls	r3, r3, #1
 801ca2e:	4413      	add	r3, r2
 801ca30:	00db      	lsls	r3, r3, #3
 801ca32:	440b      	add	r3, r1
 801ca34:	69fa      	ldr	r2, [r7, #28]
 801ca36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ca38:	2300      	movs	r3, #0
 801ca3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ca3e:	e002      	b.n	801ca46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ca40:	23ff      	movs	r3, #255	@ 0xff
 801ca42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ca46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	3728      	adds	r7, #40	@ 0x28
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd80      	pop	{r7, pc}
 801ca52:	bf00      	nop
 801ca54:	08022650 	.word	0x08022650
 801ca58:	080227fc 	.word	0x080227fc
 801ca5c:	080226c8 	.word	0x080226c8
 801ca60:	240087f4 	.word	0x240087f4
 801ca64:	0802280c 	.word	0x0802280c
 801ca68:	080227f0 	.word	0x080227f0
 801ca6c:	240088e4 	.word	0x240088e4
 801ca70:	08022834 	.word	0x08022834

0801ca74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b08a      	sub	sp, #40	@ 0x28
 801ca78:	af02      	add	r7, sp, #8
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	607a      	str	r2, [r7, #4]
 801ca80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ca82:	2300      	movs	r3, #0
 801ca84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d106      	bne.n	801ca9a <etharp_raw+0x26>
 801ca8c:	4b3a      	ldr	r3, [pc, #232]	@ (801cb78 <etharp_raw+0x104>)
 801ca8e:	f240 4257 	movw	r2, #1111	@ 0x457
 801ca92:	493a      	ldr	r1, [pc, #232]	@ (801cb7c <etharp_raw+0x108>)
 801ca94:	483a      	ldr	r0, [pc, #232]	@ (801cb80 <etharp_raw+0x10c>)
 801ca96:	f001 ff03 	bl	801e8a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ca9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ca9e:	211c      	movs	r1, #28
 801caa0:	200e      	movs	r0, #14
 801caa2:	f7f7 fedb 	bl	801485c <pbuf_alloc>
 801caa6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801caa8:	69bb      	ldr	r3, [r7, #24]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d102      	bne.n	801cab4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801caae:	f04f 33ff 	mov.w	r3, #4294967295
 801cab2:	e05d      	b.n	801cb70 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cab4:	69bb      	ldr	r3, [r7, #24]
 801cab6:	895b      	ldrh	r3, [r3, #10]
 801cab8:	2b1b      	cmp	r3, #27
 801caba:	d806      	bhi.n	801caca <etharp_raw+0x56>
 801cabc:	4b2e      	ldr	r3, [pc, #184]	@ (801cb78 <etharp_raw+0x104>)
 801cabe:	f240 4262 	movw	r2, #1122	@ 0x462
 801cac2:	4930      	ldr	r1, [pc, #192]	@ (801cb84 <etharp_raw+0x110>)
 801cac4:	482e      	ldr	r0, [pc, #184]	@ (801cb80 <etharp_raw+0x10c>)
 801cac6:	f001 feeb 	bl	801e8a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801caca:	69bb      	ldr	r3, [r7, #24]
 801cacc:	685b      	ldr	r3, [r3, #4]
 801cace:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cad0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7f6 fcec 	bl	80134b0 <lwip_htons>
 801cad8:	4603      	mov	r3, r0
 801cada:	461a      	mov	r2, r3
 801cadc:	697b      	ldr	r3, [r7, #20]
 801cade:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cae6:	2b06      	cmp	r3, #6
 801cae8:	d006      	beq.n	801caf8 <etharp_raw+0x84>
 801caea:	4b23      	ldr	r3, [pc, #140]	@ (801cb78 <etharp_raw+0x104>)
 801caec:	f240 4269 	movw	r2, #1129	@ 0x469
 801caf0:	4925      	ldr	r1, [pc, #148]	@ (801cb88 <etharp_raw+0x114>)
 801caf2:	4823      	ldr	r0, [pc, #140]	@ (801cb80 <etharp_raw+0x10c>)
 801caf4:	f001 fed4 	bl	801e8a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801caf8:	697b      	ldr	r3, [r7, #20]
 801cafa:	3308      	adds	r3, #8
 801cafc:	2206      	movs	r2, #6
 801cafe:	6839      	ldr	r1, [r7, #0]
 801cb00:	4618      	mov	r0, r3
 801cb02:	f001 fffe 	bl	801eb02 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801cb06:	697b      	ldr	r3, [r7, #20]
 801cb08:	3312      	adds	r3, #18
 801cb0a:	2206      	movs	r2, #6
 801cb0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f001 fff7 	bl	801eb02 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cb14:	697b      	ldr	r3, [r7, #20]
 801cb16:	330e      	adds	r3, #14
 801cb18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cb1a:	6812      	ldr	r2, [r2, #0]
 801cb1c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801cb1e:	697b      	ldr	r3, [r7, #20]
 801cb20:	3318      	adds	r3, #24
 801cb22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cb24:	6812      	ldr	r2, [r2, #0]
 801cb26:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801cb28:	697b      	ldr	r3, [r7, #20]
 801cb2a:	2200      	movs	r2, #0
 801cb2c:	701a      	strb	r2, [r3, #0]
 801cb2e:	2200      	movs	r2, #0
 801cb30:	f042 0201 	orr.w	r2, r2, #1
 801cb34:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cb36:	697b      	ldr	r3, [r7, #20]
 801cb38:	2200      	movs	r2, #0
 801cb3a:	f042 0208 	orr.w	r2, r2, #8
 801cb3e:	709a      	strb	r2, [r3, #2]
 801cb40:	2200      	movs	r2, #0
 801cb42:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	2206      	movs	r2, #6
 801cb48:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801cb4a:	697b      	ldr	r3, [r7, #20]
 801cb4c:	2204      	movs	r2, #4
 801cb4e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cb50:	f640 0306 	movw	r3, #2054	@ 0x806
 801cb54:	9300      	str	r3, [sp, #0]
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	68ba      	ldr	r2, [r7, #8]
 801cb5a:	69b9      	ldr	r1, [r7, #24]
 801cb5c:	68f8      	ldr	r0, [r7, #12]
 801cb5e:	f001 fba1 	bl	801e2a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801cb62:	69b8      	ldr	r0, [r7, #24]
 801cb64:	f7f8 f95e 	bl	8014e24 <pbuf_free>
  p = NULL;
 801cb68:	2300      	movs	r3, #0
 801cb6a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801cb6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cb70:	4618      	mov	r0, r3
 801cb72:	3720      	adds	r7, #32
 801cb74:	46bd      	mov	sp, r7
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	08022650 	.word	0x08022650
 801cb7c:	080227a0 	.word	0x080227a0
 801cb80:	080226c8 	.word	0x080226c8
 801cb84:	08022850 	.word	0x08022850
 801cb88:	08022884 	.word	0x08022884

0801cb8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cb8c:	b580      	push	{r7, lr}
 801cb8e:	b088      	sub	sp, #32
 801cb90:	af04      	add	r7, sp, #16
 801cb92:	60f8      	str	r0, [r7, #12]
 801cb94:	60b9      	str	r1, [r7, #8]
 801cb96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cba8:	2201      	movs	r2, #1
 801cbaa:	9203      	str	r2, [sp, #12]
 801cbac:	68ba      	ldr	r2, [r7, #8]
 801cbae:	9202      	str	r2, [sp, #8]
 801cbb0:	4a06      	ldr	r2, [pc, #24]	@ (801cbcc <etharp_request_dst+0x40>)
 801cbb2:	9201      	str	r2, [sp, #4]
 801cbb4:	9300      	str	r3, [sp, #0]
 801cbb6:	4603      	mov	r3, r0
 801cbb8:	687a      	ldr	r2, [r7, #4]
 801cbba:	68f8      	ldr	r0, [r7, #12]
 801cbbc:	f7ff ff5a 	bl	801ca74 <etharp_raw>
 801cbc0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	3710      	adds	r7, #16
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bd80      	pop	{r7, pc}
 801cbca:	bf00      	nop
 801cbcc:	08022f18 	.word	0x08022f18

0801cbd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b082      	sub	sp, #8
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
 801cbd8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801cbda:	4a05      	ldr	r2, [pc, #20]	@ (801cbf0 <etharp_request+0x20>)
 801cbdc:	6839      	ldr	r1, [r7, #0]
 801cbde:	6878      	ldr	r0, [r7, #4]
 801cbe0:	f7ff ffd4 	bl	801cb8c <etharp_request_dst>
 801cbe4:	4603      	mov	r3, r0
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3708      	adds	r7, #8
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	08022f10 	.word	0x08022f10

0801cbf4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b08e      	sub	sp, #56	@ 0x38
 801cbf8:	af04      	add	r7, sp, #16
 801cbfa:	6078      	str	r0, [r7, #4]
 801cbfc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801cbfe:	4b87      	ldr	r3, [pc, #540]	@ (801ce1c <icmp_input+0x228>)
 801cc00:	689b      	ldr	r3, [r3, #8]
 801cc02:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	f003 030f 	and.w	r3, r3, #15
 801cc0c:	b2db      	uxtb	r3, r3
 801cc0e:	009b      	lsls	r3, r3, #2
 801cc10:	b2db      	uxtb	r3, r3
 801cc12:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801cc14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cc16:	2b13      	cmp	r3, #19
 801cc18:	f240 80e8 	bls.w	801cdec <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	895b      	ldrh	r3, [r3, #10]
 801cc20:	2b03      	cmp	r3, #3
 801cc22:	f240 80e5 	bls.w	801cdf0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	685b      	ldr	r3, [r3, #4]
 801cc2a:	781b      	ldrb	r3, [r3, #0]
 801cc2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801cc30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	f000 80d2 	beq.w	801cdde <icmp_input+0x1ea>
 801cc3a:	2b08      	cmp	r3, #8
 801cc3c:	f040 80d2 	bne.w	801cde4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cc40:	4b77      	ldr	r3, [pc, #476]	@ (801ce20 <icmp_input+0x22c>)
 801cc42:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cc44:	4b75      	ldr	r3, [pc, #468]	@ (801ce1c <icmp_input+0x228>)
 801cc46:	695b      	ldr	r3, [r3, #20]
 801cc48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cc4c:	2be0      	cmp	r3, #224	@ 0xe0
 801cc4e:	f000 80d6 	beq.w	801cdfe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cc52:	4b72      	ldr	r3, [pc, #456]	@ (801ce1c <icmp_input+0x228>)
 801cc54:	695b      	ldr	r3, [r3, #20]
 801cc56:	4a71      	ldr	r2, [pc, #452]	@ (801ce1c <icmp_input+0x228>)
 801cc58:	6812      	ldr	r2, [r2, #0]
 801cc5a:	4611      	mov	r1, r2
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f000 fc13 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801cc62:	4603      	mov	r3, r0
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	f040 80cc 	bne.w	801ce02 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	891b      	ldrh	r3, [r3, #8]
 801cc6e:	2b07      	cmp	r3, #7
 801cc70:	f240 80c0 	bls.w	801cdf4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801cc74:	6878      	ldr	r0, [r7, #4]
 801cc76:	f7f6 fcb8 	bl	80135ea <inet_chksum_pbuf>
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d003      	beq.n	801cc88 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801cc80:	6878      	ldr	r0, [r7, #4]
 801cc82:	f7f8 f8cf 	bl	8014e24 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801cc86:	e0c5      	b.n	801ce14 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cc88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cc8a:	330e      	adds	r3, #14
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	6878      	ldr	r0, [r7, #4]
 801cc90:	f7f8 f832 	bl	8014cf8 <pbuf_add_header>
 801cc94:	4603      	mov	r3, r0
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d04b      	beq.n	801cd32 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	891a      	ldrh	r2, [r3, #8]
 801cc9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cca0:	4413      	add	r3, r2
 801cca2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	891b      	ldrh	r3, [r3, #8]
 801cca8:	8b7a      	ldrh	r2, [r7, #26]
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	f0c0 80ab 	bcc.w	801ce06 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ccb0:	8b7b      	ldrh	r3, [r7, #26]
 801ccb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ccb6:	4619      	mov	r1, r3
 801ccb8:	200e      	movs	r0, #14
 801ccba:	f7f7 fdcf 	bl	801485c <pbuf_alloc>
 801ccbe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ccc0:	697b      	ldr	r3, [r7, #20]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	f000 80a1 	beq.w	801ce0a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	895b      	ldrh	r3, [r3, #10]
 801cccc:	461a      	mov	r2, r3
 801ccce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ccd0:	3308      	adds	r3, #8
 801ccd2:	429a      	cmp	r2, r3
 801ccd4:	d203      	bcs.n	801ccde <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ccd6:	6978      	ldr	r0, [r7, #20]
 801ccd8:	f7f8 f8a4 	bl	8014e24 <pbuf_free>
          goto icmperr;
 801ccdc:	e096      	b.n	801ce0c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	685b      	ldr	r3, [r3, #4]
 801cce2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801cce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cce6:	4618      	mov	r0, r3
 801cce8:	f001 ff0b 	bl	801eb02 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ccec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ccee:	4619      	mov	r1, r3
 801ccf0:	6978      	ldr	r0, [r7, #20]
 801ccf2:	f7f8 f811 	bl	8014d18 <pbuf_remove_header>
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d009      	beq.n	801cd10 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ccfc:	4b49      	ldr	r3, [pc, #292]	@ (801ce24 <icmp_input+0x230>)
 801ccfe:	22b6      	movs	r2, #182	@ 0xb6
 801cd00:	4949      	ldr	r1, [pc, #292]	@ (801ce28 <icmp_input+0x234>)
 801cd02:	484a      	ldr	r0, [pc, #296]	@ (801ce2c <icmp_input+0x238>)
 801cd04:	f001 fdcc 	bl	801e8a0 <iprintf>
          pbuf_free(r);
 801cd08:	6978      	ldr	r0, [r7, #20]
 801cd0a:	f7f8 f88b 	bl	8014e24 <pbuf_free>
          goto icmperr;
 801cd0e:	e07d      	b.n	801ce0c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cd10:	6879      	ldr	r1, [r7, #4]
 801cd12:	6978      	ldr	r0, [r7, #20]
 801cd14:	f7f8 f9aa 	bl	801506c <pbuf_copy>
 801cd18:	4603      	mov	r3, r0
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d003      	beq.n	801cd26 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cd1e:	6978      	ldr	r0, [r7, #20]
 801cd20:	f7f8 f880 	bl	8014e24 <pbuf_free>
          goto icmperr;
 801cd24:	e072      	b.n	801ce0c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f7f8 f87c 	bl	8014e24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cd2c:	697b      	ldr	r3, [r7, #20]
 801cd2e:	607b      	str	r3, [r7, #4]
 801cd30:	e00f      	b.n	801cd52 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cd32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cd34:	330e      	adds	r3, #14
 801cd36:	4619      	mov	r1, r3
 801cd38:	6878      	ldr	r0, [r7, #4]
 801cd3a:	f7f7 ffed 	bl	8014d18 <pbuf_remove_header>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d006      	beq.n	801cd52 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cd44:	4b37      	ldr	r3, [pc, #220]	@ (801ce24 <icmp_input+0x230>)
 801cd46:	22c7      	movs	r2, #199	@ 0xc7
 801cd48:	4939      	ldr	r1, [pc, #228]	@ (801ce30 <icmp_input+0x23c>)
 801cd4a:	4838      	ldr	r0, [pc, #224]	@ (801ce2c <icmp_input+0x238>)
 801cd4c:	f001 fda8 	bl	801e8a0 <iprintf>
          goto icmperr;
 801cd50:	e05c      	b.n	801ce0c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	685b      	ldr	r3, [r3, #4]
 801cd56:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cd58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cd5a:	4619      	mov	r1, r3
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	f7f7 ffcb 	bl	8014cf8 <pbuf_add_header>
 801cd62:	4603      	mov	r3, r0
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d13c      	bne.n	801cde2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	685b      	ldr	r3, [r3, #4]
 801cd6c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cd6e:	69fb      	ldr	r3, [r7, #28]
 801cd70:	681a      	ldr	r2, [r3, #0]
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cd76:	4b29      	ldr	r3, [pc, #164]	@ (801ce1c <icmp_input+0x228>)
 801cd78:	691a      	ldr	r2, [r3, #16]
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cd7e:	693b      	ldr	r3, [r7, #16]
 801cd80:	2200      	movs	r2, #0
 801cd82:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801cd84:	693b      	ldr	r3, [r7, #16]
 801cd86:	885b      	ldrh	r3, [r3, #2]
 801cd88:	b29b      	uxth	r3, r3
 801cd8a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801cd8e:	4293      	cmp	r3, r2
 801cd90:	d907      	bls.n	801cda2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801cd92:	693b      	ldr	r3, [r7, #16]
 801cd94:	885b      	ldrh	r3, [r3, #2]
 801cd96:	b29b      	uxth	r3, r3
 801cd98:	3309      	adds	r3, #9
 801cd9a:	b29a      	uxth	r2, r3
 801cd9c:	693b      	ldr	r3, [r7, #16]
 801cd9e:	805a      	strh	r2, [r3, #2]
 801cda0:	e006      	b.n	801cdb0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801cda2:	693b      	ldr	r3, [r7, #16]
 801cda4:	885b      	ldrh	r3, [r3, #2]
 801cda6:	b29b      	uxth	r3, r3
 801cda8:	3308      	adds	r3, #8
 801cdaa:	b29a      	uxth	r2, r3
 801cdac:	693b      	ldr	r3, [r7, #16]
 801cdae:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	22ff      	movs	r2, #255	@ 0xff
 801cdb4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	2200      	movs	r2, #0
 801cdba:	729a      	strb	r2, [r3, #10]
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	9302      	str	r3, [sp, #8]
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	9301      	str	r3, [sp, #4]
 801cdc8:	2300      	movs	r3, #0
 801cdca:	9300      	str	r3, [sp, #0]
 801cdcc:	23ff      	movs	r3, #255	@ 0xff
 801cdce:	2200      	movs	r2, #0
 801cdd0:	69f9      	ldr	r1, [r7, #28]
 801cdd2:	6878      	ldr	r0, [r7, #4]
 801cdd4:	f000 fa80 	bl	801d2d8 <ip4_output_if>
 801cdd8:	4603      	mov	r3, r0
 801cdda:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cddc:	e001      	b.n	801cde2 <icmp_input+0x1ee>
      break;
 801cdde:	bf00      	nop
 801cde0:	e000      	b.n	801cde4 <icmp_input+0x1f0>
      break;
 801cde2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cde4:	6878      	ldr	r0, [r7, #4]
 801cde6:	f7f8 f81d 	bl	8014e24 <pbuf_free>
  return;
 801cdea:	e013      	b.n	801ce14 <icmp_input+0x220>
    goto lenerr;
 801cdec:	bf00      	nop
 801cdee:	e002      	b.n	801cdf6 <icmp_input+0x202>
    goto lenerr;
 801cdf0:	bf00      	nop
 801cdf2:	e000      	b.n	801cdf6 <icmp_input+0x202>
        goto lenerr;
 801cdf4:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cdf6:	6878      	ldr	r0, [r7, #4]
 801cdf8:	f7f8 f814 	bl	8014e24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cdfc:	e00a      	b.n	801ce14 <icmp_input+0x220>
        goto icmperr;
 801cdfe:	bf00      	nop
 801ce00:	e004      	b.n	801ce0c <icmp_input+0x218>
        goto icmperr;
 801ce02:	bf00      	nop
 801ce04:	e002      	b.n	801ce0c <icmp_input+0x218>
          goto icmperr;
 801ce06:	bf00      	nop
 801ce08:	e000      	b.n	801ce0c <icmp_input+0x218>
          goto icmperr;
 801ce0a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ce0c:	6878      	ldr	r0, [r7, #4]
 801ce0e:	f7f8 f809 	bl	8014e24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ce12:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ce14:	3728      	adds	r7, #40	@ 0x28
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}
 801ce1a:	bf00      	nop
 801ce1c:	24005394 	.word	0x24005394
 801ce20:	240053a8 	.word	0x240053a8
 801ce24:	080228c8 	.word	0x080228c8
 801ce28:	08022900 	.word	0x08022900
 801ce2c:	08022938 	.word	0x08022938
 801ce30:	08022960 	.word	0x08022960

0801ce34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
 801ce3c:	460b      	mov	r3, r1
 801ce3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ce40:	78fb      	ldrb	r3, [r7, #3]
 801ce42:	461a      	mov	r2, r3
 801ce44:	2103      	movs	r1, #3
 801ce46:	6878      	ldr	r0, [r7, #4]
 801ce48:	f000 f814 	bl	801ce74 <icmp_send_response>
}
 801ce4c:	bf00      	nop
 801ce4e:	3708      	adds	r7, #8
 801ce50:	46bd      	mov	sp, r7
 801ce52:	bd80      	pop	{r7, pc}

0801ce54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	460b      	mov	r3, r1
 801ce5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ce60:	78fb      	ldrb	r3, [r7, #3]
 801ce62:	461a      	mov	r2, r3
 801ce64:	210b      	movs	r1, #11
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f000 f804 	bl	801ce74 <icmp_send_response>
}
 801ce6c:	bf00      	nop
 801ce6e:	3708      	adds	r7, #8
 801ce70:	46bd      	mov	sp, r7
 801ce72:	bd80      	pop	{r7, pc}

0801ce74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b08c      	sub	sp, #48	@ 0x30
 801ce78:	af04      	add	r7, sp, #16
 801ce7a:	6078      	str	r0, [r7, #4]
 801ce7c:	460b      	mov	r3, r1
 801ce7e:	70fb      	strb	r3, [r7, #3]
 801ce80:	4613      	mov	r3, r2
 801ce82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ce84:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ce88:	2124      	movs	r1, #36	@ 0x24
 801ce8a:	2022      	movs	r0, #34	@ 0x22
 801ce8c:	f7f7 fce6 	bl	801485c <pbuf_alloc>
 801ce90:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801ce92:	69fb      	ldr	r3, [r7, #28]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d056      	beq.n	801cf46 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ce98:	69fb      	ldr	r3, [r7, #28]
 801ce9a:	895b      	ldrh	r3, [r3, #10]
 801ce9c:	2b23      	cmp	r3, #35	@ 0x23
 801ce9e:	d806      	bhi.n	801ceae <icmp_send_response+0x3a>
 801cea0:	4b2b      	ldr	r3, [pc, #172]	@ (801cf50 <icmp_send_response+0xdc>)
 801cea2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801cea6:	492b      	ldr	r1, [pc, #172]	@ (801cf54 <icmp_send_response+0xe0>)
 801cea8:	482b      	ldr	r0, [pc, #172]	@ (801cf58 <icmp_send_response+0xe4>)
 801ceaa:	f001 fcf9 	bl	801e8a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ceb4:	69fb      	ldr	r3, [r7, #28]
 801ceb6:	685b      	ldr	r3, [r3, #4]
 801ceb8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	78fa      	ldrb	r2, [r7, #3]
 801cebe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801cec0:	697b      	ldr	r3, [r7, #20]
 801cec2:	78ba      	ldrb	r2, [r7, #2]
 801cec4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801cec6:	697b      	ldr	r3, [r7, #20]
 801cec8:	2200      	movs	r2, #0
 801ceca:	711a      	strb	r2, [r3, #4]
 801cecc:	2200      	movs	r2, #0
 801cece:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ced0:	697b      	ldr	r3, [r7, #20]
 801ced2:	2200      	movs	r2, #0
 801ced4:	719a      	strb	r2, [r3, #6]
 801ced6:	2200      	movs	r2, #0
 801ced8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ceda:	69fb      	ldr	r3, [r7, #28]
 801cedc:	685b      	ldr	r3, [r3, #4]
 801cede:	f103 0008 	add.w	r0, r3, #8
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	685b      	ldr	r3, [r3, #4]
 801cee6:	221c      	movs	r2, #28
 801cee8:	4619      	mov	r1, r3
 801ceea:	f001 fe0a 	bl	801eb02 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ceee:	69bb      	ldr	r3, [r7, #24]
 801cef0:	68db      	ldr	r3, [r3, #12]
 801cef2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801cef4:	f107 030c 	add.w	r3, r7, #12
 801cef8:	4618      	mov	r0, r3
 801cefa:	f000 f82f 	bl	801cf5c <ip4_route>
 801cefe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cf00:	693b      	ldr	r3, [r7, #16]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d01b      	beq.n	801cf3e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cf06:	697b      	ldr	r3, [r7, #20]
 801cf08:	2200      	movs	r2, #0
 801cf0a:	709a      	strb	r2, [r3, #2]
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801cf10:	69fb      	ldr	r3, [r7, #28]
 801cf12:	895b      	ldrh	r3, [r3, #10]
 801cf14:	4619      	mov	r1, r3
 801cf16:	6978      	ldr	r0, [r7, #20]
 801cf18:	f7f6 fb55 	bl	80135c6 <inet_chksum>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	461a      	mov	r2, r3
 801cf20:	697b      	ldr	r3, [r7, #20]
 801cf22:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801cf24:	f107 020c 	add.w	r2, r7, #12
 801cf28:	693b      	ldr	r3, [r7, #16]
 801cf2a:	9302      	str	r3, [sp, #8]
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	9301      	str	r3, [sp, #4]
 801cf30:	2300      	movs	r3, #0
 801cf32:	9300      	str	r3, [sp, #0]
 801cf34:	23ff      	movs	r3, #255	@ 0xff
 801cf36:	2100      	movs	r1, #0
 801cf38:	69f8      	ldr	r0, [r7, #28]
 801cf3a:	f000 f9cd 	bl	801d2d8 <ip4_output_if>
  }
  pbuf_free(q);
 801cf3e:	69f8      	ldr	r0, [r7, #28]
 801cf40:	f7f7 ff70 	bl	8014e24 <pbuf_free>
 801cf44:	e000      	b.n	801cf48 <icmp_send_response+0xd4>
    return;
 801cf46:	bf00      	nop
}
 801cf48:	3720      	adds	r7, #32
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	bd80      	pop	{r7, pc}
 801cf4e:	bf00      	nop
 801cf50:	080228c8 	.word	0x080228c8
 801cf54:	08022994 	.word	0x08022994
 801cf58:	08022938 	.word	0x08022938

0801cf5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cf5c:	b480      	push	{r7}
 801cf5e:	b085      	sub	sp, #20
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801cf64:	4b33      	ldr	r3, [pc, #204]	@ (801d034 <ip4_route+0xd8>)
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	60fb      	str	r3, [r7, #12]
 801cf6a:	e036      	b.n	801cfda <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cf72:	f003 0301 	and.w	r3, r3, #1
 801cf76:	b2db      	uxtb	r3, r3
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d02b      	beq.n	801cfd4 <ip4_route+0x78>
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cf82:	089b      	lsrs	r3, r3, #2
 801cf84:	f003 0301 	and.w	r3, r3, #1
 801cf88:	b2db      	uxtb	r3, r3
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d022      	beq.n	801cfd4 <ip4_route+0x78>
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	3304      	adds	r3, #4
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d01d      	beq.n	801cfd4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681a      	ldr	r2, [r3, #0]
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	3304      	adds	r3, #4
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	405a      	eors	r2, r3
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	3308      	adds	r3, #8
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	4013      	ands	r3, r2
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d101      	bne.n	801cfb4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	e038      	b.n	801d026 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cfba:	f003 0302 	and.w	r3, r3, #2
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d108      	bne.n	801cfd4 <ip4_route+0x78>
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	681a      	ldr	r2, [r3, #0]
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	330c      	adds	r3, #12
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d101      	bne.n	801cfd4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	e028      	b.n	801d026 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	60fb      	str	r3, [r7, #12]
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d1c5      	bne.n	801cf6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cfe0:	4b15      	ldr	r3, [pc, #84]	@ (801d038 <ip4_route+0xdc>)
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d01a      	beq.n	801d01e <ip4_route+0xc2>
 801cfe8:	4b13      	ldr	r3, [pc, #76]	@ (801d038 <ip4_route+0xdc>)
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cff0:	f003 0301 	and.w	r3, r3, #1
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d012      	beq.n	801d01e <ip4_route+0xc2>
 801cff8:	4b0f      	ldr	r3, [pc, #60]	@ (801d038 <ip4_route+0xdc>)
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d000:	f003 0304 	and.w	r3, r3, #4
 801d004:	2b00      	cmp	r3, #0
 801d006:	d00a      	beq.n	801d01e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d008:	4b0b      	ldr	r3, [pc, #44]	@ (801d038 <ip4_route+0xdc>)
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	3304      	adds	r3, #4
 801d00e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d010:	2b00      	cmp	r3, #0
 801d012:	d004      	beq.n	801d01e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	b2db      	uxtb	r3, r3
 801d01a:	2b7f      	cmp	r3, #127	@ 0x7f
 801d01c:	d101      	bne.n	801d022 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d01e:	2300      	movs	r3, #0
 801d020:	e001      	b.n	801d026 <ip4_route+0xca>
  }

  return netif_default;
 801d022:	4b05      	ldr	r3, [pc, #20]	@ (801d038 <ip4_route+0xdc>)
 801d024:	681b      	ldr	r3, [r3, #0]
}
 801d026:	4618      	mov	r0, r3
 801d028:	3714      	adds	r7, #20
 801d02a:	46bd      	mov	sp, r7
 801d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d030:	4770      	bx	lr
 801d032:	bf00      	nop
 801d034:	24008788 	.word	0x24008788
 801d038:	2400878c 	.word	0x2400878c

0801d03c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b082      	sub	sp, #8
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d04a:	f003 0301 	and.w	r3, r3, #1
 801d04e:	b2db      	uxtb	r3, r3
 801d050:	2b00      	cmp	r3, #0
 801d052:	d016      	beq.n	801d082 <ip4_input_accept+0x46>
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	3304      	adds	r3, #4
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d011      	beq.n	801d082 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d05e:	4b0b      	ldr	r3, [pc, #44]	@ (801d08c <ip4_input_accept+0x50>)
 801d060:	695a      	ldr	r2, [r3, #20]
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	3304      	adds	r3, #4
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	429a      	cmp	r2, r3
 801d06a:	d008      	beq.n	801d07e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d06c:	4b07      	ldr	r3, [pc, #28]	@ (801d08c <ip4_input_accept+0x50>)
 801d06e:	695b      	ldr	r3, [r3, #20]
 801d070:	6879      	ldr	r1, [r7, #4]
 801d072:	4618      	mov	r0, r3
 801d074:	f000 fa08 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801d078:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d001      	beq.n	801d082 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d07e:	2301      	movs	r3, #1
 801d080:	e000      	b.n	801d084 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d082:	2300      	movs	r3, #0
}
 801d084:	4618      	mov	r0, r3
 801d086:	3708      	adds	r7, #8
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	24005394 	.word	0x24005394

0801d090 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b086      	sub	sp, #24
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
 801d098:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	685b      	ldr	r3, [r3, #4]
 801d09e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d0a0:	697b      	ldr	r3, [r7, #20]
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	091b      	lsrs	r3, r3, #4
 801d0a6:	b2db      	uxtb	r3, r3
 801d0a8:	2b04      	cmp	r3, #4
 801d0aa:	d004      	beq.n	801d0b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d0ac:	6878      	ldr	r0, [r7, #4]
 801d0ae:	f7f7 feb9 	bl	8014e24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	e107      	b.n	801d2c6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d0b6:	697b      	ldr	r3, [r7, #20]
 801d0b8:	781b      	ldrb	r3, [r3, #0]
 801d0ba:	f003 030f 	and.w	r3, r3, #15
 801d0be:	b2db      	uxtb	r3, r3
 801d0c0:	009b      	lsls	r3, r3, #2
 801d0c2:	b2db      	uxtb	r3, r3
 801d0c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d0c6:	697b      	ldr	r3, [r7, #20]
 801d0c8:	885b      	ldrh	r3, [r3, #2]
 801d0ca:	b29b      	uxth	r3, r3
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	f7f6 f9ef 	bl	80134b0 <lwip_htons>
 801d0d2:	4603      	mov	r3, r0
 801d0d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	891b      	ldrh	r3, [r3, #8]
 801d0da:	89ba      	ldrh	r2, [r7, #12]
 801d0dc:	429a      	cmp	r2, r3
 801d0de:	d204      	bcs.n	801d0ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801d0e0:	89bb      	ldrh	r3, [r7, #12]
 801d0e2:	4619      	mov	r1, r3
 801d0e4:	6878      	ldr	r0, [r7, #4]
 801d0e6:	f7f7 fd17 	bl	8014b18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	895b      	ldrh	r3, [r3, #10]
 801d0ee:	89fa      	ldrh	r2, [r7, #14]
 801d0f0:	429a      	cmp	r2, r3
 801d0f2:	d807      	bhi.n	801d104 <ip4_input+0x74>
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	891b      	ldrh	r3, [r3, #8]
 801d0f8:	89ba      	ldrh	r2, [r7, #12]
 801d0fa:	429a      	cmp	r2, r3
 801d0fc:	d802      	bhi.n	801d104 <ip4_input+0x74>
 801d0fe:	89fb      	ldrh	r3, [r7, #14]
 801d100:	2b13      	cmp	r3, #19
 801d102:	d804      	bhi.n	801d10e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d104:	6878      	ldr	r0, [r7, #4]
 801d106:	f7f7 fe8d 	bl	8014e24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d10a:	2300      	movs	r3, #0
 801d10c:	e0db      	b.n	801d2c6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d10e:	697b      	ldr	r3, [r7, #20]
 801d110:	691b      	ldr	r3, [r3, #16]
 801d112:	4a6f      	ldr	r2, [pc, #444]	@ (801d2d0 <ip4_input+0x240>)
 801d114:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	68db      	ldr	r3, [r3, #12]
 801d11a:	4a6d      	ldr	r2, [pc, #436]	@ (801d2d0 <ip4_input+0x240>)
 801d11c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d11e:	4b6c      	ldr	r3, [pc, #432]	@ (801d2d0 <ip4_input+0x240>)
 801d120:	695b      	ldr	r3, [r3, #20]
 801d122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d126:	2be0      	cmp	r3, #224	@ 0xe0
 801d128:	d112      	bne.n	801d150 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d130:	f003 0301 	and.w	r3, r3, #1
 801d134:	b2db      	uxtb	r3, r3
 801d136:	2b00      	cmp	r3, #0
 801d138:	d007      	beq.n	801d14a <ip4_input+0xba>
 801d13a:	683b      	ldr	r3, [r7, #0]
 801d13c:	3304      	adds	r3, #4
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d002      	beq.n	801d14a <ip4_input+0xba>
      netif = inp;
 801d144:	683b      	ldr	r3, [r7, #0]
 801d146:	613b      	str	r3, [r7, #16]
 801d148:	e02a      	b.n	801d1a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801d14a:	2300      	movs	r3, #0
 801d14c:	613b      	str	r3, [r7, #16]
 801d14e:	e027      	b.n	801d1a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d150:	6838      	ldr	r0, [r7, #0]
 801d152:	f7ff ff73 	bl	801d03c <ip4_input_accept>
 801d156:	4603      	mov	r3, r0
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d002      	beq.n	801d162 <ip4_input+0xd2>
      netif = inp;
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	613b      	str	r3, [r7, #16]
 801d160:	e01e      	b.n	801d1a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801d162:	2300      	movs	r3, #0
 801d164:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d166:	4b5a      	ldr	r3, [pc, #360]	@ (801d2d0 <ip4_input+0x240>)
 801d168:	695b      	ldr	r3, [r3, #20]
 801d16a:	b2db      	uxtb	r3, r3
 801d16c:	2b7f      	cmp	r3, #127	@ 0x7f
 801d16e:	d017      	beq.n	801d1a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d170:	4b58      	ldr	r3, [pc, #352]	@ (801d2d4 <ip4_input+0x244>)
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	613b      	str	r3, [r7, #16]
 801d176:	e00e      	b.n	801d196 <ip4_input+0x106>
          if (netif == inp) {
 801d178:	693a      	ldr	r2, [r7, #16]
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	429a      	cmp	r2, r3
 801d17e:	d006      	beq.n	801d18e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d180:	6938      	ldr	r0, [r7, #16]
 801d182:	f7ff ff5b 	bl	801d03c <ip4_input_accept>
 801d186:	4603      	mov	r3, r0
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d108      	bne.n	801d19e <ip4_input+0x10e>
 801d18c:	e000      	b.n	801d190 <ip4_input+0x100>
            continue;
 801d18e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d190:	693b      	ldr	r3, [r7, #16]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	613b      	str	r3, [r7, #16]
 801d196:	693b      	ldr	r3, [r7, #16]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d1ed      	bne.n	801d178 <ip4_input+0xe8>
 801d19c:	e000      	b.n	801d1a0 <ip4_input+0x110>
            break;
 801d19e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d1a0:	4b4b      	ldr	r3, [pc, #300]	@ (801d2d0 <ip4_input+0x240>)
 801d1a2:	691b      	ldr	r3, [r3, #16]
 801d1a4:	6839      	ldr	r1, [r7, #0]
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f000 f96e 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d105      	bne.n	801d1be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d1b2:	4b47      	ldr	r3, [pc, #284]	@ (801d2d0 <ip4_input+0x240>)
 801d1b4:	691b      	ldr	r3, [r3, #16]
 801d1b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d1ba:	2be0      	cmp	r3, #224	@ 0xe0
 801d1bc:	d104      	bne.n	801d1c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d1be:	6878      	ldr	r0, [r7, #4]
 801d1c0:	f7f7 fe30 	bl	8014e24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	e07e      	b.n	801d2c6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d1c8:	693b      	ldr	r3, [r7, #16]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d104      	bne.n	801d1d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d1ce:	6878      	ldr	r0, [r7, #4]
 801d1d0:	f7f7 fe28 	bl	8014e24 <pbuf_free>
    return ERR_OK;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	e076      	b.n	801d2c6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d1d8:	697b      	ldr	r3, [r7, #20]
 801d1da:	88db      	ldrh	r3, [r3, #6]
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	461a      	mov	r2, r3
 801d1e0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d1e4:	4013      	ands	r3, r2
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d00b      	beq.n	801d202 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	f000 fc92 	bl	801db14 <ip4_reass>
 801d1f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d101      	bne.n	801d1fc <ip4_input+0x16c>
      return ERR_OK;
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	e064      	b.n	801d2c6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	685b      	ldr	r3, [r3, #4]
 801d200:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d202:	4a33      	ldr	r2, [pc, #204]	@ (801d2d0 <ip4_input+0x240>)
 801d204:	693b      	ldr	r3, [r7, #16]
 801d206:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d208:	4a31      	ldr	r2, [pc, #196]	@ (801d2d0 <ip4_input+0x240>)
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d20e:	4a30      	ldr	r2, [pc, #192]	@ (801d2d0 <ip4_input+0x240>)
 801d210:	697b      	ldr	r3, [r7, #20]
 801d212:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d214:	697b      	ldr	r3, [r7, #20]
 801d216:	781b      	ldrb	r3, [r3, #0]
 801d218:	f003 030f 	and.w	r3, r3, #15
 801d21c:	b2db      	uxtb	r3, r3
 801d21e:	009b      	lsls	r3, r3, #2
 801d220:	b2db      	uxtb	r3, r3
 801d222:	461a      	mov	r2, r3
 801d224:	4b2a      	ldr	r3, [pc, #168]	@ (801d2d0 <ip4_input+0x240>)
 801d226:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d228:	89fb      	ldrh	r3, [r7, #14]
 801d22a:	4619      	mov	r1, r3
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f7f7 fd73 	bl	8014d18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d232:	697b      	ldr	r3, [r7, #20]
 801d234:	7a5b      	ldrb	r3, [r3, #9]
 801d236:	2b11      	cmp	r3, #17
 801d238:	d006      	beq.n	801d248 <ip4_input+0x1b8>
 801d23a:	2b11      	cmp	r3, #17
 801d23c:	dc13      	bgt.n	801d266 <ip4_input+0x1d6>
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d00c      	beq.n	801d25c <ip4_input+0x1cc>
 801d242:	2b06      	cmp	r3, #6
 801d244:	d005      	beq.n	801d252 <ip4_input+0x1c2>
 801d246:	e00e      	b.n	801d266 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d248:	6839      	ldr	r1, [r7, #0]
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f7fe fb34 	bl	801b8b8 <udp_input>
        break;
 801d250:	e026      	b.n	801d2a0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d252:	6839      	ldr	r1, [r7, #0]
 801d254:	6878      	ldr	r0, [r7, #4]
 801d256:	f7f9 fef1 	bl	801703c <tcp_input>
        break;
 801d25a:	e021      	b.n	801d2a0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d25c:	6839      	ldr	r1, [r7, #0]
 801d25e:	6878      	ldr	r0, [r7, #4]
 801d260:	f7ff fcc8 	bl	801cbf4 <icmp_input>
        break;
 801d264:	e01c      	b.n	801d2a0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d266:	4b1a      	ldr	r3, [pc, #104]	@ (801d2d0 <ip4_input+0x240>)
 801d268:	695b      	ldr	r3, [r3, #20]
 801d26a:	6939      	ldr	r1, [r7, #16]
 801d26c:	4618      	mov	r0, r3
 801d26e:	f000 f90b 	bl	801d488 <ip4_addr_isbroadcast_u32>
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d10f      	bne.n	801d298 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d278:	4b15      	ldr	r3, [pc, #84]	@ (801d2d0 <ip4_input+0x240>)
 801d27a:	695b      	ldr	r3, [r3, #20]
 801d27c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d280:	2be0      	cmp	r3, #224	@ 0xe0
 801d282:	d009      	beq.n	801d298 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d288:	4619      	mov	r1, r3
 801d28a:	6878      	ldr	r0, [r7, #4]
 801d28c:	f7f7 fdb7 	bl	8014dfe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d290:	2102      	movs	r1, #2
 801d292:	6878      	ldr	r0, [r7, #4]
 801d294:	f7ff fdce 	bl	801ce34 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d298:	6878      	ldr	r0, [r7, #4]
 801d29a:	f7f7 fdc3 	bl	8014e24 <pbuf_free>
        break;
 801d29e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d2a0:	4b0b      	ldr	r3, [pc, #44]	@ (801d2d0 <ip4_input+0x240>)
 801d2a2:	2200      	movs	r2, #0
 801d2a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d2a6:	4b0a      	ldr	r3, [pc, #40]	@ (801d2d0 <ip4_input+0x240>)
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d2ac:	4b08      	ldr	r3, [pc, #32]	@ (801d2d0 <ip4_input+0x240>)
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d2b2:	4b07      	ldr	r3, [pc, #28]	@ (801d2d0 <ip4_input+0x240>)
 801d2b4:	2200      	movs	r2, #0
 801d2b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d2b8:	4b05      	ldr	r3, [pc, #20]	@ (801d2d0 <ip4_input+0x240>)
 801d2ba:	2200      	movs	r2, #0
 801d2bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d2be:	4b04      	ldr	r3, [pc, #16]	@ (801d2d0 <ip4_input+0x240>)
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d2c4:	2300      	movs	r3, #0
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	3718      	adds	r7, #24
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bd80      	pop	{r7, pc}
 801d2ce:	bf00      	nop
 801d2d0:	24005394 	.word	0x24005394
 801d2d4:	24008788 	.word	0x24008788

0801d2d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d2d8:	b580      	push	{r7, lr}
 801d2da:	b08a      	sub	sp, #40	@ 0x28
 801d2dc:	af04      	add	r7, sp, #16
 801d2de:	60f8      	str	r0, [r7, #12]
 801d2e0:	60b9      	str	r1, [r7, #8]
 801d2e2:	607a      	str	r2, [r7, #4]
 801d2e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d2e6:	68bb      	ldr	r3, [r7, #8]
 801d2e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d009      	beq.n	801d304 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d2f0:	68bb      	ldr	r3, [r7, #8]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d003      	beq.n	801d2fe <ip4_output_if+0x26>
 801d2f6:	68bb      	ldr	r3, [r7, #8]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d102      	bne.n	801d304 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d300:	3304      	adds	r3, #4
 801d302:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d304:	78fa      	ldrb	r2, [r7, #3]
 801d306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d308:	9302      	str	r3, [sp, #8]
 801d30a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801d30e:	9301      	str	r3, [sp, #4]
 801d310:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d314:	9300      	str	r3, [sp, #0]
 801d316:	4613      	mov	r3, r2
 801d318:	687a      	ldr	r2, [r7, #4]
 801d31a:	6979      	ldr	r1, [r7, #20]
 801d31c:	68f8      	ldr	r0, [r7, #12]
 801d31e:	f000 f805 	bl	801d32c <ip4_output_if_src>
 801d322:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d324:	4618      	mov	r0, r3
 801d326:	3718      	adds	r7, #24
 801d328:	46bd      	mov	sp, r7
 801d32a:	bd80      	pop	{r7, pc}

0801d32c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b088      	sub	sp, #32
 801d330:	af00      	add	r7, sp, #0
 801d332:	60f8      	str	r0, [r7, #12]
 801d334:	60b9      	str	r1, [r7, #8]
 801d336:	607a      	str	r2, [r7, #4]
 801d338:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	7b9b      	ldrb	r3, [r3, #14]
 801d33e:	2b01      	cmp	r3, #1
 801d340:	d006      	beq.n	801d350 <ip4_output_if_src+0x24>
 801d342:	4b4b      	ldr	r3, [pc, #300]	@ (801d470 <ip4_output_if_src+0x144>)
 801d344:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801d348:	494a      	ldr	r1, [pc, #296]	@ (801d474 <ip4_output_if_src+0x148>)
 801d34a:	484b      	ldr	r0, [pc, #300]	@ (801d478 <ip4_output_if_src+0x14c>)
 801d34c:	f001 faa8 	bl	801e8a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d060      	beq.n	801d418 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d356:	2314      	movs	r3, #20
 801d358:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d35a:	2114      	movs	r1, #20
 801d35c:	68f8      	ldr	r0, [r7, #12]
 801d35e:	f7f7 fccb 	bl	8014cf8 <pbuf_add_header>
 801d362:	4603      	mov	r3, r0
 801d364:	2b00      	cmp	r3, #0
 801d366:	d002      	beq.n	801d36e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d368:	f06f 0301 	mvn.w	r3, #1
 801d36c:	e07c      	b.n	801d468 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d36e:	68fb      	ldr	r3, [r7, #12]
 801d370:	685b      	ldr	r3, [r3, #4]
 801d372:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	895b      	ldrh	r3, [r3, #10]
 801d378:	2b13      	cmp	r3, #19
 801d37a:	d806      	bhi.n	801d38a <ip4_output_if_src+0x5e>
 801d37c:	4b3c      	ldr	r3, [pc, #240]	@ (801d470 <ip4_output_if_src+0x144>)
 801d37e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801d382:	493e      	ldr	r1, [pc, #248]	@ (801d47c <ip4_output_if_src+0x150>)
 801d384:	483c      	ldr	r0, [pc, #240]	@ (801d478 <ip4_output_if_src+0x14c>)
 801d386:	f001 fa8b 	bl	801e8a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d38a:	69fb      	ldr	r3, [r7, #28]
 801d38c:	78fa      	ldrb	r2, [r7, #3]
 801d38e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d390:	69fb      	ldr	r3, [r7, #28]
 801d392:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801d396:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681a      	ldr	r2, [r3, #0]
 801d39c:	69fb      	ldr	r3, [r7, #28]
 801d39e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d3a0:	8b7b      	ldrh	r3, [r7, #26]
 801d3a2:	089b      	lsrs	r3, r3, #2
 801d3a4:	b29b      	uxth	r3, r3
 801d3a6:	b2db      	uxtb	r3, r3
 801d3a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3ac:	b2da      	uxtb	r2, r3
 801d3ae:	69fb      	ldr	r3, [r7, #28]
 801d3b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d3b2:	69fb      	ldr	r3, [r7, #28]
 801d3b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801d3b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	891b      	ldrh	r3, [r3, #8]
 801d3be:	4618      	mov	r0, r3
 801d3c0:	f7f6 f876 	bl	80134b0 <lwip_htons>
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	461a      	mov	r2, r3
 801d3c8:	69fb      	ldr	r3, [r7, #28]
 801d3ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d3cc:	69fb      	ldr	r3, [r7, #28]
 801d3ce:	2200      	movs	r2, #0
 801d3d0:	719a      	strb	r2, [r3, #6]
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d3d6:	4b2a      	ldr	r3, [pc, #168]	@ (801d480 <ip4_output_if_src+0x154>)
 801d3d8:	881b      	ldrh	r3, [r3, #0]
 801d3da:	4618      	mov	r0, r3
 801d3dc:	f7f6 f868 	bl	80134b0 <lwip_htons>
 801d3e0:	4603      	mov	r3, r0
 801d3e2:	461a      	mov	r2, r3
 801d3e4:	69fb      	ldr	r3, [r7, #28]
 801d3e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d3e8:	4b25      	ldr	r3, [pc, #148]	@ (801d480 <ip4_output_if_src+0x154>)
 801d3ea:	881b      	ldrh	r3, [r3, #0]
 801d3ec:	3301      	adds	r3, #1
 801d3ee:	b29a      	uxth	r2, r3
 801d3f0:	4b23      	ldr	r3, [pc, #140]	@ (801d480 <ip4_output_if_src+0x154>)
 801d3f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d3f4:	68bb      	ldr	r3, [r7, #8]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d104      	bne.n	801d404 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d3fa:	4b22      	ldr	r3, [pc, #136]	@ (801d484 <ip4_output_if_src+0x158>)
 801d3fc:	681a      	ldr	r2, [r3, #0]
 801d3fe:	69fb      	ldr	r3, [r7, #28]
 801d400:	60da      	str	r2, [r3, #12]
 801d402:	e003      	b.n	801d40c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	681a      	ldr	r2, [r3, #0]
 801d408:	69fb      	ldr	r3, [r7, #28]
 801d40a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d40c:	69fb      	ldr	r3, [r7, #28]
 801d40e:	2200      	movs	r2, #0
 801d410:	729a      	strb	r2, [r3, #10]
 801d412:	2200      	movs	r2, #0
 801d414:	72da      	strb	r2, [r3, #11]
 801d416:	e00f      	b.n	801d438 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	895b      	ldrh	r3, [r3, #10]
 801d41c:	2b13      	cmp	r3, #19
 801d41e:	d802      	bhi.n	801d426 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d420:	f06f 0301 	mvn.w	r3, #1
 801d424:	e020      	b.n	801d468 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	685b      	ldr	r3, [r3, #4]
 801d42a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d42c:	69fb      	ldr	r3, [r7, #28]
 801d42e:	691b      	ldr	r3, [r3, #16]
 801d430:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d432:	f107 0314 	add.w	r3, r7, #20
 801d436:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d43a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d00c      	beq.n	801d45a <ip4_output_if_src+0x12e>
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	891a      	ldrh	r2, [r3, #8]
 801d444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d446:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d448:	429a      	cmp	r2, r3
 801d44a:	d906      	bls.n	801d45a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d44c:	687a      	ldr	r2, [r7, #4]
 801d44e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d450:	68f8      	ldr	r0, [r7, #12]
 801d452:	f000 fd53 	bl	801defc <ip4_frag>
 801d456:	4603      	mov	r3, r0
 801d458:	e006      	b.n	801d468 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d45c:	695b      	ldr	r3, [r3, #20]
 801d45e:	687a      	ldr	r2, [r7, #4]
 801d460:	68f9      	ldr	r1, [r7, #12]
 801d462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d464:	4798      	blx	r3
 801d466:	4603      	mov	r3, r0
}
 801d468:	4618      	mov	r0, r3
 801d46a:	3720      	adds	r7, #32
 801d46c:	46bd      	mov	sp, r7
 801d46e:	bd80      	pop	{r7, pc}
 801d470:	080229c0 	.word	0x080229c0
 801d474:	080229f4 	.word	0x080229f4
 801d478:	08022a00 	.word	0x08022a00
 801d47c:	08022a28 	.word	0x08022a28
 801d480:	240088e6 	.word	0x240088e6
 801d484:	08022f0c 	.word	0x08022f0c

0801d488 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d488:	b480      	push	{r7}
 801d48a:	b085      	sub	sp, #20
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
 801d490:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d49c:	d002      	beq.n	801d4a4 <ip4_addr_isbroadcast_u32+0x1c>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d101      	bne.n	801d4a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	e02a      	b.n	801d4fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d4a8:	683b      	ldr	r3, [r7, #0]
 801d4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d4ae:	f003 0302 	and.w	r3, r3, #2
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d101      	bne.n	801d4ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d4b6:	2300      	movs	r3, #0
 801d4b8:	e021      	b.n	801d4fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	3304      	adds	r3, #4
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	687a      	ldr	r2, [r7, #4]
 801d4c2:	429a      	cmp	r2, r3
 801d4c4:	d101      	bne.n	801d4ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	e019      	b.n	801d4fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d4ca:	68fa      	ldr	r2, [r7, #12]
 801d4cc:	683b      	ldr	r3, [r7, #0]
 801d4ce:	3304      	adds	r3, #4
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	405a      	eors	r2, r3
 801d4d4:	683b      	ldr	r3, [r7, #0]
 801d4d6:	3308      	adds	r3, #8
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	4013      	ands	r3, r2
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d10d      	bne.n	801d4fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d4e0:	683b      	ldr	r3, [r7, #0]
 801d4e2:	3308      	adds	r3, #8
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	43da      	mvns	r2, r3
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	3308      	adds	r3, #8
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d4f4:	429a      	cmp	r2, r3
 801d4f6:	d101      	bne.n	801d4fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	e000      	b.n	801d4fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d4fc:	2300      	movs	r3, #0
  }
}
 801d4fe:	4618      	mov	r0, r3
 801d500:	3714      	adds	r7, #20
 801d502:	46bd      	mov	sp, r7
 801d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d508:	4770      	bx	lr
	...

0801d50c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d50c:	b580      	push	{r7, lr}
 801d50e:	b084      	sub	sp, #16
 801d510:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d512:	2300      	movs	r3, #0
 801d514:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d516:	4b12      	ldr	r3, [pc, #72]	@ (801d560 <ip_reass_tmr+0x54>)
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d51c:	e018      	b.n	801d550 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	7fdb      	ldrb	r3, [r3, #31]
 801d522:	2b00      	cmp	r3, #0
 801d524:	d00b      	beq.n	801d53e <ip_reass_tmr+0x32>
      r->timer--;
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	7fdb      	ldrb	r3, [r3, #31]
 801d52a:	3b01      	subs	r3, #1
 801d52c:	b2da      	uxtb	r2, r3
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	60fb      	str	r3, [r7, #12]
 801d53c:	e008      	b.n	801d550 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d548:	68b9      	ldr	r1, [r7, #8]
 801d54a:	6878      	ldr	r0, [r7, #4]
 801d54c:	f000 f80a 	bl	801d564 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d1e3      	bne.n	801d51e <ip_reass_tmr+0x12>
    }
  }
}
 801d556:	bf00      	nop
 801d558:	bf00      	nop
 801d55a:	3710      	adds	r7, #16
 801d55c:	46bd      	mov	sp, r7
 801d55e:	bd80      	pop	{r7, pc}
 801d560:	240088e8 	.word	0x240088e8

0801d564 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b088      	sub	sp, #32
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
 801d56c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d56e:	2300      	movs	r3, #0
 801d570:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d572:	683a      	ldr	r2, [r7, #0]
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	429a      	cmp	r2, r3
 801d578:	d105      	bne.n	801d586 <ip_reass_free_complete_datagram+0x22>
 801d57a:	4b45      	ldr	r3, [pc, #276]	@ (801d690 <ip_reass_free_complete_datagram+0x12c>)
 801d57c:	22ab      	movs	r2, #171	@ 0xab
 801d57e:	4945      	ldr	r1, [pc, #276]	@ (801d694 <ip_reass_free_complete_datagram+0x130>)
 801d580:	4845      	ldr	r0, [pc, #276]	@ (801d698 <ip_reass_free_complete_datagram+0x134>)
 801d582:	f001 f98d 	bl	801e8a0 <iprintf>
  if (prev != NULL) {
 801d586:	683b      	ldr	r3, [r7, #0]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d00a      	beq.n	801d5a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d58c:	683b      	ldr	r3, [r7, #0]
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	687a      	ldr	r2, [r7, #4]
 801d592:	429a      	cmp	r2, r3
 801d594:	d005      	beq.n	801d5a2 <ip_reass_free_complete_datagram+0x3e>
 801d596:	4b3e      	ldr	r3, [pc, #248]	@ (801d690 <ip_reass_free_complete_datagram+0x12c>)
 801d598:	22ad      	movs	r2, #173	@ 0xad
 801d59a:	4940      	ldr	r1, [pc, #256]	@ (801d69c <ip_reass_free_complete_datagram+0x138>)
 801d59c:	483e      	ldr	r0, [pc, #248]	@ (801d698 <ip_reass_free_complete_datagram+0x134>)
 801d59e:	f001 f97f 	bl	801e8a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	685b      	ldr	r3, [r3, #4]
 801d5a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d5aa:	697b      	ldr	r3, [r7, #20]
 801d5ac:	889b      	ldrh	r3, [r3, #4]
 801d5ae:	b29b      	uxth	r3, r3
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d12a      	bne.n	801d60a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	685b      	ldr	r3, [r3, #4]
 801d5b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d5ba:	697b      	ldr	r3, [r7, #20]
 801d5bc:	681a      	ldr	r2, [r3, #0]
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d5c2:	69bb      	ldr	r3, [r7, #24]
 801d5c4:	6858      	ldr	r0, [r3, #4]
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	3308      	adds	r3, #8
 801d5ca:	2214      	movs	r2, #20
 801d5cc:	4619      	mov	r1, r3
 801d5ce:	f001 fa98 	bl	801eb02 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d5d2:	2101      	movs	r1, #1
 801d5d4:	69b8      	ldr	r0, [r7, #24]
 801d5d6:	f7ff fc3d 	bl	801ce54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d5da:	69b8      	ldr	r0, [r7, #24]
 801d5dc:	f7f7 fcb0 	bl	8014f40 <pbuf_clen>
 801d5e0:	4603      	mov	r3, r0
 801d5e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d5e4:	8bfa      	ldrh	r2, [r7, #30]
 801d5e6:	8a7b      	ldrh	r3, [r7, #18]
 801d5e8:	4413      	add	r3, r2
 801d5ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5ee:	db05      	blt.n	801d5fc <ip_reass_free_complete_datagram+0x98>
 801d5f0:	4b27      	ldr	r3, [pc, #156]	@ (801d690 <ip_reass_free_complete_datagram+0x12c>)
 801d5f2:	22bc      	movs	r2, #188	@ 0xbc
 801d5f4:	492a      	ldr	r1, [pc, #168]	@ (801d6a0 <ip_reass_free_complete_datagram+0x13c>)
 801d5f6:	4828      	ldr	r0, [pc, #160]	@ (801d698 <ip_reass_free_complete_datagram+0x134>)
 801d5f8:	f001 f952 	bl	801e8a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d5fc:	8bfa      	ldrh	r2, [r7, #30]
 801d5fe:	8a7b      	ldrh	r3, [r7, #18]
 801d600:	4413      	add	r3, r2
 801d602:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d604:	69b8      	ldr	r0, [r7, #24]
 801d606:	f7f7 fc0d 	bl	8014e24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	685b      	ldr	r3, [r3, #4]
 801d60e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d610:	e01f      	b.n	801d652 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d612:	69bb      	ldr	r3, [r7, #24]
 801d614:	685b      	ldr	r3, [r3, #4]
 801d616:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d618:	69bb      	ldr	r3, [r7, #24]
 801d61a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d61c:	697b      	ldr	r3, [r7, #20]
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d622:	68f8      	ldr	r0, [r7, #12]
 801d624:	f7f7 fc8c 	bl	8014f40 <pbuf_clen>
 801d628:	4603      	mov	r3, r0
 801d62a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d62c:	8bfa      	ldrh	r2, [r7, #30]
 801d62e:	8a7b      	ldrh	r3, [r7, #18]
 801d630:	4413      	add	r3, r2
 801d632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d636:	db05      	blt.n	801d644 <ip_reass_free_complete_datagram+0xe0>
 801d638:	4b15      	ldr	r3, [pc, #84]	@ (801d690 <ip_reass_free_complete_datagram+0x12c>)
 801d63a:	22cc      	movs	r2, #204	@ 0xcc
 801d63c:	4918      	ldr	r1, [pc, #96]	@ (801d6a0 <ip_reass_free_complete_datagram+0x13c>)
 801d63e:	4816      	ldr	r0, [pc, #88]	@ (801d698 <ip_reass_free_complete_datagram+0x134>)
 801d640:	f001 f92e 	bl	801e8a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d644:	8bfa      	ldrh	r2, [r7, #30]
 801d646:	8a7b      	ldrh	r3, [r7, #18]
 801d648:	4413      	add	r3, r2
 801d64a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d64c:	68f8      	ldr	r0, [r7, #12]
 801d64e:	f7f7 fbe9 	bl	8014e24 <pbuf_free>
  while (p != NULL) {
 801d652:	69bb      	ldr	r3, [r7, #24]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d1dc      	bne.n	801d612 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d658:	6839      	ldr	r1, [r7, #0]
 801d65a:	6878      	ldr	r0, [r7, #4]
 801d65c:	f000 f8c2 	bl	801d7e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d660:	4b10      	ldr	r3, [pc, #64]	@ (801d6a4 <ip_reass_free_complete_datagram+0x140>)
 801d662:	881b      	ldrh	r3, [r3, #0]
 801d664:	8bfa      	ldrh	r2, [r7, #30]
 801d666:	429a      	cmp	r2, r3
 801d668:	d905      	bls.n	801d676 <ip_reass_free_complete_datagram+0x112>
 801d66a:	4b09      	ldr	r3, [pc, #36]	@ (801d690 <ip_reass_free_complete_datagram+0x12c>)
 801d66c:	22d2      	movs	r2, #210	@ 0xd2
 801d66e:	490e      	ldr	r1, [pc, #56]	@ (801d6a8 <ip_reass_free_complete_datagram+0x144>)
 801d670:	4809      	ldr	r0, [pc, #36]	@ (801d698 <ip_reass_free_complete_datagram+0x134>)
 801d672:	f001 f915 	bl	801e8a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d676:	4b0b      	ldr	r3, [pc, #44]	@ (801d6a4 <ip_reass_free_complete_datagram+0x140>)
 801d678:	881a      	ldrh	r2, [r3, #0]
 801d67a:	8bfb      	ldrh	r3, [r7, #30]
 801d67c:	1ad3      	subs	r3, r2, r3
 801d67e:	b29a      	uxth	r2, r3
 801d680:	4b08      	ldr	r3, [pc, #32]	@ (801d6a4 <ip_reass_free_complete_datagram+0x140>)
 801d682:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d684:	8bfb      	ldrh	r3, [r7, #30]
}
 801d686:	4618      	mov	r0, r3
 801d688:	3720      	adds	r7, #32
 801d68a:	46bd      	mov	sp, r7
 801d68c:	bd80      	pop	{r7, pc}
 801d68e:	bf00      	nop
 801d690:	08022a58 	.word	0x08022a58
 801d694:	08022a94 	.word	0x08022a94
 801d698:	08022aa0 	.word	0x08022aa0
 801d69c:	08022ac8 	.word	0x08022ac8
 801d6a0:	08022adc 	.word	0x08022adc
 801d6a4:	240088ec 	.word	0x240088ec
 801d6a8:	08022afc 	.word	0x08022afc

0801d6ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b08a      	sub	sp, #40	@ 0x28
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
 801d6b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d6be:	2300      	movs	r3, #0
 801d6c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d6c2:	2300      	movs	r3, #0
 801d6c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d6ca:	4b28      	ldr	r3, [pc, #160]	@ (801d76c <ip_reass_remove_oldest_datagram+0xc0>)
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d6d0:	e030      	b.n	801d734 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6d4:	695a      	ldr	r2, [r3, #20]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	68db      	ldr	r3, [r3, #12]
 801d6da:	429a      	cmp	r2, r3
 801d6dc:	d10c      	bne.n	801d6f8 <ip_reass_remove_oldest_datagram+0x4c>
 801d6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6e0:	699a      	ldr	r2, [r3, #24]
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	691b      	ldr	r3, [r3, #16]
 801d6e6:	429a      	cmp	r2, r3
 801d6e8:	d106      	bne.n	801d6f8 <ip_reass_remove_oldest_datagram+0x4c>
 801d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6ec:	899a      	ldrh	r2, [r3, #12]
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	889b      	ldrh	r3, [r3, #4]
 801d6f2:	b29b      	uxth	r3, r3
 801d6f4:	429a      	cmp	r2, r3
 801d6f6:	d014      	beq.n	801d722 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d6f8:	693b      	ldr	r3, [r7, #16]
 801d6fa:	3301      	adds	r3, #1
 801d6fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d6fe:	6a3b      	ldr	r3, [r7, #32]
 801d700:	2b00      	cmp	r3, #0
 801d702:	d104      	bne.n	801d70e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d706:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d708:	69fb      	ldr	r3, [r7, #28]
 801d70a:	61bb      	str	r3, [r7, #24]
 801d70c:	e009      	b.n	801d722 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d710:	7fda      	ldrb	r2, [r3, #31]
 801d712:	6a3b      	ldr	r3, [r7, #32]
 801d714:	7fdb      	ldrb	r3, [r3, #31]
 801d716:	429a      	cmp	r2, r3
 801d718:	d803      	bhi.n	801d722 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d71c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d71e:	69fb      	ldr	r3, [r7, #28]
 801d720:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d001      	beq.n	801d72e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d72c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d736:	2b00      	cmp	r3, #0
 801d738:	d1cb      	bne.n	801d6d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d73a:	6a3b      	ldr	r3, [r7, #32]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d008      	beq.n	801d752 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d740:	69b9      	ldr	r1, [r7, #24]
 801d742:	6a38      	ldr	r0, [r7, #32]
 801d744:	f7ff ff0e 	bl	801d564 <ip_reass_free_complete_datagram>
 801d748:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d74a:	697a      	ldr	r2, [r7, #20]
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	4413      	add	r3, r2
 801d750:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d752:	697a      	ldr	r2, [r7, #20]
 801d754:	683b      	ldr	r3, [r7, #0]
 801d756:	429a      	cmp	r2, r3
 801d758:	da02      	bge.n	801d760 <ip_reass_remove_oldest_datagram+0xb4>
 801d75a:	693b      	ldr	r3, [r7, #16]
 801d75c:	2b01      	cmp	r3, #1
 801d75e:	dcac      	bgt.n	801d6ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d760:	697b      	ldr	r3, [r7, #20]
}
 801d762:	4618      	mov	r0, r3
 801d764:	3728      	adds	r7, #40	@ 0x28
 801d766:	46bd      	mov	sp, r7
 801d768:	bd80      	pop	{r7, pc}
 801d76a:	bf00      	nop
 801d76c:	240088e8 	.word	0x240088e8

0801d770 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d770:	b580      	push	{r7, lr}
 801d772:	b084      	sub	sp, #16
 801d774:	af00      	add	r7, sp, #0
 801d776:	6078      	str	r0, [r7, #4]
 801d778:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d77a:	2004      	movs	r0, #4
 801d77c:	f7f6 fc38 	bl	8013ff0 <memp_malloc>
 801d780:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	2b00      	cmp	r3, #0
 801d786:	d110      	bne.n	801d7aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d788:	6839      	ldr	r1, [r7, #0]
 801d78a:	6878      	ldr	r0, [r7, #4]
 801d78c:	f7ff ff8e 	bl	801d6ac <ip_reass_remove_oldest_datagram>
 801d790:	4602      	mov	r2, r0
 801d792:	683b      	ldr	r3, [r7, #0]
 801d794:	4293      	cmp	r3, r2
 801d796:	dc03      	bgt.n	801d7a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d798:	2004      	movs	r0, #4
 801d79a:	f7f6 fc29 	bl	8013ff0 <memp_malloc>
 801d79e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d101      	bne.n	801d7aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	e016      	b.n	801d7d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d7aa:	2220      	movs	r2, #32
 801d7ac:	2100      	movs	r1, #0
 801d7ae:	68f8      	ldr	r0, [r7, #12]
 801d7b0:	f001 f8db 	bl	801e96a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	220f      	movs	r2, #15
 801d7b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d7ba:	4b09      	ldr	r3, [pc, #36]	@ (801d7e0 <ip_reass_enqueue_new_datagram+0x70>)
 801d7bc:	681a      	ldr	r2, [r3, #0]
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d7c2:	4a07      	ldr	r2, [pc, #28]	@ (801d7e0 <ip_reass_enqueue_new_datagram+0x70>)
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	3308      	adds	r3, #8
 801d7cc:	2214      	movs	r2, #20
 801d7ce:	6879      	ldr	r1, [r7, #4]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f001 f996 	bl	801eb02 <memcpy>
  return ipr;
 801d7d6:	68fb      	ldr	r3, [r7, #12]
}
 801d7d8:	4618      	mov	r0, r3
 801d7da:	3710      	adds	r7, #16
 801d7dc:	46bd      	mov	sp, r7
 801d7de:	bd80      	pop	{r7, pc}
 801d7e0:	240088e8 	.word	0x240088e8

0801d7e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b082      	sub	sp, #8
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	6078      	str	r0, [r7, #4]
 801d7ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d7ee:	4b10      	ldr	r3, [pc, #64]	@ (801d830 <ip_reass_dequeue_datagram+0x4c>)
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	687a      	ldr	r2, [r7, #4]
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d104      	bne.n	801d802 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	4a0c      	ldr	r2, [pc, #48]	@ (801d830 <ip_reass_dequeue_datagram+0x4c>)
 801d7fe:	6013      	str	r3, [r2, #0]
 801d800:	e00d      	b.n	801d81e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d802:	683b      	ldr	r3, [r7, #0]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d106      	bne.n	801d816 <ip_reass_dequeue_datagram+0x32>
 801d808:	4b0a      	ldr	r3, [pc, #40]	@ (801d834 <ip_reass_dequeue_datagram+0x50>)
 801d80a:	f240 1245 	movw	r2, #325	@ 0x145
 801d80e:	490a      	ldr	r1, [pc, #40]	@ (801d838 <ip_reass_dequeue_datagram+0x54>)
 801d810:	480a      	ldr	r0, [pc, #40]	@ (801d83c <ip_reass_dequeue_datagram+0x58>)
 801d812:	f001 f845 	bl	801e8a0 <iprintf>
    prev->next = ipr->next;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	681a      	ldr	r2, [r3, #0]
 801d81a:	683b      	ldr	r3, [r7, #0]
 801d81c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d81e:	6879      	ldr	r1, [r7, #4]
 801d820:	2004      	movs	r0, #4
 801d822:	f7f6 fc5b 	bl	80140dc <memp_free>
}
 801d826:	bf00      	nop
 801d828:	3708      	adds	r7, #8
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}
 801d82e:	bf00      	nop
 801d830:	240088e8 	.word	0x240088e8
 801d834:	08022a58 	.word	0x08022a58
 801d838:	08022b20 	.word	0x08022b20
 801d83c:	08022aa0 	.word	0x08022aa0

0801d840 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b08c      	sub	sp, #48	@ 0x30
 801d844:	af00      	add	r7, sp, #0
 801d846:	60f8      	str	r0, [r7, #12]
 801d848:	60b9      	str	r1, [r7, #8]
 801d84a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d84c:	2300      	movs	r3, #0
 801d84e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d850:	2301      	movs	r3, #1
 801d852:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d854:	68bb      	ldr	r3, [r7, #8]
 801d856:	685b      	ldr	r3, [r3, #4]
 801d858:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d85a:	69fb      	ldr	r3, [r7, #28]
 801d85c:	885b      	ldrh	r3, [r3, #2]
 801d85e:	b29b      	uxth	r3, r3
 801d860:	4618      	mov	r0, r3
 801d862:	f7f5 fe25 	bl	80134b0 <lwip_htons>
 801d866:	4603      	mov	r3, r0
 801d868:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d86a:	69fb      	ldr	r3, [r7, #28]
 801d86c:	781b      	ldrb	r3, [r3, #0]
 801d86e:	f003 030f 	and.w	r3, r3, #15
 801d872:	b2db      	uxtb	r3, r3
 801d874:	009b      	lsls	r3, r3, #2
 801d876:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d878:	7e7b      	ldrb	r3, [r7, #25]
 801d87a:	b29b      	uxth	r3, r3
 801d87c:	8b7a      	ldrh	r2, [r7, #26]
 801d87e:	429a      	cmp	r2, r3
 801d880:	d202      	bcs.n	801d888 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d882:	f04f 33ff 	mov.w	r3, #4294967295
 801d886:	e135      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d888:	7e7b      	ldrb	r3, [r7, #25]
 801d88a:	b29b      	uxth	r3, r3
 801d88c:	8b7a      	ldrh	r2, [r7, #26]
 801d88e:	1ad3      	subs	r3, r2, r3
 801d890:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d892:	69fb      	ldr	r3, [r7, #28]
 801d894:	88db      	ldrh	r3, [r3, #6]
 801d896:	b29b      	uxth	r3, r3
 801d898:	4618      	mov	r0, r3
 801d89a:	f7f5 fe09 	bl	80134b0 <lwip_htons>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d8a4:	b29b      	uxth	r3, r3
 801d8a6:	00db      	lsls	r3, r3, #3
 801d8a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d8aa:	68bb      	ldr	r3, [r7, #8]
 801d8ac:	685b      	ldr	r3, [r3, #4]
 801d8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	701a      	strb	r2, [r3, #0]
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	705a      	strb	r2, [r3, #1]
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	709a      	strb	r2, [r3, #2]
 801d8be:	2200      	movs	r2, #0
 801d8c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8c4:	8afa      	ldrh	r2, [r7, #22]
 801d8c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d8c8:	8afa      	ldrh	r2, [r7, #22]
 801d8ca:	8b7b      	ldrh	r3, [r7, #26]
 801d8cc:	4413      	add	r3, r2
 801d8ce:	b29a      	uxth	r2, r3
 801d8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8d6:	88db      	ldrh	r3, [r3, #6]
 801d8d8:	b29b      	uxth	r3, r3
 801d8da:	8afa      	ldrh	r2, [r7, #22]
 801d8dc:	429a      	cmp	r2, r3
 801d8de:	d902      	bls.n	801d8e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d8e4:	e106      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	685b      	ldr	r3, [r3, #4]
 801d8ea:	627b      	str	r3, [r7, #36]	@ 0x24
 801d8ec:	e068      	b.n	801d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8f0:	685b      	ldr	r3, [r3, #4]
 801d8f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8f6:	889b      	ldrh	r3, [r3, #4]
 801d8f8:	b29a      	uxth	r2, r3
 801d8fa:	693b      	ldr	r3, [r7, #16]
 801d8fc:	889b      	ldrh	r3, [r3, #4]
 801d8fe:	b29b      	uxth	r3, r3
 801d900:	429a      	cmp	r2, r3
 801d902:	d235      	bcs.n	801d970 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d908:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d020      	beq.n	801d952 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d912:	889b      	ldrh	r3, [r3, #4]
 801d914:	b29a      	uxth	r2, r3
 801d916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d918:	88db      	ldrh	r3, [r3, #6]
 801d91a:	b29b      	uxth	r3, r3
 801d91c:	429a      	cmp	r2, r3
 801d91e:	d307      	bcc.n	801d930 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d922:	88db      	ldrh	r3, [r3, #6]
 801d924:	b29a      	uxth	r2, r3
 801d926:	693b      	ldr	r3, [r7, #16]
 801d928:	889b      	ldrh	r3, [r3, #4]
 801d92a:	b29b      	uxth	r3, r3
 801d92c:	429a      	cmp	r2, r3
 801d92e:	d902      	bls.n	801d936 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d930:	f04f 33ff 	mov.w	r3, #4294967295
 801d934:	e0de      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d938:	68ba      	ldr	r2, [r7, #8]
 801d93a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d93e:	88db      	ldrh	r3, [r3, #6]
 801d940:	b29a      	uxth	r2, r3
 801d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d944:	889b      	ldrh	r3, [r3, #4]
 801d946:	b29b      	uxth	r3, r3
 801d948:	429a      	cmp	r2, r3
 801d94a:	d03d      	beq.n	801d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d94c:	2300      	movs	r3, #0
 801d94e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d950:	e03a      	b.n	801d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d954:	88db      	ldrh	r3, [r3, #6]
 801d956:	b29a      	uxth	r2, r3
 801d958:	693b      	ldr	r3, [r7, #16]
 801d95a:	889b      	ldrh	r3, [r3, #4]
 801d95c:	b29b      	uxth	r3, r3
 801d95e:	429a      	cmp	r2, r3
 801d960:	d902      	bls.n	801d968 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d962:	f04f 33ff 	mov.w	r3, #4294967295
 801d966:	e0c5      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	68ba      	ldr	r2, [r7, #8]
 801d96c:	605a      	str	r2, [r3, #4]
      break;
 801d96e:	e02b      	b.n	801d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d972:	889b      	ldrh	r3, [r3, #4]
 801d974:	b29a      	uxth	r2, r3
 801d976:	693b      	ldr	r3, [r7, #16]
 801d978:	889b      	ldrh	r3, [r3, #4]
 801d97a:	b29b      	uxth	r3, r3
 801d97c:	429a      	cmp	r2, r3
 801d97e:	d102      	bne.n	801d986 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d980:	f04f 33ff 	mov.w	r3, #4294967295
 801d984:	e0b6      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d988:	889b      	ldrh	r3, [r3, #4]
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	693b      	ldr	r3, [r7, #16]
 801d98e:	88db      	ldrh	r3, [r3, #6]
 801d990:	b29b      	uxth	r3, r3
 801d992:	429a      	cmp	r2, r3
 801d994:	d202      	bcs.n	801d99c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d996:	f04f 33ff 	mov.w	r3, #4294967295
 801d99a:	e0ab      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d009      	beq.n	801d9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9a4:	88db      	ldrh	r3, [r3, #6]
 801d9a6:	b29a      	uxth	r2, r3
 801d9a8:	693b      	ldr	r3, [r7, #16]
 801d9aa:	889b      	ldrh	r3, [r3, #4]
 801d9ac:	b29b      	uxth	r3, r3
 801d9ae:	429a      	cmp	r2, r3
 801d9b0:	d001      	beq.n	801d9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d9b6:	693b      	ldr	r3, [r7, #16]
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801d9bc:	693b      	ldr	r3, [r7, #16]
 801d9be:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d193      	bne.n	801d8ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d9c6:	e000      	b.n	801d9ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d9c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d12d      	bne.n	801da2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d01c      	beq.n	801da10 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9d8:	88db      	ldrh	r3, [r3, #6]
 801d9da:	b29a      	uxth	r2, r3
 801d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9de:	889b      	ldrh	r3, [r3, #4]
 801d9e0:	b29b      	uxth	r3, r3
 801d9e2:	429a      	cmp	r2, r3
 801d9e4:	d906      	bls.n	801d9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d9e6:	4b45      	ldr	r3, [pc, #276]	@ (801dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d9e8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801d9ec:	4944      	ldr	r1, [pc, #272]	@ (801db00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d9ee:	4845      	ldr	r0, [pc, #276]	@ (801db04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d9f0:	f000 ff56 	bl	801e8a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9f6:	68ba      	ldr	r2, [r7, #8]
 801d9f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9fc:	88db      	ldrh	r3, [r3, #6]
 801d9fe:	b29a      	uxth	r2, r3
 801da00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da02:	889b      	ldrh	r3, [r3, #4]
 801da04:	b29b      	uxth	r3, r3
 801da06:	429a      	cmp	r2, r3
 801da08:	d010      	beq.n	801da2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801da0a:	2300      	movs	r3, #0
 801da0c:	623b      	str	r3, [r7, #32]
 801da0e:	e00d      	b.n	801da2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	685b      	ldr	r3, [r3, #4]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d006      	beq.n	801da26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801da18:	4b38      	ldr	r3, [pc, #224]	@ (801dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801da1a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801da1e:	493a      	ldr	r1, [pc, #232]	@ (801db08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801da20:	4838      	ldr	r0, [pc, #224]	@ (801db04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801da22:	f000 ff3d 	bl	801e8a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	68ba      	ldr	r2, [r7, #8]
 801da2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d105      	bne.n	801da3e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	7f9b      	ldrb	r3, [r3, #30]
 801da36:	f003 0301 	and.w	r3, r3, #1
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d059      	beq.n	801daf2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801da3e:	6a3b      	ldr	r3, [r7, #32]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d04f      	beq.n	801dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	685b      	ldr	r3, [r3, #4]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d006      	beq.n	801da5a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	685b      	ldr	r3, [r3, #4]
 801da50:	685b      	ldr	r3, [r3, #4]
 801da52:	889b      	ldrh	r3, [r3, #4]
 801da54:	b29b      	uxth	r3, r3
 801da56:	2b00      	cmp	r3, #0
 801da58:	d002      	beq.n	801da60 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801da5a:	2300      	movs	r3, #0
 801da5c:	623b      	str	r3, [r7, #32]
 801da5e:	e041      	b.n	801dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801da60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da62:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801da64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801da6a:	e012      	b.n	801da92 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da6e:	685b      	ldr	r3, [r3, #4]
 801da70:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801da72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da74:	88db      	ldrh	r3, [r3, #6]
 801da76:	b29a      	uxth	r2, r3
 801da78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da7a:	889b      	ldrh	r3, [r3, #4]
 801da7c:	b29b      	uxth	r3, r3
 801da7e:	429a      	cmp	r2, r3
 801da80:	d002      	beq.n	801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801da82:	2300      	movs	r3, #0
 801da84:	623b      	str	r3, [r7, #32]
            break;
 801da86:	e007      	b.n	801da98 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da8a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801da8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801da92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da94:	2b00      	cmp	r3, #0
 801da96:	d1e9      	bne.n	801da6c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801da98:	6a3b      	ldr	r3, [r7, #32]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d022      	beq.n	801dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	685b      	ldr	r3, [r3, #4]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d106      	bne.n	801dab4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801daa6:	4b15      	ldr	r3, [pc, #84]	@ (801dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801daa8:	f240 12df 	movw	r2, #479	@ 0x1df
 801daac:	4917      	ldr	r1, [pc, #92]	@ (801db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801daae:	4815      	ldr	r0, [pc, #84]	@ (801db04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dab0:	f000 fef6 	bl	801e8a0 <iprintf>
          LWIP_ASSERT("sanity check",
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	685b      	ldr	r3, [r3, #4]
 801dab8:	685b      	ldr	r3, [r3, #4]
 801daba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dabc:	429a      	cmp	r2, r3
 801dabe:	d106      	bne.n	801dace <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801dac0:	4b0e      	ldr	r3, [pc, #56]	@ (801dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dac2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801dac6:	4911      	ldr	r1, [pc, #68]	@ (801db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801dac8:	480e      	ldr	r0, [pc, #56]	@ (801db04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801daca:	f000 fee9 	bl	801e8a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801dace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d006      	beq.n	801dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801dad6:	4b09      	ldr	r3, [pc, #36]	@ (801dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dad8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801dadc:	490c      	ldr	r1, [pc, #48]	@ (801db10 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801dade:	4809      	ldr	r0, [pc, #36]	@ (801db04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dae0:	f000 fede 	bl	801e8a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801dae4:	6a3b      	ldr	r3, [r7, #32]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	bf14      	ite	ne
 801daea:	2301      	movne	r3, #1
 801daec:	2300      	moveq	r3, #0
 801daee:	b2db      	uxtb	r3, r3
 801daf0:	e000      	b.n	801daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801daf2:	2300      	movs	r3, #0
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	3730      	adds	r7, #48	@ 0x30
 801daf8:	46bd      	mov	sp, r7
 801dafa:	bd80      	pop	{r7, pc}
 801dafc:	08022a58 	.word	0x08022a58
 801db00:	08022b3c 	.word	0x08022b3c
 801db04:	08022aa0 	.word	0x08022aa0
 801db08:	08022b5c 	.word	0x08022b5c
 801db0c:	08022b94 	.word	0x08022b94
 801db10:	08022ba4 	.word	0x08022ba4

0801db14 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801db14:	b580      	push	{r7, lr}
 801db16:	b08e      	sub	sp, #56	@ 0x38
 801db18:	af00      	add	r7, sp, #0
 801db1a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	685b      	ldr	r3, [r3, #4]
 801db20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801db22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db24:	781b      	ldrb	r3, [r3, #0]
 801db26:	f003 030f 	and.w	r3, r3, #15
 801db2a:	b2db      	uxtb	r3, r3
 801db2c:	009b      	lsls	r3, r3, #2
 801db2e:	b2db      	uxtb	r3, r3
 801db30:	2b14      	cmp	r3, #20
 801db32:	f040 8171 	bne.w	801de18 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801db36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db38:	88db      	ldrh	r3, [r3, #6]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7f5 fcb7 	bl	80134b0 <lwip_htons>
 801db42:	4603      	mov	r3, r0
 801db44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db48:	b29b      	uxth	r3, r3
 801db4a:	00db      	lsls	r3, r3, #3
 801db4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801db4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db50:	885b      	ldrh	r3, [r3, #2]
 801db52:	b29b      	uxth	r3, r3
 801db54:	4618      	mov	r0, r3
 801db56:	f7f5 fcab 	bl	80134b0 <lwip_htons>
 801db5a:	4603      	mov	r3, r0
 801db5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801db5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db60:	781b      	ldrb	r3, [r3, #0]
 801db62:	f003 030f 	and.w	r3, r3, #15
 801db66:	b2db      	uxtb	r3, r3
 801db68:	009b      	lsls	r3, r3, #2
 801db6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801db6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801db72:	b29b      	uxth	r3, r3
 801db74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801db76:	429a      	cmp	r2, r3
 801db78:	f0c0 8150 	bcc.w	801de1c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801db7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801db80:	b29b      	uxth	r3, r3
 801db82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801db84:	1ad3      	subs	r3, r2, r3
 801db86:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801db88:	6878      	ldr	r0, [r7, #4]
 801db8a:	f7f7 f9d9 	bl	8014f40 <pbuf_clen>
 801db8e:	4603      	mov	r3, r0
 801db90:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801db92:	4b8c      	ldr	r3, [pc, #560]	@ (801ddc4 <ip4_reass+0x2b0>)
 801db94:	881b      	ldrh	r3, [r3, #0]
 801db96:	461a      	mov	r2, r3
 801db98:	8c3b      	ldrh	r3, [r7, #32]
 801db9a:	4413      	add	r3, r2
 801db9c:	2b0a      	cmp	r3, #10
 801db9e:	dd10      	ble.n	801dbc2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801dba0:	8c3b      	ldrh	r3, [r7, #32]
 801dba2:	4619      	mov	r1, r3
 801dba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dba6:	f7ff fd81 	bl	801d6ac <ip_reass_remove_oldest_datagram>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	f000 8137 	beq.w	801de20 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801dbb2:	4b84      	ldr	r3, [pc, #528]	@ (801ddc4 <ip4_reass+0x2b0>)
 801dbb4:	881b      	ldrh	r3, [r3, #0]
 801dbb6:	461a      	mov	r2, r3
 801dbb8:	8c3b      	ldrh	r3, [r7, #32]
 801dbba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801dbbc:	2b0a      	cmp	r3, #10
 801dbbe:	f300 812f 	bgt.w	801de20 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dbc2:	4b81      	ldr	r3, [pc, #516]	@ (801ddc8 <ip4_reass+0x2b4>)
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	633b      	str	r3, [r7, #48]	@ 0x30
 801dbc8:	e015      	b.n	801dbf6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbcc:	695a      	ldr	r2, [r3, #20]
 801dbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbd0:	68db      	ldr	r3, [r3, #12]
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	d10c      	bne.n	801dbf0 <ip4_reass+0xdc>
 801dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbd8:	699a      	ldr	r2, [r3, #24]
 801dbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbdc:	691b      	ldr	r3, [r3, #16]
 801dbde:	429a      	cmp	r2, r3
 801dbe0:	d106      	bne.n	801dbf0 <ip4_reass+0xdc>
 801dbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbe4:	899a      	ldrh	r2, [r3, #12]
 801dbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbe8:	889b      	ldrh	r3, [r3, #4]
 801dbea:	b29b      	uxth	r3, r3
 801dbec:	429a      	cmp	r2, r3
 801dbee:	d006      	beq.n	801dbfe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	633b      	str	r3, [r7, #48]	@ 0x30
 801dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d1e6      	bne.n	801dbca <ip4_reass+0xb6>
 801dbfc:	e000      	b.n	801dc00 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801dbfe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801dc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d109      	bne.n	801dc1a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801dc06:	8c3b      	ldrh	r3, [r7, #32]
 801dc08:	4619      	mov	r1, r3
 801dc0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dc0c:	f7ff fdb0 	bl	801d770 <ip_reass_enqueue_new_datagram>
 801dc10:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d11c      	bne.n	801dc52 <ip4_reass+0x13e>
      goto nullreturn;
 801dc18:	e105      	b.n	801de26 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801dc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc1c:	88db      	ldrh	r3, [r3, #6]
 801dc1e:	b29b      	uxth	r3, r3
 801dc20:	4618      	mov	r0, r3
 801dc22:	f7f5 fc45 	bl	80134b0 <lwip_htons>
 801dc26:	4603      	mov	r3, r0
 801dc28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d110      	bne.n	801dc52 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801dc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc32:	89db      	ldrh	r3, [r3, #14]
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7f5 fc3b 	bl	80134b0 <lwip_htons>
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d006      	beq.n	801dc52 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801dc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc46:	3308      	adds	r3, #8
 801dc48:	2214      	movs	r2, #20
 801dc4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f000 ff58 	bl	801eb02 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc54:	88db      	ldrh	r3, [r3, #6]
 801dc56:	b29b      	uxth	r3, r3
 801dc58:	f003 0320 	and.w	r3, r3, #32
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	bf0c      	ite	eq
 801dc60:	2301      	moveq	r3, #1
 801dc62:	2300      	movne	r3, #0
 801dc64:	b2db      	uxtb	r3, r3
 801dc66:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801dc68:	69fb      	ldr	r3, [r7, #28]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d00e      	beq.n	801dc8c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801dc6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801dc70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801dc72:	4413      	add	r3, r2
 801dc74:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801dc76:	8b7a      	ldrh	r2, [r7, #26]
 801dc78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801dc7a:	429a      	cmp	r2, r3
 801dc7c:	f0c0 80a0 	bcc.w	801ddc0 <ip4_reass+0x2ac>
 801dc80:	8b7b      	ldrh	r3, [r7, #26]
 801dc82:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801dc86:	4293      	cmp	r3, r2
 801dc88:	f200 809a 	bhi.w	801ddc0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801dc8c:	69fa      	ldr	r2, [r7, #28]
 801dc8e:	6879      	ldr	r1, [r7, #4]
 801dc90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dc92:	f7ff fdd5 	bl	801d840 <ip_reass_chain_frag_into_datagram_and_validate>
 801dc96:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801dc98:	697b      	ldr	r3, [r7, #20]
 801dc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc9e:	f000 809b 	beq.w	801ddd8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801dca2:	4b48      	ldr	r3, [pc, #288]	@ (801ddc4 <ip4_reass+0x2b0>)
 801dca4:	881a      	ldrh	r2, [r3, #0]
 801dca6:	8c3b      	ldrh	r3, [r7, #32]
 801dca8:	4413      	add	r3, r2
 801dcaa:	b29a      	uxth	r2, r3
 801dcac:	4b45      	ldr	r3, [pc, #276]	@ (801ddc4 <ip4_reass+0x2b0>)
 801dcae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801dcb0:	69fb      	ldr	r3, [r7, #28]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d00d      	beq.n	801dcd2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801dcb6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801dcb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801dcba:	4413      	add	r3, r2
 801dcbc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801dcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcc0:	8a7a      	ldrh	r2, [r7, #18]
 801dcc2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801dcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcc6:	7f9b      	ldrb	r3, [r3, #30]
 801dcc8:	f043 0301 	orr.w	r3, r3, #1
 801dccc:	b2da      	uxtb	r2, r3
 801dcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcd0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801dcd2:	697b      	ldr	r3, [r7, #20]
 801dcd4:	2b01      	cmp	r3, #1
 801dcd6:	d171      	bne.n	801ddbc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801dcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcda:	8b9b      	ldrh	r3, [r3, #28]
 801dcdc:	3314      	adds	r3, #20
 801dcde:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801dce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dce2:	685b      	ldr	r3, [r3, #4]
 801dce4:	685b      	ldr	r3, [r3, #4]
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801dcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcec:	685b      	ldr	r3, [r3, #4]
 801dcee:	685b      	ldr	r3, [r3, #4]
 801dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcf4:	3308      	adds	r3, #8
 801dcf6:	2214      	movs	r2, #20
 801dcf8:	4619      	mov	r1, r3
 801dcfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dcfc:	f000 ff01 	bl	801eb02 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801dd00:	8a3b      	ldrh	r3, [r7, #16]
 801dd02:	4618      	mov	r0, r3
 801dd04:	f7f5 fbd4 	bl	80134b0 <lwip_htons>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	461a      	mov	r2, r3
 801dd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd0e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd12:	2200      	movs	r2, #0
 801dd14:	719a      	strb	r2, [r3, #6]
 801dd16:	2200      	movs	r2, #0
 801dd18:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801dd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd1c:	2200      	movs	r2, #0
 801dd1e:	729a      	strb	r2, [r3, #10]
 801dd20:	2200      	movs	r2, #0
 801dd22:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801dd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd26:	685b      	ldr	r3, [r3, #4]
 801dd28:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801dd2a:	e00d      	b.n	801dd48 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801dd2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd2e:	685b      	ldr	r3, [r3, #4]
 801dd30:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801dd32:	2114      	movs	r1, #20
 801dd34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801dd36:	f7f6 ffef 	bl	8014d18 <pbuf_remove_header>
      pbuf_cat(p, r);
 801dd3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801dd3c:	6878      	ldr	r0, [r7, #4]
 801dd3e:	f7f7 f93f 	bl	8014fc0 <pbuf_cat>
      r = iprh->next_pbuf;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	681b      	ldr	r3, [r3, #0]
 801dd46:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801dd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d1ee      	bne.n	801dd2c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801dd4e:	4b1e      	ldr	r3, [pc, #120]	@ (801ddc8 <ip4_reass+0x2b4>)
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd54:	429a      	cmp	r2, r3
 801dd56:	d102      	bne.n	801dd5e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801dd58:	2300      	movs	r3, #0
 801dd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd5c:	e010      	b.n	801dd80 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dd5e:	4b1a      	ldr	r3, [pc, #104]	@ (801ddc8 <ip4_reass+0x2b4>)
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd64:	e007      	b.n	801dd76 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801dd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd6c:	429a      	cmp	r2, r3
 801dd6e:	d006      	beq.n	801dd7e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d1f4      	bne.n	801dd66 <ip4_reass+0x252>
 801dd7c:	e000      	b.n	801dd80 <ip4_reass+0x26c>
          break;
 801dd7e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801dd80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801dd82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dd84:	f7ff fd2e 	bl	801d7e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801dd88:	6878      	ldr	r0, [r7, #4]
 801dd8a:	f7f7 f8d9 	bl	8014f40 <pbuf_clen>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dd92:	4b0c      	ldr	r3, [pc, #48]	@ (801ddc4 <ip4_reass+0x2b0>)
 801dd94:	881b      	ldrh	r3, [r3, #0]
 801dd96:	8c3a      	ldrh	r2, [r7, #32]
 801dd98:	429a      	cmp	r2, r3
 801dd9a:	d906      	bls.n	801ddaa <ip4_reass+0x296>
 801dd9c:	4b0b      	ldr	r3, [pc, #44]	@ (801ddcc <ip4_reass+0x2b8>)
 801dd9e:	f240 229b 	movw	r2, #667	@ 0x29b
 801dda2:	490b      	ldr	r1, [pc, #44]	@ (801ddd0 <ip4_reass+0x2bc>)
 801dda4:	480b      	ldr	r0, [pc, #44]	@ (801ddd4 <ip4_reass+0x2c0>)
 801dda6:	f000 fd7b 	bl	801e8a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ddaa:	4b06      	ldr	r3, [pc, #24]	@ (801ddc4 <ip4_reass+0x2b0>)
 801ddac:	881a      	ldrh	r2, [r3, #0]
 801ddae:	8c3b      	ldrh	r3, [r7, #32]
 801ddb0:	1ad3      	subs	r3, r2, r3
 801ddb2:	b29a      	uxth	r2, r3
 801ddb4:	4b03      	ldr	r3, [pc, #12]	@ (801ddc4 <ip4_reass+0x2b0>)
 801ddb6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	e038      	b.n	801de2e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	e036      	b.n	801de2e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801ddc0:	bf00      	nop
 801ddc2:	e00a      	b.n	801ddda <ip4_reass+0x2c6>
 801ddc4:	240088ec 	.word	0x240088ec
 801ddc8:	240088e8 	.word	0x240088e8
 801ddcc:	08022a58 	.word	0x08022a58
 801ddd0:	08022bc8 	.word	0x08022bc8
 801ddd4:	08022aa0 	.word	0x08022aa0
    goto nullreturn_ipr;
 801ddd8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ddda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d106      	bne.n	801ddee <ip4_reass+0x2da>
 801dde0:	4b15      	ldr	r3, [pc, #84]	@ (801de38 <ip4_reass+0x324>)
 801dde2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801dde6:	4915      	ldr	r1, [pc, #84]	@ (801de3c <ip4_reass+0x328>)
 801dde8:	4815      	ldr	r0, [pc, #84]	@ (801de40 <ip4_reass+0x32c>)
 801ddea:	f000 fd59 	bl	801e8a0 <iprintf>
  if (ipr->p == NULL) {
 801ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddf0:	685b      	ldr	r3, [r3, #4]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d116      	bne.n	801de24 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ddf6:	4b13      	ldr	r3, [pc, #76]	@ (801de44 <ip4_reass+0x330>)
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ddfc:	429a      	cmp	r2, r3
 801ddfe:	d006      	beq.n	801de0e <ip4_reass+0x2fa>
 801de00:	4b0d      	ldr	r3, [pc, #52]	@ (801de38 <ip4_reass+0x324>)
 801de02:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801de06:	4910      	ldr	r1, [pc, #64]	@ (801de48 <ip4_reass+0x334>)
 801de08:	480d      	ldr	r0, [pc, #52]	@ (801de40 <ip4_reass+0x32c>)
 801de0a:	f000 fd49 	bl	801e8a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801de0e:	2100      	movs	r1, #0
 801de10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801de12:	f7ff fce7 	bl	801d7e4 <ip_reass_dequeue_datagram>
 801de16:	e006      	b.n	801de26 <ip4_reass+0x312>
    goto nullreturn;
 801de18:	bf00      	nop
 801de1a:	e004      	b.n	801de26 <ip4_reass+0x312>
    goto nullreturn;
 801de1c:	bf00      	nop
 801de1e:	e002      	b.n	801de26 <ip4_reass+0x312>
      goto nullreturn;
 801de20:	bf00      	nop
 801de22:	e000      	b.n	801de26 <ip4_reass+0x312>
  }

nullreturn:
 801de24:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801de26:	6878      	ldr	r0, [r7, #4]
 801de28:	f7f6 fffc 	bl	8014e24 <pbuf_free>
  return NULL;
 801de2c:	2300      	movs	r3, #0
}
 801de2e:	4618      	mov	r0, r3
 801de30:	3738      	adds	r7, #56	@ 0x38
 801de32:	46bd      	mov	sp, r7
 801de34:	bd80      	pop	{r7, pc}
 801de36:	bf00      	nop
 801de38:	08022a58 	.word	0x08022a58
 801de3c:	08022be4 	.word	0x08022be4
 801de40:	08022aa0 	.word	0x08022aa0
 801de44:	240088e8 	.word	0x240088e8
 801de48:	08022bf0 	.word	0x08022bf0

0801de4c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801de4c:	b580      	push	{r7, lr}
 801de4e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801de50:	2005      	movs	r0, #5
 801de52:	f7f6 f8cd 	bl	8013ff0 <memp_malloc>
 801de56:	4603      	mov	r3, r0
}
 801de58:	4618      	mov	r0, r3
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b082      	sub	sp, #8
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	2b00      	cmp	r3, #0
 801de68:	d106      	bne.n	801de78 <ip_frag_free_pbuf_custom_ref+0x1c>
 801de6a:	4b07      	ldr	r3, [pc, #28]	@ (801de88 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801de6c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801de70:	4906      	ldr	r1, [pc, #24]	@ (801de8c <ip_frag_free_pbuf_custom_ref+0x30>)
 801de72:	4807      	ldr	r0, [pc, #28]	@ (801de90 <ip_frag_free_pbuf_custom_ref+0x34>)
 801de74:	f000 fd14 	bl	801e8a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801de78:	6879      	ldr	r1, [r7, #4]
 801de7a:	2005      	movs	r0, #5
 801de7c:	f7f6 f92e 	bl	80140dc <memp_free>
}
 801de80:	bf00      	nop
 801de82:	3708      	adds	r7, #8
 801de84:	46bd      	mov	sp, r7
 801de86:	bd80      	pop	{r7, pc}
 801de88:	08022a58 	.word	0x08022a58
 801de8c:	08022c10 	.word	0x08022c10
 801de90:	08022aa0 	.word	0x08022aa0

0801de94 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801de94:	b580      	push	{r7, lr}
 801de96:	b084      	sub	sp, #16
 801de98:	af00      	add	r7, sp, #0
 801de9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d106      	bne.n	801deb4 <ipfrag_free_pbuf_custom+0x20>
 801dea6:	4b11      	ldr	r3, [pc, #68]	@ (801deec <ipfrag_free_pbuf_custom+0x58>)
 801dea8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801deac:	4910      	ldr	r1, [pc, #64]	@ (801def0 <ipfrag_free_pbuf_custom+0x5c>)
 801deae:	4811      	ldr	r0, [pc, #68]	@ (801def4 <ipfrag_free_pbuf_custom+0x60>)
 801deb0:	f000 fcf6 	bl	801e8a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801deb4:	68fa      	ldr	r2, [r7, #12]
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	429a      	cmp	r2, r3
 801deba:	d006      	beq.n	801deca <ipfrag_free_pbuf_custom+0x36>
 801debc:	4b0b      	ldr	r3, [pc, #44]	@ (801deec <ipfrag_free_pbuf_custom+0x58>)
 801debe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801dec2:	490d      	ldr	r1, [pc, #52]	@ (801def8 <ipfrag_free_pbuf_custom+0x64>)
 801dec4:	480b      	ldr	r0, [pc, #44]	@ (801def4 <ipfrag_free_pbuf_custom+0x60>)
 801dec6:	f000 fceb 	bl	801e8a0 <iprintf>
  if (pcr->original != NULL) {
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	695b      	ldr	r3, [r3, #20]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d004      	beq.n	801dedc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	695b      	ldr	r3, [r3, #20]
 801ded6:	4618      	mov	r0, r3
 801ded8:	f7f6 ffa4 	bl	8014e24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801dedc:	68f8      	ldr	r0, [r7, #12]
 801dede:	f7ff ffbd 	bl	801de5c <ip_frag_free_pbuf_custom_ref>
}
 801dee2:	bf00      	nop
 801dee4:	3710      	adds	r7, #16
 801dee6:	46bd      	mov	sp, r7
 801dee8:	bd80      	pop	{r7, pc}
 801deea:	bf00      	nop
 801deec:	08022a58 	.word	0x08022a58
 801def0:	08022c1c 	.word	0x08022c1c
 801def4:	08022aa0 	.word	0x08022aa0
 801def8:	08022c28 	.word	0x08022c28

0801defc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b094      	sub	sp, #80	@ 0x50
 801df00:	af02      	add	r7, sp, #8
 801df02:	60f8      	str	r0, [r7, #12]
 801df04:	60b9      	str	r1, [r7, #8]
 801df06:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801df08:	2300      	movs	r3, #0
 801df0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801df12:	3b14      	subs	r3, #20
 801df14:	2b00      	cmp	r3, #0
 801df16:	da00      	bge.n	801df1a <ip4_frag+0x1e>
 801df18:	3307      	adds	r3, #7
 801df1a:	10db      	asrs	r3, r3, #3
 801df1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801df1e:	2314      	movs	r3, #20
 801df20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	685b      	ldr	r3, [r3, #4]
 801df26:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801df28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df2a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801df2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df2e:	781b      	ldrb	r3, [r3, #0]
 801df30:	f003 030f 	and.w	r3, r3, #15
 801df34:	b2db      	uxtb	r3, r3
 801df36:	009b      	lsls	r3, r3, #2
 801df38:	b2db      	uxtb	r3, r3
 801df3a:	2b14      	cmp	r3, #20
 801df3c:	d002      	beq.n	801df44 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801df3e:	f06f 0305 	mvn.w	r3, #5
 801df42:	e110      	b.n	801e166 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	895b      	ldrh	r3, [r3, #10]
 801df48:	2b13      	cmp	r3, #19
 801df4a:	d809      	bhi.n	801df60 <ip4_frag+0x64>
 801df4c:	4b88      	ldr	r3, [pc, #544]	@ (801e170 <ip4_frag+0x274>)
 801df4e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801df52:	4988      	ldr	r1, [pc, #544]	@ (801e174 <ip4_frag+0x278>)
 801df54:	4888      	ldr	r0, [pc, #544]	@ (801e178 <ip4_frag+0x27c>)
 801df56:	f000 fca3 	bl	801e8a0 <iprintf>
 801df5a:	f06f 0305 	mvn.w	r3, #5
 801df5e:	e102      	b.n	801e166 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801df60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df62:	88db      	ldrh	r3, [r3, #6]
 801df64:	b29b      	uxth	r3, r3
 801df66:	4618      	mov	r0, r3
 801df68:	f7f5 faa2 	bl	80134b0 <lwip_htons>
 801df6c:	4603      	mov	r3, r0
 801df6e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801df70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801df72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801df76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801df7a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801df7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801df80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	891b      	ldrh	r3, [r3, #8]
 801df86:	3b14      	subs	r3, #20
 801df88:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801df8c:	e0e1      	b.n	801e152 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801df8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801df90:	00db      	lsls	r3, r3, #3
 801df92:	b29b      	uxth	r3, r3
 801df94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df98:	4293      	cmp	r3, r2
 801df9a:	bf28      	it	cs
 801df9c:	4613      	movcs	r3, r2
 801df9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801dfa0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dfa4:	2114      	movs	r1, #20
 801dfa6:	200e      	movs	r0, #14
 801dfa8:	f7f6 fc58 	bl	801485c <pbuf_alloc>
 801dfac:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801dfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	f000 80d5 	beq.w	801e160 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfb8:	895b      	ldrh	r3, [r3, #10]
 801dfba:	2b13      	cmp	r3, #19
 801dfbc:	d806      	bhi.n	801dfcc <ip4_frag+0xd0>
 801dfbe:	4b6c      	ldr	r3, [pc, #432]	@ (801e170 <ip4_frag+0x274>)
 801dfc0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801dfc4:	496d      	ldr	r1, [pc, #436]	@ (801e17c <ip4_frag+0x280>)
 801dfc6:	486c      	ldr	r0, [pc, #432]	@ (801e178 <ip4_frag+0x27c>)
 801dfc8:	f000 fc6a 	bl	801e8a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801dfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfce:	685b      	ldr	r3, [r3, #4]
 801dfd0:	2214      	movs	r2, #20
 801dfd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f000 fd94 	bl	801eb02 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801dfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfdc:	685b      	ldr	r3, [r3, #4]
 801dfde:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801dfe0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dfe2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801dfe6:	e064      	b.n	801e0b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	895a      	ldrh	r2, [r3, #10]
 801dfec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801dfee:	1ad3      	subs	r3, r2, r3
 801dff0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801dff2:	68fb      	ldr	r3, [r7, #12]
 801dff4:	895b      	ldrh	r3, [r3, #10]
 801dff6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801dff8:	429a      	cmp	r2, r3
 801dffa:	d906      	bls.n	801e00a <ip4_frag+0x10e>
 801dffc:	4b5c      	ldr	r3, [pc, #368]	@ (801e170 <ip4_frag+0x274>)
 801dffe:	f240 322d 	movw	r2, #813	@ 0x32d
 801e002:	495f      	ldr	r1, [pc, #380]	@ (801e180 <ip4_frag+0x284>)
 801e004:	485c      	ldr	r0, [pc, #368]	@ (801e178 <ip4_frag+0x27c>)
 801e006:	f000 fc4b 	bl	801e8a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e00a:	8bfa      	ldrh	r2, [r7, #30]
 801e00c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e010:	4293      	cmp	r3, r2
 801e012:	bf28      	it	cs
 801e014:	4613      	movcs	r3, r2
 801e016:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e01a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d105      	bne.n	801e02e <ip4_frag+0x132>
        poff = 0;
 801e022:	2300      	movs	r3, #0
 801e024:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	60fb      	str	r3, [r7, #12]
        continue;
 801e02c:	e041      	b.n	801e0b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e02e:	f7ff ff0d 	bl	801de4c <ip_frag_alloc_pbuf_custom_ref>
 801e032:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e034:	69bb      	ldr	r3, [r7, #24]
 801e036:	2b00      	cmp	r3, #0
 801e038:	d103      	bne.n	801e042 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e03a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e03c:	f7f6 fef2 	bl	8014e24 <pbuf_free>
        goto memerr;
 801e040:	e08f      	b.n	801e162 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e042:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e048:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e04a:	4413      	add	r3, r2
 801e04c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e050:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e054:	9201      	str	r2, [sp, #4]
 801e056:	9300      	str	r3, [sp, #0]
 801e058:	4603      	mov	r3, r0
 801e05a:	2241      	movs	r2, #65	@ 0x41
 801e05c:	2000      	movs	r0, #0
 801e05e:	f7f6 fd27 	bl	8014ab0 <pbuf_alloced_custom>
 801e062:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e064:	697b      	ldr	r3, [r7, #20]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d106      	bne.n	801e078 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e06a:	69b8      	ldr	r0, [r7, #24]
 801e06c:	f7ff fef6 	bl	801de5c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e070:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e072:	f7f6 fed7 	bl	8014e24 <pbuf_free>
        goto memerr;
 801e076:	e074      	b.n	801e162 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e078:	68f8      	ldr	r0, [r7, #12]
 801e07a:	f7f6 ff79 	bl	8014f70 <pbuf_ref>
      pcr->original = p;
 801e07e:	69bb      	ldr	r3, [r7, #24]
 801e080:	68fa      	ldr	r2, [r7, #12]
 801e082:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e084:	69bb      	ldr	r3, [r7, #24]
 801e086:	4a3f      	ldr	r2, [pc, #252]	@ (801e184 <ip4_frag+0x288>)
 801e088:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e08a:	6979      	ldr	r1, [r7, #20]
 801e08c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e08e:	f7f6 ff97 	bl	8014fc0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e092:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e09a:	1ad3      	subs	r3, r2, r3
 801e09c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e0a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d004      	beq.n	801e0b2 <ip4_frag+0x1b6>
        poff = 0;
 801e0a8:	2300      	movs	r3, #0
 801e0aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e0b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d196      	bne.n	801dfe8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e0ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e0bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e0c0:	4413      	add	r3, r2
 801e0c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e0c8:	f1a3 0213 	sub.w	r2, r3, #19
 801e0cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	bfcc      	ite	gt
 801e0d4:	2301      	movgt	r3, #1
 801e0d6:	2300      	movle	r3, #0
 801e0d8:	b2db      	uxtb	r3, r3
 801e0da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e0dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e0e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e0e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801e0e6:	6a3b      	ldr	r3, [r7, #32]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d002      	beq.n	801e0f2 <ip4_frag+0x1f6>
 801e0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d003      	beq.n	801e0fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e0f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e0f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e0f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e0fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f7f5 f9d7 	bl	80134b0 <lwip_htons>
 801e102:	4603      	mov	r3, r0
 801e104:	461a      	mov	r2, r3
 801e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e108:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e10a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e10c:	3314      	adds	r3, #20
 801e10e:	b29b      	uxth	r3, r3
 801e110:	4618      	mov	r0, r3
 801e112:	f7f5 f9cd 	bl	80134b0 <lwip_htons>
 801e116:	4603      	mov	r3, r0
 801e118:	461a      	mov	r2, r3
 801e11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e11c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e120:	2200      	movs	r2, #0
 801e122:	729a      	strb	r2, [r3, #10]
 801e124:	2200      	movs	r2, #0
 801e126:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e128:	68bb      	ldr	r3, [r7, #8]
 801e12a:	695b      	ldr	r3, [r3, #20]
 801e12c:	687a      	ldr	r2, [r7, #4]
 801e12e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e130:	68b8      	ldr	r0, [r7, #8]
 801e132:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e136:	f7f6 fe75 	bl	8014e24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e13a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e13e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e140:	1ad3      	subs	r3, r2, r3
 801e142:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801e146:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e14a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e14c:	4413      	add	r3, r2
 801e14e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801e152:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e156:	2b00      	cmp	r3, #0
 801e158:	f47f af19 	bne.w	801df8e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e15c:	2300      	movs	r3, #0
 801e15e:	e002      	b.n	801e166 <ip4_frag+0x26a>
      goto memerr;
 801e160:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e162:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e166:	4618      	mov	r0, r3
 801e168:	3748      	adds	r7, #72	@ 0x48
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}
 801e16e:	bf00      	nop
 801e170:	08022a58 	.word	0x08022a58
 801e174:	08022c34 	.word	0x08022c34
 801e178:	08022aa0 	.word	0x08022aa0
 801e17c:	08022c50 	.word	0x08022c50
 801e180:	08022c70 	.word	0x08022c70
 801e184:	0801de95 	.word	0x0801de95

0801e188 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e188:	b580      	push	{r7, lr}
 801e18a:	b086      	sub	sp, #24
 801e18c:	af00      	add	r7, sp, #0
 801e18e:	6078      	str	r0, [r7, #4]
 801e190:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e192:	230e      	movs	r3, #14
 801e194:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	895b      	ldrh	r3, [r3, #10]
 801e19a:	2b0e      	cmp	r3, #14
 801e19c:	d96e      	bls.n	801e27c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	7bdb      	ldrb	r3, [r3, #15]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d106      	bne.n	801e1b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e1a6:	683b      	ldr	r3, [r7, #0]
 801e1a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e1ac:	3301      	adds	r3, #1
 801e1ae:	b2da      	uxtb	r2, r3
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	685b      	ldr	r3, [r3, #4]
 801e1b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e1ba:	693b      	ldr	r3, [r7, #16]
 801e1bc:	7b1a      	ldrb	r2, [r3, #12]
 801e1be:	7b5b      	ldrb	r3, [r3, #13]
 801e1c0:	021b      	lsls	r3, r3, #8
 801e1c2:	4313      	orrs	r3, r2
 801e1c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e1c6:	693b      	ldr	r3, [r7, #16]
 801e1c8:	781b      	ldrb	r3, [r3, #0]
 801e1ca:	f003 0301 	and.w	r3, r3, #1
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d023      	beq.n	801e21a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e1d2:	693b      	ldr	r3, [r7, #16]
 801e1d4:	781b      	ldrb	r3, [r3, #0]
 801e1d6:	2b01      	cmp	r3, #1
 801e1d8:	d10f      	bne.n	801e1fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e1da:	693b      	ldr	r3, [r7, #16]
 801e1dc:	785b      	ldrb	r3, [r3, #1]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d11b      	bne.n	801e21a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e1e2:	693b      	ldr	r3, [r7, #16]
 801e1e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e1e6:	2b5e      	cmp	r3, #94	@ 0x5e
 801e1e8:	d117      	bne.n	801e21a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	7b5b      	ldrb	r3, [r3, #13]
 801e1ee:	f043 0310 	orr.w	r3, r3, #16
 801e1f2:	b2da      	uxtb	r2, r3
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	735a      	strb	r2, [r3, #13]
 801e1f8:	e00f      	b.n	801e21a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e1fa:	693b      	ldr	r3, [r7, #16]
 801e1fc:	2206      	movs	r2, #6
 801e1fe:	4928      	ldr	r1, [pc, #160]	@ (801e2a0 <ethernet_input+0x118>)
 801e200:	4618      	mov	r0, r3
 801e202:	f000 fba2 	bl	801e94a <memcmp>
 801e206:	4603      	mov	r3, r0
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d106      	bne.n	801e21a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	7b5b      	ldrb	r3, [r3, #13]
 801e210:	f043 0308 	orr.w	r3, r3, #8
 801e214:	b2da      	uxtb	r2, r3
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e21a:	89fb      	ldrh	r3, [r7, #14]
 801e21c:	2b08      	cmp	r3, #8
 801e21e:	d003      	beq.n	801e228 <ethernet_input+0xa0>
 801e220:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801e224:	d014      	beq.n	801e250 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e226:	e032      	b.n	801e28e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e22e:	f003 0308 	and.w	r3, r3, #8
 801e232:	2b00      	cmp	r3, #0
 801e234:	d024      	beq.n	801e280 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e236:	8afb      	ldrh	r3, [r7, #22]
 801e238:	4619      	mov	r1, r3
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f7f6 fd6c 	bl	8014d18 <pbuf_remove_header>
 801e240:	4603      	mov	r3, r0
 801e242:	2b00      	cmp	r3, #0
 801e244:	d11e      	bne.n	801e284 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e246:	6839      	ldr	r1, [r7, #0]
 801e248:	6878      	ldr	r0, [r7, #4]
 801e24a:	f7fe ff21 	bl	801d090 <ip4_input>
      break;
 801e24e:	e013      	b.n	801e278 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e250:	683b      	ldr	r3, [r7, #0]
 801e252:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e256:	f003 0308 	and.w	r3, r3, #8
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d014      	beq.n	801e288 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e25e:	8afb      	ldrh	r3, [r7, #22]
 801e260:	4619      	mov	r1, r3
 801e262:	6878      	ldr	r0, [r7, #4]
 801e264:	f7f6 fd58 	bl	8014d18 <pbuf_remove_header>
 801e268:	4603      	mov	r3, r0
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d10e      	bne.n	801e28c <ethernet_input+0x104>
        etharp_input(p, netif);
 801e26e:	6839      	ldr	r1, [r7, #0]
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7fe f89b 	bl	801c3ac <etharp_input>
      break;
 801e276:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e278:	2300      	movs	r3, #0
 801e27a:	e00c      	b.n	801e296 <ethernet_input+0x10e>
    goto free_and_return;
 801e27c:	bf00      	nop
 801e27e:	e006      	b.n	801e28e <ethernet_input+0x106>
        goto free_and_return;
 801e280:	bf00      	nop
 801e282:	e004      	b.n	801e28e <ethernet_input+0x106>
        goto free_and_return;
 801e284:	bf00      	nop
 801e286:	e002      	b.n	801e28e <ethernet_input+0x106>
        goto free_and_return;
 801e288:	bf00      	nop
 801e28a:	e000      	b.n	801e28e <ethernet_input+0x106>
        goto free_and_return;
 801e28c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e28e:	6878      	ldr	r0, [r7, #4]
 801e290:	f7f6 fdc8 	bl	8014e24 <pbuf_free>
  return ERR_OK;
 801e294:	2300      	movs	r3, #0
}
 801e296:	4618      	mov	r0, r3
 801e298:	3718      	adds	r7, #24
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}
 801e29e:	bf00      	nop
 801e2a0:	08022f10 	.word	0x08022f10

0801e2a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b086      	sub	sp, #24
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	60f8      	str	r0, [r7, #12]
 801e2ac:	60b9      	str	r1, [r7, #8]
 801e2ae:	607a      	str	r2, [r7, #4]
 801e2b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e2b2:	8c3b      	ldrh	r3, [r7, #32]
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	f7f5 f8fb 	bl	80134b0 <lwip_htons>
 801e2ba:	4603      	mov	r3, r0
 801e2bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e2be:	210e      	movs	r1, #14
 801e2c0:	68b8      	ldr	r0, [r7, #8]
 801e2c2:	f7f6 fd19 	bl	8014cf8 <pbuf_add_header>
 801e2c6:	4603      	mov	r3, r0
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d125      	bne.n	801e318 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e2cc:	68bb      	ldr	r3, [r7, #8]
 801e2ce:	685b      	ldr	r3, [r3, #4]
 801e2d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e2d2:	693b      	ldr	r3, [r7, #16]
 801e2d4:	8afa      	ldrh	r2, [r7, #22]
 801e2d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e2d8:	693b      	ldr	r3, [r7, #16]
 801e2da:	2206      	movs	r2, #6
 801e2dc:	6839      	ldr	r1, [r7, #0]
 801e2de:	4618      	mov	r0, r3
 801e2e0:	f000 fc0f 	bl	801eb02 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e2e4:	693b      	ldr	r3, [r7, #16]
 801e2e6:	3306      	adds	r3, #6
 801e2e8:	2206      	movs	r2, #6
 801e2ea:	6879      	ldr	r1, [r7, #4]
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	f000 fc08 	bl	801eb02 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e2f8:	2b06      	cmp	r3, #6
 801e2fa:	d006      	beq.n	801e30a <ethernet_output+0x66>
 801e2fc:	4b0a      	ldr	r3, [pc, #40]	@ (801e328 <ethernet_output+0x84>)
 801e2fe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801e302:	490a      	ldr	r1, [pc, #40]	@ (801e32c <ethernet_output+0x88>)
 801e304:	480a      	ldr	r0, [pc, #40]	@ (801e330 <ethernet_output+0x8c>)
 801e306:	f000 facb 	bl	801e8a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	699b      	ldr	r3, [r3, #24]
 801e30e:	68b9      	ldr	r1, [r7, #8]
 801e310:	68f8      	ldr	r0, [r7, #12]
 801e312:	4798      	blx	r3
 801e314:	4603      	mov	r3, r0
 801e316:	e002      	b.n	801e31e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e318:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e31a:	f06f 0301 	mvn.w	r3, #1
}
 801e31e:	4618      	mov	r0, r3
 801e320:	3718      	adds	r7, #24
 801e322:	46bd      	mov	sp, r7
 801e324:	bd80      	pop	{r7, pc}
 801e326:	bf00      	nop
 801e328:	08022c80 	.word	0x08022c80
 801e32c:	08022cb8 	.word	0x08022cb8
 801e330:	08022cec 	.word	0x08022cec

0801e334 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b082      	sub	sp, #8
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
 801e33c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e33e:	683b      	ldr	r3, [r7, #0]
 801e340:	2200      	movs	r2, #0
 801e342:	2104      	movs	r1, #4
 801e344:	4618      	mov	r0, r3
 801e346:	f7ef fa73 	bl	800d830 <osMessageQueueNew>
 801e34a:	4602      	mov	r2, r0
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d102      	bne.n	801e35e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801e358:	f04f 33ff 	mov.w	r3, #4294967295
 801e35c:	e000      	b.n	801e360 <sys_mbox_new+0x2c>

  return ERR_OK;
 801e35e:	2300      	movs	r3, #0
}
 801e360:	4618      	mov	r0, r3
 801e362:	3708      	adds	r7, #8
 801e364:	46bd      	mov	sp, r7
 801e366:	bd80      	pop	{r7, pc}

0801e368 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b082      	sub	sp, #8
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	4618      	mov	r0, r3
 801e376:	f7ef fb8d 	bl	800da94 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	4618      	mov	r0, r3
 801e380:	f7ef fba8 	bl	800dad4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e384:	bf00      	nop
 801e386:	3708      	adds	r7, #8
 801e388:	46bd      	mov	sp, r7
 801e38a:	bd80      	pop	{r7, pc}

0801e38c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b084      	sub	sp, #16
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
 801e394:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	6818      	ldr	r0, [r3, #0]
 801e39a:	4639      	mov	r1, r7
 801e39c:	2300      	movs	r3, #0
 801e39e:	2200      	movs	r2, #0
 801e3a0:	f7ef faba 	bl	800d918 <osMessageQueuePut>
 801e3a4:	4603      	mov	r3, r0
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d102      	bne.n	801e3b0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	73fb      	strb	r3, [r7, #15]
 801e3ae:	e001      	b.n	801e3b4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e3b0:	23ff      	movs	r3, #255	@ 0xff
 801e3b2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e3b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	3710      	adds	r7, #16
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd80      	pop	{r7, pc}

0801e3c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b086      	sub	sp, #24
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	60f8      	str	r0, [r7, #12]
 801e3c8:	60b9      	str	r1, [r7, #8]
 801e3ca:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801e3cc:	f7ee fefc 	bl	800d1c8 <osKernelGetTickCount>
 801e3d0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d013      	beq.n	801e400 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	6818      	ldr	r0, [r3, #0]
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	2200      	movs	r2, #0
 801e3e0:	68b9      	ldr	r1, [r7, #8]
 801e3e2:	f7ef faf9 	bl	800d9d8 <osMessageQueueGet>
 801e3e6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801e3e8:	693b      	ldr	r3, [r7, #16]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	d105      	bne.n	801e3fa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801e3ee:	f7ee feeb 	bl	800d1c8 <osKernelGetTickCount>
 801e3f2:	4602      	mov	r2, r0
 801e3f4:	697b      	ldr	r3, [r7, #20]
 801e3f6:	1ad3      	subs	r3, r2, r3
 801e3f8:	e00f      	b.n	801e41a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e3fa:	f04f 33ff 	mov.w	r3, #4294967295
 801e3fe:	e00c      	b.n	801e41a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	6818      	ldr	r0, [r3, #0]
 801e404:	f04f 33ff 	mov.w	r3, #4294967295
 801e408:	2200      	movs	r2, #0
 801e40a:	68b9      	ldr	r1, [r7, #8]
 801e40c:	f7ef fae4 	bl	800d9d8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801e410:	f7ee feda 	bl	800d1c8 <osKernelGetTickCount>
 801e414:	4602      	mov	r2, r0
 801e416:	697b      	ldr	r3, [r7, #20]
 801e418:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e41a:	4618      	mov	r0, r3
 801e41c:	3718      	adds	r7, #24
 801e41e:	46bd      	mov	sp, r7
 801e420:	bd80      	pop	{r7, pc}

0801e422 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e422:	b580      	push	{r7, lr}
 801e424:	b082      	sub	sp, #8
 801e426:	af00      	add	r7, sp, #0
 801e428:	6078      	str	r0, [r7, #4]
 801e42a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	6818      	ldr	r0, [r3, #0]
 801e430:	2300      	movs	r3, #0
 801e432:	2200      	movs	r2, #0
 801e434:	6839      	ldr	r1, [r7, #0]
 801e436:	f7ef facf 	bl	800d9d8 <osMessageQueueGet>
 801e43a:	4603      	mov	r3, r0
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d101      	bne.n	801e444 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801e440:	2300      	movs	r3, #0
 801e442:	e001      	b.n	801e448 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e444:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801e448:	4618      	mov	r0, r3
 801e44a:	3708      	adds	r7, #8
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bd80      	pop	{r7, pc}

0801e450 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e450:	b480      	push	{r7}
 801e452:	b083      	sub	sp, #12
 801e454:	af00      	add	r7, sp, #0
 801e456:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d101      	bne.n	801e464 <sys_mbox_valid+0x14>
    return 0;
 801e460:	2300      	movs	r3, #0
 801e462:	e000      	b.n	801e466 <sys_mbox_valid+0x16>
  else
    return 1;
 801e464:	2301      	movs	r3, #1
}
 801e466:	4618      	mov	r0, r3
 801e468:	370c      	adds	r7, #12
 801e46a:	46bd      	mov	sp, r7
 801e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e470:	4770      	bx	lr

0801e472 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e472:	b480      	push	{r7}
 801e474:	b083      	sub	sp, #12
 801e476:	af00      	add	r7, sp, #0
 801e478:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	2200      	movs	r2, #0
 801e47e:	601a      	str	r2, [r3, #0]
}
 801e480:	bf00      	nop
 801e482:	370c      	adds	r7, #12
 801e484:	46bd      	mov	sp, r7
 801e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48a:	4770      	bx	lr

0801e48c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e48c:	b580      	push	{r7, lr}
 801e48e:	b082      	sub	sp, #8
 801e490:	af00      	add	r7, sp, #0
 801e492:	6078      	str	r0, [r7, #4]
 801e494:	460b      	mov	r3, r1
 801e496:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801e498:	78fb      	ldrb	r3, [r7, #3]
 801e49a:	2200      	movs	r2, #0
 801e49c:	4619      	mov	r1, r3
 801e49e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801e4a2:	f7ef f882 	bl	800d5aa <osSemaphoreNew>
 801e4a6:	4602      	mov	r2, r0
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d102      	bne.n	801e4ba <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 801e4b8:	e009      	b.n	801e4ce <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801e4ba:	78fb      	ldrb	r3, [r7, #3]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d105      	bne.n	801e4cc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	2100      	movs	r1, #0
 801e4c6:	4618      	mov	r0, r3
 801e4c8:	f7ef f8f8 	bl	800d6bc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e4cc:	2300      	movs	r3, #0
}
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	3708      	adds	r7, #8
 801e4d2:	46bd      	mov	sp, r7
 801e4d4:	bd80      	pop	{r7, pc}

0801e4d6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e4d6:	b580      	push	{r7, lr}
 801e4d8:	b084      	sub	sp, #16
 801e4da:	af00      	add	r7, sp, #0
 801e4dc:	6078      	str	r0, [r7, #4]
 801e4de:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801e4e0:	f7ee fe72 	bl	800d1c8 <osKernelGetTickCount>
 801e4e4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801e4e6:	683b      	ldr	r3, [r7, #0]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d011      	beq.n	801e510 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	6839      	ldr	r1, [r7, #0]
 801e4f2:	4618      	mov	r0, r3
 801e4f4:	f7ef f8e2 	bl	800d6bc <osSemaphoreAcquire>
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d105      	bne.n	801e50a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801e4fe:	f7ee fe63 	bl	800d1c8 <osKernelGetTickCount>
 801e502:	4602      	mov	r2, r0
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	1ad3      	subs	r3, r2, r3
 801e508:	e012      	b.n	801e530 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e50a:	f04f 33ff 	mov.w	r3, #4294967295
 801e50e:	e00f      	b.n	801e530 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801e510:	bf00      	nop
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	f04f 31ff 	mov.w	r1, #4294967295
 801e51a:	4618      	mov	r0, r3
 801e51c:	f7ef f8ce 	bl	800d6bc <osSemaphoreAcquire>
 801e520:	4603      	mov	r3, r0
 801e522:	2b00      	cmp	r3, #0
 801e524:	d1f5      	bne.n	801e512 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801e526:	f7ee fe4f 	bl	800d1c8 <osKernelGetTickCount>
 801e52a:	4602      	mov	r2, r0
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e530:	4618      	mov	r0, r3
 801e532:	3710      	adds	r7, #16
 801e534:	46bd      	mov	sp, r7
 801e536:	bd80      	pop	{r7, pc}

0801e538 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e538:	b580      	push	{r7, lr}
 801e53a:	b082      	sub	sp, #8
 801e53c:	af00      	add	r7, sp, #0
 801e53e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	4618      	mov	r0, r3
 801e546:	f7ef f90b 	bl	800d760 <osSemaphoreRelease>
}
 801e54a:	bf00      	nop
 801e54c:	3708      	adds	r7, #8
 801e54e:	46bd      	mov	sp, r7
 801e550:	bd80      	pop	{r7, pc}

0801e552 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e552:	b580      	push	{r7, lr}
 801e554:	b082      	sub	sp, #8
 801e556:	af00      	add	r7, sp, #0
 801e558:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	4618      	mov	r0, r3
 801e560:	f7ef f942 	bl	800d7e8 <osSemaphoreDelete>
}
 801e564:	bf00      	nop
 801e566:	3708      	adds	r7, #8
 801e568:	46bd      	mov	sp, r7
 801e56a:	bd80      	pop	{r7, pc}

0801e56c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e56c:	b480      	push	{r7}
 801e56e:	b083      	sub	sp, #12
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d101      	bne.n	801e580 <sys_sem_valid+0x14>
    return 0;
 801e57c:	2300      	movs	r3, #0
 801e57e:	e000      	b.n	801e582 <sys_sem_valid+0x16>
  else
    return 1;
 801e580:	2301      	movs	r3, #1
}
 801e582:	4618      	mov	r0, r3
 801e584:	370c      	adds	r7, #12
 801e586:	46bd      	mov	sp, r7
 801e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e58c:	4770      	bx	lr

0801e58e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e58e:	b480      	push	{r7}
 801e590:	b083      	sub	sp, #12
 801e592:	af00      	add	r7, sp, #0
 801e594:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	2200      	movs	r2, #0
 801e59a:	601a      	str	r2, [r3, #0]
}
 801e59c:	bf00      	nop
 801e59e:	370c      	adds	r7, #12
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5a6:	4770      	bx	lr

0801e5a8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e5a8:	b580      	push	{r7, lr}
 801e5aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	f7ee feee 	bl	800d38e <osMutexNew>
 801e5b2:	4603      	mov	r3, r0
 801e5b4:	4a01      	ldr	r2, [pc, #4]	@ (801e5bc <sys_init+0x14>)
 801e5b6:	6013      	str	r3, [r2, #0]
#endif
}
 801e5b8:	bf00      	nop
 801e5ba:	bd80      	pop	{r7, pc}
 801e5bc:	240088f0 	.word	0x240088f0

0801e5c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b082      	sub	sp, #8
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e5c8:	2000      	movs	r0, #0
 801e5ca:	f7ee fee0 	bl	800d38e <osMutexNew>
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d102      	bne.n	801e5e2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e5dc:	f04f 33ff 	mov.w	r3, #4294967295
 801e5e0:	e000      	b.n	801e5e4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e5e2:	2300      	movs	r3, #0
}
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	3708      	adds	r7, #8
 801e5e8:	46bd      	mov	sp, r7
 801e5ea:	bd80      	pop	{r7, pc}

0801e5ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e5ec:	b580      	push	{r7, lr}
 801e5ee:	b082      	sub	sp, #8
 801e5f0:	af00      	add	r7, sp, #0
 801e5f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	f04f 31ff 	mov.w	r1, #4294967295
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	f7ee ff4c 	bl	800d49a <osMutexAcquire>
#endif
}
 801e602:	bf00      	nop
 801e604:	3708      	adds	r7, #8
 801e606:	46bd      	mov	sp, r7
 801e608:	bd80      	pop	{r7, pc}

0801e60a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e60a:	b580      	push	{r7, lr}
 801e60c:	b082      	sub	sp, #8
 801e60e:	af00      	add	r7, sp, #0
 801e610:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	4618      	mov	r0, r3
 801e618:	f7ee ff8a 	bl	800d530 <osMutexRelease>
}
 801e61c:	bf00      	nop
 801e61e:	3708      	adds	r7, #8
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}

0801e624 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e624:	b580      	push	{r7, lr}
 801e626:	b08e      	sub	sp, #56	@ 0x38
 801e628:	af00      	add	r7, sp, #0
 801e62a:	60f8      	str	r0, [r7, #12]
 801e62c:	60b9      	str	r1, [r7, #8]
 801e62e:	607a      	str	r2, [r7, #4]
 801e630:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e632:	f107 0314 	add.w	r3, r7, #20
 801e636:	2224      	movs	r2, #36	@ 0x24
 801e638:	2100      	movs	r1, #0
 801e63a:	4618      	mov	r0, r3
 801e63c:	f000 f995 	bl	801e96a <memset>
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	617b      	str	r3, [r7, #20]
 801e644:	683b      	ldr	r3, [r7, #0]
 801e646:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e64c:	f107 0314 	add.w	r3, r7, #20
 801e650:	461a      	mov	r2, r3
 801e652:	6879      	ldr	r1, [r7, #4]
 801e654:	68b8      	ldr	r0, [r7, #8]
 801e656:	f7ee fdcc 	bl	800d1f2 <osThreadNew>
 801e65a:	4603      	mov	r3, r0
#endif
}
 801e65c:	4618      	mov	r0, r3
 801e65e:	3738      	adds	r7, #56	@ 0x38
 801e660:	46bd      	mov	sp, r7
 801e662:	bd80      	pop	{r7, pc}

0801e664 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e664:	b580      	push	{r7, lr}
 801e666:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e668:	4b04      	ldr	r3, [pc, #16]	@ (801e67c <sys_arch_protect+0x18>)
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	f04f 31ff 	mov.w	r1, #4294967295
 801e670:	4618      	mov	r0, r3
 801e672:	f7ee ff12 	bl	800d49a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e676:	2301      	movs	r3, #1
}
 801e678:	4618      	mov	r0, r3
 801e67a:	bd80      	pop	{r7, pc}
 801e67c:	240088f0 	.word	0x240088f0

0801e680 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e680:	b580      	push	{r7, lr}
 801e682:	b082      	sub	sp, #8
 801e684:	af00      	add	r7, sp, #0
 801e686:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e688:	4b04      	ldr	r3, [pc, #16]	@ (801e69c <sys_arch_unprotect+0x1c>)
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	4618      	mov	r0, r3
 801e68e:	f7ee ff4f 	bl	800d530 <osMutexRelease>
}
 801e692:	bf00      	nop
 801e694:	3708      	adds	r7, #8
 801e696:	46bd      	mov	sp, r7
 801e698:	bd80      	pop	{r7, pc}
 801e69a:	bf00      	nop
 801e69c:	240088f0 	.word	0x240088f0

0801e6a0 <rand>:
 801e6a0:	4b16      	ldr	r3, [pc, #88]	@ (801e6fc <rand+0x5c>)
 801e6a2:	b510      	push	{r4, lr}
 801e6a4:	681c      	ldr	r4, [r3, #0]
 801e6a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e6a8:	b9b3      	cbnz	r3, 801e6d8 <rand+0x38>
 801e6aa:	2018      	movs	r0, #24
 801e6ac:	f000 faa0 	bl	801ebf0 <malloc>
 801e6b0:	4602      	mov	r2, r0
 801e6b2:	6320      	str	r0, [r4, #48]	@ 0x30
 801e6b4:	b920      	cbnz	r0, 801e6c0 <rand+0x20>
 801e6b6:	4b12      	ldr	r3, [pc, #72]	@ (801e700 <rand+0x60>)
 801e6b8:	4812      	ldr	r0, [pc, #72]	@ (801e704 <rand+0x64>)
 801e6ba:	2152      	movs	r1, #82	@ 0x52
 801e6bc:	f000 fa30 	bl	801eb20 <__assert_func>
 801e6c0:	4911      	ldr	r1, [pc, #68]	@ (801e708 <rand+0x68>)
 801e6c2:	4b12      	ldr	r3, [pc, #72]	@ (801e70c <rand+0x6c>)
 801e6c4:	e9c0 1300 	strd	r1, r3, [r0]
 801e6c8:	4b11      	ldr	r3, [pc, #68]	@ (801e710 <rand+0x70>)
 801e6ca:	6083      	str	r3, [r0, #8]
 801e6cc:	230b      	movs	r3, #11
 801e6ce:	8183      	strh	r3, [r0, #12]
 801e6d0:	2100      	movs	r1, #0
 801e6d2:	2001      	movs	r0, #1
 801e6d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e6d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e6da:	480e      	ldr	r0, [pc, #56]	@ (801e714 <rand+0x74>)
 801e6dc:	690b      	ldr	r3, [r1, #16]
 801e6de:	694c      	ldr	r4, [r1, #20]
 801e6e0:	4a0d      	ldr	r2, [pc, #52]	@ (801e718 <rand+0x78>)
 801e6e2:	4358      	muls	r0, r3
 801e6e4:	fb02 0004 	mla	r0, r2, r4, r0
 801e6e8:	fba3 3202 	umull	r3, r2, r3, r2
 801e6ec:	3301      	adds	r3, #1
 801e6ee:	eb40 0002 	adc.w	r0, r0, r2
 801e6f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e6f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801e6fa:	bd10      	pop	{r4, pc}
 801e6fc:	24000040 	.word	0x24000040
 801e700:	08022f1e 	.word	0x08022f1e
 801e704:	08022f35 	.word	0x08022f35
 801e708:	abcd330e 	.word	0xabcd330e
 801e70c:	e66d1234 	.word	0xe66d1234
 801e710:	0005deec 	.word	0x0005deec
 801e714:	5851f42d 	.word	0x5851f42d
 801e718:	4c957f2d 	.word	0x4c957f2d

0801e71c <std>:
 801e71c:	2300      	movs	r3, #0
 801e71e:	b510      	push	{r4, lr}
 801e720:	4604      	mov	r4, r0
 801e722:	e9c0 3300 	strd	r3, r3, [r0]
 801e726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e72a:	6083      	str	r3, [r0, #8]
 801e72c:	8181      	strh	r1, [r0, #12]
 801e72e:	6643      	str	r3, [r0, #100]	@ 0x64
 801e730:	81c2      	strh	r2, [r0, #14]
 801e732:	6183      	str	r3, [r0, #24]
 801e734:	4619      	mov	r1, r3
 801e736:	2208      	movs	r2, #8
 801e738:	305c      	adds	r0, #92	@ 0x5c
 801e73a:	f000 f916 	bl	801e96a <memset>
 801e73e:	4b0d      	ldr	r3, [pc, #52]	@ (801e774 <std+0x58>)
 801e740:	6263      	str	r3, [r4, #36]	@ 0x24
 801e742:	4b0d      	ldr	r3, [pc, #52]	@ (801e778 <std+0x5c>)
 801e744:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e746:	4b0d      	ldr	r3, [pc, #52]	@ (801e77c <std+0x60>)
 801e748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e74a:	4b0d      	ldr	r3, [pc, #52]	@ (801e780 <std+0x64>)
 801e74c:	6323      	str	r3, [r4, #48]	@ 0x30
 801e74e:	4b0d      	ldr	r3, [pc, #52]	@ (801e784 <std+0x68>)
 801e750:	6224      	str	r4, [r4, #32]
 801e752:	429c      	cmp	r4, r3
 801e754:	d006      	beq.n	801e764 <std+0x48>
 801e756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e75a:	4294      	cmp	r4, r2
 801e75c:	d002      	beq.n	801e764 <std+0x48>
 801e75e:	33d0      	adds	r3, #208	@ 0xd0
 801e760:	429c      	cmp	r4, r3
 801e762:	d105      	bne.n	801e770 <std+0x54>
 801e764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e76c:	f000 b9c6 	b.w	801eafc <__retarget_lock_init_recursive>
 801e770:	bd10      	pop	{r4, pc}
 801e772:	bf00      	nop
 801e774:	0801e8c5 	.word	0x0801e8c5
 801e778:	0801e8e7 	.word	0x0801e8e7
 801e77c:	0801e91f 	.word	0x0801e91f
 801e780:	0801e943 	.word	0x0801e943
 801e784:	240088f4 	.word	0x240088f4

0801e788 <stdio_exit_handler>:
 801e788:	4a02      	ldr	r2, [pc, #8]	@ (801e794 <stdio_exit_handler+0xc>)
 801e78a:	4903      	ldr	r1, [pc, #12]	@ (801e798 <stdio_exit_handler+0x10>)
 801e78c:	4803      	ldr	r0, [pc, #12]	@ (801e79c <stdio_exit_handler+0x14>)
 801e78e:	f000 b869 	b.w	801e864 <_fwalk_sglue>
 801e792:	bf00      	nop
 801e794:	24000034 	.word	0x24000034
 801e798:	0801f405 	.word	0x0801f405
 801e79c:	24000044 	.word	0x24000044

0801e7a0 <cleanup_stdio>:
 801e7a0:	6841      	ldr	r1, [r0, #4]
 801e7a2:	4b0c      	ldr	r3, [pc, #48]	@ (801e7d4 <cleanup_stdio+0x34>)
 801e7a4:	4299      	cmp	r1, r3
 801e7a6:	b510      	push	{r4, lr}
 801e7a8:	4604      	mov	r4, r0
 801e7aa:	d001      	beq.n	801e7b0 <cleanup_stdio+0x10>
 801e7ac:	f000 fe2a 	bl	801f404 <_fflush_r>
 801e7b0:	68a1      	ldr	r1, [r4, #8]
 801e7b2:	4b09      	ldr	r3, [pc, #36]	@ (801e7d8 <cleanup_stdio+0x38>)
 801e7b4:	4299      	cmp	r1, r3
 801e7b6:	d002      	beq.n	801e7be <cleanup_stdio+0x1e>
 801e7b8:	4620      	mov	r0, r4
 801e7ba:	f000 fe23 	bl	801f404 <_fflush_r>
 801e7be:	68e1      	ldr	r1, [r4, #12]
 801e7c0:	4b06      	ldr	r3, [pc, #24]	@ (801e7dc <cleanup_stdio+0x3c>)
 801e7c2:	4299      	cmp	r1, r3
 801e7c4:	d004      	beq.n	801e7d0 <cleanup_stdio+0x30>
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7cc:	f000 be1a 	b.w	801f404 <_fflush_r>
 801e7d0:	bd10      	pop	{r4, pc}
 801e7d2:	bf00      	nop
 801e7d4:	240088f4 	.word	0x240088f4
 801e7d8:	2400895c 	.word	0x2400895c
 801e7dc:	240089c4 	.word	0x240089c4

0801e7e0 <global_stdio_init.part.0>:
 801e7e0:	b510      	push	{r4, lr}
 801e7e2:	4b0b      	ldr	r3, [pc, #44]	@ (801e810 <global_stdio_init.part.0+0x30>)
 801e7e4:	4c0b      	ldr	r4, [pc, #44]	@ (801e814 <global_stdio_init.part.0+0x34>)
 801e7e6:	4a0c      	ldr	r2, [pc, #48]	@ (801e818 <global_stdio_init.part.0+0x38>)
 801e7e8:	601a      	str	r2, [r3, #0]
 801e7ea:	4620      	mov	r0, r4
 801e7ec:	2200      	movs	r2, #0
 801e7ee:	2104      	movs	r1, #4
 801e7f0:	f7ff ff94 	bl	801e71c <std>
 801e7f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e7f8:	2201      	movs	r2, #1
 801e7fa:	2109      	movs	r1, #9
 801e7fc:	f7ff ff8e 	bl	801e71c <std>
 801e800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e804:	2202      	movs	r2, #2
 801e806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e80a:	2112      	movs	r1, #18
 801e80c:	f7ff bf86 	b.w	801e71c <std>
 801e810:	24008a2c 	.word	0x24008a2c
 801e814:	240088f4 	.word	0x240088f4
 801e818:	0801e789 	.word	0x0801e789

0801e81c <__sfp_lock_acquire>:
 801e81c:	4801      	ldr	r0, [pc, #4]	@ (801e824 <__sfp_lock_acquire+0x8>)
 801e81e:	f000 b96e 	b.w	801eafe <__retarget_lock_acquire_recursive>
 801e822:	bf00      	nop
 801e824:	24008a35 	.word	0x24008a35

0801e828 <__sfp_lock_release>:
 801e828:	4801      	ldr	r0, [pc, #4]	@ (801e830 <__sfp_lock_release+0x8>)
 801e82a:	f000 b969 	b.w	801eb00 <__retarget_lock_release_recursive>
 801e82e:	bf00      	nop
 801e830:	24008a35 	.word	0x24008a35

0801e834 <__sinit>:
 801e834:	b510      	push	{r4, lr}
 801e836:	4604      	mov	r4, r0
 801e838:	f7ff fff0 	bl	801e81c <__sfp_lock_acquire>
 801e83c:	6a23      	ldr	r3, [r4, #32]
 801e83e:	b11b      	cbz	r3, 801e848 <__sinit+0x14>
 801e840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e844:	f7ff bff0 	b.w	801e828 <__sfp_lock_release>
 801e848:	4b04      	ldr	r3, [pc, #16]	@ (801e85c <__sinit+0x28>)
 801e84a:	6223      	str	r3, [r4, #32]
 801e84c:	4b04      	ldr	r3, [pc, #16]	@ (801e860 <__sinit+0x2c>)
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d1f5      	bne.n	801e840 <__sinit+0xc>
 801e854:	f7ff ffc4 	bl	801e7e0 <global_stdio_init.part.0>
 801e858:	e7f2      	b.n	801e840 <__sinit+0xc>
 801e85a:	bf00      	nop
 801e85c:	0801e7a1 	.word	0x0801e7a1
 801e860:	24008a2c 	.word	0x24008a2c

0801e864 <_fwalk_sglue>:
 801e864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e868:	4607      	mov	r7, r0
 801e86a:	4688      	mov	r8, r1
 801e86c:	4614      	mov	r4, r2
 801e86e:	2600      	movs	r6, #0
 801e870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e874:	f1b9 0901 	subs.w	r9, r9, #1
 801e878:	d505      	bpl.n	801e886 <_fwalk_sglue+0x22>
 801e87a:	6824      	ldr	r4, [r4, #0]
 801e87c:	2c00      	cmp	r4, #0
 801e87e:	d1f7      	bne.n	801e870 <_fwalk_sglue+0xc>
 801e880:	4630      	mov	r0, r6
 801e882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e886:	89ab      	ldrh	r3, [r5, #12]
 801e888:	2b01      	cmp	r3, #1
 801e88a:	d907      	bls.n	801e89c <_fwalk_sglue+0x38>
 801e88c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e890:	3301      	adds	r3, #1
 801e892:	d003      	beq.n	801e89c <_fwalk_sglue+0x38>
 801e894:	4629      	mov	r1, r5
 801e896:	4638      	mov	r0, r7
 801e898:	47c0      	blx	r8
 801e89a:	4306      	orrs	r6, r0
 801e89c:	3568      	adds	r5, #104	@ 0x68
 801e89e:	e7e9      	b.n	801e874 <_fwalk_sglue+0x10>

0801e8a0 <iprintf>:
 801e8a0:	b40f      	push	{r0, r1, r2, r3}
 801e8a2:	b507      	push	{r0, r1, r2, lr}
 801e8a4:	4906      	ldr	r1, [pc, #24]	@ (801e8c0 <iprintf+0x20>)
 801e8a6:	ab04      	add	r3, sp, #16
 801e8a8:	6808      	ldr	r0, [r1, #0]
 801e8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8ae:	6881      	ldr	r1, [r0, #8]
 801e8b0:	9301      	str	r3, [sp, #4]
 801e8b2:	f000 fa7d 	bl	801edb0 <_vfiprintf_r>
 801e8b6:	b003      	add	sp, #12
 801e8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e8bc:	b004      	add	sp, #16
 801e8be:	4770      	bx	lr
 801e8c0:	24000040 	.word	0x24000040

0801e8c4 <__sread>:
 801e8c4:	b510      	push	{r4, lr}
 801e8c6:	460c      	mov	r4, r1
 801e8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8cc:	f000 f8ce 	bl	801ea6c <_read_r>
 801e8d0:	2800      	cmp	r0, #0
 801e8d2:	bfab      	itete	ge
 801e8d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e8d6:	89a3      	ldrhlt	r3, [r4, #12]
 801e8d8:	181b      	addge	r3, r3, r0
 801e8da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e8de:	bfac      	ite	ge
 801e8e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e8e2:	81a3      	strhlt	r3, [r4, #12]
 801e8e4:	bd10      	pop	{r4, pc}

0801e8e6 <__swrite>:
 801e8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8ea:	461f      	mov	r7, r3
 801e8ec:	898b      	ldrh	r3, [r1, #12]
 801e8ee:	05db      	lsls	r3, r3, #23
 801e8f0:	4605      	mov	r5, r0
 801e8f2:	460c      	mov	r4, r1
 801e8f4:	4616      	mov	r6, r2
 801e8f6:	d505      	bpl.n	801e904 <__swrite+0x1e>
 801e8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8fc:	2302      	movs	r3, #2
 801e8fe:	2200      	movs	r2, #0
 801e900:	f000 f8a2 	bl	801ea48 <_lseek_r>
 801e904:	89a3      	ldrh	r3, [r4, #12]
 801e906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e90a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e90e:	81a3      	strh	r3, [r4, #12]
 801e910:	4632      	mov	r2, r6
 801e912:	463b      	mov	r3, r7
 801e914:	4628      	mov	r0, r5
 801e916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e91a:	f000 b8b9 	b.w	801ea90 <_write_r>

0801e91e <__sseek>:
 801e91e:	b510      	push	{r4, lr}
 801e920:	460c      	mov	r4, r1
 801e922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e926:	f000 f88f 	bl	801ea48 <_lseek_r>
 801e92a:	1c43      	adds	r3, r0, #1
 801e92c:	89a3      	ldrh	r3, [r4, #12]
 801e92e:	bf15      	itete	ne
 801e930:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e93a:	81a3      	strheq	r3, [r4, #12]
 801e93c:	bf18      	it	ne
 801e93e:	81a3      	strhne	r3, [r4, #12]
 801e940:	bd10      	pop	{r4, pc}

0801e942 <__sclose>:
 801e942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e946:	f000 b819 	b.w	801e97c <_close_r>

0801e94a <memcmp>:
 801e94a:	b510      	push	{r4, lr}
 801e94c:	3901      	subs	r1, #1
 801e94e:	4402      	add	r2, r0
 801e950:	4290      	cmp	r0, r2
 801e952:	d101      	bne.n	801e958 <memcmp+0xe>
 801e954:	2000      	movs	r0, #0
 801e956:	e005      	b.n	801e964 <memcmp+0x1a>
 801e958:	7803      	ldrb	r3, [r0, #0]
 801e95a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e95e:	42a3      	cmp	r3, r4
 801e960:	d001      	beq.n	801e966 <memcmp+0x1c>
 801e962:	1b18      	subs	r0, r3, r4
 801e964:	bd10      	pop	{r4, pc}
 801e966:	3001      	adds	r0, #1
 801e968:	e7f2      	b.n	801e950 <memcmp+0x6>

0801e96a <memset>:
 801e96a:	4402      	add	r2, r0
 801e96c:	4603      	mov	r3, r0
 801e96e:	4293      	cmp	r3, r2
 801e970:	d100      	bne.n	801e974 <memset+0xa>
 801e972:	4770      	bx	lr
 801e974:	f803 1b01 	strb.w	r1, [r3], #1
 801e978:	e7f9      	b.n	801e96e <memset+0x4>
	...

0801e97c <_close_r>:
 801e97c:	b538      	push	{r3, r4, r5, lr}
 801e97e:	4d06      	ldr	r5, [pc, #24]	@ (801e998 <_close_r+0x1c>)
 801e980:	2300      	movs	r3, #0
 801e982:	4604      	mov	r4, r0
 801e984:	4608      	mov	r0, r1
 801e986:	602b      	str	r3, [r5, #0]
 801e988:	f7e3 fd3e 	bl	8002408 <_close>
 801e98c:	1c43      	adds	r3, r0, #1
 801e98e:	d102      	bne.n	801e996 <_close_r+0x1a>
 801e990:	682b      	ldr	r3, [r5, #0]
 801e992:	b103      	cbz	r3, 801e996 <_close_r+0x1a>
 801e994:	6023      	str	r3, [r4, #0]
 801e996:	bd38      	pop	{r3, r4, r5, pc}
 801e998:	24008a30 	.word	0x24008a30

0801e99c <_reclaim_reent>:
 801e99c:	4b29      	ldr	r3, [pc, #164]	@ (801ea44 <_reclaim_reent+0xa8>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	4283      	cmp	r3, r0
 801e9a2:	b570      	push	{r4, r5, r6, lr}
 801e9a4:	4604      	mov	r4, r0
 801e9a6:	d04b      	beq.n	801ea40 <_reclaim_reent+0xa4>
 801e9a8:	69c3      	ldr	r3, [r0, #28]
 801e9aa:	b1ab      	cbz	r3, 801e9d8 <_reclaim_reent+0x3c>
 801e9ac:	68db      	ldr	r3, [r3, #12]
 801e9ae:	b16b      	cbz	r3, 801e9cc <_reclaim_reent+0x30>
 801e9b0:	2500      	movs	r5, #0
 801e9b2:	69e3      	ldr	r3, [r4, #28]
 801e9b4:	68db      	ldr	r3, [r3, #12]
 801e9b6:	5959      	ldr	r1, [r3, r5]
 801e9b8:	2900      	cmp	r1, #0
 801e9ba:	d13b      	bne.n	801ea34 <_reclaim_reent+0x98>
 801e9bc:	3504      	adds	r5, #4
 801e9be:	2d80      	cmp	r5, #128	@ 0x80
 801e9c0:	d1f7      	bne.n	801e9b2 <_reclaim_reent+0x16>
 801e9c2:	69e3      	ldr	r3, [r4, #28]
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	68d9      	ldr	r1, [r3, #12]
 801e9c8:	f000 f8c8 	bl	801eb5c <_free_r>
 801e9cc:	69e3      	ldr	r3, [r4, #28]
 801e9ce:	6819      	ldr	r1, [r3, #0]
 801e9d0:	b111      	cbz	r1, 801e9d8 <_reclaim_reent+0x3c>
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	f000 f8c2 	bl	801eb5c <_free_r>
 801e9d8:	6961      	ldr	r1, [r4, #20]
 801e9da:	b111      	cbz	r1, 801e9e2 <_reclaim_reent+0x46>
 801e9dc:	4620      	mov	r0, r4
 801e9de:	f000 f8bd 	bl	801eb5c <_free_r>
 801e9e2:	69e1      	ldr	r1, [r4, #28]
 801e9e4:	b111      	cbz	r1, 801e9ec <_reclaim_reent+0x50>
 801e9e6:	4620      	mov	r0, r4
 801e9e8:	f000 f8b8 	bl	801eb5c <_free_r>
 801e9ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e9ee:	b111      	cbz	r1, 801e9f6 <_reclaim_reent+0x5a>
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f000 f8b3 	bl	801eb5c <_free_r>
 801e9f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e9f8:	b111      	cbz	r1, 801ea00 <_reclaim_reent+0x64>
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	f000 f8ae 	bl	801eb5c <_free_r>
 801ea00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ea02:	b111      	cbz	r1, 801ea0a <_reclaim_reent+0x6e>
 801ea04:	4620      	mov	r0, r4
 801ea06:	f000 f8a9 	bl	801eb5c <_free_r>
 801ea0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ea0c:	b111      	cbz	r1, 801ea14 <_reclaim_reent+0x78>
 801ea0e:	4620      	mov	r0, r4
 801ea10:	f000 f8a4 	bl	801eb5c <_free_r>
 801ea14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ea16:	b111      	cbz	r1, 801ea1e <_reclaim_reent+0x82>
 801ea18:	4620      	mov	r0, r4
 801ea1a:	f000 f89f 	bl	801eb5c <_free_r>
 801ea1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ea20:	b111      	cbz	r1, 801ea28 <_reclaim_reent+0x8c>
 801ea22:	4620      	mov	r0, r4
 801ea24:	f000 f89a 	bl	801eb5c <_free_r>
 801ea28:	6a23      	ldr	r3, [r4, #32]
 801ea2a:	b14b      	cbz	r3, 801ea40 <_reclaim_reent+0xa4>
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea32:	4718      	bx	r3
 801ea34:	680e      	ldr	r6, [r1, #0]
 801ea36:	4620      	mov	r0, r4
 801ea38:	f000 f890 	bl	801eb5c <_free_r>
 801ea3c:	4631      	mov	r1, r6
 801ea3e:	e7bb      	b.n	801e9b8 <_reclaim_reent+0x1c>
 801ea40:	bd70      	pop	{r4, r5, r6, pc}
 801ea42:	bf00      	nop
 801ea44:	24000040 	.word	0x24000040

0801ea48 <_lseek_r>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	4d07      	ldr	r5, [pc, #28]	@ (801ea68 <_lseek_r+0x20>)
 801ea4c:	4604      	mov	r4, r0
 801ea4e:	4608      	mov	r0, r1
 801ea50:	4611      	mov	r1, r2
 801ea52:	2200      	movs	r2, #0
 801ea54:	602a      	str	r2, [r5, #0]
 801ea56:	461a      	mov	r2, r3
 801ea58:	f7e3 fcfd 	bl	8002456 <_lseek>
 801ea5c:	1c43      	adds	r3, r0, #1
 801ea5e:	d102      	bne.n	801ea66 <_lseek_r+0x1e>
 801ea60:	682b      	ldr	r3, [r5, #0]
 801ea62:	b103      	cbz	r3, 801ea66 <_lseek_r+0x1e>
 801ea64:	6023      	str	r3, [r4, #0]
 801ea66:	bd38      	pop	{r3, r4, r5, pc}
 801ea68:	24008a30 	.word	0x24008a30

0801ea6c <_read_r>:
 801ea6c:	b538      	push	{r3, r4, r5, lr}
 801ea6e:	4d07      	ldr	r5, [pc, #28]	@ (801ea8c <_read_r+0x20>)
 801ea70:	4604      	mov	r4, r0
 801ea72:	4608      	mov	r0, r1
 801ea74:	4611      	mov	r1, r2
 801ea76:	2200      	movs	r2, #0
 801ea78:	602a      	str	r2, [r5, #0]
 801ea7a:	461a      	mov	r2, r3
 801ea7c:	f7e3 fc8b 	bl	8002396 <_read>
 801ea80:	1c43      	adds	r3, r0, #1
 801ea82:	d102      	bne.n	801ea8a <_read_r+0x1e>
 801ea84:	682b      	ldr	r3, [r5, #0]
 801ea86:	b103      	cbz	r3, 801ea8a <_read_r+0x1e>
 801ea88:	6023      	str	r3, [r4, #0]
 801ea8a:	bd38      	pop	{r3, r4, r5, pc}
 801ea8c:	24008a30 	.word	0x24008a30

0801ea90 <_write_r>:
 801ea90:	b538      	push	{r3, r4, r5, lr}
 801ea92:	4d07      	ldr	r5, [pc, #28]	@ (801eab0 <_write_r+0x20>)
 801ea94:	4604      	mov	r4, r0
 801ea96:	4608      	mov	r0, r1
 801ea98:	4611      	mov	r1, r2
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	602a      	str	r2, [r5, #0]
 801ea9e:	461a      	mov	r2, r3
 801eaa0:	f7e3 fc96 	bl	80023d0 <_write>
 801eaa4:	1c43      	adds	r3, r0, #1
 801eaa6:	d102      	bne.n	801eaae <_write_r+0x1e>
 801eaa8:	682b      	ldr	r3, [r5, #0]
 801eaaa:	b103      	cbz	r3, 801eaae <_write_r+0x1e>
 801eaac:	6023      	str	r3, [r4, #0]
 801eaae:	bd38      	pop	{r3, r4, r5, pc}
 801eab0:	24008a30 	.word	0x24008a30

0801eab4 <__libc_init_array>:
 801eab4:	b570      	push	{r4, r5, r6, lr}
 801eab6:	4d0d      	ldr	r5, [pc, #52]	@ (801eaec <__libc_init_array+0x38>)
 801eab8:	4c0d      	ldr	r4, [pc, #52]	@ (801eaf0 <__libc_init_array+0x3c>)
 801eaba:	1b64      	subs	r4, r4, r5
 801eabc:	10a4      	asrs	r4, r4, #2
 801eabe:	2600      	movs	r6, #0
 801eac0:	42a6      	cmp	r6, r4
 801eac2:	d109      	bne.n	801ead8 <__libc_init_array+0x24>
 801eac4:	4d0b      	ldr	r5, [pc, #44]	@ (801eaf4 <__libc_init_array+0x40>)
 801eac6:	4c0c      	ldr	r4, [pc, #48]	@ (801eaf8 <__libc_init_array+0x44>)
 801eac8:	f000 fe4a 	bl	801f760 <_init>
 801eacc:	1b64      	subs	r4, r4, r5
 801eace:	10a4      	asrs	r4, r4, #2
 801ead0:	2600      	movs	r6, #0
 801ead2:	42a6      	cmp	r6, r4
 801ead4:	d105      	bne.n	801eae2 <__libc_init_array+0x2e>
 801ead6:	bd70      	pop	{r4, r5, r6, pc}
 801ead8:	f855 3b04 	ldr.w	r3, [r5], #4
 801eadc:	4798      	blx	r3
 801eade:	3601      	adds	r6, #1
 801eae0:	e7ee      	b.n	801eac0 <__libc_init_array+0xc>
 801eae2:	f855 3b04 	ldr.w	r3, [r5], #4
 801eae6:	4798      	blx	r3
 801eae8:	3601      	adds	r6, #1
 801eaea:	e7f2      	b.n	801ead2 <__libc_init_array+0x1e>
 801eaec:	08023004 	.word	0x08023004
 801eaf0:	08023004 	.word	0x08023004
 801eaf4:	08023004 	.word	0x08023004
 801eaf8:	08023008 	.word	0x08023008

0801eafc <__retarget_lock_init_recursive>:
 801eafc:	4770      	bx	lr

0801eafe <__retarget_lock_acquire_recursive>:
 801eafe:	4770      	bx	lr

0801eb00 <__retarget_lock_release_recursive>:
 801eb00:	4770      	bx	lr

0801eb02 <memcpy>:
 801eb02:	440a      	add	r2, r1
 801eb04:	4291      	cmp	r1, r2
 801eb06:	f100 33ff 	add.w	r3, r0, #4294967295
 801eb0a:	d100      	bne.n	801eb0e <memcpy+0xc>
 801eb0c:	4770      	bx	lr
 801eb0e:	b510      	push	{r4, lr}
 801eb10:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eb14:	f803 4f01 	strb.w	r4, [r3, #1]!
 801eb18:	4291      	cmp	r1, r2
 801eb1a:	d1f9      	bne.n	801eb10 <memcpy+0xe>
 801eb1c:	bd10      	pop	{r4, pc}
	...

0801eb20 <__assert_func>:
 801eb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801eb22:	4614      	mov	r4, r2
 801eb24:	461a      	mov	r2, r3
 801eb26:	4b09      	ldr	r3, [pc, #36]	@ (801eb4c <__assert_func+0x2c>)
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	4605      	mov	r5, r0
 801eb2c:	68d8      	ldr	r0, [r3, #12]
 801eb2e:	b954      	cbnz	r4, 801eb46 <__assert_func+0x26>
 801eb30:	4b07      	ldr	r3, [pc, #28]	@ (801eb50 <__assert_func+0x30>)
 801eb32:	461c      	mov	r4, r3
 801eb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801eb38:	9100      	str	r1, [sp, #0]
 801eb3a:	462b      	mov	r3, r5
 801eb3c:	4905      	ldr	r1, [pc, #20]	@ (801eb54 <__assert_func+0x34>)
 801eb3e:	f000 fc89 	bl	801f454 <fiprintf>
 801eb42:	f000 fd3d 	bl	801f5c0 <abort>
 801eb46:	4b04      	ldr	r3, [pc, #16]	@ (801eb58 <__assert_func+0x38>)
 801eb48:	e7f4      	b.n	801eb34 <__assert_func+0x14>
 801eb4a:	bf00      	nop
 801eb4c:	24000040 	.word	0x24000040
 801eb50:	08022fc8 	.word	0x08022fc8
 801eb54:	08022f9a 	.word	0x08022f9a
 801eb58:	08022f8d 	.word	0x08022f8d

0801eb5c <_free_r>:
 801eb5c:	b538      	push	{r3, r4, r5, lr}
 801eb5e:	4605      	mov	r5, r0
 801eb60:	2900      	cmp	r1, #0
 801eb62:	d041      	beq.n	801ebe8 <_free_r+0x8c>
 801eb64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb68:	1f0c      	subs	r4, r1, #4
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	bfb8      	it	lt
 801eb6e:	18e4      	addlt	r4, r4, r3
 801eb70:	f000 f8e8 	bl	801ed44 <__malloc_lock>
 801eb74:	4a1d      	ldr	r2, [pc, #116]	@ (801ebec <_free_r+0x90>)
 801eb76:	6813      	ldr	r3, [r2, #0]
 801eb78:	b933      	cbnz	r3, 801eb88 <_free_r+0x2c>
 801eb7a:	6063      	str	r3, [r4, #4]
 801eb7c:	6014      	str	r4, [r2, #0]
 801eb7e:	4628      	mov	r0, r5
 801eb80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb84:	f000 b8e4 	b.w	801ed50 <__malloc_unlock>
 801eb88:	42a3      	cmp	r3, r4
 801eb8a:	d908      	bls.n	801eb9e <_free_r+0x42>
 801eb8c:	6820      	ldr	r0, [r4, #0]
 801eb8e:	1821      	adds	r1, r4, r0
 801eb90:	428b      	cmp	r3, r1
 801eb92:	bf01      	itttt	eq
 801eb94:	6819      	ldreq	r1, [r3, #0]
 801eb96:	685b      	ldreq	r3, [r3, #4]
 801eb98:	1809      	addeq	r1, r1, r0
 801eb9a:	6021      	streq	r1, [r4, #0]
 801eb9c:	e7ed      	b.n	801eb7a <_free_r+0x1e>
 801eb9e:	461a      	mov	r2, r3
 801eba0:	685b      	ldr	r3, [r3, #4]
 801eba2:	b10b      	cbz	r3, 801eba8 <_free_r+0x4c>
 801eba4:	42a3      	cmp	r3, r4
 801eba6:	d9fa      	bls.n	801eb9e <_free_r+0x42>
 801eba8:	6811      	ldr	r1, [r2, #0]
 801ebaa:	1850      	adds	r0, r2, r1
 801ebac:	42a0      	cmp	r0, r4
 801ebae:	d10b      	bne.n	801ebc8 <_free_r+0x6c>
 801ebb0:	6820      	ldr	r0, [r4, #0]
 801ebb2:	4401      	add	r1, r0
 801ebb4:	1850      	adds	r0, r2, r1
 801ebb6:	4283      	cmp	r3, r0
 801ebb8:	6011      	str	r1, [r2, #0]
 801ebba:	d1e0      	bne.n	801eb7e <_free_r+0x22>
 801ebbc:	6818      	ldr	r0, [r3, #0]
 801ebbe:	685b      	ldr	r3, [r3, #4]
 801ebc0:	6053      	str	r3, [r2, #4]
 801ebc2:	4408      	add	r0, r1
 801ebc4:	6010      	str	r0, [r2, #0]
 801ebc6:	e7da      	b.n	801eb7e <_free_r+0x22>
 801ebc8:	d902      	bls.n	801ebd0 <_free_r+0x74>
 801ebca:	230c      	movs	r3, #12
 801ebcc:	602b      	str	r3, [r5, #0]
 801ebce:	e7d6      	b.n	801eb7e <_free_r+0x22>
 801ebd0:	6820      	ldr	r0, [r4, #0]
 801ebd2:	1821      	adds	r1, r4, r0
 801ebd4:	428b      	cmp	r3, r1
 801ebd6:	bf04      	itt	eq
 801ebd8:	6819      	ldreq	r1, [r3, #0]
 801ebda:	685b      	ldreq	r3, [r3, #4]
 801ebdc:	6063      	str	r3, [r4, #4]
 801ebde:	bf04      	itt	eq
 801ebe0:	1809      	addeq	r1, r1, r0
 801ebe2:	6021      	streq	r1, [r4, #0]
 801ebe4:	6054      	str	r4, [r2, #4]
 801ebe6:	e7ca      	b.n	801eb7e <_free_r+0x22>
 801ebe8:	bd38      	pop	{r3, r4, r5, pc}
 801ebea:	bf00      	nop
 801ebec:	24008a3c 	.word	0x24008a3c

0801ebf0 <malloc>:
 801ebf0:	4b02      	ldr	r3, [pc, #8]	@ (801ebfc <malloc+0xc>)
 801ebf2:	4601      	mov	r1, r0
 801ebf4:	6818      	ldr	r0, [r3, #0]
 801ebf6:	f000 b825 	b.w	801ec44 <_malloc_r>
 801ebfa:	bf00      	nop
 801ebfc:	24000040 	.word	0x24000040

0801ec00 <sbrk_aligned>:
 801ec00:	b570      	push	{r4, r5, r6, lr}
 801ec02:	4e0f      	ldr	r6, [pc, #60]	@ (801ec40 <sbrk_aligned+0x40>)
 801ec04:	460c      	mov	r4, r1
 801ec06:	6831      	ldr	r1, [r6, #0]
 801ec08:	4605      	mov	r5, r0
 801ec0a:	b911      	cbnz	r1, 801ec12 <sbrk_aligned+0x12>
 801ec0c:	f000 fcc8 	bl	801f5a0 <_sbrk_r>
 801ec10:	6030      	str	r0, [r6, #0]
 801ec12:	4621      	mov	r1, r4
 801ec14:	4628      	mov	r0, r5
 801ec16:	f000 fcc3 	bl	801f5a0 <_sbrk_r>
 801ec1a:	1c43      	adds	r3, r0, #1
 801ec1c:	d103      	bne.n	801ec26 <sbrk_aligned+0x26>
 801ec1e:	f04f 34ff 	mov.w	r4, #4294967295
 801ec22:	4620      	mov	r0, r4
 801ec24:	bd70      	pop	{r4, r5, r6, pc}
 801ec26:	1cc4      	adds	r4, r0, #3
 801ec28:	f024 0403 	bic.w	r4, r4, #3
 801ec2c:	42a0      	cmp	r0, r4
 801ec2e:	d0f8      	beq.n	801ec22 <sbrk_aligned+0x22>
 801ec30:	1a21      	subs	r1, r4, r0
 801ec32:	4628      	mov	r0, r5
 801ec34:	f000 fcb4 	bl	801f5a0 <_sbrk_r>
 801ec38:	3001      	adds	r0, #1
 801ec3a:	d1f2      	bne.n	801ec22 <sbrk_aligned+0x22>
 801ec3c:	e7ef      	b.n	801ec1e <sbrk_aligned+0x1e>
 801ec3e:	bf00      	nop
 801ec40:	24008a38 	.word	0x24008a38

0801ec44 <_malloc_r>:
 801ec44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec48:	1ccd      	adds	r5, r1, #3
 801ec4a:	f025 0503 	bic.w	r5, r5, #3
 801ec4e:	3508      	adds	r5, #8
 801ec50:	2d0c      	cmp	r5, #12
 801ec52:	bf38      	it	cc
 801ec54:	250c      	movcc	r5, #12
 801ec56:	2d00      	cmp	r5, #0
 801ec58:	4606      	mov	r6, r0
 801ec5a:	db01      	blt.n	801ec60 <_malloc_r+0x1c>
 801ec5c:	42a9      	cmp	r1, r5
 801ec5e:	d904      	bls.n	801ec6a <_malloc_r+0x26>
 801ec60:	230c      	movs	r3, #12
 801ec62:	6033      	str	r3, [r6, #0]
 801ec64:	2000      	movs	r0, #0
 801ec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ed40 <_malloc_r+0xfc>
 801ec6e:	f000 f869 	bl	801ed44 <__malloc_lock>
 801ec72:	f8d8 3000 	ldr.w	r3, [r8]
 801ec76:	461c      	mov	r4, r3
 801ec78:	bb44      	cbnz	r4, 801eccc <_malloc_r+0x88>
 801ec7a:	4629      	mov	r1, r5
 801ec7c:	4630      	mov	r0, r6
 801ec7e:	f7ff ffbf 	bl	801ec00 <sbrk_aligned>
 801ec82:	1c43      	adds	r3, r0, #1
 801ec84:	4604      	mov	r4, r0
 801ec86:	d158      	bne.n	801ed3a <_malloc_r+0xf6>
 801ec88:	f8d8 4000 	ldr.w	r4, [r8]
 801ec8c:	4627      	mov	r7, r4
 801ec8e:	2f00      	cmp	r7, #0
 801ec90:	d143      	bne.n	801ed1a <_malloc_r+0xd6>
 801ec92:	2c00      	cmp	r4, #0
 801ec94:	d04b      	beq.n	801ed2e <_malloc_r+0xea>
 801ec96:	6823      	ldr	r3, [r4, #0]
 801ec98:	4639      	mov	r1, r7
 801ec9a:	4630      	mov	r0, r6
 801ec9c:	eb04 0903 	add.w	r9, r4, r3
 801eca0:	f000 fc7e 	bl	801f5a0 <_sbrk_r>
 801eca4:	4581      	cmp	r9, r0
 801eca6:	d142      	bne.n	801ed2e <_malloc_r+0xea>
 801eca8:	6821      	ldr	r1, [r4, #0]
 801ecaa:	1a6d      	subs	r5, r5, r1
 801ecac:	4629      	mov	r1, r5
 801ecae:	4630      	mov	r0, r6
 801ecb0:	f7ff ffa6 	bl	801ec00 <sbrk_aligned>
 801ecb4:	3001      	adds	r0, #1
 801ecb6:	d03a      	beq.n	801ed2e <_malloc_r+0xea>
 801ecb8:	6823      	ldr	r3, [r4, #0]
 801ecba:	442b      	add	r3, r5
 801ecbc:	6023      	str	r3, [r4, #0]
 801ecbe:	f8d8 3000 	ldr.w	r3, [r8]
 801ecc2:	685a      	ldr	r2, [r3, #4]
 801ecc4:	bb62      	cbnz	r2, 801ed20 <_malloc_r+0xdc>
 801ecc6:	f8c8 7000 	str.w	r7, [r8]
 801ecca:	e00f      	b.n	801ecec <_malloc_r+0xa8>
 801eccc:	6822      	ldr	r2, [r4, #0]
 801ecce:	1b52      	subs	r2, r2, r5
 801ecd0:	d420      	bmi.n	801ed14 <_malloc_r+0xd0>
 801ecd2:	2a0b      	cmp	r2, #11
 801ecd4:	d917      	bls.n	801ed06 <_malloc_r+0xc2>
 801ecd6:	1961      	adds	r1, r4, r5
 801ecd8:	42a3      	cmp	r3, r4
 801ecda:	6025      	str	r5, [r4, #0]
 801ecdc:	bf18      	it	ne
 801ecde:	6059      	strne	r1, [r3, #4]
 801ece0:	6863      	ldr	r3, [r4, #4]
 801ece2:	bf08      	it	eq
 801ece4:	f8c8 1000 	streq.w	r1, [r8]
 801ece8:	5162      	str	r2, [r4, r5]
 801ecea:	604b      	str	r3, [r1, #4]
 801ecec:	4630      	mov	r0, r6
 801ecee:	f000 f82f 	bl	801ed50 <__malloc_unlock>
 801ecf2:	f104 000b 	add.w	r0, r4, #11
 801ecf6:	1d23      	adds	r3, r4, #4
 801ecf8:	f020 0007 	bic.w	r0, r0, #7
 801ecfc:	1ac2      	subs	r2, r0, r3
 801ecfe:	bf1c      	itt	ne
 801ed00:	1a1b      	subne	r3, r3, r0
 801ed02:	50a3      	strne	r3, [r4, r2]
 801ed04:	e7af      	b.n	801ec66 <_malloc_r+0x22>
 801ed06:	6862      	ldr	r2, [r4, #4]
 801ed08:	42a3      	cmp	r3, r4
 801ed0a:	bf0c      	ite	eq
 801ed0c:	f8c8 2000 	streq.w	r2, [r8]
 801ed10:	605a      	strne	r2, [r3, #4]
 801ed12:	e7eb      	b.n	801ecec <_malloc_r+0xa8>
 801ed14:	4623      	mov	r3, r4
 801ed16:	6864      	ldr	r4, [r4, #4]
 801ed18:	e7ae      	b.n	801ec78 <_malloc_r+0x34>
 801ed1a:	463c      	mov	r4, r7
 801ed1c:	687f      	ldr	r7, [r7, #4]
 801ed1e:	e7b6      	b.n	801ec8e <_malloc_r+0x4a>
 801ed20:	461a      	mov	r2, r3
 801ed22:	685b      	ldr	r3, [r3, #4]
 801ed24:	42a3      	cmp	r3, r4
 801ed26:	d1fb      	bne.n	801ed20 <_malloc_r+0xdc>
 801ed28:	2300      	movs	r3, #0
 801ed2a:	6053      	str	r3, [r2, #4]
 801ed2c:	e7de      	b.n	801ecec <_malloc_r+0xa8>
 801ed2e:	230c      	movs	r3, #12
 801ed30:	6033      	str	r3, [r6, #0]
 801ed32:	4630      	mov	r0, r6
 801ed34:	f000 f80c 	bl	801ed50 <__malloc_unlock>
 801ed38:	e794      	b.n	801ec64 <_malloc_r+0x20>
 801ed3a:	6005      	str	r5, [r0, #0]
 801ed3c:	e7d6      	b.n	801ecec <_malloc_r+0xa8>
 801ed3e:	bf00      	nop
 801ed40:	24008a3c 	.word	0x24008a3c

0801ed44 <__malloc_lock>:
 801ed44:	4801      	ldr	r0, [pc, #4]	@ (801ed4c <__malloc_lock+0x8>)
 801ed46:	f7ff beda 	b.w	801eafe <__retarget_lock_acquire_recursive>
 801ed4a:	bf00      	nop
 801ed4c:	24008a34 	.word	0x24008a34

0801ed50 <__malloc_unlock>:
 801ed50:	4801      	ldr	r0, [pc, #4]	@ (801ed58 <__malloc_unlock+0x8>)
 801ed52:	f7ff bed5 	b.w	801eb00 <__retarget_lock_release_recursive>
 801ed56:	bf00      	nop
 801ed58:	24008a34 	.word	0x24008a34

0801ed5c <__sfputc_r>:
 801ed5c:	6893      	ldr	r3, [r2, #8]
 801ed5e:	3b01      	subs	r3, #1
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	b410      	push	{r4}
 801ed64:	6093      	str	r3, [r2, #8]
 801ed66:	da08      	bge.n	801ed7a <__sfputc_r+0x1e>
 801ed68:	6994      	ldr	r4, [r2, #24]
 801ed6a:	42a3      	cmp	r3, r4
 801ed6c:	db01      	blt.n	801ed72 <__sfputc_r+0x16>
 801ed6e:	290a      	cmp	r1, #10
 801ed70:	d103      	bne.n	801ed7a <__sfputc_r+0x1e>
 801ed72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed76:	f000 bb7f 	b.w	801f478 <__swbuf_r>
 801ed7a:	6813      	ldr	r3, [r2, #0]
 801ed7c:	1c58      	adds	r0, r3, #1
 801ed7e:	6010      	str	r0, [r2, #0]
 801ed80:	7019      	strb	r1, [r3, #0]
 801ed82:	4608      	mov	r0, r1
 801ed84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed88:	4770      	bx	lr

0801ed8a <__sfputs_r>:
 801ed8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed8c:	4606      	mov	r6, r0
 801ed8e:	460f      	mov	r7, r1
 801ed90:	4614      	mov	r4, r2
 801ed92:	18d5      	adds	r5, r2, r3
 801ed94:	42ac      	cmp	r4, r5
 801ed96:	d101      	bne.n	801ed9c <__sfputs_r+0x12>
 801ed98:	2000      	movs	r0, #0
 801ed9a:	e007      	b.n	801edac <__sfputs_r+0x22>
 801ed9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eda0:	463a      	mov	r2, r7
 801eda2:	4630      	mov	r0, r6
 801eda4:	f7ff ffda 	bl	801ed5c <__sfputc_r>
 801eda8:	1c43      	adds	r3, r0, #1
 801edaa:	d1f3      	bne.n	801ed94 <__sfputs_r+0xa>
 801edac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801edb0 <_vfiprintf_r>:
 801edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb4:	460d      	mov	r5, r1
 801edb6:	b09d      	sub	sp, #116	@ 0x74
 801edb8:	4614      	mov	r4, r2
 801edba:	4698      	mov	r8, r3
 801edbc:	4606      	mov	r6, r0
 801edbe:	b118      	cbz	r0, 801edc8 <_vfiprintf_r+0x18>
 801edc0:	6a03      	ldr	r3, [r0, #32]
 801edc2:	b90b      	cbnz	r3, 801edc8 <_vfiprintf_r+0x18>
 801edc4:	f7ff fd36 	bl	801e834 <__sinit>
 801edc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801edca:	07d9      	lsls	r1, r3, #31
 801edcc:	d405      	bmi.n	801edda <_vfiprintf_r+0x2a>
 801edce:	89ab      	ldrh	r3, [r5, #12]
 801edd0:	059a      	lsls	r2, r3, #22
 801edd2:	d402      	bmi.n	801edda <_vfiprintf_r+0x2a>
 801edd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edd6:	f7ff fe92 	bl	801eafe <__retarget_lock_acquire_recursive>
 801edda:	89ab      	ldrh	r3, [r5, #12]
 801eddc:	071b      	lsls	r3, r3, #28
 801edde:	d501      	bpl.n	801ede4 <_vfiprintf_r+0x34>
 801ede0:	692b      	ldr	r3, [r5, #16]
 801ede2:	b99b      	cbnz	r3, 801ee0c <_vfiprintf_r+0x5c>
 801ede4:	4629      	mov	r1, r5
 801ede6:	4630      	mov	r0, r6
 801ede8:	f000 fb84 	bl	801f4f4 <__swsetup_r>
 801edec:	b170      	cbz	r0, 801ee0c <_vfiprintf_r+0x5c>
 801edee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801edf0:	07dc      	lsls	r4, r3, #31
 801edf2:	d504      	bpl.n	801edfe <_vfiprintf_r+0x4e>
 801edf4:	f04f 30ff 	mov.w	r0, #4294967295
 801edf8:	b01d      	add	sp, #116	@ 0x74
 801edfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edfe:	89ab      	ldrh	r3, [r5, #12]
 801ee00:	0598      	lsls	r0, r3, #22
 801ee02:	d4f7      	bmi.n	801edf4 <_vfiprintf_r+0x44>
 801ee04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee06:	f7ff fe7b 	bl	801eb00 <__retarget_lock_release_recursive>
 801ee0a:	e7f3      	b.n	801edf4 <_vfiprintf_r+0x44>
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee10:	2320      	movs	r3, #32
 801ee12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ee16:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee1a:	2330      	movs	r3, #48	@ 0x30
 801ee1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801efcc <_vfiprintf_r+0x21c>
 801ee20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ee24:	f04f 0901 	mov.w	r9, #1
 801ee28:	4623      	mov	r3, r4
 801ee2a:	469a      	mov	sl, r3
 801ee2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee30:	b10a      	cbz	r2, 801ee36 <_vfiprintf_r+0x86>
 801ee32:	2a25      	cmp	r2, #37	@ 0x25
 801ee34:	d1f9      	bne.n	801ee2a <_vfiprintf_r+0x7a>
 801ee36:	ebba 0b04 	subs.w	fp, sl, r4
 801ee3a:	d00b      	beq.n	801ee54 <_vfiprintf_r+0xa4>
 801ee3c:	465b      	mov	r3, fp
 801ee3e:	4622      	mov	r2, r4
 801ee40:	4629      	mov	r1, r5
 801ee42:	4630      	mov	r0, r6
 801ee44:	f7ff ffa1 	bl	801ed8a <__sfputs_r>
 801ee48:	3001      	adds	r0, #1
 801ee4a:	f000 80a7 	beq.w	801ef9c <_vfiprintf_r+0x1ec>
 801ee4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee50:	445a      	add	r2, fp
 801ee52:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee54:	f89a 3000 	ldrb.w	r3, [sl]
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	f000 809f 	beq.w	801ef9c <_vfiprintf_r+0x1ec>
 801ee5e:	2300      	movs	r3, #0
 801ee60:	f04f 32ff 	mov.w	r2, #4294967295
 801ee64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee68:	f10a 0a01 	add.w	sl, sl, #1
 801ee6c:	9304      	str	r3, [sp, #16]
 801ee6e:	9307      	str	r3, [sp, #28]
 801ee70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ee74:	931a      	str	r3, [sp, #104]	@ 0x68
 801ee76:	4654      	mov	r4, sl
 801ee78:	2205      	movs	r2, #5
 801ee7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee7e:	4853      	ldr	r0, [pc, #332]	@ (801efcc <_vfiprintf_r+0x21c>)
 801ee80:	f7e1 fa2e 	bl	80002e0 <memchr>
 801ee84:	9a04      	ldr	r2, [sp, #16]
 801ee86:	b9d8      	cbnz	r0, 801eec0 <_vfiprintf_r+0x110>
 801ee88:	06d1      	lsls	r1, r2, #27
 801ee8a:	bf44      	itt	mi
 801ee8c:	2320      	movmi	r3, #32
 801ee8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee92:	0713      	lsls	r3, r2, #28
 801ee94:	bf44      	itt	mi
 801ee96:	232b      	movmi	r3, #43	@ 0x2b
 801ee98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee9c:	f89a 3000 	ldrb.w	r3, [sl]
 801eea0:	2b2a      	cmp	r3, #42	@ 0x2a
 801eea2:	d015      	beq.n	801eed0 <_vfiprintf_r+0x120>
 801eea4:	9a07      	ldr	r2, [sp, #28]
 801eea6:	4654      	mov	r4, sl
 801eea8:	2000      	movs	r0, #0
 801eeaa:	f04f 0c0a 	mov.w	ip, #10
 801eeae:	4621      	mov	r1, r4
 801eeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eeb4:	3b30      	subs	r3, #48	@ 0x30
 801eeb6:	2b09      	cmp	r3, #9
 801eeb8:	d94b      	bls.n	801ef52 <_vfiprintf_r+0x1a2>
 801eeba:	b1b0      	cbz	r0, 801eeea <_vfiprintf_r+0x13a>
 801eebc:	9207      	str	r2, [sp, #28]
 801eebe:	e014      	b.n	801eeea <_vfiprintf_r+0x13a>
 801eec0:	eba0 0308 	sub.w	r3, r0, r8
 801eec4:	fa09 f303 	lsl.w	r3, r9, r3
 801eec8:	4313      	orrs	r3, r2
 801eeca:	9304      	str	r3, [sp, #16]
 801eecc:	46a2      	mov	sl, r4
 801eece:	e7d2      	b.n	801ee76 <_vfiprintf_r+0xc6>
 801eed0:	9b03      	ldr	r3, [sp, #12]
 801eed2:	1d19      	adds	r1, r3, #4
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	9103      	str	r1, [sp, #12]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	bfbb      	ittet	lt
 801eedc:	425b      	neglt	r3, r3
 801eede:	f042 0202 	orrlt.w	r2, r2, #2
 801eee2:	9307      	strge	r3, [sp, #28]
 801eee4:	9307      	strlt	r3, [sp, #28]
 801eee6:	bfb8      	it	lt
 801eee8:	9204      	strlt	r2, [sp, #16]
 801eeea:	7823      	ldrb	r3, [r4, #0]
 801eeec:	2b2e      	cmp	r3, #46	@ 0x2e
 801eeee:	d10a      	bne.n	801ef06 <_vfiprintf_r+0x156>
 801eef0:	7863      	ldrb	r3, [r4, #1]
 801eef2:	2b2a      	cmp	r3, #42	@ 0x2a
 801eef4:	d132      	bne.n	801ef5c <_vfiprintf_r+0x1ac>
 801eef6:	9b03      	ldr	r3, [sp, #12]
 801eef8:	1d1a      	adds	r2, r3, #4
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	9203      	str	r2, [sp, #12]
 801eefe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ef02:	3402      	adds	r4, #2
 801ef04:	9305      	str	r3, [sp, #20]
 801ef06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801efdc <_vfiprintf_r+0x22c>
 801ef0a:	7821      	ldrb	r1, [r4, #0]
 801ef0c:	2203      	movs	r2, #3
 801ef0e:	4650      	mov	r0, sl
 801ef10:	f7e1 f9e6 	bl	80002e0 <memchr>
 801ef14:	b138      	cbz	r0, 801ef26 <_vfiprintf_r+0x176>
 801ef16:	9b04      	ldr	r3, [sp, #16]
 801ef18:	eba0 000a 	sub.w	r0, r0, sl
 801ef1c:	2240      	movs	r2, #64	@ 0x40
 801ef1e:	4082      	lsls	r2, r0
 801ef20:	4313      	orrs	r3, r2
 801ef22:	3401      	adds	r4, #1
 801ef24:	9304      	str	r3, [sp, #16]
 801ef26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef2a:	4829      	ldr	r0, [pc, #164]	@ (801efd0 <_vfiprintf_r+0x220>)
 801ef2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ef30:	2206      	movs	r2, #6
 801ef32:	f7e1 f9d5 	bl	80002e0 <memchr>
 801ef36:	2800      	cmp	r0, #0
 801ef38:	d03f      	beq.n	801efba <_vfiprintf_r+0x20a>
 801ef3a:	4b26      	ldr	r3, [pc, #152]	@ (801efd4 <_vfiprintf_r+0x224>)
 801ef3c:	bb1b      	cbnz	r3, 801ef86 <_vfiprintf_r+0x1d6>
 801ef3e:	9b03      	ldr	r3, [sp, #12]
 801ef40:	3307      	adds	r3, #7
 801ef42:	f023 0307 	bic.w	r3, r3, #7
 801ef46:	3308      	adds	r3, #8
 801ef48:	9303      	str	r3, [sp, #12]
 801ef4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef4c:	443b      	add	r3, r7
 801ef4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef50:	e76a      	b.n	801ee28 <_vfiprintf_r+0x78>
 801ef52:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef56:	460c      	mov	r4, r1
 801ef58:	2001      	movs	r0, #1
 801ef5a:	e7a8      	b.n	801eeae <_vfiprintf_r+0xfe>
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	3401      	adds	r4, #1
 801ef60:	9305      	str	r3, [sp, #20]
 801ef62:	4619      	mov	r1, r3
 801ef64:	f04f 0c0a 	mov.w	ip, #10
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef6e:	3a30      	subs	r2, #48	@ 0x30
 801ef70:	2a09      	cmp	r2, #9
 801ef72:	d903      	bls.n	801ef7c <_vfiprintf_r+0x1cc>
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d0c6      	beq.n	801ef06 <_vfiprintf_r+0x156>
 801ef78:	9105      	str	r1, [sp, #20]
 801ef7a:	e7c4      	b.n	801ef06 <_vfiprintf_r+0x156>
 801ef7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef80:	4604      	mov	r4, r0
 801ef82:	2301      	movs	r3, #1
 801ef84:	e7f0      	b.n	801ef68 <_vfiprintf_r+0x1b8>
 801ef86:	ab03      	add	r3, sp, #12
 801ef88:	9300      	str	r3, [sp, #0]
 801ef8a:	462a      	mov	r2, r5
 801ef8c:	4b12      	ldr	r3, [pc, #72]	@ (801efd8 <_vfiprintf_r+0x228>)
 801ef8e:	a904      	add	r1, sp, #16
 801ef90:	4630      	mov	r0, r6
 801ef92:	f3af 8000 	nop.w
 801ef96:	4607      	mov	r7, r0
 801ef98:	1c78      	adds	r0, r7, #1
 801ef9a:	d1d6      	bne.n	801ef4a <_vfiprintf_r+0x19a>
 801ef9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ef9e:	07d9      	lsls	r1, r3, #31
 801efa0:	d405      	bmi.n	801efae <_vfiprintf_r+0x1fe>
 801efa2:	89ab      	ldrh	r3, [r5, #12]
 801efa4:	059a      	lsls	r2, r3, #22
 801efa6:	d402      	bmi.n	801efae <_vfiprintf_r+0x1fe>
 801efa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801efaa:	f7ff fda9 	bl	801eb00 <__retarget_lock_release_recursive>
 801efae:	89ab      	ldrh	r3, [r5, #12]
 801efb0:	065b      	lsls	r3, r3, #25
 801efb2:	f53f af1f 	bmi.w	801edf4 <_vfiprintf_r+0x44>
 801efb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801efb8:	e71e      	b.n	801edf8 <_vfiprintf_r+0x48>
 801efba:	ab03      	add	r3, sp, #12
 801efbc:	9300      	str	r3, [sp, #0]
 801efbe:	462a      	mov	r2, r5
 801efc0:	4b05      	ldr	r3, [pc, #20]	@ (801efd8 <_vfiprintf_r+0x228>)
 801efc2:	a904      	add	r1, sp, #16
 801efc4:	4630      	mov	r0, r6
 801efc6:	f000 f879 	bl	801f0bc <_printf_i>
 801efca:	e7e4      	b.n	801ef96 <_vfiprintf_r+0x1e6>
 801efcc:	08022fc9 	.word	0x08022fc9
 801efd0:	08022fd3 	.word	0x08022fd3
 801efd4:	00000000 	.word	0x00000000
 801efd8:	0801ed8b 	.word	0x0801ed8b
 801efdc:	08022fcf 	.word	0x08022fcf

0801efe0 <_printf_common>:
 801efe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801efe4:	4616      	mov	r6, r2
 801efe6:	4698      	mov	r8, r3
 801efe8:	688a      	ldr	r2, [r1, #8]
 801efea:	690b      	ldr	r3, [r1, #16]
 801efec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801eff0:	4293      	cmp	r3, r2
 801eff2:	bfb8      	it	lt
 801eff4:	4613      	movlt	r3, r2
 801eff6:	6033      	str	r3, [r6, #0]
 801eff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801effc:	4607      	mov	r7, r0
 801effe:	460c      	mov	r4, r1
 801f000:	b10a      	cbz	r2, 801f006 <_printf_common+0x26>
 801f002:	3301      	adds	r3, #1
 801f004:	6033      	str	r3, [r6, #0]
 801f006:	6823      	ldr	r3, [r4, #0]
 801f008:	0699      	lsls	r1, r3, #26
 801f00a:	bf42      	ittt	mi
 801f00c:	6833      	ldrmi	r3, [r6, #0]
 801f00e:	3302      	addmi	r3, #2
 801f010:	6033      	strmi	r3, [r6, #0]
 801f012:	6825      	ldr	r5, [r4, #0]
 801f014:	f015 0506 	ands.w	r5, r5, #6
 801f018:	d106      	bne.n	801f028 <_printf_common+0x48>
 801f01a:	f104 0a19 	add.w	sl, r4, #25
 801f01e:	68e3      	ldr	r3, [r4, #12]
 801f020:	6832      	ldr	r2, [r6, #0]
 801f022:	1a9b      	subs	r3, r3, r2
 801f024:	42ab      	cmp	r3, r5
 801f026:	dc26      	bgt.n	801f076 <_printf_common+0x96>
 801f028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f02c:	6822      	ldr	r2, [r4, #0]
 801f02e:	3b00      	subs	r3, #0
 801f030:	bf18      	it	ne
 801f032:	2301      	movne	r3, #1
 801f034:	0692      	lsls	r2, r2, #26
 801f036:	d42b      	bmi.n	801f090 <_printf_common+0xb0>
 801f038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f03c:	4641      	mov	r1, r8
 801f03e:	4638      	mov	r0, r7
 801f040:	47c8      	blx	r9
 801f042:	3001      	adds	r0, #1
 801f044:	d01e      	beq.n	801f084 <_printf_common+0xa4>
 801f046:	6823      	ldr	r3, [r4, #0]
 801f048:	6922      	ldr	r2, [r4, #16]
 801f04a:	f003 0306 	and.w	r3, r3, #6
 801f04e:	2b04      	cmp	r3, #4
 801f050:	bf02      	ittt	eq
 801f052:	68e5      	ldreq	r5, [r4, #12]
 801f054:	6833      	ldreq	r3, [r6, #0]
 801f056:	1aed      	subeq	r5, r5, r3
 801f058:	68a3      	ldr	r3, [r4, #8]
 801f05a:	bf0c      	ite	eq
 801f05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f060:	2500      	movne	r5, #0
 801f062:	4293      	cmp	r3, r2
 801f064:	bfc4      	itt	gt
 801f066:	1a9b      	subgt	r3, r3, r2
 801f068:	18ed      	addgt	r5, r5, r3
 801f06a:	2600      	movs	r6, #0
 801f06c:	341a      	adds	r4, #26
 801f06e:	42b5      	cmp	r5, r6
 801f070:	d11a      	bne.n	801f0a8 <_printf_common+0xc8>
 801f072:	2000      	movs	r0, #0
 801f074:	e008      	b.n	801f088 <_printf_common+0xa8>
 801f076:	2301      	movs	r3, #1
 801f078:	4652      	mov	r2, sl
 801f07a:	4641      	mov	r1, r8
 801f07c:	4638      	mov	r0, r7
 801f07e:	47c8      	blx	r9
 801f080:	3001      	adds	r0, #1
 801f082:	d103      	bne.n	801f08c <_printf_common+0xac>
 801f084:	f04f 30ff 	mov.w	r0, #4294967295
 801f088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f08c:	3501      	adds	r5, #1
 801f08e:	e7c6      	b.n	801f01e <_printf_common+0x3e>
 801f090:	18e1      	adds	r1, r4, r3
 801f092:	1c5a      	adds	r2, r3, #1
 801f094:	2030      	movs	r0, #48	@ 0x30
 801f096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f09a:	4422      	add	r2, r4
 801f09c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f0a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f0a4:	3302      	adds	r3, #2
 801f0a6:	e7c7      	b.n	801f038 <_printf_common+0x58>
 801f0a8:	2301      	movs	r3, #1
 801f0aa:	4622      	mov	r2, r4
 801f0ac:	4641      	mov	r1, r8
 801f0ae:	4638      	mov	r0, r7
 801f0b0:	47c8      	blx	r9
 801f0b2:	3001      	adds	r0, #1
 801f0b4:	d0e6      	beq.n	801f084 <_printf_common+0xa4>
 801f0b6:	3601      	adds	r6, #1
 801f0b8:	e7d9      	b.n	801f06e <_printf_common+0x8e>
	...

0801f0bc <_printf_i>:
 801f0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f0c0:	7e0f      	ldrb	r7, [r1, #24]
 801f0c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f0c4:	2f78      	cmp	r7, #120	@ 0x78
 801f0c6:	4691      	mov	r9, r2
 801f0c8:	4680      	mov	r8, r0
 801f0ca:	460c      	mov	r4, r1
 801f0cc:	469a      	mov	sl, r3
 801f0ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f0d2:	d807      	bhi.n	801f0e4 <_printf_i+0x28>
 801f0d4:	2f62      	cmp	r7, #98	@ 0x62
 801f0d6:	d80a      	bhi.n	801f0ee <_printf_i+0x32>
 801f0d8:	2f00      	cmp	r7, #0
 801f0da:	f000 80d2 	beq.w	801f282 <_printf_i+0x1c6>
 801f0de:	2f58      	cmp	r7, #88	@ 0x58
 801f0e0:	f000 80b9 	beq.w	801f256 <_printf_i+0x19a>
 801f0e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f0e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f0ec:	e03a      	b.n	801f164 <_printf_i+0xa8>
 801f0ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f0f2:	2b15      	cmp	r3, #21
 801f0f4:	d8f6      	bhi.n	801f0e4 <_printf_i+0x28>
 801f0f6:	a101      	add	r1, pc, #4	@ (adr r1, 801f0fc <_printf_i+0x40>)
 801f0f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f0fc:	0801f155 	.word	0x0801f155
 801f100:	0801f169 	.word	0x0801f169
 801f104:	0801f0e5 	.word	0x0801f0e5
 801f108:	0801f0e5 	.word	0x0801f0e5
 801f10c:	0801f0e5 	.word	0x0801f0e5
 801f110:	0801f0e5 	.word	0x0801f0e5
 801f114:	0801f169 	.word	0x0801f169
 801f118:	0801f0e5 	.word	0x0801f0e5
 801f11c:	0801f0e5 	.word	0x0801f0e5
 801f120:	0801f0e5 	.word	0x0801f0e5
 801f124:	0801f0e5 	.word	0x0801f0e5
 801f128:	0801f269 	.word	0x0801f269
 801f12c:	0801f193 	.word	0x0801f193
 801f130:	0801f223 	.word	0x0801f223
 801f134:	0801f0e5 	.word	0x0801f0e5
 801f138:	0801f0e5 	.word	0x0801f0e5
 801f13c:	0801f28b 	.word	0x0801f28b
 801f140:	0801f0e5 	.word	0x0801f0e5
 801f144:	0801f193 	.word	0x0801f193
 801f148:	0801f0e5 	.word	0x0801f0e5
 801f14c:	0801f0e5 	.word	0x0801f0e5
 801f150:	0801f22b 	.word	0x0801f22b
 801f154:	6833      	ldr	r3, [r6, #0]
 801f156:	1d1a      	adds	r2, r3, #4
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	6032      	str	r2, [r6, #0]
 801f15c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f164:	2301      	movs	r3, #1
 801f166:	e09d      	b.n	801f2a4 <_printf_i+0x1e8>
 801f168:	6833      	ldr	r3, [r6, #0]
 801f16a:	6820      	ldr	r0, [r4, #0]
 801f16c:	1d19      	adds	r1, r3, #4
 801f16e:	6031      	str	r1, [r6, #0]
 801f170:	0606      	lsls	r6, r0, #24
 801f172:	d501      	bpl.n	801f178 <_printf_i+0xbc>
 801f174:	681d      	ldr	r5, [r3, #0]
 801f176:	e003      	b.n	801f180 <_printf_i+0xc4>
 801f178:	0645      	lsls	r5, r0, #25
 801f17a:	d5fb      	bpl.n	801f174 <_printf_i+0xb8>
 801f17c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f180:	2d00      	cmp	r5, #0
 801f182:	da03      	bge.n	801f18c <_printf_i+0xd0>
 801f184:	232d      	movs	r3, #45	@ 0x2d
 801f186:	426d      	negs	r5, r5
 801f188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f18c:	4859      	ldr	r0, [pc, #356]	@ (801f2f4 <_printf_i+0x238>)
 801f18e:	230a      	movs	r3, #10
 801f190:	e011      	b.n	801f1b6 <_printf_i+0xfa>
 801f192:	6821      	ldr	r1, [r4, #0]
 801f194:	6833      	ldr	r3, [r6, #0]
 801f196:	0608      	lsls	r0, r1, #24
 801f198:	f853 5b04 	ldr.w	r5, [r3], #4
 801f19c:	d402      	bmi.n	801f1a4 <_printf_i+0xe8>
 801f19e:	0649      	lsls	r1, r1, #25
 801f1a0:	bf48      	it	mi
 801f1a2:	b2ad      	uxthmi	r5, r5
 801f1a4:	2f6f      	cmp	r7, #111	@ 0x6f
 801f1a6:	4853      	ldr	r0, [pc, #332]	@ (801f2f4 <_printf_i+0x238>)
 801f1a8:	6033      	str	r3, [r6, #0]
 801f1aa:	bf14      	ite	ne
 801f1ac:	230a      	movne	r3, #10
 801f1ae:	2308      	moveq	r3, #8
 801f1b0:	2100      	movs	r1, #0
 801f1b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f1b6:	6866      	ldr	r6, [r4, #4]
 801f1b8:	60a6      	str	r6, [r4, #8]
 801f1ba:	2e00      	cmp	r6, #0
 801f1bc:	bfa2      	ittt	ge
 801f1be:	6821      	ldrge	r1, [r4, #0]
 801f1c0:	f021 0104 	bicge.w	r1, r1, #4
 801f1c4:	6021      	strge	r1, [r4, #0]
 801f1c6:	b90d      	cbnz	r5, 801f1cc <_printf_i+0x110>
 801f1c8:	2e00      	cmp	r6, #0
 801f1ca:	d04b      	beq.n	801f264 <_printf_i+0x1a8>
 801f1cc:	4616      	mov	r6, r2
 801f1ce:	fbb5 f1f3 	udiv	r1, r5, r3
 801f1d2:	fb03 5711 	mls	r7, r3, r1, r5
 801f1d6:	5dc7      	ldrb	r7, [r0, r7]
 801f1d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f1dc:	462f      	mov	r7, r5
 801f1de:	42bb      	cmp	r3, r7
 801f1e0:	460d      	mov	r5, r1
 801f1e2:	d9f4      	bls.n	801f1ce <_printf_i+0x112>
 801f1e4:	2b08      	cmp	r3, #8
 801f1e6:	d10b      	bne.n	801f200 <_printf_i+0x144>
 801f1e8:	6823      	ldr	r3, [r4, #0]
 801f1ea:	07df      	lsls	r7, r3, #31
 801f1ec:	d508      	bpl.n	801f200 <_printf_i+0x144>
 801f1ee:	6923      	ldr	r3, [r4, #16]
 801f1f0:	6861      	ldr	r1, [r4, #4]
 801f1f2:	4299      	cmp	r1, r3
 801f1f4:	bfde      	ittt	le
 801f1f6:	2330      	movle	r3, #48	@ 0x30
 801f1f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f1fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f200:	1b92      	subs	r2, r2, r6
 801f202:	6122      	str	r2, [r4, #16]
 801f204:	f8cd a000 	str.w	sl, [sp]
 801f208:	464b      	mov	r3, r9
 801f20a:	aa03      	add	r2, sp, #12
 801f20c:	4621      	mov	r1, r4
 801f20e:	4640      	mov	r0, r8
 801f210:	f7ff fee6 	bl	801efe0 <_printf_common>
 801f214:	3001      	adds	r0, #1
 801f216:	d14a      	bne.n	801f2ae <_printf_i+0x1f2>
 801f218:	f04f 30ff 	mov.w	r0, #4294967295
 801f21c:	b004      	add	sp, #16
 801f21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f222:	6823      	ldr	r3, [r4, #0]
 801f224:	f043 0320 	orr.w	r3, r3, #32
 801f228:	6023      	str	r3, [r4, #0]
 801f22a:	4833      	ldr	r0, [pc, #204]	@ (801f2f8 <_printf_i+0x23c>)
 801f22c:	2778      	movs	r7, #120	@ 0x78
 801f22e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f232:	6823      	ldr	r3, [r4, #0]
 801f234:	6831      	ldr	r1, [r6, #0]
 801f236:	061f      	lsls	r7, r3, #24
 801f238:	f851 5b04 	ldr.w	r5, [r1], #4
 801f23c:	d402      	bmi.n	801f244 <_printf_i+0x188>
 801f23e:	065f      	lsls	r7, r3, #25
 801f240:	bf48      	it	mi
 801f242:	b2ad      	uxthmi	r5, r5
 801f244:	6031      	str	r1, [r6, #0]
 801f246:	07d9      	lsls	r1, r3, #31
 801f248:	bf44      	itt	mi
 801f24a:	f043 0320 	orrmi.w	r3, r3, #32
 801f24e:	6023      	strmi	r3, [r4, #0]
 801f250:	b11d      	cbz	r5, 801f25a <_printf_i+0x19e>
 801f252:	2310      	movs	r3, #16
 801f254:	e7ac      	b.n	801f1b0 <_printf_i+0xf4>
 801f256:	4827      	ldr	r0, [pc, #156]	@ (801f2f4 <_printf_i+0x238>)
 801f258:	e7e9      	b.n	801f22e <_printf_i+0x172>
 801f25a:	6823      	ldr	r3, [r4, #0]
 801f25c:	f023 0320 	bic.w	r3, r3, #32
 801f260:	6023      	str	r3, [r4, #0]
 801f262:	e7f6      	b.n	801f252 <_printf_i+0x196>
 801f264:	4616      	mov	r6, r2
 801f266:	e7bd      	b.n	801f1e4 <_printf_i+0x128>
 801f268:	6833      	ldr	r3, [r6, #0]
 801f26a:	6825      	ldr	r5, [r4, #0]
 801f26c:	6961      	ldr	r1, [r4, #20]
 801f26e:	1d18      	adds	r0, r3, #4
 801f270:	6030      	str	r0, [r6, #0]
 801f272:	062e      	lsls	r6, r5, #24
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	d501      	bpl.n	801f27c <_printf_i+0x1c0>
 801f278:	6019      	str	r1, [r3, #0]
 801f27a:	e002      	b.n	801f282 <_printf_i+0x1c6>
 801f27c:	0668      	lsls	r0, r5, #25
 801f27e:	d5fb      	bpl.n	801f278 <_printf_i+0x1bc>
 801f280:	8019      	strh	r1, [r3, #0]
 801f282:	2300      	movs	r3, #0
 801f284:	6123      	str	r3, [r4, #16]
 801f286:	4616      	mov	r6, r2
 801f288:	e7bc      	b.n	801f204 <_printf_i+0x148>
 801f28a:	6833      	ldr	r3, [r6, #0]
 801f28c:	1d1a      	adds	r2, r3, #4
 801f28e:	6032      	str	r2, [r6, #0]
 801f290:	681e      	ldr	r6, [r3, #0]
 801f292:	6862      	ldr	r2, [r4, #4]
 801f294:	2100      	movs	r1, #0
 801f296:	4630      	mov	r0, r6
 801f298:	f7e1 f822 	bl	80002e0 <memchr>
 801f29c:	b108      	cbz	r0, 801f2a2 <_printf_i+0x1e6>
 801f29e:	1b80      	subs	r0, r0, r6
 801f2a0:	6060      	str	r0, [r4, #4]
 801f2a2:	6863      	ldr	r3, [r4, #4]
 801f2a4:	6123      	str	r3, [r4, #16]
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f2ac:	e7aa      	b.n	801f204 <_printf_i+0x148>
 801f2ae:	6923      	ldr	r3, [r4, #16]
 801f2b0:	4632      	mov	r2, r6
 801f2b2:	4649      	mov	r1, r9
 801f2b4:	4640      	mov	r0, r8
 801f2b6:	47d0      	blx	sl
 801f2b8:	3001      	adds	r0, #1
 801f2ba:	d0ad      	beq.n	801f218 <_printf_i+0x15c>
 801f2bc:	6823      	ldr	r3, [r4, #0]
 801f2be:	079b      	lsls	r3, r3, #30
 801f2c0:	d413      	bmi.n	801f2ea <_printf_i+0x22e>
 801f2c2:	68e0      	ldr	r0, [r4, #12]
 801f2c4:	9b03      	ldr	r3, [sp, #12]
 801f2c6:	4298      	cmp	r0, r3
 801f2c8:	bfb8      	it	lt
 801f2ca:	4618      	movlt	r0, r3
 801f2cc:	e7a6      	b.n	801f21c <_printf_i+0x160>
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	4632      	mov	r2, r6
 801f2d2:	4649      	mov	r1, r9
 801f2d4:	4640      	mov	r0, r8
 801f2d6:	47d0      	blx	sl
 801f2d8:	3001      	adds	r0, #1
 801f2da:	d09d      	beq.n	801f218 <_printf_i+0x15c>
 801f2dc:	3501      	adds	r5, #1
 801f2de:	68e3      	ldr	r3, [r4, #12]
 801f2e0:	9903      	ldr	r1, [sp, #12]
 801f2e2:	1a5b      	subs	r3, r3, r1
 801f2e4:	42ab      	cmp	r3, r5
 801f2e6:	dcf2      	bgt.n	801f2ce <_printf_i+0x212>
 801f2e8:	e7eb      	b.n	801f2c2 <_printf_i+0x206>
 801f2ea:	2500      	movs	r5, #0
 801f2ec:	f104 0619 	add.w	r6, r4, #25
 801f2f0:	e7f5      	b.n	801f2de <_printf_i+0x222>
 801f2f2:	bf00      	nop
 801f2f4:	08022fda 	.word	0x08022fda
 801f2f8:	08022feb 	.word	0x08022feb

0801f2fc <__sflush_r>:
 801f2fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f304:	0716      	lsls	r6, r2, #28
 801f306:	4605      	mov	r5, r0
 801f308:	460c      	mov	r4, r1
 801f30a:	d454      	bmi.n	801f3b6 <__sflush_r+0xba>
 801f30c:	684b      	ldr	r3, [r1, #4]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	dc02      	bgt.n	801f318 <__sflush_r+0x1c>
 801f312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f314:	2b00      	cmp	r3, #0
 801f316:	dd48      	ble.n	801f3aa <__sflush_r+0xae>
 801f318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f31a:	2e00      	cmp	r6, #0
 801f31c:	d045      	beq.n	801f3aa <__sflush_r+0xae>
 801f31e:	2300      	movs	r3, #0
 801f320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f324:	682f      	ldr	r7, [r5, #0]
 801f326:	6a21      	ldr	r1, [r4, #32]
 801f328:	602b      	str	r3, [r5, #0]
 801f32a:	d030      	beq.n	801f38e <__sflush_r+0x92>
 801f32c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f32e:	89a3      	ldrh	r3, [r4, #12]
 801f330:	0759      	lsls	r1, r3, #29
 801f332:	d505      	bpl.n	801f340 <__sflush_r+0x44>
 801f334:	6863      	ldr	r3, [r4, #4]
 801f336:	1ad2      	subs	r2, r2, r3
 801f338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f33a:	b10b      	cbz	r3, 801f340 <__sflush_r+0x44>
 801f33c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f33e:	1ad2      	subs	r2, r2, r3
 801f340:	2300      	movs	r3, #0
 801f342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f344:	6a21      	ldr	r1, [r4, #32]
 801f346:	4628      	mov	r0, r5
 801f348:	47b0      	blx	r6
 801f34a:	1c43      	adds	r3, r0, #1
 801f34c:	89a3      	ldrh	r3, [r4, #12]
 801f34e:	d106      	bne.n	801f35e <__sflush_r+0x62>
 801f350:	6829      	ldr	r1, [r5, #0]
 801f352:	291d      	cmp	r1, #29
 801f354:	d82b      	bhi.n	801f3ae <__sflush_r+0xb2>
 801f356:	4a2a      	ldr	r2, [pc, #168]	@ (801f400 <__sflush_r+0x104>)
 801f358:	410a      	asrs	r2, r1
 801f35a:	07d6      	lsls	r6, r2, #31
 801f35c:	d427      	bmi.n	801f3ae <__sflush_r+0xb2>
 801f35e:	2200      	movs	r2, #0
 801f360:	6062      	str	r2, [r4, #4]
 801f362:	04d9      	lsls	r1, r3, #19
 801f364:	6922      	ldr	r2, [r4, #16]
 801f366:	6022      	str	r2, [r4, #0]
 801f368:	d504      	bpl.n	801f374 <__sflush_r+0x78>
 801f36a:	1c42      	adds	r2, r0, #1
 801f36c:	d101      	bne.n	801f372 <__sflush_r+0x76>
 801f36e:	682b      	ldr	r3, [r5, #0]
 801f370:	b903      	cbnz	r3, 801f374 <__sflush_r+0x78>
 801f372:	6560      	str	r0, [r4, #84]	@ 0x54
 801f374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f376:	602f      	str	r7, [r5, #0]
 801f378:	b1b9      	cbz	r1, 801f3aa <__sflush_r+0xae>
 801f37a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f37e:	4299      	cmp	r1, r3
 801f380:	d002      	beq.n	801f388 <__sflush_r+0x8c>
 801f382:	4628      	mov	r0, r5
 801f384:	f7ff fbea 	bl	801eb5c <_free_r>
 801f388:	2300      	movs	r3, #0
 801f38a:	6363      	str	r3, [r4, #52]	@ 0x34
 801f38c:	e00d      	b.n	801f3aa <__sflush_r+0xae>
 801f38e:	2301      	movs	r3, #1
 801f390:	4628      	mov	r0, r5
 801f392:	47b0      	blx	r6
 801f394:	4602      	mov	r2, r0
 801f396:	1c50      	adds	r0, r2, #1
 801f398:	d1c9      	bne.n	801f32e <__sflush_r+0x32>
 801f39a:	682b      	ldr	r3, [r5, #0]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d0c6      	beq.n	801f32e <__sflush_r+0x32>
 801f3a0:	2b1d      	cmp	r3, #29
 801f3a2:	d001      	beq.n	801f3a8 <__sflush_r+0xac>
 801f3a4:	2b16      	cmp	r3, #22
 801f3a6:	d11e      	bne.n	801f3e6 <__sflush_r+0xea>
 801f3a8:	602f      	str	r7, [r5, #0]
 801f3aa:	2000      	movs	r0, #0
 801f3ac:	e022      	b.n	801f3f4 <__sflush_r+0xf8>
 801f3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3b2:	b21b      	sxth	r3, r3
 801f3b4:	e01b      	b.n	801f3ee <__sflush_r+0xf2>
 801f3b6:	690f      	ldr	r7, [r1, #16]
 801f3b8:	2f00      	cmp	r7, #0
 801f3ba:	d0f6      	beq.n	801f3aa <__sflush_r+0xae>
 801f3bc:	0793      	lsls	r3, r2, #30
 801f3be:	680e      	ldr	r6, [r1, #0]
 801f3c0:	bf08      	it	eq
 801f3c2:	694b      	ldreq	r3, [r1, #20]
 801f3c4:	600f      	str	r7, [r1, #0]
 801f3c6:	bf18      	it	ne
 801f3c8:	2300      	movne	r3, #0
 801f3ca:	eba6 0807 	sub.w	r8, r6, r7
 801f3ce:	608b      	str	r3, [r1, #8]
 801f3d0:	f1b8 0f00 	cmp.w	r8, #0
 801f3d4:	dde9      	ble.n	801f3aa <__sflush_r+0xae>
 801f3d6:	6a21      	ldr	r1, [r4, #32]
 801f3d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f3da:	4643      	mov	r3, r8
 801f3dc:	463a      	mov	r2, r7
 801f3de:	4628      	mov	r0, r5
 801f3e0:	47b0      	blx	r6
 801f3e2:	2800      	cmp	r0, #0
 801f3e4:	dc08      	bgt.n	801f3f8 <__sflush_r+0xfc>
 801f3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3ee:	81a3      	strh	r3, [r4, #12]
 801f3f0:	f04f 30ff 	mov.w	r0, #4294967295
 801f3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3f8:	4407      	add	r7, r0
 801f3fa:	eba8 0800 	sub.w	r8, r8, r0
 801f3fe:	e7e7      	b.n	801f3d0 <__sflush_r+0xd4>
 801f400:	dfbffffe 	.word	0xdfbffffe

0801f404 <_fflush_r>:
 801f404:	b538      	push	{r3, r4, r5, lr}
 801f406:	690b      	ldr	r3, [r1, #16]
 801f408:	4605      	mov	r5, r0
 801f40a:	460c      	mov	r4, r1
 801f40c:	b913      	cbnz	r3, 801f414 <_fflush_r+0x10>
 801f40e:	2500      	movs	r5, #0
 801f410:	4628      	mov	r0, r5
 801f412:	bd38      	pop	{r3, r4, r5, pc}
 801f414:	b118      	cbz	r0, 801f41e <_fflush_r+0x1a>
 801f416:	6a03      	ldr	r3, [r0, #32]
 801f418:	b90b      	cbnz	r3, 801f41e <_fflush_r+0x1a>
 801f41a:	f7ff fa0b 	bl	801e834 <__sinit>
 801f41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d0f3      	beq.n	801f40e <_fflush_r+0xa>
 801f426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f428:	07d0      	lsls	r0, r2, #31
 801f42a:	d404      	bmi.n	801f436 <_fflush_r+0x32>
 801f42c:	0599      	lsls	r1, r3, #22
 801f42e:	d402      	bmi.n	801f436 <_fflush_r+0x32>
 801f430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f432:	f7ff fb64 	bl	801eafe <__retarget_lock_acquire_recursive>
 801f436:	4628      	mov	r0, r5
 801f438:	4621      	mov	r1, r4
 801f43a:	f7ff ff5f 	bl	801f2fc <__sflush_r>
 801f43e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f440:	07da      	lsls	r2, r3, #31
 801f442:	4605      	mov	r5, r0
 801f444:	d4e4      	bmi.n	801f410 <_fflush_r+0xc>
 801f446:	89a3      	ldrh	r3, [r4, #12]
 801f448:	059b      	lsls	r3, r3, #22
 801f44a:	d4e1      	bmi.n	801f410 <_fflush_r+0xc>
 801f44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f44e:	f7ff fb57 	bl	801eb00 <__retarget_lock_release_recursive>
 801f452:	e7dd      	b.n	801f410 <_fflush_r+0xc>

0801f454 <fiprintf>:
 801f454:	b40e      	push	{r1, r2, r3}
 801f456:	b503      	push	{r0, r1, lr}
 801f458:	4601      	mov	r1, r0
 801f45a:	ab03      	add	r3, sp, #12
 801f45c:	4805      	ldr	r0, [pc, #20]	@ (801f474 <fiprintf+0x20>)
 801f45e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f462:	6800      	ldr	r0, [r0, #0]
 801f464:	9301      	str	r3, [sp, #4]
 801f466:	f7ff fca3 	bl	801edb0 <_vfiprintf_r>
 801f46a:	b002      	add	sp, #8
 801f46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f470:	b003      	add	sp, #12
 801f472:	4770      	bx	lr
 801f474:	24000040 	.word	0x24000040

0801f478 <__swbuf_r>:
 801f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f47a:	460e      	mov	r6, r1
 801f47c:	4614      	mov	r4, r2
 801f47e:	4605      	mov	r5, r0
 801f480:	b118      	cbz	r0, 801f48a <__swbuf_r+0x12>
 801f482:	6a03      	ldr	r3, [r0, #32]
 801f484:	b90b      	cbnz	r3, 801f48a <__swbuf_r+0x12>
 801f486:	f7ff f9d5 	bl	801e834 <__sinit>
 801f48a:	69a3      	ldr	r3, [r4, #24]
 801f48c:	60a3      	str	r3, [r4, #8]
 801f48e:	89a3      	ldrh	r3, [r4, #12]
 801f490:	071a      	lsls	r2, r3, #28
 801f492:	d501      	bpl.n	801f498 <__swbuf_r+0x20>
 801f494:	6923      	ldr	r3, [r4, #16]
 801f496:	b943      	cbnz	r3, 801f4aa <__swbuf_r+0x32>
 801f498:	4621      	mov	r1, r4
 801f49a:	4628      	mov	r0, r5
 801f49c:	f000 f82a 	bl	801f4f4 <__swsetup_r>
 801f4a0:	b118      	cbz	r0, 801f4aa <__swbuf_r+0x32>
 801f4a2:	f04f 37ff 	mov.w	r7, #4294967295
 801f4a6:	4638      	mov	r0, r7
 801f4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4aa:	6823      	ldr	r3, [r4, #0]
 801f4ac:	6922      	ldr	r2, [r4, #16]
 801f4ae:	1a98      	subs	r0, r3, r2
 801f4b0:	6963      	ldr	r3, [r4, #20]
 801f4b2:	b2f6      	uxtb	r6, r6
 801f4b4:	4283      	cmp	r3, r0
 801f4b6:	4637      	mov	r7, r6
 801f4b8:	dc05      	bgt.n	801f4c6 <__swbuf_r+0x4e>
 801f4ba:	4621      	mov	r1, r4
 801f4bc:	4628      	mov	r0, r5
 801f4be:	f7ff ffa1 	bl	801f404 <_fflush_r>
 801f4c2:	2800      	cmp	r0, #0
 801f4c4:	d1ed      	bne.n	801f4a2 <__swbuf_r+0x2a>
 801f4c6:	68a3      	ldr	r3, [r4, #8]
 801f4c8:	3b01      	subs	r3, #1
 801f4ca:	60a3      	str	r3, [r4, #8]
 801f4cc:	6823      	ldr	r3, [r4, #0]
 801f4ce:	1c5a      	adds	r2, r3, #1
 801f4d0:	6022      	str	r2, [r4, #0]
 801f4d2:	701e      	strb	r6, [r3, #0]
 801f4d4:	6962      	ldr	r2, [r4, #20]
 801f4d6:	1c43      	adds	r3, r0, #1
 801f4d8:	429a      	cmp	r2, r3
 801f4da:	d004      	beq.n	801f4e6 <__swbuf_r+0x6e>
 801f4dc:	89a3      	ldrh	r3, [r4, #12]
 801f4de:	07db      	lsls	r3, r3, #31
 801f4e0:	d5e1      	bpl.n	801f4a6 <__swbuf_r+0x2e>
 801f4e2:	2e0a      	cmp	r6, #10
 801f4e4:	d1df      	bne.n	801f4a6 <__swbuf_r+0x2e>
 801f4e6:	4621      	mov	r1, r4
 801f4e8:	4628      	mov	r0, r5
 801f4ea:	f7ff ff8b 	bl	801f404 <_fflush_r>
 801f4ee:	2800      	cmp	r0, #0
 801f4f0:	d0d9      	beq.n	801f4a6 <__swbuf_r+0x2e>
 801f4f2:	e7d6      	b.n	801f4a2 <__swbuf_r+0x2a>

0801f4f4 <__swsetup_r>:
 801f4f4:	b538      	push	{r3, r4, r5, lr}
 801f4f6:	4b29      	ldr	r3, [pc, #164]	@ (801f59c <__swsetup_r+0xa8>)
 801f4f8:	4605      	mov	r5, r0
 801f4fa:	6818      	ldr	r0, [r3, #0]
 801f4fc:	460c      	mov	r4, r1
 801f4fe:	b118      	cbz	r0, 801f508 <__swsetup_r+0x14>
 801f500:	6a03      	ldr	r3, [r0, #32]
 801f502:	b90b      	cbnz	r3, 801f508 <__swsetup_r+0x14>
 801f504:	f7ff f996 	bl	801e834 <__sinit>
 801f508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f50c:	0719      	lsls	r1, r3, #28
 801f50e:	d422      	bmi.n	801f556 <__swsetup_r+0x62>
 801f510:	06da      	lsls	r2, r3, #27
 801f512:	d407      	bmi.n	801f524 <__swsetup_r+0x30>
 801f514:	2209      	movs	r2, #9
 801f516:	602a      	str	r2, [r5, #0]
 801f518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f51c:	81a3      	strh	r3, [r4, #12]
 801f51e:	f04f 30ff 	mov.w	r0, #4294967295
 801f522:	e033      	b.n	801f58c <__swsetup_r+0x98>
 801f524:	0758      	lsls	r0, r3, #29
 801f526:	d512      	bpl.n	801f54e <__swsetup_r+0x5a>
 801f528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f52a:	b141      	cbz	r1, 801f53e <__swsetup_r+0x4a>
 801f52c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f530:	4299      	cmp	r1, r3
 801f532:	d002      	beq.n	801f53a <__swsetup_r+0x46>
 801f534:	4628      	mov	r0, r5
 801f536:	f7ff fb11 	bl	801eb5c <_free_r>
 801f53a:	2300      	movs	r3, #0
 801f53c:	6363      	str	r3, [r4, #52]	@ 0x34
 801f53e:	89a3      	ldrh	r3, [r4, #12]
 801f540:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f544:	81a3      	strh	r3, [r4, #12]
 801f546:	2300      	movs	r3, #0
 801f548:	6063      	str	r3, [r4, #4]
 801f54a:	6923      	ldr	r3, [r4, #16]
 801f54c:	6023      	str	r3, [r4, #0]
 801f54e:	89a3      	ldrh	r3, [r4, #12]
 801f550:	f043 0308 	orr.w	r3, r3, #8
 801f554:	81a3      	strh	r3, [r4, #12]
 801f556:	6923      	ldr	r3, [r4, #16]
 801f558:	b94b      	cbnz	r3, 801f56e <__swsetup_r+0x7a>
 801f55a:	89a3      	ldrh	r3, [r4, #12]
 801f55c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f564:	d003      	beq.n	801f56e <__swsetup_r+0x7a>
 801f566:	4621      	mov	r1, r4
 801f568:	4628      	mov	r0, r5
 801f56a:	f000 f856 	bl	801f61a <__smakebuf_r>
 801f56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f572:	f013 0201 	ands.w	r2, r3, #1
 801f576:	d00a      	beq.n	801f58e <__swsetup_r+0x9a>
 801f578:	2200      	movs	r2, #0
 801f57a:	60a2      	str	r2, [r4, #8]
 801f57c:	6962      	ldr	r2, [r4, #20]
 801f57e:	4252      	negs	r2, r2
 801f580:	61a2      	str	r2, [r4, #24]
 801f582:	6922      	ldr	r2, [r4, #16]
 801f584:	b942      	cbnz	r2, 801f598 <__swsetup_r+0xa4>
 801f586:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f58a:	d1c5      	bne.n	801f518 <__swsetup_r+0x24>
 801f58c:	bd38      	pop	{r3, r4, r5, pc}
 801f58e:	0799      	lsls	r1, r3, #30
 801f590:	bf58      	it	pl
 801f592:	6962      	ldrpl	r2, [r4, #20]
 801f594:	60a2      	str	r2, [r4, #8]
 801f596:	e7f4      	b.n	801f582 <__swsetup_r+0x8e>
 801f598:	2000      	movs	r0, #0
 801f59a:	e7f7      	b.n	801f58c <__swsetup_r+0x98>
 801f59c:	24000040 	.word	0x24000040

0801f5a0 <_sbrk_r>:
 801f5a0:	b538      	push	{r3, r4, r5, lr}
 801f5a2:	4d06      	ldr	r5, [pc, #24]	@ (801f5bc <_sbrk_r+0x1c>)
 801f5a4:	2300      	movs	r3, #0
 801f5a6:	4604      	mov	r4, r0
 801f5a8:	4608      	mov	r0, r1
 801f5aa:	602b      	str	r3, [r5, #0]
 801f5ac:	f7e2 ff60 	bl	8002470 <_sbrk>
 801f5b0:	1c43      	adds	r3, r0, #1
 801f5b2:	d102      	bne.n	801f5ba <_sbrk_r+0x1a>
 801f5b4:	682b      	ldr	r3, [r5, #0]
 801f5b6:	b103      	cbz	r3, 801f5ba <_sbrk_r+0x1a>
 801f5b8:	6023      	str	r3, [r4, #0]
 801f5ba:	bd38      	pop	{r3, r4, r5, pc}
 801f5bc:	24008a30 	.word	0x24008a30

0801f5c0 <abort>:
 801f5c0:	b508      	push	{r3, lr}
 801f5c2:	2006      	movs	r0, #6
 801f5c4:	f000 f88e 	bl	801f6e4 <raise>
 801f5c8:	2001      	movs	r0, #1
 801f5ca:	f7e2 fed9 	bl	8002380 <_exit>

0801f5ce <__swhatbuf_r>:
 801f5ce:	b570      	push	{r4, r5, r6, lr}
 801f5d0:	460c      	mov	r4, r1
 801f5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5d6:	2900      	cmp	r1, #0
 801f5d8:	b096      	sub	sp, #88	@ 0x58
 801f5da:	4615      	mov	r5, r2
 801f5dc:	461e      	mov	r6, r3
 801f5de:	da0d      	bge.n	801f5fc <__swhatbuf_r+0x2e>
 801f5e0:	89a3      	ldrh	r3, [r4, #12]
 801f5e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f5e6:	f04f 0100 	mov.w	r1, #0
 801f5ea:	bf14      	ite	ne
 801f5ec:	2340      	movne	r3, #64	@ 0x40
 801f5ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f5f2:	2000      	movs	r0, #0
 801f5f4:	6031      	str	r1, [r6, #0]
 801f5f6:	602b      	str	r3, [r5, #0]
 801f5f8:	b016      	add	sp, #88	@ 0x58
 801f5fa:	bd70      	pop	{r4, r5, r6, pc}
 801f5fc:	466a      	mov	r2, sp
 801f5fe:	f000 f879 	bl	801f6f4 <_fstat_r>
 801f602:	2800      	cmp	r0, #0
 801f604:	dbec      	blt.n	801f5e0 <__swhatbuf_r+0x12>
 801f606:	9901      	ldr	r1, [sp, #4]
 801f608:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f60c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f610:	4259      	negs	r1, r3
 801f612:	4159      	adcs	r1, r3
 801f614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f618:	e7eb      	b.n	801f5f2 <__swhatbuf_r+0x24>

0801f61a <__smakebuf_r>:
 801f61a:	898b      	ldrh	r3, [r1, #12]
 801f61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f61e:	079d      	lsls	r5, r3, #30
 801f620:	4606      	mov	r6, r0
 801f622:	460c      	mov	r4, r1
 801f624:	d507      	bpl.n	801f636 <__smakebuf_r+0x1c>
 801f626:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f62a:	6023      	str	r3, [r4, #0]
 801f62c:	6123      	str	r3, [r4, #16]
 801f62e:	2301      	movs	r3, #1
 801f630:	6163      	str	r3, [r4, #20]
 801f632:	b003      	add	sp, #12
 801f634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f636:	ab01      	add	r3, sp, #4
 801f638:	466a      	mov	r2, sp
 801f63a:	f7ff ffc8 	bl	801f5ce <__swhatbuf_r>
 801f63e:	9f00      	ldr	r7, [sp, #0]
 801f640:	4605      	mov	r5, r0
 801f642:	4639      	mov	r1, r7
 801f644:	4630      	mov	r0, r6
 801f646:	f7ff fafd 	bl	801ec44 <_malloc_r>
 801f64a:	b948      	cbnz	r0, 801f660 <__smakebuf_r+0x46>
 801f64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f650:	059a      	lsls	r2, r3, #22
 801f652:	d4ee      	bmi.n	801f632 <__smakebuf_r+0x18>
 801f654:	f023 0303 	bic.w	r3, r3, #3
 801f658:	f043 0302 	orr.w	r3, r3, #2
 801f65c:	81a3      	strh	r3, [r4, #12]
 801f65e:	e7e2      	b.n	801f626 <__smakebuf_r+0xc>
 801f660:	89a3      	ldrh	r3, [r4, #12]
 801f662:	6020      	str	r0, [r4, #0]
 801f664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f668:	81a3      	strh	r3, [r4, #12]
 801f66a:	9b01      	ldr	r3, [sp, #4]
 801f66c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f670:	b15b      	cbz	r3, 801f68a <__smakebuf_r+0x70>
 801f672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f676:	4630      	mov	r0, r6
 801f678:	f000 f84e 	bl	801f718 <_isatty_r>
 801f67c:	b128      	cbz	r0, 801f68a <__smakebuf_r+0x70>
 801f67e:	89a3      	ldrh	r3, [r4, #12]
 801f680:	f023 0303 	bic.w	r3, r3, #3
 801f684:	f043 0301 	orr.w	r3, r3, #1
 801f688:	81a3      	strh	r3, [r4, #12]
 801f68a:	89a3      	ldrh	r3, [r4, #12]
 801f68c:	431d      	orrs	r5, r3
 801f68e:	81a5      	strh	r5, [r4, #12]
 801f690:	e7cf      	b.n	801f632 <__smakebuf_r+0x18>

0801f692 <_raise_r>:
 801f692:	291f      	cmp	r1, #31
 801f694:	b538      	push	{r3, r4, r5, lr}
 801f696:	4605      	mov	r5, r0
 801f698:	460c      	mov	r4, r1
 801f69a:	d904      	bls.n	801f6a6 <_raise_r+0x14>
 801f69c:	2316      	movs	r3, #22
 801f69e:	6003      	str	r3, [r0, #0]
 801f6a0:	f04f 30ff 	mov.w	r0, #4294967295
 801f6a4:	bd38      	pop	{r3, r4, r5, pc}
 801f6a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f6a8:	b112      	cbz	r2, 801f6b0 <_raise_r+0x1e>
 801f6aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f6ae:	b94b      	cbnz	r3, 801f6c4 <_raise_r+0x32>
 801f6b0:	4628      	mov	r0, r5
 801f6b2:	f000 f853 	bl	801f75c <_getpid_r>
 801f6b6:	4622      	mov	r2, r4
 801f6b8:	4601      	mov	r1, r0
 801f6ba:	4628      	mov	r0, r5
 801f6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f6c0:	f000 b83a 	b.w	801f738 <_kill_r>
 801f6c4:	2b01      	cmp	r3, #1
 801f6c6:	d00a      	beq.n	801f6de <_raise_r+0x4c>
 801f6c8:	1c59      	adds	r1, r3, #1
 801f6ca:	d103      	bne.n	801f6d4 <_raise_r+0x42>
 801f6cc:	2316      	movs	r3, #22
 801f6ce:	6003      	str	r3, [r0, #0]
 801f6d0:	2001      	movs	r0, #1
 801f6d2:	e7e7      	b.n	801f6a4 <_raise_r+0x12>
 801f6d4:	2100      	movs	r1, #0
 801f6d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f6da:	4620      	mov	r0, r4
 801f6dc:	4798      	blx	r3
 801f6de:	2000      	movs	r0, #0
 801f6e0:	e7e0      	b.n	801f6a4 <_raise_r+0x12>
	...

0801f6e4 <raise>:
 801f6e4:	4b02      	ldr	r3, [pc, #8]	@ (801f6f0 <raise+0xc>)
 801f6e6:	4601      	mov	r1, r0
 801f6e8:	6818      	ldr	r0, [r3, #0]
 801f6ea:	f7ff bfd2 	b.w	801f692 <_raise_r>
 801f6ee:	bf00      	nop
 801f6f0:	24000040 	.word	0x24000040

0801f6f4 <_fstat_r>:
 801f6f4:	b538      	push	{r3, r4, r5, lr}
 801f6f6:	4d07      	ldr	r5, [pc, #28]	@ (801f714 <_fstat_r+0x20>)
 801f6f8:	2300      	movs	r3, #0
 801f6fa:	4604      	mov	r4, r0
 801f6fc:	4608      	mov	r0, r1
 801f6fe:	4611      	mov	r1, r2
 801f700:	602b      	str	r3, [r5, #0]
 801f702:	f7e2 fe8d 	bl	8002420 <_fstat>
 801f706:	1c43      	adds	r3, r0, #1
 801f708:	d102      	bne.n	801f710 <_fstat_r+0x1c>
 801f70a:	682b      	ldr	r3, [r5, #0]
 801f70c:	b103      	cbz	r3, 801f710 <_fstat_r+0x1c>
 801f70e:	6023      	str	r3, [r4, #0]
 801f710:	bd38      	pop	{r3, r4, r5, pc}
 801f712:	bf00      	nop
 801f714:	24008a30 	.word	0x24008a30

0801f718 <_isatty_r>:
 801f718:	b538      	push	{r3, r4, r5, lr}
 801f71a:	4d06      	ldr	r5, [pc, #24]	@ (801f734 <_isatty_r+0x1c>)
 801f71c:	2300      	movs	r3, #0
 801f71e:	4604      	mov	r4, r0
 801f720:	4608      	mov	r0, r1
 801f722:	602b      	str	r3, [r5, #0]
 801f724:	f7e2 fe8c 	bl	8002440 <_isatty>
 801f728:	1c43      	adds	r3, r0, #1
 801f72a:	d102      	bne.n	801f732 <_isatty_r+0x1a>
 801f72c:	682b      	ldr	r3, [r5, #0]
 801f72e:	b103      	cbz	r3, 801f732 <_isatty_r+0x1a>
 801f730:	6023      	str	r3, [r4, #0]
 801f732:	bd38      	pop	{r3, r4, r5, pc}
 801f734:	24008a30 	.word	0x24008a30

0801f738 <_kill_r>:
 801f738:	b538      	push	{r3, r4, r5, lr}
 801f73a:	4d07      	ldr	r5, [pc, #28]	@ (801f758 <_kill_r+0x20>)
 801f73c:	2300      	movs	r3, #0
 801f73e:	4604      	mov	r4, r0
 801f740:	4608      	mov	r0, r1
 801f742:	4611      	mov	r1, r2
 801f744:	602b      	str	r3, [r5, #0]
 801f746:	f7e2 fe09 	bl	800235c <_kill>
 801f74a:	1c43      	adds	r3, r0, #1
 801f74c:	d102      	bne.n	801f754 <_kill_r+0x1c>
 801f74e:	682b      	ldr	r3, [r5, #0]
 801f750:	b103      	cbz	r3, 801f754 <_kill_r+0x1c>
 801f752:	6023      	str	r3, [r4, #0]
 801f754:	bd38      	pop	{r3, r4, r5, pc}
 801f756:	bf00      	nop
 801f758:	24008a30 	.word	0x24008a30

0801f75c <_getpid_r>:
 801f75c:	f7e2 bdf6 	b.w	800234c <_getpid>

0801f760 <_init>:
 801f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f762:	bf00      	nop
 801f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f766:	bc08      	pop	{r3}
 801f768:	469e      	mov	lr, r3
 801f76a:	4770      	bx	lr

0801f76c <_fini>:
 801f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f76e:	bf00      	nop
 801f770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f772:	bc08      	pop	{r3}
 801f774:	469e      	mov	lr, r3
 801f776:	4770      	bx	lr
